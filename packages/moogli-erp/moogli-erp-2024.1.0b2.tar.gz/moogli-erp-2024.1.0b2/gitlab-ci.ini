[app:endi]
use = egg:endi

pyramid.reload_assets=true
pyramid.default_locale_name = fr
pyramid.includes =
                    pyramid_tm
                    pyramid_mailer.testing
                    pyramid_services
                    pyramid_layout
                    pyramid_mako
                    pyramid_chameleon
                    pyramid_celery
                    endi_celery
                    js.deform
                    deform_extensions

#### CONFIGURE THOSE LINES TO ALLOW THE TESTS TO SETUP A MYSQL DATABASE ####
sqlalchemy.url = mysql://endi:endi@mariadb/endi?charset=utf8mb4
endi_payment_db.url =mysql://endi:endi@mariadb/endi?charset=utf8mb4
sqlalchemy.echo=False
testdb.connect=echo 'quit' | mysql -uroot --password="root" "endi" --host=mariadb
testdb.adduser=echo "CREATE USER endi" | mysql -uroot --password="root" "endi" --host=mariadb
testdb.adddb=echo "CREATE DATABASE IF NOT EXISTS endi; GRANT ALL PRIVILEGES on endi.* to endi@localhost IDENTIFIED BY 'endi';FLUSH PRIVILEGES;" | mysql -uroot --password="root" "endi" --host=mariadb
testdb.drop=echo "DROP DATABASE IF EXISTS endi"| mysql -uroot --password="root" "endi" --host=mariadb

session.longtimeout=3600
cache.regions = default_term, second, short_term, long_term
# Pour les tests unitaires, pas d'impact sur le temps de run
cache.enabled = False
cache.type = memory
cache.second.expire = 1
cache.short_term.expire = 1
cache.default_term.expire = 1
cache.long_term.expire = 1
mako.directories = endi:templates
mako.imports = from markupsafe import escape_silent
mako.default_filters = escape_silent
endi.ftpdir=%(here)s/endi/tests/datas/
pyramid_deform.tempdir=%(here)s/endi/tests/tmp
endi.depot_path=%(here)s/endi/tests/tmp/filedepot/
# payment specific configuration see https://framagit.org/endi/endi_payment
# public service
endi.interfaces.ipaymentrecordservice = endi_payment.public.paymentservice

# Payment specific configuration see https://framagit.org/endi/endi_payment
# History management service
endi_payment.interfaces.IPaymentRecordHistoryService = endi_payment.history.HistoryDBService

# History Archive service
endi_payment.interfaces.IPaymentArchiveService = endi_payment.archive.FileArchiveService
endi_payment_archive_storage_path = %(here)s/endi/tests/tmp/

endi.includes=

[celery]
BROKER_URL = redis://localhost:6379/0
CELERY_IMPORTS =
    endi_celery.tasks.export
    endi_celery.schedulers

CELERY_TASK_SERIALIZER = json
#CELERYD_HIJACK_ROOT_LOGGER = False
CELERY_ACCEPT_CONTENT= json
                       yaml

[pipeline:main]
pipeline =
    endi

# Begin logging configuration
[loggers]
keys = root, endi, sqlalchemy, alembic

[handlers]
keys = stdout, stderr

[formatters]
keys = generic, sqlfile

[logger_root]
level = WARN
handlers = stdout, stderr

[logger_endi]
level = DEBUG
handlers = stdout, stderr
qualname = endi
propagate=0

[logger_sqlalchemy]
level = WARN
handlers = stdout
qualname = sqlalchemy.engine
propagate=0
# level = INFO logs SQL queries.
# level = DEBUG logs SQL queries and results.
# level = WARN logs neither. (Recommended for production systems.)

[logger_alembic]
level = DEBUG
handlers = stdout
qualname = alembic

[handler_stdout]
class = endi.log.CustomStreamHandler
args = (sys.stdout,)
level = NOTSET
formatter = generic

[handler_stderr]
class = endi.log.CustomStreamHandler
args = (sys.stderr,)
level = ERROR
formatter = generic

[formatter_sqlfile]
format = %(asctime)s %(message)s

[formatter_generic]
format = %(ip)s - %(asctime)-15s %(levelname)-5.5s %(message)s ([%(name)s.%(funcName)s:%(lineno)s])
# End logging configuration
