Metadata-Version: 2.1
Name: spryngtime-analytics-sdk
Version: 1.1.5
Summary: Client for Spryngtime Usage Analytics &amp; Billing API
License: MIT
Author: Konfig
Author-email: engineering@konfigthis.com
Requires-Python: >=3.8,<4.0
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Dist: aiohttp (>=3.9.1,<4.0.0)
Requires-Dist: certifi (>=2023.7.22)
Requires-Dist: cryptography (>=41.0.6,<42.0.0)
Requires-Dist: frozendict (>=2.3.4,<3.0.0)
Requires-Dist: pydantic (>=2.4.2,<3.0.0)
Requires-Dist: python-dateutil (>=2.8.2,<3.0.0)
Requires-Dist: typing_extensions (>=4.3.0,<5.0.0)
Requires-Dist: urllib3 (>=1.26.18,<2.0.0)
Description-Content-Type: text/markdown

# spryngtime-analytics-sdk<a id="spryngtime-analytics-sdk"></a>

Spryngtime Usage Analytics & Billing API


[![PyPI](https://img.shields.io/badge/PyPI-v1.1.5-blue)](https://pypi.org/project/spryngtime-analytics-sdk/1.1.5)
[![README.md](https://img.shields.io/badge/README-Click%20Here-green)](https://github.com/azianmike/spryngtime-analytics-sdk/tree/main/python#readme)

## Table of Contents<a id="table-of-contents"></a>

<!-- toc -->

- [Requirements](#requirements)
- [Installing](#installing)
- [Getting Started](#getting-started)
- [Async](#async)
- [Raw HTTP Response](#raw-http-response)
- [Reference](#reference)
  * [`spryngtimeanalyticssdk.usage_tracking.track_usage`](#spryngtimeanalyticssdkusage_trackingtrack_usage)
  * [`spryngtimeanalyticssdk.default.root_get`](#spryngtimeanalyticssdkdefaultroot_get)
  * [`spryngtimeanalyticssdk.default.users_post`](#spryngtimeanalyticssdkdefaultusers_post)

<!-- tocstop -->

## Requirements<a id="requirements"></a>

Python >=3.7

## Installing<a id="installing"></a>

```sh
pip install spryngtime-analytics-sdk==1.1.5
```

## Getting Started<a id="getting-started"></a>

```python
from pprint import pprint
from spryngtime_analytics_sdk import SpryngtimeAnalyticsSdk, ApiException

spryngtimeanalyticssdk = SpryngtimeAnalyticsSdk(
    api_key="YOUR_API_KEY",
)

try:
    # Track usage data
    spryngtimeanalyticssdk.usage_tracking.track_usage(
        user="string_example",
        query="string_example",
        conversation_id="string_example",
        latency=1,
        open_ai_response={
            "id": "id_example",
            "object": "object_example",
            "created": 1,
            "model": "model_example",
            "choices": [
                {
                    "index": 1,
                    "message": {
                        "role": "role_example",
                        "content": "content_example",
                    },
                    "finish_reason": "finish_reason_example",
                }
            ],
            "usage": {
                "prompt_tokens": 1,
                "completion_tokens": 1,
                "total_tokens": 1,
            },
        },
        usage={
            "prompt_tokens": 1,
            "completion_tokens": 1,
            "total_tokens": 1,
        },
    )
except ApiException as e:
    print("Exception when calling UsageTrackingApi.track_usage: %s\n" % e)
    pprint(e.body)
    pprint(e.headers)
    pprint(e.status)
    pprint(e.reason)
    pprint(e.round_trip_time)
```

## Async<a id="async"></a>

`async` support is available by prepending `a` to any method.

```python
import asyncio
from pprint import pprint
from spryngtime_analytics_sdk import SpryngtimeAnalyticsSdk, ApiException

spryngtimeanalyticssdk = SpryngtimeAnalyticsSdk(
    api_key="YOUR_API_KEY",
)


async def main():
    try:
        # Track usage data
        await spryngtimeanalyticssdk.usage_tracking.atrack_usage(
            user="string_example",
            query="string_example",
            conversation_id="string_example",
            latency=1,
            open_ai_response={
                "id": "id_example",
                "object": "object_example",
                "created": 1,
                "model": "model_example",
                "choices": [
                    {
                        "index": 1,
                        "message": {
                            "role": "role_example",
                            "content": "content_example",
                        },
                        "finish_reason": "finish_reason_example",
                    }
                ],
                "usage": {
                    "prompt_tokens": 1,
                    "completion_tokens": 1,
                    "total_tokens": 1,
                },
            },
            usage={
                "prompt_tokens": 1,
                "completion_tokens": 1,
                "total_tokens": 1,
            },
        )
    except ApiException as e:
        print("Exception when calling UsageTrackingApi.track_usage: %s\n" % e)
        pprint(e.body)
        pprint(e.headers)
        pprint(e.status)
        pprint(e.reason)
        pprint(e.round_trip_time)


asyncio.run(main())
```

## Raw HTTP Response<a id="raw-http-response"></a>

To access raw HTTP response values, use the `.raw` namespace.

```python
from pprint import pprint
from spryngtime_analytics_sdk import SpryngtimeAnalyticsSdk, ApiException

spryngtimeanalyticssdk = SpryngtimeAnalyticsSdk(
    api_key="YOUR_API_KEY",
)

try:
    # Track usage data
    track_usage_response = spryngtimeanalyticssdk.usage_tracking.raw.track_usage(
        user="string_example",
        query="string_example",
        conversation_id="string_example",
        latency=1,
        open_ai_response={
            "id": "id_example",
            "object": "object_example",
            "created": 1,
            "model": "model_example",
            "choices": [
                {
                    "index": 1,
                    "message": {
                        "role": "role_example",
                        "content": "content_example",
                    },
                    "finish_reason": "finish_reason_example",
                }
            ],
            "usage": {
                "prompt_tokens": 1,
                "completion_tokens": 1,
                "total_tokens": 1,
            },
        },
        usage={
            "prompt_tokens": 1,
            "completion_tokens": 1,
            "total_tokens": 1,
        },
    )
    pprint(track_usage_response.headers)
    pprint(track_usage_response.status)
    pprint(track_usage_response.round_trip_time)
except ApiException as e:
    print("Exception when calling UsageTrackingApi.track_usage: %s\n" % e)
    pprint(e.body)
    pprint(e.headers)
    pprint(e.status)
    pprint(e.reason)
    pprint(e.round_trip_time)
```


## Reference<a id="reference"></a>
### `spryngtimeanalyticssdk.usage_tracking.track_usage`<a id="spryngtimeanalyticssdkusage_trackingtrack_usage"></a>

Track usage data

#### üõ†Ô∏è Usage<a id="üõ†Ô∏è-usage"></a>

```python
spryngtimeanalyticssdk.usage_tracking.track_usage(
    user="string_example",
    query="string_example",
    conversation_id="string_example",
    latency=1,
    open_ai_response={
        "id": "id_example",
        "object": "object_example",
        "created": 1,
        "model": "model_example",
        "choices": [
            {
                "index": 1,
                "message": {
                    "role": "role_example",
                    "content": "content_example",
                },
                "finish_reason": "finish_reason_example",
            }
        ],
        "usage": {
            "prompt_tokens": 1,
            "completion_tokens": 1,
            "total_tokens": 1,
        },
    },
    usage={
        "prompt_tokens": 1,
        "completion_tokens": 1,
        "total_tokens": 1,
    },
)
```

#### ‚öôÔ∏è Parameters<a id="‚öôÔ∏è-parameters"></a>

##### user: `str`<a id="user-str"></a>

##### query: `str`<a id="query-str"></a>

##### conversation_id: `str`<a id="conversation_id-str"></a>

##### latency: `int`<a id="latency-int"></a>

##### open_ai_response: [`OpenAiResponse`](./spryngtime_analytics_sdk/type/open_ai_response.py)<a id="open_ai_response-openairesponsespryngtime_analytics_sdktypeopen_ai_responsepy"></a>


##### usage: [`UsageDetail`](./spryngtime_analytics_sdk/type/usage_detail.py)<a id="usage-usagedetailspryngtime_analytics_sdktypeusage_detailpy"></a>


#### ‚öôÔ∏è Request Body<a id="‚öôÔ∏è-request-body"></a>

[`TrackUsageRequest`](./spryngtime_analytics_sdk/type/track_usage_request.py)
#### üåê Endpoint<a id="üåê-endpoint"></a>

`/trackUsage` `post`

[üîô **Back to Table of Contents**](#table-of-contents)

---

### `spryngtimeanalyticssdk.default.root_get`<a id="spryngtimeanalyticssdkdefaultroot_get"></a>

Home

#### üõ†Ô∏è Usage<a id="üõ†Ô∏è-usage"></a>

```python
spryngtimeanalyticssdk.default.root_get()
```

#### üåê Endpoint<a id="üåê-endpoint"></a>

`/` `get`

[üîô **Back to Table of Contents**](#table-of-contents)

---

### `spryngtimeanalyticssdk.default.users_post`<a id="spryngtimeanalyticssdkdefaultusers_post"></a>

Adds a new user

#### üõ†Ô∏è Usage<a id="üõ†Ô∏è-usage"></a>

```python
spryngtimeanalyticssdk.default.users_post(
    id=10,
    name="Jessica Smith",
)
```

#### ‚öôÔ∏è Parameters<a id="‚öôÔ∏è-parameters"></a>

##### id: `int`<a id="id-int"></a>

##### name: `str`<a id="name-str"></a>

#### ‚öôÔ∏è Request Body<a id="‚öôÔ∏è-request-body"></a>

[`Any`](./spryngtime_analytics_sdk/type/typing_any.py)
#### üåê Endpoint<a id="üåê-endpoint"></a>

`/users` `post`

[üîô **Back to Table of Contents**](#table-of-contents)

---


## Author<a id="author"></a>
This Python package is automatically generated by [Konfig](https://konfigthis.com)

