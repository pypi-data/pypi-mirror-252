# coding: utf-8

"""
    Cirro Data

    Cirro Data Platform service API

    The version of the OpenAPI document: latest
    Contact: support@cirro.bio
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import StrictStr

from typing import List

from cirro_api_client.models.create_reference_request import CreateReferenceRequest
from cirro_api_client.models.reference import Reference
from cirro_api_client.models.reference_type import ReferenceType

from cirro_api_client.api_client import ApiClient, RequestSerialized
from cirro_api_client.api_response import ApiResponse


class ReferencesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self._api_client = api_client

    @validate_call
    def create_project_reference(
        self,
        project_id: StrictStr,
        create_reference_request: CreateReferenceRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
    ) -> Reference:
        """Create project reference

        Creates a reference

        :param project_id: (required)
        :type project_id: str
        :param create_reference_request: (required)
        :type create_reference_request: CreateReferenceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :return: Returns the result object.
        """  # noqa: E501

        return self.create_project_reference_raw(
            project_id=project_id,
            create_reference_request=create_reference_request,
            _request_timeout=_request_timeout,
            _headers=_headers
        ).data

    @validate_call
    def create_project_reference_raw(
        self,
        project_id: StrictStr,
        create_reference_request: CreateReferenceRequest,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
    ) -> ApiResponse[Reference]:
        """Create project reference

        Creates a reference

        :param project_id: (required)
        :type project_id: str
        :param create_reference_request: (required)
        :type create_reference_request: CreateReferenceRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._create_project_reference_serialize(
            project_id=project_id,
            create_reference_request=create_reference_request,
            _headers=_headers,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Reference",
        }
        response_data = self._api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self._api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    def _create_project_reference_serialize(
        self,
        project_id,
        create_reference_request,
        _headers,
    ) -> RequestSerialized:
        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['projectId'] = project_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if create_reference_request is not None:
            _body_params = create_reference_request

        # set the HTTP header `Accept`
        _header_params['Accept'] = self._api_client.select_header_accept(
            [
                'application/json'
            ]
        )
        # set the HTTP header `Content-Type`
        _default_content_type = (
            self.api_client.select_header_content_type(
                [
                    'application/json'
                ]
            )
        )
        if _default_content_type is not None:
            _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'accessToken'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/projects/{projectId}/references',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats
        )

    @validate_call
    def delete_project_reference(
        self,
        project_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
    ) -> None:
        """Delete project reference

        Deletes a reference

        :param project_id: (required)
        :type project_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :return: Returns the result object.
        """  # noqa: E501

        return self.delete_project_reference_raw(
            project_id=project_id,
            _request_timeout=_request_timeout,
            _headers=_headers
        ).data

    @validate_call
    def delete_project_reference_raw(
        self,
        project_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
    ) -> ApiResponse[None]:
        """Delete project reference

        Deletes a reference

        :param project_id: (required)
        :type project_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._delete_project_reference_serialize(
            project_id=project_id,
            _headers=_headers,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self._api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self._api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    def _delete_project_reference_serialize(
        self,
        project_id,
        _headers,
    ) -> RequestSerialized:
        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['projectId'] = project_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter



        # authentication setting
        _auth_settings: List[str] = [
            'accessToken'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/projects/{projectId}/references',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats
        )

    @validate_call
    def get_reference_types(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
    ) -> List[ReferenceType]:
        """Get reference types

        List available reference types

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :return: Returns the result object.
        """  # noqa: E501

        return self.get_reference_types_raw(
            _request_timeout=_request_timeout,
            _headers=_headers
        ).data

    @validate_call
    def get_reference_types_raw(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
    ) -> ApiResponse[List[ReferenceType]]:
        """Get reference types

        List available reference types

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_reference_types_serialize(
            _headers=_headers,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[ReferenceType]",
        }
        response_data = self._api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self._api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    def _get_reference_types_serialize(
        self,
        _headers,
    ) -> RequestSerialized:
        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self._api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
            'accessToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/reference-types',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats
        )

    @validate_call
    def get_references(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
    ) -> List[Reference]:
        """Get global references

        List available references (available to everyone)

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :return: Returns the result object.
        """  # noqa: E501

        return self.get_references_raw(
            _request_timeout=_request_timeout,
            _headers=_headers
        ).data

    @validate_call
    def get_references_raw(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
    ) -> ApiResponse[List[Reference]]:
        """Get global references

        List available references (available to everyone)

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_references_serialize(
            _headers=_headers,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Reference]",
        }
        response_data = self._api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self._api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    def _get_references_serialize(
        self,
        _headers,
    ) -> RequestSerialized:
        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self._api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
            'accessToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/references',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats
        )

    @validate_call
    def get_references_for_project(
        self,
        project_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
    ) -> List[Reference]:
        """Get project references

        List available references for a given project

        :param project_id: (required)
        :type project_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :return: Returns the result object.
        """  # noqa: E501

        return self.get_references_for_project_raw(
            project_id=project_id,
            _request_timeout=_request_timeout,
            _headers=_headers
        ).data

    @validate_call
    def get_references_for_project_raw(
        self,
        project_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
    ) -> ApiResponse[List[Reference]]:
        """Get project references

        List available references for a given project

        :param project_id: (required)
        :type project_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_references_for_project_serialize(
            project_id=project_id,
            _headers=_headers,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Reference]",
        }
        response_data = self._api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self._api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    def _get_references_for_project_serialize(
        self,
        project_id,
        _headers,
    ) -> RequestSerialized:
        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['projectId'] = project_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        _header_params['Accept'] = self._api_client.select_header_accept(
            [
                'application/json'
            ]
        )

        # authentication setting
        _auth_settings: List[str] = [
            'accessToken'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/projects/{projectId}/references',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats
        )

    @validate_call
    def refresh_project_references(
        self,
        project_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
    ) -> None:
        """(Deprecated) Refresh project references

        Refresh project references (internal)

        :param project_id: (required)
        :type project_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :return: Returns the result object.
        """  # noqa: E501
        warnings.warn("PUT /projects/{projectId}/references is deprecated.", DeprecationWarning)

        return self.refresh_project_references_raw(
            project_id=project_id,
            _request_timeout=_request_timeout,
            _headers=_headers
        ).data

    @validate_call
    def refresh_project_references_raw(
        self,
        project_id: StrictStr,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
    ) -> ApiResponse[None]:
        """(Deprecated) Refresh project references

        Refresh project references (internal)

        :param project_id: (required)
        :type project_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :return: Returns the result object.
        """  # noqa: E501
        warnings.warn("PUT /projects/{projectId}/references is deprecated.", DeprecationWarning)

        _param = self._refresh_project_references_serialize(
            project_id=project_id,
            _headers=_headers,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self._api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self._api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    def _refresh_project_references_serialize(
        self,
        project_id,
        _headers,
    ) -> RequestSerialized:
        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if project_id is not None:
            _path_params['projectId'] = project_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter



        # authentication setting
        _auth_settings: List[str] = [
            'accessToken'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/projects/{projectId}/references',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats
        )
