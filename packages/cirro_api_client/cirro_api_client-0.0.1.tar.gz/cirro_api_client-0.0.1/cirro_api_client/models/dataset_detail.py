# coding: utf-8

"""
    Cirro Data

    Cirro Data Platform service API

    The version of the OpenAPI document: latest
    Contact: support@cirro.bio
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List
from pydantic import BaseModel, StrictStr
from pydantic import Field
from cirro_api_client.models.status import Status
from cirro_api_client.models.tag import Tag
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class DatasetDetail(BaseModel):
    """
    DatasetDetail
    """ # noqa: E501
    id: StrictStr
    name: StrictStr
    description: StrictStr
    s3: StrictStr
    process_id: StrictStr = Field(alias="processId")
    project_id: StrictStr = Field(alias="projectId")
    source_dataset_ids: List[StrictStr] = Field(alias="sourceDatasetIds")
    status: Status
    status_message: StrictStr = Field(alias="statusMessage")
    tags: List[Tag]
    params: Dict[str, Any]
    info: Dict[str, Any]
    created_by: StrictStr = Field(alias="createdBy")
    created_at: datetime = Field(alias="createdAt")
    updated_at: datetime = Field(alias="updatedAt")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "s3", "processId", "projectId", "sourceDatasetIds", "status", "statusMessage", "tags", "params", "info", "createdBy", "createdAt", "updatedAt"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of DatasetDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of DatasetDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "s3": obj.get("s3"),
            "processId": obj.get("processId"),
            "projectId": obj.get("projectId"),
            "sourceDatasetIds": obj.get("sourceDatasetIds"),
            "status": obj.get("status"),
            "statusMessage": obj.get("statusMessage"),
            "tags": [Tag.from_dict(_item) for _item in obj.get("tags")] if obj.get("tags") is not None else None,
            "params": obj.get("params"),
            "info": obj.get("info"),
            "createdBy": obj.get("createdBy"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


