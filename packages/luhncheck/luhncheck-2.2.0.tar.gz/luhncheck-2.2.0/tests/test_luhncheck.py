import pytest

from luhncheck import is_luhn


@pytest.mark.parametrize(
    "actual, expected",
    [
        ("110179827B", False),
        ("1101798278", True),
        ("1102544794", False),
        ("4146274478407735", True),
        ("4146 2744 7840 7735", True),
        ("4458274470454207", False),
        ("010551021098314", True),
        ("01-055102-109831-4", True),
        ("01-055102-109831", False),
    ],
)
def test_number_validation(actual, expected):
    assert is_luhn(actual) == expected


@pytest.mark.parametrize(
    "actual, expected",
    [
        ({"number": "1101798278", "length": 10}, True),
        ({"number": "1-1017-9827-8", "length": 10}, True),
        ({"number": "1101798278", "length": 9}, False),
        ({"number": "1101798278", "prefix": "1"}, True),
        ({"number": "1101798278", "prefix": ["1"]}, True),
        ({"number": "1101798278", "prefix": "2"}, False),
        ({"number": "1101798278", "prefix": ["2"]}, False),
        ({"number": "1101798278", "prefix": ["1", "2"]}, True),
        ({"number": "1101798278", "prefix": ["3", "4"]}, False),
        ({"number": "1101798278", "length": 10, "prefix": "1"}, True),
        ({"number": "1101798278", "length": 10, "prefix": ["1"]}, True),
        ({"number": "1101798278", "length": 10, "prefix": "2"}, False),
        ({"number": "1101798278", "length": 10, "prefix": ["2"]}, False),
        ({"number": "1101798278", "length": 9, "prefix": "1"}, False),
        ({"number": "1101798278", "length": 9, "prefix": "2"}, False),
        ({"number": "1101798278", "length": 10, "prefix": ["1", "2"]}, True),
        ({"number": "1101798278", "length": 10, "prefix": ["3", "4"]}, False),
        ({"number": "1101798278", "length": 9, "prefix": ["1", "2"]}, False),
        ({"number": "1101798278", "length": 9, "prefix": ["3", "4"]}, False),
        ({"number": "4146274478407735", "length": 16}, True),
        ({"number": "4146 2744 7840 7735", "length": 16}, True),
        ({"number": "4146274478407735", "length": 15}, False),
        ({"number": "4146274478407735", "prefix": "41"}, True),
        ({"number": "4146274478407735", "prefix": "44"}, False),
        ({"number": "4146274478407735", "prefix": ["44", "41"]}, True),
        ({"number": "4146274478407735", "prefix": ["5", "6"]}, False),
        ({"number": "4146274478407735", "length": 16, "prefix": "41"}, True),
        ({"number": "4146274478407735", "length": 16, "prefix": "44"}, False),
        ({"number": "4146274478407735", "length": 15, "prefix": "41"}, False),
        ({"number": "4146274478407735", "length": 15, "prefix": "44"}, False),
        (
            {
                "number": "4146274478407735",
                "length": 16,
                "prefix": ["44", "41"],
            },
            True,
        ),
        (
            {"number": "4146274478407735", "length": 16, "prefix": ["5", "6"]},
            False,
        ),
        (
            {
                "number": "4146274478407735",
                "length": 15,
                "prefix": ["44", "41"],
            },
            False,
        ),
        (
            {"number": "4146274478407735", "length": 15, "prefix": ["5", "6"]},
            False,
        ),
        ({"number": "33-168941-274558-0", "length": 15}, True),
        ({"number": "33-168941-274558-0", "length": 18}, False),
        ({"number": "01-055102-109831-4", "length": 15}, True),
        ({"number": "01-055102-109831-4", "length": 15, "prefix": "01"}, True),
    ],
)
def test_number_validation_with_keyword_args(actual, expected):
    assert is_luhn(**actual) == expected


@pytest.mark.parametrize(
    "actual, expected",
    [
        (("1101798278", 10), True),
        (("1-1017-9827-8", 10), True),
        (("1101798278", 9), False),
        (("1101798278", None, "1"), True),
        (("1101798278", None, ["1"]), True),
        (("1101798278", None, "2"), False),
        (("1101798278", None, ["2"]), False),
        (("1101798278", None, ["1", "2"]), True),
        (("1101798278", None, ["3", "4"]), False),
        (("1101798278", 10, "1"), True),
        (("1101798278", 10, ["1"]), True),
        (("1101798278", 10, "2"), False),
        (("1101798278", 10, ["2"]), False),
        (("1101798278", 9, "1"), False),
        (("1101798278", 9, "2"), False),
        (("1101798278", 10, ["1", "2"]), True),
        (("1101798278", 10, ["3", "4"]), False),
        (("1101798278", 9, ["1", "2"]), False),
        (("1101798278", 9, ["3", "4"]), False),
        (("4146274478407735", 16), True),
        (("4146 2744 7840 7735", 16), True),
        (("4146274478407735", 15), False),
        (("4146274478407735", None, "41"), True),
        (("4146274478407735", None, "44"), False),
        (("4146274478407735", None, ["44", "41"]), True),
        (("4146274478407735", None, ["5", "6"]), False),
        (("4146274478407735", 16, "41"), True),
        (("4146274478407735", 16, "44"), False),
        (("4146274478407735", 15, "41"), False),
        (("4146274478407735", 15, "44"), False),
        (("4146274478407735", 16, ["44", "41"]), True),
        (("4146274478407735", 16, ["5", "6"]), False),
        (("4146274478407735", 15, ["44", "41"]), False),
        (("4146274478407735", 15, ["5", "6"]), False),
        (("33-168941-274558-0", 15), True),
        (("33-168941-274558-0", 18), False),
        (("01-055102-109831-4", 15), True),
        (("01-055102-109831-4", 15, "01"), True),
    ],
)
def test_number_validation_with_positional_args(actual, expected):
    assert is_luhn(*actual) == expected


valid_credit_card_numbers = [
    "2222405343248877",
    "2222990905257051",
    "2223007648726984",
    "2223577120017656",
    "5105105105105100",
    "5111010030175156",
    "5185540810000019",
    "5200828282828210",
    "5204230080000017",
    "5204740009900014",
    "5420923878724339",
    "5455330760000018",
    "5506900490000436",
    "5506900490000444",
    "5506900510000234",
    "5506920809243667",
    "5506922400634930",
    "5506927427317625",
    "5553042241984105",
    "5555553753048194",
    "5555555555554444",
    "4012888888881881",
    "4111111111111111",
    "6011000990139424",
    "6011111111111117",
    "371449635398431",
    "378282246310005",
    "30569309025904",
    "38520000023237",
    "3530111333300000",
    "3566002020360505",
    "4929381332664295",
    "5370463888813020",
    "4916481158148111",
    "4916403492698783",
    "5299156156891938",
    "5293850200713058",
    "5548024663365664",
    "4539538574255825",
    "4916976652406147",
    "4556007212947415",
    "4532422069229909",
    "4916673475725015",
    "5218014427039266",
    "5399070641280178",
    "5144869127761108",
    "5527124750467780",
    "4539003137030728",
    "5180380736798221",
    "5413442801450036",
    "4532992930369308",
    "5495860245086804",
    "5325325695196624",
    "4532006519685602",
    "345389698201044",
    "4716698449836160",
    "4539821904847598",
    "30204861594838",
    "4532175360711112",
    "5270426764505516",
    "5252597142194116",
]


@pytest.mark.parametrize("number", valid_credit_card_numbers)
def test_more_credit_card_numbers(number):
    assert is_luhn(number) is True
