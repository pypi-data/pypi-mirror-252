# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: api.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from datetime import datetime
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from .. import common as _common__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class MarketStatus(betterproto.Enum):
    MS_UNKNOWN = 0
    MS_ONLINE = 1


class Side(betterproto.Enum):
    S_UNKNOWN = 0
    S_BID = 1
    S_ASK = 2


class OrderStatus(betterproto.Enum):
    OS_UNKNOWN = 0
    OS_OPEN = 1
    OS_PARTIAL_FILL = 2
    OS_CANCELLED = 3
    OS_FILLED = 4


class Direction(betterproto.Enum):
    D_ASCENDING = 0
    D_DESCENDING = 1


class SubmitStrategy(betterproto.Enum):
    P_UKNOWN = 0
    P_SUBMIT_ALL = 1
    P_ABORT_ON_FIRST_ERROR = 2
    P_WAIT_FOR_CONFIRMATION = 3


class Step(betterproto.Enum):
    STEP0 = 0
    STEP1 = 1
    STEP2 = 2
    STEP3 = 3


class Project(betterproto.Enum):
    P_UNKNOWN = 0
    P_ALL = 1
    P_JUPITER = 2
    P_RAYDIUM = 3
    P_SERUM = 4
    P_OPENBOOK = 5
    P_DRIFT = 6


@dataclass(eq=False, repr=False)
class GetMarketsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetMarketsResponse(betterproto.Message):
    markets: Dict[str, "Market"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class Market(betterproto.Message):
    market: str = betterproto.string_field(1)
    status: "MarketStatus" = betterproto.enum_field(2)
    address: str = betterproto.string_field(3)
    base_mint: str = betterproto.string_field(4)
    quoted_mint: str = betterproto.string_field(5)
    base_decimals: int = betterproto.int64_field(6)
    quote_decimals: int = betterproto.int64_field(7)
    project: "Project" = betterproto.enum_field(8)


@dataclass(eq=False, repr=False)
class GetTickersRequest(betterproto.Message):
    market: str = betterproto.string_field(1)
    project: "Project" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class GetTickersResponse(betterproto.Message):
    tickers: List["Ticker"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Ticker(betterproto.Message):
    market: str = betterproto.string_field(1)
    market_address: str = betterproto.string_field(2)
    bid: float = betterproto.double_field(3)
    bid_size: float = betterproto.double_field(4)
    ask: float = betterproto.double_field(5)
    ask_size: float = betterproto.double_field(6)
    project: "Project" = betterproto.enum_field(7)


@dataclass(eq=False, repr=False)
class GetKlineRequest(betterproto.Message):
    market: str = betterproto.string_field(1)
    from_: datetime = betterproto.message_field(2)
    to: datetime = betterproto.message_field(3)
    resolution: str = betterproto.string_field(4)
    limit: int = betterproto.uint32_field(5)


@dataclass(eq=False, repr=False)
class GetKlineResponse(betterproto.Message):
    market: str = betterproto.string_field(1)
    timestamp: datetime = betterproto.message_field(2)
    candles: List["Candle"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class Candle(betterproto.Message):
    start_time: datetime = betterproto.message_field(1)
    update_time: datetime = betterproto.message_field(2)
    open: float = betterproto.double_field(3)
    close: float = betterproto.double_field(4)
    low: float = betterproto.double_field(5)
    high: float = betterproto.double_field(6)
    amount: float = betterproto.double_field(7)
    volume: float = betterproto.double_field(8)
    count: float = betterproto.double_field(9)


@dataclass(eq=False, repr=False)
class GetOrderbookRequest(betterproto.Message):
    market: str = betterproto.string_field(1)
    limit: int = betterproto.uint32_field(2)
    project: "Project" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class GetOrderbooksRequest(betterproto.Message):
    markets: List[str] = betterproto.string_field(1)
    limit: int = betterproto.uint32_field(2)
    project: "Project" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class GetOrderbookResponse(betterproto.Message):
    market: str = betterproto.string_field(1)
    market_address: str = betterproto.string_field(2)
    bids: List["OrderbookItem"] = betterproto.message_field(3)
    asks: List["OrderbookItem"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class OrderbookItem(betterproto.Message):
    price: float = betterproto.double_field(1)
    size: float = betterproto.double_field(2)
    order_id: str = betterproto.string_field(3)
    client_order_id: int = betterproto.uint64_field(4)
    owner_address: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class GetMarketDepthRequest(betterproto.Message):
    market: str = betterproto.string_field(1)
    limit: int = betterproto.uint32_field(2)
    project: "Project" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class GetMarketDepthsRequest(betterproto.Message):
    markets: List[str] = betterproto.string_field(1)
    limit: int = betterproto.uint32_field(2)
    project: "Project" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class GetMarketDepthResponse(betterproto.Message):
    market: str = betterproto.string_field(1)
    market_address: str = betterproto.string_field(2)
    bids: List["MarketDepthItem"] = betterproto.message_field(3)
    asks: List["MarketDepthItem"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class MarketDepthItem(betterproto.Message):
    price: float = betterproto.double_field(1)
    size: float = betterproto.double_field(2)


@dataclass(eq=False, repr=False)
class GetTradesRequest(betterproto.Message):
    market: str = betterproto.string_field(1)
    limit: int = betterproto.uint32_field(2)
    project: "Project" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class GetTradesResponse(betterproto.Message):
    trades: List["Trade"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Trade(betterproto.Message):
    side: "Side" = betterproto.enum_field(1)
    size: float = betterproto.double_field(2)
    fill_price: float = betterproto.double_field(3)
    order_id: str = betterproto.string_field(4)
    is_maker: bool = betterproto.bool_field(5)
    address: str = betterproto.string_field(6)
    fee_or_rebate: float = betterproto.double_field(7)
    order_price: float = betterproto.double_field(8)


@dataclass(eq=False, repr=False)
class GetServerTimeRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetServerTimeResponse(betterproto.Message):
    timestamp: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetAccountBalanceRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetAccountBalanceResponse(betterproto.Message):
    tokens: List["TokenBalance"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TokenBalance(betterproto.Message):
    symbol: str = betterproto.string_field(1)
    token_mint: str = betterproto.string_field(2)
    settled_amount: float = betterproto.double_field(3)
    unsettled_amount: float = betterproto.double_field(4)
    open_orders_amount: float = betterproto.double_field(5)


@dataclass(eq=False, repr=False)
class GetTokenAccountsRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetTokenAccountsResponse(betterproto.Message):
    accounts: List["TokenAccount"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TokenAccount(betterproto.Message):
    symbol: str = betterproto.string_field(1)
    token_mint: str = betterproto.string_field(2)
    token_account: str = betterproto.string_field(3)
    amount: float = betterproto.double_field(4)


@dataclass(eq=False, repr=False)
class PostOrderRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    payer_address: str = betterproto.string_field(2)
    market: str = betterproto.string_field(3)
    side: "Side" = betterproto.enum_field(4)
    type: List["_common__.OrderType"] = betterproto.enum_field(5)
    amount: float = betterproto.double_field(6)
    price: float = betterproto.double_field(7)
    open_orders_address: str = betterproto.string_field(8)
    client_order_id: int = betterproto.uint64_field(9)
    compute_limit: int = betterproto.uint32_field(10)
    compute_price: int = betterproto.uint64_field(11)
    project: "Project" = betterproto.enum_field(12)


@dataclass(eq=False, repr=False)
class PostReplaceOrderRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    payer_address: str = betterproto.string_field(2)
    market: str = betterproto.string_field(3)
    side: "Side" = betterproto.enum_field(4)
    type: List["_common__.OrderType"] = betterproto.enum_field(5)
    amount: float = betterproto.double_field(6)
    price: float = betterproto.double_field(7)
    open_orders_address: str = betterproto.string_field(8)
    client_order_id: int = betterproto.uint64_field(9)
    order_id: str = betterproto.string_field(10)
    compute_limit: int = betterproto.uint32_field(11)
    compute_price: int = betterproto.uint64_field(12)
    project: "Project" = betterproto.enum_field(13)


@dataclass(eq=False, repr=False)
class PostOrderResponse(betterproto.Message):
    transaction: "TransactionMessage" = betterproto.message_field(1)
    open_orders_address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class PostCancelOrderRequest(betterproto.Message):
    order_id: str = betterproto.string_field(1)
    side: "Side" = betterproto.enum_field(2)
    market_address: str = betterproto.string_field(3)
    owner_address: str = betterproto.string_field(4)
    open_orders_address: str = betterproto.string_field(5)
    compute_limit: int = betterproto.uint32_field(6)
    compute_price: int = betterproto.uint64_field(7)
    project: "Project" = betterproto.enum_field(8)


@dataclass(eq=False, repr=False)
class PostCancelByClientOrderIdRequest(betterproto.Message):
    client_order_id: int = betterproto.uint64_field(1)
    market_address: str = betterproto.string_field(2)
    owner_address: str = betterproto.string_field(3)
    open_orders_address: str = betterproto.string_field(4)
    compute_limit: int = betterproto.uint32_field(5)
    compute_price: int = betterproto.uint64_field(6)
    project: "Project" = betterproto.enum_field(7)


@dataclass(eq=False, repr=False)
class PostCancelOrderResponse(betterproto.Message):
    transaction: "TransactionMessage" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PostCancelAllRequest(betterproto.Message):
    market: str = betterproto.string_field(1)
    owner_address: str = betterproto.string_field(2)
    open_orders_addresses: List[str] = betterproto.string_field(3)
    compute_limit: int = betterproto.uint32_field(4)
    compute_price: int = betterproto.uint64_field(5)
    project: "Project" = betterproto.enum_field(6)


@dataclass(eq=False, repr=False)
class TransactionMessage(betterproto.Message):
    content: str = betterproto.string_field(1)
    is_cleanup: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class PostCancelAllResponse(betterproto.Message):
    transactions: List["TransactionMessage"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PostSettleRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    market: str = betterproto.string_field(2)
    base_token_wallet: str = betterproto.string_field(3)
    quote_token_wallet: str = betterproto.string_field(4)
    open_orders_address: str = betterproto.string_field(5)
    compute_limit: int = betterproto.uint32_field(6)
    compute_price: int = betterproto.uint64_field(7)
    project: "Project" = betterproto.enum_field(8)


@dataclass(eq=False, repr=False)
class PostSettleResponse(betterproto.Message):
    transaction: "TransactionMessage" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Settlement(betterproto.Message):
    symbol: str = betterproto.string_field(1)
    unsettled: float = betterproto.double_field(2)
    amount: float = betterproto.double_field(3)


@dataclass(eq=False, repr=False)
class GetOrdersRequest(betterproto.Message):
    market: str = betterproto.string_field(1)
    status: "OrderStatus" = betterproto.enum_field(2)
    side: "Side" = betterproto.enum_field(3)
    types: List["_common__.OrderType"] = betterproto.enum_field(4)
    from_: datetime = betterproto.message_field(5)
    limit: int = betterproto.uint32_field(6)
    direction: "Direction" = betterproto.enum_field(7)
    address: str = betterproto.string_field(8)
    open_orders_address: str = betterproto.string_field(9)
    project: "Project" = betterproto.enum_field(10)


@dataclass(eq=False, repr=False)
class GetOrdersResponse(betterproto.Message):
    orders: List["Order"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Order(betterproto.Message):
    order_id: str = betterproto.string_field(1)
    market: str = betterproto.string_field(2)
    side: "Side" = betterproto.enum_field(3)
    types: List["_common__.OrderType"] = betterproto.enum_field(4)
    price: float = betterproto.double_field(5)
    remaining_size: float = betterproto.double_field(6)
    created_at: datetime = betterproto.message_field(7)
    client_order_id: str = betterproto.string_field(8)
    open_order_account: str = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class GetOrderStatusStreamRequest(betterproto.Message):
    market: str = betterproto.string_field(1)
    owner_address: str = betterproto.string_field(2)
    project: "Project" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class GetOrderStatusStreamResponse(betterproto.Message):
    slot: int = betterproto.int64_field(1)
    order_info: "GetOrderStatusResponse" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetOrderStatusResponse(betterproto.Message):
    market: str = betterproto.string_field(1)
    open_order_address: str = betterproto.string_field(2)
    order_id: str = betterproto.string_field(3)
    client_order_id: int = betterproto.uint64_field(4)
    quantity_released: float = betterproto.float_field(5)
    quantity_remaining: float = betterproto.float_field(6)
    fill_price: float = betterproto.float_field(7)
    side: "Side" = betterproto.enum_field(8)
    order_status: "OrderStatus" = betterproto.enum_field(9)
    order_price: float = betterproto.float_field(10)


@dataclass(eq=False, repr=False)
class PostSubmitRequest(betterproto.Message):
    transaction: "TransactionMessage" = betterproto.message_field(1)
    skip_pre_flight: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class PostSubmitRequestEntry(betterproto.Message):
    transaction: "TransactionMessage" = betterproto.message_field(1)
    skip_pre_flight: bool = betterproto.bool_field(2)


@dataclass(eq=False, repr=False)
class PostSubmitBatchRequest(betterproto.Message):
    entries: List["PostSubmitRequestEntry"] = betterproto.message_field(1)
    submit_strategy: "SubmitStrategy" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class PostSubmitBatchResponseEntry(betterproto.Message):
    signature: str = betterproto.string_field(1)
    error: str = betterproto.string_field(2)
    submitted: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class PostSubmitBatchResponse(betterproto.Message):
    transactions: List["PostSubmitBatchResponseEntry"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PostSubmitResponse(betterproto.Message):
    signature: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetOpenOrdersRequest(betterproto.Message):
    market: str = betterproto.string_field(1)
    limit: int = betterproto.uint32_field(2)
    address: str = betterproto.string_field(3)
    open_orders_address: str = betterproto.string_field(4)
    project: "Project" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class GetOpenOrdersResponse(betterproto.Message):
    orders: List["Order"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetOrderByIdRequest(betterproto.Message):
    order_id: str = betterproto.string_field(1)
    market: str = betterproto.string_field(2)
    project: "Project" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class GetOrderByIdResponse(betterproto.Message):
    order: "Order" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetUnsettledRequest(betterproto.Message):
    market: str = betterproto.string_field(1)
    owner_address: str = betterproto.string_field(2)
    project: "Project" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class UnsettledAccountToken(betterproto.Message):
    address: str = betterproto.string_field(1)
    amount: float = betterproto.double_field(2)


@dataclass(eq=False, repr=False)
class UnsettledAccount(betterproto.Message):
    account: str = betterproto.string_field(1)
    base_token: "UnsettledAccountToken" = betterproto.message_field(2)
    quote_token: "UnsettledAccountToken" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetUnsettledResponse(betterproto.Message):
    market: str = betterproto.string_field(1)
    unsettled: List["UnsettledAccount"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetOrderbooksStreamResponse(betterproto.Message):
    slot: int = betterproto.int64_field(1)
    orderbook: "GetOrderbookResponse" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetMarketDepthsStreamResponse(betterproto.Message):
    slot: int = betterproto.int64_field(1)
    data: "GetMarketDepthResponse" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetTickersStreamResponse(betterproto.Message):
    slot: int = betterproto.int64_field(1)
    ticker: "GetTickersResponse" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetTradesStreamResponse(betterproto.Message):
    slot: int = betterproto.int64_field(1)
    trades: "GetTradesResponse" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetQuotesRequest(betterproto.Message):
    in_token: str = betterproto.string_field(1)
    out_token: str = betterproto.string_field(2)
    in_amount: float = betterproto.double_field(3)
    slippage: float = betterproto.double_field(4)
    limit: int = betterproto.int32_field(5)
    projects: List["Project"] = betterproto.enum_field(6)


@dataclass(eq=False, repr=False)
class GetQuotesResponse(betterproto.Message):
    in_token: str = betterproto.string_field(1)
    in_token_address: str = betterproto.string_field(2)
    out_token: str = betterproto.string_field(3)
    out_token_address: str = betterproto.string_field(4)
    in_amount: float = betterproto.double_field(5)
    quotes: List["ProjectQuote"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class GetRaydiumQuotesRequest(betterproto.Message):
    in_token: str = betterproto.string_field(1)
    out_token: str = betterproto.string_field(2)
    in_amount: float = betterproto.double_field(3)
    slippage: float = betterproto.double_field(4)


@dataclass(eq=False, repr=False)
class GetRaydiumQuotesResponse(betterproto.Message):
    in_token: str = betterproto.string_field(1)
    in_token_address: str = betterproto.string_field(2)
    out_token: str = betterproto.string_field(3)
    out_token_address: str = betterproto.string_field(4)
    in_amount: float = betterproto.double_field(5)
    routes: List["RaydiumQuoteRoute"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class GetJupiterQuotesRequest(betterproto.Message):
    in_token: str = betterproto.string_field(1)
    out_token: str = betterproto.string_field(2)
    in_amount: float = betterproto.double_field(3)
    slippage: float = betterproto.double_field(4)
    limit: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class GetJupiterQuotesResponse(betterproto.Message):
    in_token: str = betterproto.string_field(1)
    in_token_address: str = betterproto.string_field(2)
    out_token: str = betterproto.string_field(3)
    out_token_address: str = betterproto.string_field(4)
    in_amount: float = betterproto.double_field(5)
    routes: List["JupiterQuoteRoute"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class ProjectQuote(betterproto.Message):
    project: "Project" = betterproto.enum_field(1)
    routes: List["QuoteRoute"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TradeSwapRequest(betterproto.Message):
    project: "Project" = betterproto.enum_field(1)
    owner_address: str = betterproto.string_field(2)
    in_token: str = betterproto.string_field(3)
    out_token: str = betterproto.string_field(4)
    in_amount: float = betterproto.double_field(5)
    slippage: float = betterproto.double_field(6)
    compute_limit: int = betterproto.uint32_field(7)
    compute_price: int = betterproto.uint64_field(8)


@dataclass(eq=False, repr=False)
class PostJupiterSwapRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    in_token: str = betterproto.string_field(2)
    out_token: str = betterproto.string_field(3)
    in_amount: float = betterproto.double_field(4)
    slippage: float = betterproto.double_field(5)
    compute_limit: int = betterproto.uint32_field(6)
    compute_price: int = betterproto.uint64_field(7)


@dataclass(eq=False, repr=False)
class PostRaydiumSwapRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    in_token: str = betterproto.string_field(2)
    out_token: str = betterproto.string_field(3)
    in_amount: float = betterproto.double_field(4)
    slippage: float = betterproto.double_field(5)
    compute_limit: int = betterproto.uint32_field(6)
    compute_price: int = betterproto.uint64_field(7)


@dataclass(eq=False, repr=False)
class PostRaydiumSwapResponse(betterproto.Message):
    transactions: List["TransactionMessage"] = betterproto.message_field(1)
    out_amount: float = betterproto.double_field(2)
    out_amount_min: float = betterproto.double_field(3)
    price_impact: "_common__.PriceImpactPercentV2" = betterproto.message_field(4)
    fees: List["_common__.Fee"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class PostJupiterSwapResponse(betterproto.Message):
    transactions: List["TransactionMessage"] = betterproto.message_field(1)
    out_amount: float = betterproto.double_field(2)
    out_amount_min: float = betterproto.double_field(3)
    price_impact: "_common__.PriceImpactPercentV2" = betterproto.message_field(4)
    fees: List["_common__.Fee"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class PostRaydiumRouteSwapResponse(betterproto.Message):
    transactions: List["TransactionMessage"] = betterproto.message_field(1)
    out_amount: float = betterproto.double_field(2)
    out_amount_min: float = betterproto.double_field(3)


@dataclass(eq=False, repr=False)
class PostJupiterRouteSwapResponse(betterproto.Message):
    transactions: List["TransactionMessage"] = betterproto.message_field(1)
    out_amount: float = betterproto.double_field(2)
    out_amount_min: float = betterproto.double_field(3)
    price_impact: "_common__.PriceImpactPercentV2" = betterproto.message_field(4)
    fees: List["_common__.Fee"] = betterproto.message_field(5)


@dataclass(eq=False, repr=False)
class RouteTradeSwapRequest(betterproto.Message):
    project: "Project" = betterproto.enum_field(1)
    owner_address: str = betterproto.string_field(2)
    steps: List["RouteStep"] = betterproto.message_field(3)
    slippage: float = betterproto.double_field(4)
    compute_limit: int = betterproto.uint32_field(5)
    compute_price: int = betterproto.uint64_field(6)


@dataclass(eq=False, repr=False)
class PostRaydiumRouteSwapRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    steps: List["RaydiumRouteStep"] = betterproto.message_field(2)
    slippage: float = betterproto.double_field(3)
    compute_limit: int = betterproto.uint32_field(4)
    compute_price: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class RaydiumRouteStep(betterproto.Message):
    in_token: str = betterproto.string_field(1)
    in_amount: float = betterproto.double_field(2)
    out_token: str = betterproto.string_field(3)
    out_amount: float = betterproto.double_field(4)
    out_amount_min: float = betterproto.double_field(5)
    pool_address: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class PostJupiterRouteSwapRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    steps: List["JupiterRouteStep"] = betterproto.message_field(2)
    slippage: float = betterproto.double_field(3)
    compute_limit: int = betterproto.uint32_field(4)
    compute_price: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class JupiterRouteStep(betterproto.Message):
    in_token: str = betterproto.string_field(1)
    in_amount: float = betterproto.double_field(2)
    out_token: str = betterproto.string_field(3)
    out_amount: float = betterproto.double_field(4)
    out_amount_min: float = betterproto.double_field(5)
    project: "StepProject" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class RouteStep(betterproto.Message):
    in_token: str = betterproto.string_field(1)
    in_amount: float = betterproto.double_field(2)
    out_token: str = betterproto.string_field(3)
    out_amount: float = betterproto.double_field(4)
    out_amount_min: float = betterproto.double_field(5)
    project: "StepProject" = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class TradeSwapResponse(betterproto.Message):
    project: "Project" = betterproto.enum_field(1)
    transactions: List["TransactionMessage"] = betterproto.message_field(2)
    out_amount: float = betterproto.double_field(3)
    out_amount_min: float = betterproto.double_field(4)
    price_impact: "_common__.PriceImpactPercent" = betterproto.message_field(5)
    fees: List["_common__.Fee"] = betterproto.message_field(6)


@dataclass(eq=False, repr=False)
class QuoteRoute(betterproto.Message):
    in_amount: float = betterproto.double_field(1)
    out_amount: float = betterproto.double_field(2)
    out_amount_min: float = betterproto.double_field(3)
    steps: List["QuoteStep"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class QuoteStep(betterproto.Message):
    project: "StepProject" = betterproto.message_field(1)
    in_token: str = betterproto.string_field(2)
    in_token_address: str = betterproto.string_field(3)
    out_token: str = betterproto.string_field(4)
    out_token_address: str = betterproto.string_field(5)
    in_amount: float = betterproto.double_field(6)
    out_amount: float = betterproto.double_field(7)
    slippage: float = betterproto.double_field(8)
    price_impact_percent: "_common__.PriceImpactPercent" = betterproto.message_field(9)
    fee: "_common__.Fee" = betterproto.message_field(10)
    out_amount_min: float = betterproto.double_field(11)


@dataclass(eq=False, repr=False)
class JupiterQuoteRoute(betterproto.Message):
    in_amount: float = betterproto.double_field(1)
    out_amount: float = betterproto.double_field(2)
    out_amount_min: float = betterproto.double_field(3)
    steps: List["JupiterQuoteStep"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class JupiterQuoteStep(betterproto.Message):
    project: "StepProject" = betterproto.message_field(1)
    in_token: str = betterproto.string_field(2)
    in_token_address: str = betterproto.string_field(3)
    out_token: str = betterproto.string_field(4)
    out_token_address: str = betterproto.string_field(5)
    in_amount: float = betterproto.double_field(6)
    out_amount: float = betterproto.double_field(7)
    slippage: float = betterproto.double_field(8)
    price_impact_percent: "_common__.PriceImpactPercentV2" = betterproto.message_field(
        9
    )
    fee: "_common__.Fee" = betterproto.message_field(10)
    out_amount_min: float = betterproto.double_field(11)


@dataclass(eq=False, repr=False)
class RaydiumQuoteRoute(betterproto.Message):
    in_amount: float = betterproto.double_field(1)
    out_amount: float = betterproto.double_field(2)
    out_amount_min: float = betterproto.double_field(3)
    steps: List["RaydiumQuoteStep"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class RaydiumQuoteStep(betterproto.Message):
    in_token: str = betterproto.string_field(1)
    in_token_address: str = betterproto.string_field(2)
    out_token: str = betterproto.string_field(3)
    out_token_address: str = betterproto.string_field(4)
    in_amount: float = betterproto.double_field(5)
    out_amount: float = betterproto.double_field(6)
    slippage: float = betterproto.double_field(7)
    price_impact_percent: "_common__.PriceImpactPercentV2" = betterproto.message_field(
        8
    )
    fee: "_common__.Fee" = betterproto.message_field(10)
    out_amount_min: float = betterproto.double_field(11)


@dataclass(eq=False, repr=False)
class StepProject(betterproto.Message):
    label: str = betterproto.string_field(1)
    id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetRecentBlockHashRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetRecentBlockHashResponse(betterproto.Message):
    block_hash: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class Block(betterproto.Message):
    slot: int = betterproto.uint64_field(1)
    hash: str = betterproto.string_field(2)
    time: int = betterproto.int64_field(3)
    height: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class GetBlockStreamRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetBlockStreamResponse(betterproto.Message):
    block: "Block" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetPoolsRequest(betterproto.Message):
    projects: List["Project"] = betterproto.enum_field(1)
    pair_or_address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetPoolsResponse(betterproto.Message):
    projects: List["ProjectPools"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetRaydiumPoolsRequest(betterproto.Message):
    pair_or_address: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetRaydiumPoolsResponse(betterproto.Message):
    pools: List["ProjectPool"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetTransactionRequest(betterproto.Message):
    signature: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetTransactionResponse(betterproto.Message):
    status: str = betterproto.string_field(1)
    metadata: "TransactionMeta" = betterproto.message_field(2)
    slot: int = betterproto.uint64_field(3)
    block_time: int = betterproto.uint64_field(4)
    version: int = betterproto.int32_field(5)


@dataclass(eq=False, repr=False)
class Instruction(betterproto.Message):
    program_id_index: int = betterproto.uint32_field(1)
    accounts: List[int] = betterproto.uint32_field(2)
    data: bytes = betterproto.bytes_field(3)


@dataclass(eq=False, repr=False)
class TransactionMeta(betterproto.Message):
    err: str = betterproto.string_field(1)
    errored: bool = betterproto.bool_field(2)
    fee: int = betterproto.uint64_field(3)
    pre_balances: List[int] = betterproto.uint64_field(4)
    post_balances: List[int] = betterproto.uint64_field(5)
    inner_instructions: List[
        "TransactionMetaInnerInstruction"
    ] = betterproto.message_field(6)
    log_messages: List[str] = betterproto.string_field(7)
    pre_token_balances: List["TransactionMetaTokenBalance"] = betterproto.message_field(
        8
    )
    post_token_balances: List[
        "TransactionMetaTokenBalance"
    ] = betterproto.message_field(9)


@dataclass(eq=False, repr=False)
class TransactionMetaInnerInstruction(betterproto.Message):
    index: int = betterproto.uint32_field(1)
    instructions: List["Instruction"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class TransactionMetaTokenBalance(betterproto.Message):
    account_index: int = betterproto.uint32_field(1)
    mint: str = betterproto.string_field(2)
    ui_token_amount: "UiTokenAmount" = betterproto.message_field(3)
    owner: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class UiTokenAmount(betterproto.Message):
    ui_amount: float = betterproto.float_field(1)
    decimals: int = betterproto.uint32_field(2)
    amount: str = betterproto.string_field(3)
    ui_amount_string: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class ProjectPools(betterproto.Message):
    project: "Project" = betterproto.enum_field(1)
    pools: List["ProjectPool"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class ProjectPool(betterproto.Message):
    pool: str = betterproto.string_field(1)
    pool_address: str = betterproto.string_field(2)
    token1_reserves: int = betterproto.int64_field(3)
    token1_mint_address: str = betterproto.string_field(4)
    token1_mint_symbol: str = betterproto.string_field(5)
    token2_reserves: int = betterproto.int64_field(6)
    token2_mint_address: str = betterproto.string_field(7)
    token2_mint_symbol: str = betterproto.string_field(8)
    open_time: int = betterproto.uint64_field(9)


@dataclass(eq=False, repr=False)
class GetQuotesStreamRequest(betterproto.Message):
    projects: List["Project"] = betterproto.enum_field(1)
    token_pairs: List["TokenPair"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetQuotesStreamResponse(betterproto.Message):
    slot: int = betterproto.int64_field(1)
    quote: "GetQuotesStreamUpdate" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetQuotesStreamUpdate(betterproto.Message):
    in_token: str = betterproto.string_field(1)
    in_token_address: str = betterproto.string_field(2)
    out_token: str = betterproto.string_field(3)
    out_token_address: str = betterproto.string_field(4)
    in_amount: float = betterproto.double_field(5)
    out_amount: float = betterproto.double_field(6)
    project: "Project" = betterproto.enum_field(7)


@dataclass(eq=False, repr=False)
class GetSwapsStreamRequest(betterproto.Message):
    projects: List["Project"] = betterproto.enum_field(1)
    pools: List[str] = betterproto.string_field(2)
    include_failed: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class GetSwapsStreamResponse(betterproto.Message):
    slot: int = betterproto.int64_field(1)
    swap: "GetSwapsStreamUpdate" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetNewRaydiumPoolsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetNewRaydiumPoolsResponse(betterproto.Message):
    slot: int = betterproto.int64_field(1)
    pool: "ProjectPool" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetSwapsStreamUpdate(betterproto.Message):
    success: bool = betterproto.bool_field(1)
    project: "Project" = betterproto.enum_field(2)
    pool_address: str = betterproto.string_field(3)
    in_token: str = betterproto.string_field(4)
    in_token_address: str = betterproto.string_field(5)
    out_token: str = betterproto.string_field(6)
    out_token_address: str = betterproto.string_field(7)
    in_amount: float = betterproto.double_field(8)
    out_amount_min: float = betterproto.double_field(9)
    source_account: str = betterproto.string_field(10)
    destination_account: str = betterproto.string_field(11)
    owner_account: str = betterproto.string_field(12)
    signature: str = betterproto.string_field(13)


@dataclass(eq=False, repr=False)
class TokenPair(betterproto.Message):
    in_token: str = betterproto.string_field(1)
    out_token: str = betterproto.string_field(2)
    in_amount: float = betterproto.double_field(3)


@dataclass(eq=False, repr=False)
class GetPriceRequest(betterproto.Message):
    tokens: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetPriceResponse(betterproto.Message):
    token_prices: List["TokenPrice"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetRaydiumPricesRequest(betterproto.Message):
    tokens: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetJupiterPricesRequest(betterproto.Message):
    tokens: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetRaydiumPricesResponse(betterproto.Message):
    token_prices: List["TokenPriceV2"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetJupiterPricesResponse(betterproto.Message):
    token_prices: List["TokenPriceV2"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TokenPrice(betterproto.Message):
    token: str = betterproto.string_field(1)
    token_address: str = betterproto.string_field(2)
    project: "Project" = betterproto.enum_field(3)
    buy: float = betterproto.double_field(4)
    buy_size: float = betterproto.double_field(5)
    sell: float = betterproto.double_field(6)
    sell_size: float = betterproto.double_field(7)


@dataclass(eq=False, repr=False)
class TokenPriceV2(betterproto.Message):
    token: str = betterproto.string_field(1)
    token_address: str = betterproto.string_field(2)
    buy: float = betterproto.double_field(3)
    buy_size: float = betterproto.double_field(4)
    sell: float = betterproto.double_field(5)
    sell_size: float = betterproto.double_field(6)


@dataclass(eq=False, repr=False)
class GetPoolReservesStreamResponse(betterproto.Message):
    slot: int = betterproto.int64_field(1)
    reserves: "PoolReserves" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PoolReserves(betterproto.Message):
    token1_reserves: str = betterproto.string_field(1)
    token1_address: str = betterproto.string_field(2)
    token2_reserves: str = betterproto.string_field(3)
    token2_address: str = betterproto.string_field(4)
    pool_address: str = betterproto.string_field(5)
    project: "Project" = betterproto.enum_field(6)


@dataclass(eq=False, repr=False)
class GetPoolReservesStreamRequest(betterproto.Message):
    projects: List["Project"] = betterproto.enum_field(1)
    pair_or_address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetPricesStreamRequest(betterproto.Message):
    projects: List["Project"] = betterproto.enum_field(1)
    tokens: List[str] = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetPricesStreamResponse(betterproto.Message):
    slot: int = betterproto.int64_field(1)
    price: "TokenPrice" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetPerpOrderbookRequest(betterproto.Message):
    """Drift messages"""

    contract: "_common__.PerpContract" = betterproto.enum_field(1)
    limit: int = betterproto.uint32_field(2)
    project: "Project" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class GetPerpOrderbooksRequest(betterproto.Message):
    contracts: List["_common__.PerpContract"] = betterproto.enum_field(1)
    limit: int = betterproto.uint32_field(2)
    project: "Project" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class GetPerpOrderbookResponse(betterproto.Message):
    contract: "_common__.PerpContract" = betterproto.enum_field(1)
    bids: List["PerpOrderbookItem"] = betterproto.message_field(2)
    asks: List["PerpOrderbookItem"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class PerpOrderbookItem(betterproto.Message):
    price: float = betterproto.double_field(1)
    size: float = betterproto.double_field(2)
    order_id: str = betterproto.string_field(3)
    client_order_id: str = betterproto.string_field(4)
    status: str = betterproto.string_field(5)
    order_type: str = betterproto.string_field(6)
    slot: int = betterproto.int64_field(7)
    reduce_only: bool = betterproto.bool_field(8)
    trigger_price: float = betterproto.double_field(9)
    trigger_condition: str = betterproto.string_field(10)
    post_only: bool = betterproto.bool_field(11)
    oracle_price_offset: float = betterproto.double_field(12)
    auction_duration: int = betterproto.int32_field(13)
    auction_start_price: float = betterproto.double_field(14)
    auction_end_price: float = betterproto.double_field(15)


@dataclass(eq=False, repr=False)
class GetPerpOrderbooksStreamResponse(betterproto.Message):
    slot: int = betterproto.int64_field(1)
    orderbook: "GetPerpOrderbookResponse" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetUserRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    account_address: str = betterproto.string_field(2)
    project: "Project" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class GetUserResponse(betterproto.Message):
    user_accounts: List["UserDetail"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class UserDetail(betterproto.Message):
    status: str = betterproto.string_field(1)
    sub_account_id: int = betterproto.uint64_field(2)
    account_address: str = betterproto.string_field(3)
    account_name: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class PostCreateUserRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    project: "Project" = betterproto.enum_field(2)
    action: str = betterproto.string_field(3)
    sub_account_id: int = betterproto.uint64_field(4)
    account_name: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class PostCreateUserResponse(betterproto.Message):
    transaction: "TransactionMessage" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PostCancelPerpOrdersRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    project: "Project" = betterproto.enum_field(2)
    contract: "_common__.PerpContract" = betterproto.enum_field(3)
    account_address: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class PostCancelPerpOrdersResponse(betterproto.Message):
    transactions: List["TransactionMessage"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PostCancelDriftMarginOrderRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    account_address: str = betterproto.string_field(2)
    client_order_id: int = betterproto.uint64_field(3)
    order_id: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class PostCancelDriftMarginOrderResponse(betterproto.Message):
    transactions: List["TransactionMessage"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PostModifyDriftOrderRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    account_address: str = betterproto.string_field(2)
    order_id: int = betterproto.uint64_field(3)
    new_position_side: str = betterproto.string_field(4)
    post_only: str = betterproto.string_field(5)
    new_base_amount: float = betterproto.double_field(6)
    new_limit_price: float = betterproto.double_field(7)


@dataclass(eq=False, repr=False)
class PostModifyDriftOrderResponse(betterproto.Message):
    transaction: "TransactionMessage" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PostCancelPerpOrderRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    project: "Project" = betterproto.enum_field(2)
    contract: "_common__.PerpContract" = betterproto.enum_field(3)
    client_order_id: int = betterproto.uint64_field(4)
    order_id: int = betterproto.uint64_field(5)
    account_address: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class PostCancelPerpOrderResponse(betterproto.Message):
    transaction: "TransactionMessage" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PostCreateDriftUserRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    action: str = betterproto.string_field(2)
    sub_account_id: int = betterproto.uint64_field(3)
    account_name: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class PostCreateDriftUserResponse(betterproto.Message):
    transaction: "TransactionMessage" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetDriftUserRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    account_address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetDriftUserResponse(betterproto.Message):
    context: "Context" = betterproto.message_field(1)
    user_accounts: List["UserDetail"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PostCloseDriftPerpPositionsRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    account_address: str = betterproto.string_field(2)
    contracts: List[str] = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class PostCloseDriftPerpPositionsResponse(betterproto.Message):
    transactions: List["TransactionMessage"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetDriftPerpOrderbookRequest(betterproto.Message):
    contract: str = betterproto.string_field(1)
    limit: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetDriftPerpOrderbookResponse(betterproto.Message):
    context: "Context" = betterproto.message_field(1)
    contract: str = betterproto.string_field(2)
    bids: List["PerpOrderbookItem"] = betterproto.message_field(3)
    asks: List["PerpOrderbookItem"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class PostManageCollateralRequest(betterproto.Message):
    account_address: str = betterproto.string_field(1)
    amount: float = betterproto.double_field(2)
    project: "Project" = betterproto.enum_field(3)
    type: "_common__.PerpCollateralType" = betterproto.enum_field(4)
    token: "_common__.PerpCollateralToken" = betterproto.enum_field(5)
    to_account_address: str = betterproto.string_field(6)


@dataclass(eq=False, repr=False)
class PostManageCollateralResponse(betterproto.Message):
    transaction: "TransactionMessage" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetDriftOpenMarginOrdersRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    account_address: str = betterproto.string_field(2)
    markets: List[str] = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetDriftOpenMarginOrdersResponse(betterproto.Message):
    context: "Context" = betterproto.message_field(1)
    owner_address: str = betterproto.string_field(2)
    orders: List["DriftMarginOrder"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class DriftMarginOrder(betterproto.Message):
    order_id: int = betterproto.uint64_field(1)
    client_order_id: int = betterproto.uint64_field(2)
    market: str = betterproto.string_field(3)
    position_side: str = betterproto.string_field(4)
    order_type: str = betterproto.string_field(5)
    price: float = betterproto.double_field(6)
    size: float = betterproto.double_field(7)
    remaining_size: float = betterproto.double_field(8)
    status: str = betterproto.string_field(9)
    account_address: str = betterproto.string_field(10)
    sub_account_id: int = betterproto.uint64_field(11)
    post_only: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class GetOpenPerpOrdersRequest(betterproto.Message):
    project: "Project" = betterproto.enum_field(1)
    owner_address: str = betterproto.string_field(2)
    account_address: str = betterproto.string_field(3)
    contracts: List["_common__.PerpContract"] = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class GetOpenPerpOrdersResponse(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    orders: List["PerpOrder"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PerpOrder(betterproto.Message):
    order_id: int = betterproto.uint64_field(1)
    client_order_id: int = betterproto.uint64_field(2)
    contract: "_common__.PerpContract" = betterproto.enum_field(3)
    position_side: "_common__.PerpPositionSide" = betterproto.enum_field(4)
    order_type: str = betterproto.string_field(5)
    price: float = betterproto.double_field(6)
    size: float = betterproto.double_field(7)
    remaining_size: float = betterproto.double_field(8)
    status: str = betterproto.string_field(9)
    account_address: str = betterproto.string_field(10)
    sub_account_id: int = betterproto.uint64_field(11)
    post_only: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class GetPerpPositionsRequest(betterproto.Message):
    project: "Project" = betterproto.enum_field(1)
    owner_address: str = betterproto.string_field(2)
    account_address: str = betterproto.string_field(3)
    contracts: List["_common__.PerpContract"] = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class GetPerpPositionsResponse(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    perp_positions: List["PerpPosition"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PostClosePerpPositionsRequest(betterproto.Message):
    project: "Project" = betterproto.enum_field(1)
    owner_address: str = betterproto.string_field(2)
    account_address: str = betterproto.string_field(3)
    contracts: List["_common__.PerpContract"] = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class PostClosePerpPositionsResponse(betterproto.Message):
    transactions: List["TransactionMessage"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PerpPosition(betterproto.Message):
    contract: "_common__.PerpContract" = betterproto.enum_field(1)
    volume_available: float = betterproto.double_field(2)
    volume_in_order: float = betterproto.double_field(3)
    position_margin: float = betterproto.double_field(4)
    position_side: "_common__.PerpPositionSide" = betterproto.enum_field(5)
    notional_value: float = betterproto.double_field(6)
    index_price: float = betterproto.double_field(7)
    liquidation_price: float = betterproto.double_field(8)
    account_address: str = betterproto.string_field(9)
    sub_account_id: int = betterproto.int64_field(10)
    unrealized_pnl: float = betterproto.double_field(11)


@dataclass(eq=False, repr=False)
class PostPerpOrderRequest(betterproto.Message):
    project: "Project" = betterproto.enum_field(1)
    owner_address: str = betterproto.string_field(2)
    contract: "_common__.PerpContract" = betterproto.enum_field(3)
    account_address: str = betterproto.string_field(4)
    position_side: "_common__.PerpPositionSide" = betterproto.enum_field(5)
    slippage: float = betterproto.double_field(6)
    type: "_common__.PerpOrderType" = betterproto.enum_field(7)
    amount: float = betterproto.double_field(8)
    price: float = betterproto.double_field(9)
    client_order_id: int = betterproto.uint64_field(10)
    post_only: "_common__.PostOnlyParams" = betterproto.enum_field(11)


@dataclass(eq=False, repr=False)
class PostPerpOrderResponse(betterproto.Message):
    transaction: "TransactionMessage" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PostDriftPerpOrderRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    contract: str = betterproto.string_field(2)
    account_address: str = betterproto.string_field(3)
    position_side: str = betterproto.string_field(4)
    slippage: float = betterproto.double_field(5)
    type: str = betterproto.string_field(6)
    amount: float = betterproto.double_field(7)
    price: float = betterproto.double_field(8)
    client_order_id: int = betterproto.uint64_field(9)
    post_only: str = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class PostDriftPerpOrderResponse(betterproto.Message):
    transaction: "TransactionMessage" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PostDriftMarginOrderRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    account_address: str = betterproto.string_field(2)
    market: str = betterproto.string_field(3)
    position_side: str = betterproto.string_field(4)
    slippage: float = betterproto.double_field(5)
    type: str = betterproto.string_field(6)
    amount: float = betterproto.double_field(7)
    price: float = betterproto.double_field(8)
    client_order_id: int = betterproto.uint64_field(9)
    post_only: str = betterproto.string_field(10)


@dataclass(eq=False, repr=False)
class PostDriftMarginOrderResponse(betterproto.Message):
    transaction: "TransactionMessage" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PostDriftEnableMarginTradingRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    account_address: str = betterproto.string_field(2)
    enable_margin: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class PostDriftEnableMarginTradingResponse(betterproto.Message):
    transaction: "TransactionMessage" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetPerpTradesStreamRequest(betterproto.Message):
    contracts: List["_common__.PerpContract"] = betterproto.enum_field(1)
    project: "Project" = betterproto.enum_field(2)


@dataclass(eq=False, repr=False)
class GetPerpTradesStreamResponse(betterproto.Message):
    context: "Context" = betterproto.message_field(1)
    trade: "GetPerpTradesResponse" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetPerpTradesResponse(betterproto.Message):
    contract: "_common__.PerpContract" = betterproto.enum_field(1)
    index_price: float = betterproto.double_field(2)
    market_index: int = betterproto.int64_field(3)
    filler: str = betterproto.string_field(4)
    filler_reward: float = betterproto.double_field(5)
    fill_record_id: int = betterproto.int64_field(6)
    base_asset_amount_filled: float = betterproto.double_field(7)
    quote_asset_amount_filled: float = betterproto.double_field(8)
    taker_fee: float = betterproto.double_field(9)
    maker_fee: float = betterproto.double_field(10)
    referrer_reward: float = betterproto.double_field(11)
    quote_asset_amount_surplus: float = betterproto.double_field(12)
    spot_fulfillment_method_fee: float = betterproto.double_field(13)
    taker: str = betterproto.string_field(14)
    taker_order_id: int = betterproto.int64_field(15)
    taker_order_direction: str = betterproto.string_field(16)
    taker_order_base_asset_amount: float = betterproto.double_field(17)
    taker_order_cumulative_base_asset_amount_filled: float = betterproto.double_field(
        18
    )
    taker_order_cumulative_quote_asset_amount_filled: float = betterproto.double_field(
        19
    )
    maker: str = betterproto.string_field(20)
    maker_order_id: int = betterproto.int64_field(21)
    maker_order_direction: str = betterproto.string_field(22)
    maker_order_base_asset_amount: float = betterproto.double_field(23)
    maker_order_cumulative_base_asset_amount_filled: float = betterproto.double_field(
        24
    )
    maker_order_cumulative_quote_asset_amount_filled: float = betterproto.double_field(
        25
    )


@dataclass(eq=False, repr=False)
class PostSettlePnlRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    settlee_account_address: str = betterproto.string_field(2)
    contract: "_common__.PerpContract" = betterproto.enum_field(3)
    project: "Project" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class PostSettlePnlResponse(betterproto.Message):
    transaction: "TransactionMessage" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetAssetsRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    account_address: str = betterproto.string_field(2)
    project: "Project" = betterproto.enum_field(3)


@dataclass(eq=False, repr=False)
class Asset(betterproto.Message):
    valuation_asset: str = betterproto.string_field(1)
    balance: float = betterproto.double_field(2)
    valuation: float = betterproto.double_field(3)
    account_address: str = betterproto.string_field(4)
    sub_account_id: int = betterproto.int64_field(5)


@dataclass(eq=False, repr=False)
class GetAssetsResponse(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    assets: List["Asset"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PostSettlePnLsRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    settlee_account_addresses: List[str] = betterproto.string_field(2)
    contract: "_common__.PerpContract" = betterproto.enum_field(3)
    project: "Project" = betterproto.enum_field(4)


@dataclass(eq=False, repr=False)
class PostSettlePnLsResponse(betterproto.Message):
    transactions: List["TransactionMessage"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PostLiquidatePerpRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    settlee_account_address: str = betterproto.string_field(2)
    contract: "_common__.PerpContract" = betterproto.enum_field(3)
    amount: float = betterproto.double_field(4)
    project: "Project" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class PostLiquidatePerpResponse(betterproto.Message):
    transaction: "TransactionMessage" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetPerpContractsRequest(betterproto.Message):
    project: "Project" = betterproto.enum_field(1)


@dataclass(eq=False, repr=False)
class ContractInfo(betterproto.Message):
    contract: "_common__.PerpContract" = betterproto.enum_field(1)
    contract_address: str = betterproto.string_field(2)
    funding_rate: float = betterproto.double_field(3)
    min_size: float = betterproto.double_field(4)
    perp_price: float = betterproto.double_field(5)
    index_price: float = betterproto.double_field(6)
    open_interest: float = betterproto.double_field(7)


@dataclass(eq=False, repr=False)
class GetPerpContractsResponse(betterproto.Message):
    contracts: List["ContractInfo"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetOpenPerpOrderRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    account_address: str = betterproto.string_field(2)
    order_id: int = betterproto.uint64_field(3)
    client_order_id: int = betterproto.uint64_field(4)
    project: "Project" = betterproto.enum_field(5)


@dataclass(eq=False, repr=False)
class GetOpenPerpOrderResponse(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    order: "PerpOrder" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetDriftOpenMarginOrderRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    account_address: str = betterproto.string_field(2)
    order_id: int = betterproto.uint64_field(3)
    client_order_id: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class GetDriftOpenMarginOrderResponse(betterproto.Message):
    context: "Context" = betterproto.message_field(1)
    owner_address: str = betterproto.string_field(2)
    order: "DriftMarginOrder" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetDriftOpenPerpOrderRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    account_address: str = betterproto.string_field(2)
    order_id: int = betterproto.uint64_field(3)
    client_order_id: int = betterproto.uint64_field(4)


@dataclass(eq=False, repr=False)
class GetDriftOpenPerpOrderResponse(betterproto.Message):
    context: "Context" = betterproto.message_field(1)
    owner_address: str = betterproto.string_field(2)
    order: "DriftPerpOrder" = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class PostDriftManageCollateralRequest(betterproto.Message):
    account_address: str = betterproto.string_field(1)
    amount: float = betterproto.double_field(2)
    type: str = betterproto.string_field(3)
    token: str = betterproto.string_field(4)
    to_account_address: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class PostDriftManageCollateralResponse(betterproto.Message):
    transaction: "TransactionMessage" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetDriftPerpContractsRequest(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class GetDriftPerpContractsResponse(betterproto.Message):
    context: "Context" = betterproto.message_field(1)
    contracts: List["ContractInfo"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class PostDriftSettlePnlRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    settlee_account_address: str = betterproto.string_field(2)
    contract: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class PostDriftSettlePnlResponse(betterproto.Message):
    transaction: "TransactionMessage" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class GetDriftAssetsRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    account_address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetDriftAssetsResponse(betterproto.Message):
    context: "Context" = betterproto.message_field(1)
    owner_address: str = betterproto.string_field(2)
    assets: List["Asset"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class PostDriftSettlePnLsRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    settlee_account_addresses: List[str] = betterproto.string_field(2)
    contract: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class PostDriftSettlePnLsResponse(betterproto.Message):
    transactions: List["TransactionMessage"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PostLiquidateDriftPerpRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    settlee_account_address: str = betterproto.string_field(2)
    contract: str = betterproto.string_field(3)
    amount: float = betterproto.double_field(4)


@dataclass(eq=False, repr=False)
class PostLiquidateDriftPerpResponse(betterproto.Message):
    transaction: "TransactionMessage" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Context(betterproto.Message):
    """Drift V2"""

    slot: int = betterproto.uint64_field(1)


@dataclass(eq=False, repr=False)
class GetDriftOpenPerpOrdersRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    account_address: str = betterproto.string_field(2)
    contracts: List[str] = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetDriftOpenPerpOrdersValue(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    orders: List["DriftPerpOrder"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetDriftOpenPerpOrdersResponse(betterproto.Message):
    context: "Context" = betterproto.message_field(1)
    data: "GetDriftOpenPerpOrdersValue" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DriftPerpOrder(betterproto.Message):
    order_id: int = betterproto.uint64_field(1)
    client_order_id: int = betterproto.uint64_field(2)
    contract: str = betterproto.string_field(3)
    position_side: str = betterproto.string_field(4)
    order_type: str = betterproto.string_field(5)
    price: float = betterproto.double_field(6)
    size: float = betterproto.double_field(7)
    remaining_size: float = betterproto.double_field(8)
    status: str = betterproto.string_field(9)
    account_address: str = betterproto.string_field(10)
    sub_account_id: int = betterproto.uint64_field(11)
    post_only: bool = betterproto.bool_field(12)


@dataclass(eq=False, repr=False)
class PostDriftCancelPerpOrderRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    account_address: str = betterproto.string_field(2)
    contract: str = betterproto.string_field(3)
    client_order_id: int = betterproto.uint64_field(4)
    order_id: int = betterproto.uint64_field(5)


@dataclass(eq=False, repr=False)
class PostDriftCancelPerpOrderValue(betterproto.Message):
    transactions: List["TransactionMessage"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PostDriftCancelPerpOrderResponse(betterproto.Message):
    context: "Context" = betterproto.message_field(1)
    data: "PostDriftCancelPerpOrderValue" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetDriftPerpPositionsRequest(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    account_address: str = betterproto.string_field(2)
    contracts: List[str] = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetDriftPerpPositionsValue(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    perp_positions: List["DriftPerpPosition"] = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetDriftPerpPositionsResponse(betterproto.Message):
    context: "Context" = betterproto.message_field(1)
    data: "GetDriftPerpPositionsValue" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DriftPerpPosition(betterproto.Message):
    contract: str = betterproto.string_field(1)
    account_address: str = betterproto.string_field(2)
    sub_account_id: int = betterproto.int64_field(3)
    volume_available: float = betterproto.double_field(4)
    volume_in_order: float = betterproto.double_field(5)
    position_margin: float = betterproto.double_field(6)
    position_side: str = betterproto.string_field(7)
    notional_value: float = betterproto.double_field(8)
    index_price: float = betterproto.double_field(9)
    liquidation_price: float = betterproto.double_field(10)
    unrealized_pnl: float = betterproto.double_field(11)


@dataclass(eq=False, repr=False)
class GetDriftMarginOrderbooksRequest(betterproto.Message):
    markets: List[str] = betterproto.string_field(1)
    limit: int = betterproto.uint32_field(2)
    metadata: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class GetDriftMarginOrderbooksStreamResponse(betterproto.Message):
    context: "Context" = betterproto.message_field(1)
    orderbook: "GetDriftMarginOrderbookResponse" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetDriftMarginOrderbookRequest(betterproto.Message):
    market: str = betterproto.string_field(1)
    limit: int = betterproto.uint32_field(2)
    metadata: bool = betterproto.bool_field(3)


@dataclass(eq=False, repr=False)
class GetDriftMarginOrderbookValue(betterproto.Message):
    market: str = betterproto.string_field(1)
    market_address: str = betterproto.string_field(2)
    bids: List["DriftMarginOrderbookItem"] = betterproto.message_field(3)
    asks: List["DriftMarginOrderbookItem"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class GetDriftMarginOrderbookResponse(betterproto.Message):
    context: "Context" = betterproto.message_field(1)
    data: "GetDriftMarginOrderbookValue" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DriftMarginOrderbookItem(betterproto.Message):
    price: float = betterproto.double_field(1)
    size: float = betterproto.double_field(2)
    order_id: str = betterproto.string_field(3)
    client_order_id: int = betterproto.uint64_field(4)
    owner_address: str = betterproto.string_field(5)
    metadata: Dict[str, str] = betterproto.map_field(
        6, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class GetDriftMarketsRequest(betterproto.Message):
    metadata: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class GetDriftMarketsValue(betterproto.Message):
    markets: Dict[str, "DriftMarket"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class GetDriftMarketsResponse(betterproto.Message):
    context: "Context" = betterproto.message_field(1)
    data: "GetDriftMarketsValue" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DriftMarket(betterproto.Message):
    market: str = betterproto.string_field(1)
    status: str = betterproto.string_field(2)
    address: str = betterproto.string_field(3)
    base_mint: str = betterproto.string_field(4)
    quoted_mint: str = betterproto.string_field(5)
    base_decimals: int = betterproto.int64_field(6)
    quote_decimals: int = betterproto.int64_field(7)
    metadata: Dict[str, str] = betterproto.map_field(
        8, betterproto.TYPE_STRING, betterproto.TYPE_STRING
    )


@dataclass(eq=False, repr=False)
class GetDriftMarketDepthRequest(betterproto.Message):
    contract: str = betterproto.string_field(1)
    limit: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetDriftMarketDepthsStreamRequest(betterproto.Message):
    contracts: List[str] = betterproto.string_field(1)
    limit: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetDriftMarketDepthStreamResponse(betterproto.Message):
    context: "Context" = betterproto.message_field(1)
    data: "GetDriftMarketDepthResponse" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DriftMarketDepthItem(betterproto.Message):
    price: float = betterproto.double_field(1)
    size: float = betterproto.double_field(2)


@dataclass(eq=False, repr=False)
class GetDriftMarketDepthValue(betterproto.Message):
    contract: str = betterproto.string_field(1)
    bids: List["DriftMarketDepthItem"] = betterproto.message_field(2)
    asks: List["DriftMarketDepthItem"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class GetDriftMarketDepthResponse(betterproto.Message):
    context: "Context" = betterproto.message_field(1)
    data: "GetDriftMarketDepthValue" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class GetMarketsRequestV2(betterproto.Message):
    """Openbook V2 Messages"""

    pass


@dataclass(eq=False, repr=False)
class GetMarketsResponseV2(betterproto.Message):
    markets: Dict[str, "MarketV2"] = betterproto.map_field(
        1, betterproto.TYPE_STRING, betterproto.TYPE_MESSAGE
    )


@dataclass(eq=False, repr=False)
class MarketV2(betterproto.Message):
    market: str = betterproto.string_field(1)
    address: str = betterproto.string_field(3)
    base_mint: str = betterproto.string_field(4)
    quoted_mint: str = betterproto.string_field(5)
    base_decimals: int = betterproto.int64_field(6)
    quote_decimals: int = betterproto.int64_field(7)


@dataclass(eq=False, repr=False)
class GetTickersRequestV2(betterproto.Message):
    market: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetTickersResponseV2(betterproto.Message):
    tickers: List["TickerV2"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TickerV2(betterproto.Message):
    market: str = betterproto.string_field(1)
    market_address: str = betterproto.string_field(2)
    bid: float = betterproto.double_field(3)
    bid_size: float = betterproto.double_field(4)
    ask: float = betterproto.double_field(5)
    ask_size: float = betterproto.double_field(6)


@dataclass(eq=False, repr=False)
class GetOrderbookRequestV2(betterproto.Message):
    market: str = betterproto.string_field(1)
    limit: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetOrderbookResponseV2(betterproto.Message):
    market: str = betterproto.string_field(1)
    market_address: str = betterproto.string_field(2)
    bids: List["OrderbookItemV2"] = betterproto.message_field(3)
    asks: List["OrderbookItemV2"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class OrderbookItemV2(betterproto.Message):
    price: float = betterproto.double_field(1)
    size: float = betterproto.double_field(2)
    order_id: str = betterproto.string_field(3)
    client_order_id: int = betterproto.uint64_field(4)
    owner_address: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class GetMarketDepthRequestV2(betterproto.Message):
    market: str = betterproto.string_field(1)
    limit: int = betterproto.uint32_field(2)


@dataclass(eq=False, repr=False)
class GetMarketDepthResponseV2(betterproto.Message):
    market: str = betterproto.string_field(1)
    market_address: str = betterproto.string_field(2)
    bids: List["MarketDepthItemV2"] = betterproto.message_field(3)
    asks: List["MarketDepthItemV2"] = betterproto.message_field(4)


@dataclass(eq=False, repr=False)
class MarketDepthItemV2(betterproto.Message):
    price: float = betterproto.double_field(1)
    size: float = betterproto.double_field(2)


@dataclass(eq=False, repr=False)
class PostOrderRequestV2(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    payer_address: str = betterproto.string_field(2)
    market: str = betterproto.string_field(3)
    side: str = betterproto.string_field(4)
    type: str = betterproto.string_field(5)
    amount: float = betterproto.double_field(6)
    price: float = betterproto.double_field(7)
    open_orders_address: str = betterproto.string_field(8)
    client_order_id: int = betterproto.uint64_field(9)
    compute_limit: int = betterproto.uint32_field(10)
    compute_price: int = betterproto.uint64_field(11)


@dataclass(eq=False, repr=False)
class PostReplaceOrderRequestV2(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    payer_address: str = betterproto.string_field(2)
    market: str = betterproto.string_field(3)
    side: str = betterproto.string_field(4)
    type: str = betterproto.string_field(5)
    amount: float = betterproto.double_field(6)
    price: float = betterproto.double_field(7)
    open_orders_address: str = betterproto.string_field(8)
    client_order_id: int = betterproto.uint64_field(9)
    order_id: str = betterproto.string_field(10)
    compute_limit: int = betterproto.uint32_field(11)
    compute_price: int = betterproto.uint64_field(12)


@dataclass(eq=False, repr=False)
class PostCancelOrderRequestV2(betterproto.Message):
    order_id: str = betterproto.string_field(1)
    side: str = betterproto.string_field(2)
    market_address: str = betterproto.string_field(3)
    owner_address: str = betterproto.string_field(4)
    open_orders_address: str = betterproto.string_field(5)
    client_order_id: int = betterproto.uint64_field(6)
    compute_limit: int = betterproto.uint32_field(7)
    compute_price: int = betterproto.uint64_field(8)


@dataclass(eq=False, repr=False)
class PostCancelOrderResponseV2(betterproto.Message):
    transactions: List["TransactionMessage"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class PostSettleRequestV2(betterproto.Message):
    owner_address: str = betterproto.string_field(1)
    market: str = betterproto.string_field(2)
    base_token_wallet: str = betterproto.string_field(3)
    quote_token_wallet: str = betterproto.string_field(4)
    open_orders_address: str = betterproto.string_field(5)
    compute_limit: int = betterproto.uint32_field(6)
    compute_price: int = betterproto.uint64_field(7)


@dataclass(eq=False, repr=False)
class GetOpenOrdersRequestV2(betterproto.Message):
    market: str = betterproto.string_field(1)
    limit: int = betterproto.uint32_field(2)
    address: str = betterproto.string_field(3)
    open_orders_address: str = betterproto.string_field(4)
    order_id: str = betterproto.string_field(5)
    client_order_id: int = betterproto.uint64_field(6)


@dataclass(eq=False, repr=False)
class GetUnsettledRequestV2(betterproto.Message):
    market: str = betterproto.string_field(1)
    owner_address: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class GetOpenOrdersResponseV2(betterproto.Message):
    orders: List["OrderV2"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class OrderV2(betterproto.Message):
    order_id: str = betterproto.string_field(1)
    market: str = betterproto.string_field(2)
    side: str = betterproto.string_field(3)
    type: str = betterproto.string_field(4)
    price: float = betterproto.double_field(5)
    remaining_size: float = betterproto.double_field(6)
    created_at: datetime = betterproto.message_field(7)
    client_order_id: str = betterproto.string_field(8)
    open_order_account: str = betterproto.string_field(9)


class ApiStub(betterproto.ServiceStub):
    async def get_transaction(
        self,
        get_transaction_request: "GetTransactionRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTransactionResponse":
        return await self._unary_unary(
            "/api.Api/GetTransaction",
            get_transaction_request,
            GetTransactionResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_submit_v2(
        self,
        post_submit_request: "PostSubmitRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostSubmitResponse":
        return await self._unary_unary(
            "/api.Api/PostSubmitV2",
            post_submit_request,
            PostSubmitResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_submit_batch_v2(
        self,
        post_submit_batch_request: "PostSubmitBatchRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostSubmitBatchResponse":
        return await self._unary_unary(
            "/api.Api/PostSubmitBatchV2",
            post_submit_batch_request,
            PostSubmitBatchResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_raydium_pools(
        self,
        get_raydium_pools_request: "GetRaydiumPoolsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetRaydiumPoolsResponse":
        return await self._unary_unary(
            "/api.Api/GetRaydiumPools",
            get_raydium_pools_request,
            GetRaydiumPoolsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_raydium_quotes(
        self,
        get_raydium_quotes_request: "GetRaydiumQuotesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetRaydiumQuotesResponse":
        return await self._unary_unary(
            "/api.Api/GetRaydiumQuotes",
            get_raydium_quotes_request,
            GetRaydiumQuotesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_raydium_prices(
        self,
        get_raydium_prices_request: "GetRaydiumPricesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetRaydiumPricesResponse":
        return await self._unary_unary(
            "/api.Api/GetRaydiumPrices",
            get_raydium_prices_request,
            GetRaydiumPricesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_raydium_swap(
        self,
        post_raydium_swap_request: "PostRaydiumSwapRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostRaydiumSwapResponse":
        return await self._unary_unary(
            "/api.Api/PostRaydiumSwap",
            post_raydium_swap_request,
            PostRaydiumSwapResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_raydium_route_swap(
        self,
        post_raydium_route_swap_request: "PostRaydiumRouteSwapRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostRaydiumRouteSwapResponse":
        return await self._unary_unary(
            "/api.Api/PostRaydiumRouteSwap",
            post_raydium_route_swap_request,
            PostRaydiumRouteSwapResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_jupiter_quotes(
        self,
        get_jupiter_quotes_request: "GetJupiterQuotesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetJupiterQuotesResponse":
        return await self._unary_unary(
            "/api.Api/GetJupiterQuotes",
            get_jupiter_quotes_request,
            GetJupiterQuotesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_jupiter_prices(
        self,
        get_jupiter_prices_request: "GetJupiterPricesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetJupiterPricesResponse":
        return await self._unary_unary(
            "/api.Api/GetJupiterPrices",
            get_jupiter_prices_request,
            GetJupiterPricesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_jupiter_swap(
        self,
        post_jupiter_swap_request: "PostJupiterSwapRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostJupiterSwapResponse":
        return await self._unary_unary(
            "/api.Api/PostJupiterSwap",
            post_jupiter_swap_request,
            PostJupiterSwapResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_jupiter_route_swap(
        self,
        post_jupiter_route_swap_request: "PostJupiterRouteSwapRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostJupiterRouteSwapResponse":
        return await self._unary_unary(
            "/api.Api/PostJupiterRouteSwap",
            post_jupiter_route_swap_request,
            PostJupiterRouteSwapResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_close_drift_perp_positions(
        self,
        post_close_drift_perp_positions_request: "PostCloseDriftPerpPositionsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostCloseDriftPerpPositionsResponse":
        return await self._unary_unary(
            "/api.Api/PostCloseDriftPerpPositions",
            post_close_drift_perp_positions_request,
            PostCloseDriftPerpPositionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_drift_perp_orderbook(
        self,
        get_drift_perp_orderbook_request: "GetDriftPerpOrderbookRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDriftPerpOrderbookResponse":
        return await self._unary_unary(
            "/api.Api/GetDriftPerpOrderbook",
            get_drift_perp_orderbook_request,
            GetDriftPerpOrderbookResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_create_drift_user(
        self,
        post_create_drift_user_request: "PostCreateDriftUserRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostCreateDriftUserResponse":
        return await self._unary_unary(
            "/api.Api/PostCreateDriftUser",
            post_create_drift_user_request,
            PostCreateDriftUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_drift_user(
        self,
        get_drift_user_request: "GetDriftUserRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDriftUserResponse":
        return await self._unary_unary(
            "/api.Api/GetDriftUser",
            get_drift_user_request,
            GetDriftUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_drift_manage_collateral(
        self,
        post_drift_manage_collateral_request: "PostDriftManageCollateralRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostDriftManageCollateralResponse":
        return await self._unary_unary(
            "/api.Api/PostDriftManageCollateral",
            post_drift_manage_collateral_request,
            PostDriftManageCollateralResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_drift_perp_order(
        self,
        post_drift_perp_order_request: "PostDriftPerpOrderRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostDriftPerpOrderResponse":
        return await self._unary_unary(
            "/api.Api/PostDriftPerpOrder",
            post_drift_perp_order_request,
            PostDriftPerpOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_drift_settle_pnl(
        self,
        post_drift_settle_pnl_request: "PostDriftSettlePnlRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostDriftSettlePnlResponse":
        return await self._unary_unary(
            "/api.Api/PostDriftSettlePNL",
            post_drift_settle_pnl_request,
            PostDriftSettlePnlResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_drift_settle_pn_ls(
        self,
        post_drift_settle_pn_ls_request: "PostDriftSettlePnLsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostDriftSettlePnLsResponse":
        return await self._unary_unary(
            "/api.Api/PostDriftSettlePNLs",
            post_drift_settle_pn_ls_request,
            PostDriftSettlePnLsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_drift_assets(
        self,
        get_drift_assets_request: "GetDriftAssetsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDriftAssetsResponse":
        return await self._unary_unary(
            "/api.Api/GetDriftAssets",
            get_drift_assets_request,
            GetDriftAssetsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_drift_perp_contracts(
        self,
        get_drift_perp_contracts_request: "GetDriftPerpContractsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDriftPerpContractsResponse":
        return await self._unary_unary(
            "/api.Api/GetDriftPerpContracts",
            get_drift_perp_contracts_request,
            GetDriftPerpContractsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_liquidate_drift_perp(
        self,
        post_liquidate_drift_perp_request: "PostLiquidateDriftPerpRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostLiquidateDriftPerpResponse":
        return await self._unary_unary(
            "/api.Api/PostLiquidateDriftPerp",
            post_liquidate_drift_perp_request,
            PostLiquidateDriftPerpResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_drift_open_perp_order(
        self,
        get_drift_open_perp_order_request: "GetDriftOpenPerpOrderRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDriftOpenPerpOrderResponse":
        return await self._unary_unary(
            "/api.Api/GetDriftOpenPerpOrder",
            get_drift_open_perp_order_request,
            GetDriftOpenPerpOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_drift_open_margin_order(
        self,
        get_drift_open_margin_order_request: "GetDriftOpenMarginOrderRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDriftOpenMarginOrderResponse":
        return await self._unary_unary(
            "/api.Api/GetDriftOpenMarginOrder",
            get_drift_open_margin_order_request,
            GetDriftOpenMarginOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_drift_perp_positions(
        self,
        get_drift_perp_positions_request: "GetDriftPerpPositionsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDriftPerpPositionsResponse":
        return await self._unary_unary(
            "/api.Api/GetDriftPerpPositions",
            get_drift_perp_positions_request,
            GetDriftPerpPositionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_drift_open_perp_orders(
        self,
        get_drift_open_perp_orders_request: "GetDriftOpenPerpOrdersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDriftOpenPerpOrdersResponse":
        return await self._unary_unary(
            "/api.Api/GetDriftOpenPerpOrders",
            get_drift_open_perp_orders_request,
            GetDriftOpenPerpOrdersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_drift_cancel_perp_order(
        self,
        post_drift_cancel_perp_order_request: "PostDriftCancelPerpOrderRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostDriftCancelPerpOrderResponse":
        return await self._unary_unary(
            "/api.Api/PostDriftCancelPerpOrder",
            post_drift_cancel_perp_order_request,
            PostDriftCancelPerpOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_modify_drift_order(
        self,
        post_modify_drift_order_request: "PostModifyDriftOrderRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostModifyDriftOrderResponse":
        return await self._unary_unary(
            "/api.Api/PostModifyDriftOrder",
            post_modify_drift_order_request,
            PostModifyDriftOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_cancel_drift_margin_order(
        self,
        post_cancel_drift_margin_order_request: "PostCancelDriftMarginOrderRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostCancelDriftMarginOrderResponse":
        return await self._unary_unary(
            "/api.Api/PostCancelDriftMarginOrder",
            post_cancel_drift_margin_order_request,
            PostCancelDriftMarginOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_drift_open_margin_orders(
        self,
        get_drift_open_margin_orders_request: "GetDriftOpenMarginOrdersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDriftOpenMarginOrdersResponse":
        return await self._unary_unary(
            "/api.Api/GetDriftOpenMarginOrders",
            get_drift_open_margin_orders_request,
            GetDriftOpenMarginOrdersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_drift_markets(
        self,
        get_drift_markets_request: "GetDriftMarketsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDriftMarketsResponse":
        return await self._unary_unary(
            "/api.Api/GetDriftMarkets",
            get_drift_markets_request,
            GetDriftMarketsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_drift_margin_order(
        self,
        post_drift_margin_order_request: "PostDriftMarginOrderRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostDriftMarginOrderResponse":
        return await self._unary_unary(
            "/api.Api/PostDriftMarginOrder",
            post_drift_margin_order_request,
            PostDriftMarginOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_drift_enable_margin_trading(
        self,
        post_drift_enable_margin_trading_request: "PostDriftEnableMarginTradingRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostDriftEnableMarginTradingResponse":
        return await self._unary_unary(
            "/api.Api/PostDriftEnableMarginTrading",
            post_drift_enable_margin_trading_request,
            PostDriftEnableMarginTradingResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_drift_margin_orderbook(
        self,
        get_drift_margin_orderbook_request: "GetDriftMarginOrderbookRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDriftMarginOrderbookResponse":
        return await self._unary_unary(
            "/api.Api/GetDriftMarginOrderbook",
            get_drift_margin_orderbook_request,
            GetDriftMarginOrderbookResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_drift_market_depth(
        self,
        get_drift_market_depth_request: "GetDriftMarketDepthRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDriftMarketDepthResponse":
        return await self._unary_unary(
            "/api.Api/GetDriftMarketDepth",
            get_drift_market_depth_request,
            GetDriftMarketDepthResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_drift_margin_orderbooks_stream(
        self,
        get_drift_margin_orderbooks_request: "GetDriftMarginOrderbooksRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["GetDriftMarginOrderbooksStreamResponse"]:
        async for response in self._unary_stream(
            "/api.Api/GetDriftMarginOrderbooksStream",
            get_drift_margin_orderbooks_request,
            GetDriftMarginOrderbooksStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_drift_market_depths_stream(
        self,
        get_drift_market_depths_stream_request: "GetDriftMarketDepthsStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["GetDriftMarketDepthStreamResponse"]:
        async for response in self._unary_stream(
            "/api.Api/GetDriftMarketDepthsStream",
            get_drift_market_depths_stream_request,
            GetDriftMarketDepthStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_markets_v2(
        self,
        get_markets_request_v2: "GetMarketsRequestV2",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetMarketsResponseV2":
        return await self._unary_unary(
            "/api.Api/GetMarketsV2",
            get_markets_request_v2,
            GetMarketsResponseV2,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_tickers_v2(
        self,
        get_tickers_request_v2: "GetTickersRequestV2",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTickersResponseV2":
        return await self._unary_unary(
            "/api.Api/GetTickersV2",
            get_tickers_request_v2,
            GetTickersResponseV2,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_orderbook_v2(
        self,
        get_orderbook_request_v2: "GetOrderbookRequestV2",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetOrderbookResponseV2":
        return await self._unary_unary(
            "/api.Api/GetOrderbookV2",
            get_orderbook_request_v2,
            GetOrderbookResponseV2,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_market_depth_v2(
        self,
        get_market_depth_request_v2: "GetMarketDepthRequestV2",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetMarketDepthResponseV2":
        return await self._unary_unary(
            "/api.Api/GetMarketDepthV2",
            get_market_depth_request_v2,
            GetMarketDepthResponseV2,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_order_v2(
        self,
        post_order_request_v2: "PostOrderRequestV2",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostOrderResponse":
        return await self._unary_unary(
            "/api.Api/PostOrderV2",
            post_order_request_v2,
            PostOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_cancel_order_v2(
        self,
        post_cancel_order_request_v2: "PostCancelOrderRequestV2",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostCancelOrderResponseV2":
        return await self._unary_unary(
            "/api.Api/PostCancelOrderV2",
            post_cancel_order_request_v2,
            PostCancelOrderResponseV2,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_replace_order_v2(
        self,
        post_replace_order_request_v2: "PostReplaceOrderRequestV2",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostOrderResponse":
        return await self._unary_unary(
            "/api.Api/PostReplaceOrderV2",
            post_replace_order_request_v2,
            PostOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_settle_v2(
        self,
        post_settle_request_v2: "PostSettleRequestV2",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostSettleResponse":
        return await self._unary_unary(
            "/api.Api/PostSettleV2",
            post_settle_request_v2,
            PostSettleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_open_orders_v2(
        self,
        get_open_orders_request_v2: "GetOpenOrdersRequestV2",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetOpenOrdersResponseV2":
        return await self._unary_unary(
            "/api.Api/GetOpenOrdersV2",
            get_open_orders_request_v2,
            GetOpenOrdersResponseV2,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_unsettled_v2(
        self,
        get_unsettled_request_v2: "GetUnsettledRequestV2",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetUnsettledResponse":
        return await self._unary_unary(
            "/api.Api/GetUnsettledV2",
            get_unsettled_request_v2,
            GetUnsettledResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_price(
        self,
        get_price_request: "GetPriceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetPriceResponse":
        return await self._unary_unary(
            "/api.Api/GetPrice",
            get_price_request,
            GetPriceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_markets(
        self,
        get_markets_request: "GetMarketsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetMarketsResponse":
        return await self._unary_unary(
            "/api.Api/GetMarkets",
            get_markets_request,
            GetMarketsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_pools(
        self,
        get_pools_request: "GetPoolsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetPoolsResponse":
        return await self._unary_unary(
            "/api.Api/GetPools",
            get_pools_request,
            GetPoolsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_tickers(
        self,
        get_tickers_request: "GetTickersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTickersResponse":
        return await self._unary_unary(
            "/api.Api/GetTickers",
            get_tickers_request,
            GetTickersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_kline(
        self,
        get_kline_request: "GetKlineRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetKlineResponse":
        return await self._unary_unary(
            "/api.Api/GetKline",
            get_kline_request,
            GetKlineResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_orderbook(
        self,
        get_orderbook_request: "GetOrderbookRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetOrderbookResponse":
        return await self._unary_unary(
            "/api.Api/GetOrderbook",
            get_orderbook_request,
            GetOrderbookResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_market_depth(
        self,
        get_market_depth_request: "GetMarketDepthRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetMarketDepthResponse":
        return await self._unary_unary(
            "/api.Api/GetMarketDepth",
            get_market_depth_request,
            GetMarketDepthResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_trades(
        self,
        get_trades_request: "GetTradesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTradesResponse":
        return await self._unary_unary(
            "/api.Api/GetTrades",
            get_trades_request,
            GetTradesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_quotes(
        self,
        get_quotes_request: "GetQuotesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetQuotesResponse":
        return await self._unary_unary(
            "/api.Api/GetQuotes",
            get_quotes_request,
            GetQuotesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_server_time(
        self,
        get_server_time_request: "GetServerTimeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetServerTimeResponse":
        return await self._unary_unary(
            "/api.Api/GetServerTime",
            get_server_time_request,
            GetServerTimeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_recent_block_hash(
        self,
        get_recent_block_hash_request: "GetRecentBlockHashRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetRecentBlockHashResponse":
        return await self._unary_unary(
            "/api.Api/GetRecentBlockHash",
            get_recent_block_hash_request,
            GetRecentBlockHashResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_account_balance(
        self,
        get_account_balance_request: "GetAccountBalanceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetAccountBalanceResponse":
        return await self._unary_unary(
            "/api.Api/GetAccountBalance",
            get_account_balance_request,
            GetAccountBalanceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_token_accounts(
        self,
        get_token_accounts_request: "GetTokenAccountsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTokenAccountsResponse":
        return await self._unary_unary(
            "/api.Api/GetTokenAccounts",
            get_token_accounts_request,
            GetTokenAccountsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_order(
        self,
        post_order_request: "PostOrderRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostOrderResponse":
        return await self._unary_unary(
            "/api.Api/PostOrder",
            post_order_request,
            PostOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_submit(
        self,
        post_submit_request: "PostSubmitRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostSubmitResponse":
        return await self._unary_unary(
            "/api.Api/PostSubmit",
            post_submit_request,
            PostSubmitResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_submit_batch(
        self,
        post_submit_batch_request: "PostSubmitBatchRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostSubmitBatchResponse":
        return await self._unary_unary(
            "/api.Api/PostSubmitBatch",
            post_submit_batch_request,
            PostSubmitBatchResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_cancel_order(
        self,
        post_cancel_order_request: "PostCancelOrderRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostCancelOrderResponse":
        return await self._unary_unary(
            "/api.Api/PostCancelOrder",
            post_cancel_order_request,
            PostCancelOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_cancel_by_client_order_id(
        self,
        post_cancel_by_client_order_id_request: "PostCancelByClientOrderIdRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostCancelOrderResponse":
        return await self._unary_unary(
            "/api.Api/PostCancelByClientOrderID",
            post_cancel_by_client_order_id_request,
            PostCancelOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_cancel_all(
        self,
        post_cancel_all_request: "PostCancelAllRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostCancelAllResponse":
        return await self._unary_unary(
            "/api.Api/PostCancelAll",
            post_cancel_all_request,
            PostCancelAllResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_replace_by_client_order_id(
        self,
        post_order_request: "PostOrderRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostOrderResponse":
        return await self._unary_unary(
            "/api.Api/PostReplaceByClientOrderID",
            post_order_request,
            PostOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_replace_order(
        self,
        post_replace_order_request: "PostReplaceOrderRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostOrderResponse":
        return await self._unary_unary(
            "/api.Api/PostReplaceOrder",
            post_replace_order_request,
            PostOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_settle(
        self,
        post_settle_request: "PostSettleRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostSettleResponse":
        return await self._unary_unary(
            "/api.Api/PostSettle",
            post_settle_request,
            PostSettleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_trade_swap(
        self,
        trade_swap_request: "TradeSwapRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TradeSwapResponse":
        return await self._unary_unary(
            "/api.Api/PostTradeSwap",
            trade_swap_request,
            TradeSwapResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_orders(
        self,
        get_orders_request: "GetOrdersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetOrdersResponse":
        return await self._unary_unary(
            "/api.Api/GetOrders",
            get_orders_request,
            GetOrdersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_open_orders(
        self,
        get_open_orders_request: "GetOpenOrdersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetOpenOrdersResponse":
        return await self._unary_unary(
            "/api.Api/GetOpenOrders",
            get_open_orders_request,
            GetOpenOrdersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_order_by_id(
        self,
        get_order_by_id_request: "GetOrderByIdRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetOrderByIdResponse":
        return await self._unary_unary(
            "/api.Api/GetOrderByID",
            get_order_by_id_request,
            GetOrderByIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_unsettled(
        self,
        get_unsettled_request: "GetUnsettledRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetUnsettledResponse":
        return await self._unary_unary(
            "/api.Api/GetUnsettled",
            get_unsettled_request,
            GetUnsettledResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_route_trade_swap(
        self,
        route_trade_swap_request: "RouteTradeSwapRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "TradeSwapResponse":
        return await self._unary_unary(
            "/api.Api/PostRouteTradeSwap",
            route_trade_swap_request,
            TradeSwapResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_perp_order(
        self,
        post_perp_order_request: "PostPerpOrderRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostPerpOrderResponse":
        return await self._unary_unary(
            "/api.Api/PostPerpOrder",
            post_perp_order_request,
            PostPerpOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_perp_positions(
        self,
        get_perp_positions_request: "GetPerpPositionsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetPerpPositionsResponse":
        return await self._unary_unary(
            "/api.Api/GetPerpPositions",
            get_perp_positions_request,
            GetPerpPositionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_open_perp_orders(
        self,
        get_open_perp_orders_request: "GetOpenPerpOrdersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetOpenPerpOrdersResponse":
        return await self._unary_unary(
            "/api.Api/GetOpenPerpOrders",
            get_open_perp_orders_request,
            GetOpenPerpOrdersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_cancel_perp_orders(
        self,
        post_cancel_perp_orders_request: "PostCancelPerpOrdersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostCancelPerpOrdersResponse":
        return await self._unary_unary(
            "/api.Api/PostCancelPerpOrders",
            post_cancel_perp_orders_request,
            PostCancelPerpOrdersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_cancel_perp_order(
        self,
        post_cancel_perp_order_request: "PostCancelPerpOrderRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostCancelPerpOrderResponse":
        return await self._unary_unary(
            "/api.Api/PostCancelPerpOrder",
            post_cancel_perp_order_request,
            PostCancelPerpOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_close_perp_positions(
        self,
        post_close_perp_positions_request: "PostClosePerpPositionsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostClosePerpPositionsResponse":
        return await self._unary_unary(
            "/api.Api/PostClosePerpPositions",
            post_close_perp_positions_request,
            PostClosePerpPositionsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_perp_orderbook(
        self,
        get_perp_orderbook_request: "GetPerpOrderbookRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetPerpOrderbookResponse":
        return await self._unary_unary(
            "/api.Api/GetPerpOrderbook",
            get_perp_orderbook_request,
            GetPerpOrderbookResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_create_user(
        self,
        post_create_user_request: "PostCreateUserRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostCreateUserResponse":
        return await self._unary_unary(
            "/api.Api/PostCreateUser",
            post_create_user_request,
            PostCreateUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_user(
        self,
        get_user_request: "GetUserRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetUserResponse":
        return await self._unary_unary(
            "/api.Api/GetUser",
            get_user_request,
            GetUserResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_manage_collateral(
        self,
        post_manage_collateral_request: "PostManageCollateralRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostManageCollateralResponse":
        return await self._unary_unary(
            "/api.Api/PostManageCollateral",
            post_manage_collateral_request,
            PostManageCollateralResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_settle_pnl(
        self,
        post_settle_pnl_request: "PostSettlePnlRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostSettlePnlResponse":
        return await self._unary_unary(
            "/api.Api/PostSettlePNL",
            post_settle_pnl_request,
            PostSettlePnlResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_settle_pn_ls(
        self,
        post_settle_pn_ls_request: "PostSettlePnLsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostSettlePnLsResponse":
        return await self._unary_unary(
            "/api.Api/PostSettlePNLs",
            post_settle_pn_ls_request,
            PostSettlePnLsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_assets(
        self,
        get_assets_request: "GetAssetsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetAssetsResponse":
        return await self._unary_unary(
            "/api.Api/GetAssets",
            get_assets_request,
            GetAssetsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_perp_contracts(
        self,
        get_perp_contracts_request: "GetPerpContractsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetPerpContractsResponse":
        return await self._unary_unary(
            "/api.Api/GetPerpContracts",
            get_perp_contracts_request,
            GetPerpContractsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def post_liquidate_perp(
        self,
        post_liquidate_perp_request: "PostLiquidatePerpRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "PostLiquidatePerpResponse":
        return await self._unary_unary(
            "/api.Api/PostLiquidatePerp",
            post_liquidate_perp_request,
            PostLiquidatePerpResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_open_perp_order(
        self,
        get_open_perp_order_request: "GetOpenPerpOrderRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetOpenPerpOrderResponse":
        return await self._unary_unary(
            "/api.Api/GetOpenPerpOrder",
            get_open_perp_order_request,
            GetOpenPerpOrderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_orderbooks_stream(
        self,
        get_orderbooks_request: "GetOrderbooksRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["GetOrderbooksStreamResponse"]:
        async for response in self._unary_stream(
            "/api.Api/GetOrderbooksStream",
            get_orderbooks_request,
            GetOrderbooksStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_market_depths_stream(
        self,
        get_market_depths_request: "GetMarketDepthsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["GetMarketDepthsStreamResponse"]:
        async for response in self._unary_stream(
            "/api.Api/GetMarketDepthsStream",
            get_market_depths_request,
            GetMarketDepthsStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_tickers_stream(
        self,
        get_tickers_request: "GetTickersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["GetTickersStreamResponse"]:
        async for response in self._unary_stream(
            "/api.Api/GetTickersStream",
            get_tickers_request,
            GetTickersStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_trades_stream(
        self,
        get_trades_request: "GetTradesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["GetTradesStreamResponse"]:
        async for response in self._unary_stream(
            "/api.Api/GetTradesStream",
            get_trades_request,
            GetTradesStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_order_status_stream(
        self,
        get_order_status_stream_request: "GetOrderStatusStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["GetOrderStatusStreamResponse"]:
        async for response in self._unary_stream(
            "/api.Api/GetOrderStatusStream",
            get_order_status_stream_request,
            GetOrderStatusStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_recent_block_hash_stream(
        self,
        get_recent_block_hash_request: "GetRecentBlockHashRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["GetRecentBlockHashResponse"]:
        async for response in self._unary_stream(
            "/api.Api/GetRecentBlockHashStream",
            get_recent_block_hash_request,
            GetRecentBlockHashResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_block_stream(
        self,
        get_block_stream_request: "GetBlockStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["GetBlockStreamResponse"]:
        async for response in self._unary_stream(
            "/api.Api/GetBlockStream",
            get_block_stream_request,
            GetBlockStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_quotes_stream(
        self,
        get_quotes_stream_request: "GetQuotesStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["GetQuotesStreamResponse"]:
        async for response in self._unary_stream(
            "/api.Api/GetQuotesStream",
            get_quotes_stream_request,
            GetQuotesStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_pool_reserves_stream(
        self,
        get_pool_reserves_stream_request: "GetPoolReservesStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["GetPoolReservesStreamResponse"]:
        async for response in self._unary_stream(
            "/api.Api/GetPoolReservesStream",
            get_pool_reserves_stream_request,
            GetPoolReservesStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_prices_stream(
        self,
        get_prices_stream_request: "GetPricesStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["GetPricesStreamResponse"]:
        async for response in self._unary_stream(
            "/api.Api/GetPricesStream",
            get_prices_stream_request,
            GetPricesStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_new_raydium_pools_stream(
        self,
        get_new_raydium_pools_request: "GetNewRaydiumPoolsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["GetNewRaydiumPoolsResponse"]:
        async for response in self._unary_stream(
            "/api.Api/GetNewRaydiumPoolsStream",
            get_new_raydium_pools_request,
            GetNewRaydiumPoolsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_swaps_stream(
        self,
        get_swaps_stream_request: "GetSwapsStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["GetSwapsStreamResponse"]:
        async for response in self._unary_stream(
            "/api.Api/GetSwapsStream",
            get_swaps_stream_request,
            GetSwapsStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_perp_orderbooks_stream(
        self,
        get_perp_orderbooks_request: "GetPerpOrderbooksRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["GetPerpOrderbooksStreamResponse"]:
        async for response in self._unary_stream(
            "/api.Api/GetPerpOrderbooksStream",
            get_perp_orderbooks_request,
            GetPerpOrderbooksStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def get_perp_trades_stream(
        self,
        get_perp_trades_stream_request: "GetPerpTradesStreamRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["GetPerpTradesStreamResponse"]:
        async for response in self._unary_stream(
            "/api.Api/GetPerpTradesStream",
            get_perp_trades_stream_request,
            GetPerpTradesStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class ApiBase(ServiceBase):
    async def get_transaction(
        self, get_transaction_request: "GetTransactionRequest"
    ) -> "GetTransactionResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_submit_v2(
        self, post_submit_request: "PostSubmitRequest"
    ) -> "PostSubmitResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_submit_batch_v2(
        self, post_submit_batch_request: "PostSubmitBatchRequest"
    ) -> "PostSubmitBatchResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_raydium_pools(
        self, get_raydium_pools_request: "GetRaydiumPoolsRequest"
    ) -> "GetRaydiumPoolsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_raydium_quotes(
        self, get_raydium_quotes_request: "GetRaydiumQuotesRequest"
    ) -> "GetRaydiumQuotesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_raydium_prices(
        self, get_raydium_prices_request: "GetRaydiumPricesRequest"
    ) -> "GetRaydiumPricesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_raydium_swap(
        self, post_raydium_swap_request: "PostRaydiumSwapRequest"
    ) -> "PostRaydiumSwapResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_raydium_route_swap(
        self, post_raydium_route_swap_request: "PostRaydiumRouteSwapRequest"
    ) -> "PostRaydiumRouteSwapResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_jupiter_quotes(
        self, get_jupiter_quotes_request: "GetJupiterQuotesRequest"
    ) -> "GetJupiterQuotesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_jupiter_prices(
        self, get_jupiter_prices_request: "GetJupiterPricesRequest"
    ) -> "GetJupiterPricesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_jupiter_swap(
        self, post_jupiter_swap_request: "PostJupiterSwapRequest"
    ) -> "PostJupiterSwapResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_jupiter_route_swap(
        self, post_jupiter_route_swap_request: "PostJupiterRouteSwapRequest"
    ) -> "PostJupiterRouteSwapResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_close_drift_perp_positions(
        self,
        post_close_drift_perp_positions_request: "PostCloseDriftPerpPositionsRequest",
    ) -> "PostCloseDriftPerpPositionsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_drift_perp_orderbook(
        self, get_drift_perp_orderbook_request: "GetDriftPerpOrderbookRequest"
    ) -> "GetDriftPerpOrderbookResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_create_drift_user(
        self, post_create_drift_user_request: "PostCreateDriftUserRequest"
    ) -> "PostCreateDriftUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_drift_user(
        self, get_drift_user_request: "GetDriftUserRequest"
    ) -> "GetDriftUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_drift_manage_collateral(
        self, post_drift_manage_collateral_request: "PostDriftManageCollateralRequest"
    ) -> "PostDriftManageCollateralResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_drift_perp_order(
        self, post_drift_perp_order_request: "PostDriftPerpOrderRequest"
    ) -> "PostDriftPerpOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_drift_settle_pnl(
        self, post_drift_settle_pnl_request: "PostDriftSettlePnlRequest"
    ) -> "PostDriftSettlePnlResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_drift_settle_pn_ls(
        self, post_drift_settle_pn_ls_request: "PostDriftSettlePnLsRequest"
    ) -> "PostDriftSettlePnLsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_drift_assets(
        self, get_drift_assets_request: "GetDriftAssetsRequest"
    ) -> "GetDriftAssetsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_drift_perp_contracts(
        self, get_drift_perp_contracts_request: "GetDriftPerpContractsRequest"
    ) -> "GetDriftPerpContractsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_liquidate_drift_perp(
        self, post_liquidate_drift_perp_request: "PostLiquidateDriftPerpRequest"
    ) -> "PostLiquidateDriftPerpResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_drift_open_perp_order(
        self, get_drift_open_perp_order_request: "GetDriftOpenPerpOrderRequest"
    ) -> "GetDriftOpenPerpOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_drift_open_margin_order(
        self, get_drift_open_margin_order_request: "GetDriftOpenMarginOrderRequest"
    ) -> "GetDriftOpenMarginOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_drift_perp_positions(
        self, get_drift_perp_positions_request: "GetDriftPerpPositionsRequest"
    ) -> "GetDriftPerpPositionsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_drift_open_perp_orders(
        self, get_drift_open_perp_orders_request: "GetDriftOpenPerpOrdersRequest"
    ) -> "GetDriftOpenPerpOrdersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_drift_cancel_perp_order(
        self, post_drift_cancel_perp_order_request: "PostDriftCancelPerpOrderRequest"
    ) -> "PostDriftCancelPerpOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_modify_drift_order(
        self, post_modify_drift_order_request: "PostModifyDriftOrderRequest"
    ) -> "PostModifyDriftOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_cancel_drift_margin_order(
        self,
        post_cancel_drift_margin_order_request: "PostCancelDriftMarginOrderRequest",
    ) -> "PostCancelDriftMarginOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_drift_open_margin_orders(
        self, get_drift_open_margin_orders_request: "GetDriftOpenMarginOrdersRequest"
    ) -> "GetDriftOpenMarginOrdersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_drift_markets(
        self, get_drift_markets_request: "GetDriftMarketsRequest"
    ) -> "GetDriftMarketsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_drift_margin_order(
        self, post_drift_margin_order_request: "PostDriftMarginOrderRequest"
    ) -> "PostDriftMarginOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_drift_enable_margin_trading(
        self,
        post_drift_enable_margin_trading_request: "PostDriftEnableMarginTradingRequest",
    ) -> "PostDriftEnableMarginTradingResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_drift_margin_orderbook(
        self, get_drift_margin_orderbook_request: "GetDriftMarginOrderbookRequest"
    ) -> "GetDriftMarginOrderbookResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_drift_market_depth(
        self, get_drift_market_depth_request: "GetDriftMarketDepthRequest"
    ) -> "GetDriftMarketDepthResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_drift_margin_orderbooks_stream(
        self, get_drift_margin_orderbooks_request: "GetDriftMarginOrderbooksRequest"
    ) -> AsyncIterator["GetDriftMarginOrderbooksStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield GetDriftMarginOrderbooksStreamResponse()

    async def get_drift_market_depths_stream(
        self,
        get_drift_market_depths_stream_request: "GetDriftMarketDepthsStreamRequest",
    ) -> AsyncIterator["GetDriftMarketDepthStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield GetDriftMarketDepthStreamResponse()

    async def get_markets_v2(
        self, get_markets_request_v2: "GetMarketsRequestV2"
    ) -> "GetMarketsResponseV2":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_tickers_v2(
        self, get_tickers_request_v2: "GetTickersRequestV2"
    ) -> "GetTickersResponseV2":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_orderbook_v2(
        self, get_orderbook_request_v2: "GetOrderbookRequestV2"
    ) -> "GetOrderbookResponseV2":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_market_depth_v2(
        self, get_market_depth_request_v2: "GetMarketDepthRequestV2"
    ) -> "GetMarketDepthResponseV2":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_order_v2(
        self, post_order_request_v2: "PostOrderRequestV2"
    ) -> "PostOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_cancel_order_v2(
        self, post_cancel_order_request_v2: "PostCancelOrderRequestV2"
    ) -> "PostCancelOrderResponseV2":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_replace_order_v2(
        self, post_replace_order_request_v2: "PostReplaceOrderRequestV2"
    ) -> "PostOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_settle_v2(
        self, post_settle_request_v2: "PostSettleRequestV2"
    ) -> "PostSettleResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_open_orders_v2(
        self, get_open_orders_request_v2: "GetOpenOrdersRequestV2"
    ) -> "GetOpenOrdersResponseV2":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_unsettled_v2(
        self, get_unsettled_request_v2: "GetUnsettledRequestV2"
    ) -> "GetUnsettledResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_price(
        self, get_price_request: "GetPriceRequest"
    ) -> "GetPriceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_markets(
        self, get_markets_request: "GetMarketsRequest"
    ) -> "GetMarketsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_pools(
        self, get_pools_request: "GetPoolsRequest"
    ) -> "GetPoolsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_tickers(
        self, get_tickers_request: "GetTickersRequest"
    ) -> "GetTickersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_kline(
        self, get_kline_request: "GetKlineRequest"
    ) -> "GetKlineResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_orderbook(
        self, get_orderbook_request: "GetOrderbookRequest"
    ) -> "GetOrderbookResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_market_depth(
        self, get_market_depth_request: "GetMarketDepthRequest"
    ) -> "GetMarketDepthResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_trades(
        self, get_trades_request: "GetTradesRequest"
    ) -> "GetTradesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_quotes(
        self, get_quotes_request: "GetQuotesRequest"
    ) -> "GetQuotesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_server_time(
        self, get_server_time_request: "GetServerTimeRequest"
    ) -> "GetServerTimeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_recent_block_hash(
        self, get_recent_block_hash_request: "GetRecentBlockHashRequest"
    ) -> "GetRecentBlockHashResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_account_balance(
        self, get_account_balance_request: "GetAccountBalanceRequest"
    ) -> "GetAccountBalanceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_token_accounts(
        self, get_token_accounts_request: "GetTokenAccountsRequest"
    ) -> "GetTokenAccountsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_order(
        self, post_order_request: "PostOrderRequest"
    ) -> "PostOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_submit(
        self, post_submit_request: "PostSubmitRequest"
    ) -> "PostSubmitResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_submit_batch(
        self, post_submit_batch_request: "PostSubmitBatchRequest"
    ) -> "PostSubmitBatchResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_cancel_order(
        self, post_cancel_order_request: "PostCancelOrderRequest"
    ) -> "PostCancelOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_cancel_by_client_order_id(
        self, post_cancel_by_client_order_id_request: "PostCancelByClientOrderIdRequest"
    ) -> "PostCancelOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_cancel_all(
        self, post_cancel_all_request: "PostCancelAllRequest"
    ) -> "PostCancelAllResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_replace_by_client_order_id(
        self, post_order_request: "PostOrderRequest"
    ) -> "PostOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_replace_order(
        self, post_replace_order_request: "PostReplaceOrderRequest"
    ) -> "PostOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_settle(
        self, post_settle_request: "PostSettleRequest"
    ) -> "PostSettleResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_trade_swap(
        self, trade_swap_request: "TradeSwapRequest"
    ) -> "TradeSwapResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_orders(
        self, get_orders_request: "GetOrdersRequest"
    ) -> "GetOrdersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_open_orders(
        self, get_open_orders_request: "GetOpenOrdersRequest"
    ) -> "GetOpenOrdersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_order_by_id(
        self, get_order_by_id_request: "GetOrderByIdRequest"
    ) -> "GetOrderByIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_unsettled(
        self, get_unsettled_request: "GetUnsettledRequest"
    ) -> "GetUnsettledResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_route_trade_swap(
        self, route_trade_swap_request: "RouteTradeSwapRequest"
    ) -> "TradeSwapResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_perp_order(
        self, post_perp_order_request: "PostPerpOrderRequest"
    ) -> "PostPerpOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_perp_positions(
        self, get_perp_positions_request: "GetPerpPositionsRequest"
    ) -> "GetPerpPositionsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_open_perp_orders(
        self, get_open_perp_orders_request: "GetOpenPerpOrdersRequest"
    ) -> "GetOpenPerpOrdersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_cancel_perp_orders(
        self, post_cancel_perp_orders_request: "PostCancelPerpOrdersRequest"
    ) -> "PostCancelPerpOrdersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_cancel_perp_order(
        self, post_cancel_perp_order_request: "PostCancelPerpOrderRequest"
    ) -> "PostCancelPerpOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_close_perp_positions(
        self, post_close_perp_positions_request: "PostClosePerpPositionsRequest"
    ) -> "PostClosePerpPositionsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_perp_orderbook(
        self, get_perp_orderbook_request: "GetPerpOrderbookRequest"
    ) -> "GetPerpOrderbookResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_create_user(
        self, post_create_user_request: "PostCreateUserRequest"
    ) -> "PostCreateUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_user(self, get_user_request: "GetUserRequest") -> "GetUserResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_manage_collateral(
        self, post_manage_collateral_request: "PostManageCollateralRequest"
    ) -> "PostManageCollateralResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_settle_pnl(
        self, post_settle_pnl_request: "PostSettlePnlRequest"
    ) -> "PostSettlePnlResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_settle_pn_ls(
        self, post_settle_pn_ls_request: "PostSettlePnLsRequest"
    ) -> "PostSettlePnLsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_assets(
        self, get_assets_request: "GetAssetsRequest"
    ) -> "GetAssetsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_perp_contracts(
        self, get_perp_contracts_request: "GetPerpContractsRequest"
    ) -> "GetPerpContractsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def post_liquidate_perp(
        self, post_liquidate_perp_request: "PostLiquidatePerpRequest"
    ) -> "PostLiquidatePerpResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_open_perp_order(
        self, get_open_perp_order_request: "GetOpenPerpOrderRequest"
    ) -> "GetOpenPerpOrderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_orderbooks_stream(
        self, get_orderbooks_request: "GetOrderbooksRequest"
    ) -> AsyncIterator["GetOrderbooksStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield GetOrderbooksStreamResponse()

    async def get_market_depths_stream(
        self, get_market_depths_request: "GetMarketDepthsRequest"
    ) -> AsyncIterator["GetMarketDepthsStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield GetMarketDepthsStreamResponse()

    async def get_tickers_stream(
        self, get_tickers_request: "GetTickersRequest"
    ) -> AsyncIterator["GetTickersStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield GetTickersStreamResponse()

    async def get_trades_stream(
        self, get_trades_request: "GetTradesRequest"
    ) -> AsyncIterator["GetTradesStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield GetTradesStreamResponse()

    async def get_order_status_stream(
        self, get_order_status_stream_request: "GetOrderStatusStreamRequest"
    ) -> AsyncIterator["GetOrderStatusStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield GetOrderStatusStreamResponse()

    async def get_recent_block_hash_stream(
        self, get_recent_block_hash_request: "GetRecentBlockHashRequest"
    ) -> AsyncIterator["GetRecentBlockHashResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield GetRecentBlockHashResponse()

    async def get_block_stream(
        self, get_block_stream_request: "GetBlockStreamRequest"
    ) -> AsyncIterator["GetBlockStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield GetBlockStreamResponse()

    async def get_quotes_stream(
        self, get_quotes_stream_request: "GetQuotesStreamRequest"
    ) -> AsyncIterator["GetQuotesStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield GetQuotesStreamResponse()

    async def get_pool_reserves_stream(
        self, get_pool_reserves_stream_request: "GetPoolReservesStreamRequest"
    ) -> AsyncIterator["GetPoolReservesStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield GetPoolReservesStreamResponse()

    async def get_prices_stream(
        self, get_prices_stream_request: "GetPricesStreamRequest"
    ) -> AsyncIterator["GetPricesStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield GetPricesStreamResponse()

    async def get_new_raydium_pools_stream(
        self, get_new_raydium_pools_request: "GetNewRaydiumPoolsRequest"
    ) -> AsyncIterator["GetNewRaydiumPoolsResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield GetNewRaydiumPoolsResponse()

    async def get_swaps_stream(
        self, get_swaps_stream_request: "GetSwapsStreamRequest"
    ) -> AsyncIterator["GetSwapsStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield GetSwapsStreamResponse()

    async def get_perp_orderbooks_stream(
        self, get_perp_orderbooks_request: "GetPerpOrderbooksRequest"
    ) -> AsyncIterator["GetPerpOrderbooksStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield GetPerpOrderbooksStreamResponse()

    async def get_perp_trades_stream(
        self, get_perp_trades_stream_request: "GetPerpTradesStreamRequest"
    ) -> AsyncIterator["GetPerpTradesStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield GetPerpTradesStreamResponse()

    async def __rpc_get_transaction(
        self,
        stream: "grpclib.server.Stream[GetTransactionRequest, GetTransactionResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_transaction(request)
        await stream.send_message(response)

    async def __rpc_post_submit_v2(
        self, stream: "grpclib.server.Stream[PostSubmitRequest, PostSubmitResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_submit_v2(request)
        await stream.send_message(response)

    async def __rpc_post_submit_batch_v2(
        self,
        stream: "grpclib.server.Stream[PostSubmitBatchRequest, PostSubmitBatchResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_submit_batch_v2(request)
        await stream.send_message(response)

    async def __rpc_get_raydium_pools(
        self,
        stream: "grpclib.server.Stream[GetRaydiumPoolsRequest, GetRaydiumPoolsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_raydium_pools(request)
        await stream.send_message(response)

    async def __rpc_get_raydium_quotes(
        self,
        stream: "grpclib.server.Stream[GetRaydiumQuotesRequest, GetRaydiumQuotesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_raydium_quotes(request)
        await stream.send_message(response)

    async def __rpc_get_raydium_prices(
        self,
        stream: "grpclib.server.Stream[GetRaydiumPricesRequest, GetRaydiumPricesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_raydium_prices(request)
        await stream.send_message(response)

    async def __rpc_post_raydium_swap(
        self,
        stream: "grpclib.server.Stream[PostRaydiumSwapRequest, PostRaydiumSwapResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_raydium_swap(request)
        await stream.send_message(response)

    async def __rpc_post_raydium_route_swap(
        self,
        stream: "grpclib.server.Stream[PostRaydiumRouteSwapRequest, PostRaydiumRouteSwapResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_raydium_route_swap(request)
        await stream.send_message(response)

    async def __rpc_get_jupiter_quotes(
        self,
        stream: "grpclib.server.Stream[GetJupiterQuotesRequest, GetJupiterQuotesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_jupiter_quotes(request)
        await stream.send_message(response)

    async def __rpc_get_jupiter_prices(
        self,
        stream: "grpclib.server.Stream[GetJupiterPricesRequest, GetJupiterPricesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_jupiter_prices(request)
        await stream.send_message(response)

    async def __rpc_post_jupiter_swap(
        self,
        stream: "grpclib.server.Stream[PostJupiterSwapRequest, PostJupiterSwapResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_jupiter_swap(request)
        await stream.send_message(response)

    async def __rpc_post_jupiter_route_swap(
        self,
        stream: "grpclib.server.Stream[PostJupiterRouteSwapRequest, PostJupiterRouteSwapResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_jupiter_route_swap(request)
        await stream.send_message(response)

    async def __rpc_post_close_drift_perp_positions(
        self,
        stream: "grpclib.server.Stream[PostCloseDriftPerpPositionsRequest, PostCloseDriftPerpPositionsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_close_drift_perp_positions(request)
        await stream.send_message(response)

    async def __rpc_get_drift_perp_orderbook(
        self,
        stream: "grpclib.server.Stream[GetDriftPerpOrderbookRequest, GetDriftPerpOrderbookResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_drift_perp_orderbook(request)
        await stream.send_message(response)

    async def __rpc_post_create_drift_user(
        self,
        stream: "grpclib.server.Stream[PostCreateDriftUserRequest, PostCreateDriftUserResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_create_drift_user(request)
        await stream.send_message(response)

    async def __rpc_get_drift_user(
        self, stream: "grpclib.server.Stream[GetDriftUserRequest, GetDriftUserResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_drift_user(request)
        await stream.send_message(response)

    async def __rpc_post_drift_manage_collateral(
        self,
        stream: "grpclib.server.Stream[PostDriftManageCollateralRequest, PostDriftManageCollateralResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_drift_manage_collateral(request)
        await stream.send_message(response)

    async def __rpc_post_drift_perp_order(
        self,
        stream: "grpclib.server.Stream[PostDriftPerpOrderRequest, PostDriftPerpOrderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_drift_perp_order(request)
        await stream.send_message(response)

    async def __rpc_post_drift_settle_pnl(
        self,
        stream: "grpclib.server.Stream[PostDriftSettlePnlRequest, PostDriftSettlePnlResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_drift_settle_pnl(request)
        await stream.send_message(response)

    async def __rpc_post_drift_settle_pn_ls(
        self,
        stream: "grpclib.server.Stream[PostDriftSettlePnLsRequest, PostDriftSettlePnLsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_drift_settle_pn_ls(request)
        await stream.send_message(response)

    async def __rpc_get_drift_assets(
        self,
        stream: "grpclib.server.Stream[GetDriftAssetsRequest, GetDriftAssetsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_drift_assets(request)
        await stream.send_message(response)

    async def __rpc_get_drift_perp_contracts(
        self,
        stream: "grpclib.server.Stream[GetDriftPerpContractsRequest, GetDriftPerpContractsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_drift_perp_contracts(request)
        await stream.send_message(response)

    async def __rpc_post_liquidate_drift_perp(
        self,
        stream: "grpclib.server.Stream[PostLiquidateDriftPerpRequest, PostLiquidateDriftPerpResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_liquidate_drift_perp(request)
        await stream.send_message(response)

    async def __rpc_get_drift_open_perp_order(
        self,
        stream: "grpclib.server.Stream[GetDriftOpenPerpOrderRequest, GetDriftOpenPerpOrderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_drift_open_perp_order(request)
        await stream.send_message(response)

    async def __rpc_get_drift_open_margin_order(
        self,
        stream: "grpclib.server.Stream[GetDriftOpenMarginOrderRequest, GetDriftOpenMarginOrderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_drift_open_margin_order(request)
        await stream.send_message(response)

    async def __rpc_get_drift_perp_positions(
        self,
        stream: "grpclib.server.Stream[GetDriftPerpPositionsRequest, GetDriftPerpPositionsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_drift_perp_positions(request)
        await stream.send_message(response)

    async def __rpc_get_drift_open_perp_orders(
        self,
        stream: "grpclib.server.Stream[GetDriftOpenPerpOrdersRequest, GetDriftOpenPerpOrdersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_drift_open_perp_orders(request)
        await stream.send_message(response)

    async def __rpc_post_drift_cancel_perp_order(
        self,
        stream: "grpclib.server.Stream[PostDriftCancelPerpOrderRequest, PostDriftCancelPerpOrderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_drift_cancel_perp_order(request)
        await stream.send_message(response)

    async def __rpc_post_modify_drift_order(
        self,
        stream: "grpclib.server.Stream[PostModifyDriftOrderRequest, PostModifyDriftOrderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_modify_drift_order(request)
        await stream.send_message(response)

    async def __rpc_post_cancel_drift_margin_order(
        self,
        stream: "grpclib.server.Stream[PostCancelDriftMarginOrderRequest, PostCancelDriftMarginOrderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_cancel_drift_margin_order(request)
        await stream.send_message(response)

    async def __rpc_get_drift_open_margin_orders(
        self,
        stream: "grpclib.server.Stream[GetDriftOpenMarginOrdersRequest, GetDriftOpenMarginOrdersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_drift_open_margin_orders(request)
        await stream.send_message(response)

    async def __rpc_get_drift_markets(
        self,
        stream: "grpclib.server.Stream[GetDriftMarketsRequest, GetDriftMarketsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_drift_markets(request)
        await stream.send_message(response)

    async def __rpc_post_drift_margin_order(
        self,
        stream: "grpclib.server.Stream[PostDriftMarginOrderRequest, PostDriftMarginOrderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_drift_margin_order(request)
        await stream.send_message(response)

    async def __rpc_post_drift_enable_margin_trading(
        self,
        stream: "grpclib.server.Stream[PostDriftEnableMarginTradingRequest, PostDriftEnableMarginTradingResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_drift_enable_margin_trading(request)
        await stream.send_message(response)

    async def __rpc_get_drift_margin_orderbook(
        self,
        stream: "grpclib.server.Stream[GetDriftMarginOrderbookRequest, GetDriftMarginOrderbookResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_drift_margin_orderbook(request)
        await stream.send_message(response)

    async def __rpc_get_drift_market_depth(
        self,
        stream: "grpclib.server.Stream[GetDriftMarketDepthRequest, GetDriftMarketDepthResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_drift_market_depth(request)
        await stream.send_message(response)

    async def __rpc_get_drift_margin_orderbooks_stream(
        self,
        stream: "grpclib.server.Stream[GetDriftMarginOrderbooksRequest, GetDriftMarginOrderbooksStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_drift_margin_orderbooks_stream,
            stream,
            request,
        )

    async def __rpc_get_drift_market_depths_stream(
        self,
        stream: "grpclib.server.Stream[GetDriftMarketDepthsStreamRequest, GetDriftMarketDepthStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_drift_market_depths_stream,
            stream,
            request,
        )

    async def __rpc_get_markets_v2(
        self, stream: "grpclib.server.Stream[GetMarketsRequestV2, GetMarketsResponseV2]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_markets_v2(request)
        await stream.send_message(response)

    async def __rpc_get_tickers_v2(
        self, stream: "grpclib.server.Stream[GetTickersRequestV2, GetTickersResponseV2]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_tickers_v2(request)
        await stream.send_message(response)

    async def __rpc_get_orderbook_v2(
        self,
        stream: "grpclib.server.Stream[GetOrderbookRequestV2, GetOrderbookResponseV2]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_orderbook_v2(request)
        await stream.send_message(response)

    async def __rpc_get_market_depth_v2(
        self,
        stream: "grpclib.server.Stream[GetMarketDepthRequestV2, GetMarketDepthResponseV2]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_market_depth_v2(request)
        await stream.send_message(response)

    async def __rpc_post_order_v2(
        self, stream: "grpclib.server.Stream[PostOrderRequestV2, PostOrderResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_order_v2(request)
        await stream.send_message(response)

    async def __rpc_post_cancel_order_v2(
        self,
        stream: "grpclib.server.Stream[PostCancelOrderRequestV2, PostCancelOrderResponseV2]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_cancel_order_v2(request)
        await stream.send_message(response)

    async def __rpc_post_replace_order_v2(
        self,
        stream: "grpclib.server.Stream[PostReplaceOrderRequestV2, PostOrderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_replace_order_v2(request)
        await stream.send_message(response)

    async def __rpc_post_settle_v2(
        self, stream: "grpclib.server.Stream[PostSettleRequestV2, PostSettleResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_settle_v2(request)
        await stream.send_message(response)

    async def __rpc_get_open_orders_v2(
        self,
        stream: "grpclib.server.Stream[GetOpenOrdersRequestV2, GetOpenOrdersResponseV2]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_open_orders_v2(request)
        await stream.send_message(response)

    async def __rpc_get_unsettled_v2(
        self,
        stream: "grpclib.server.Stream[GetUnsettledRequestV2, GetUnsettledResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_unsettled_v2(request)
        await stream.send_message(response)

    async def __rpc_get_price(
        self, stream: "grpclib.server.Stream[GetPriceRequest, GetPriceResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_price(request)
        await stream.send_message(response)

    async def __rpc_get_markets(
        self, stream: "grpclib.server.Stream[GetMarketsRequest, GetMarketsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_markets(request)
        await stream.send_message(response)

    async def __rpc_get_pools(
        self, stream: "grpclib.server.Stream[GetPoolsRequest, GetPoolsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_pools(request)
        await stream.send_message(response)

    async def __rpc_get_tickers(
        self, stream: "grpclib.server.Stream[GetTickersRequest, GetTickersResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_tickers(request)
        await stream.send_message(response)

    async def __rpc_get_kline(
        self, stream: "grpclib.server.Stream[GetKlineRequest, GetKlineResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_kline(request)
        await stream.send_message(response)

    async def __rpc_get_orderbook(
        self, stream: "grpclib.server.Stream[GetOrderbookRequest, GetOrderbookResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_orderbook(request)
        await stream.send_message(response)

    async def __rpc_get_market_depth(
        self,
        stream: "grpclib.server.Stream[GetMarketDepthRequest, GetMarketDepthResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_market_depth(request)
        await stream.send_message(response)

    async def __rpc_get_trades(
        self, stream: "grpclib.server.Stream[GetTradesRequest, GetTradesResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_trades(request)
        await stream.send_message(response)

    async def __rpc_get_quotes(
        self, stream: "grpclib.server.Stream[GetQuotesRequest, GetQuotesResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_quotes(request)
        await stream.send_message(response)

    async def __rpc_get_server_time(
        self,
        stream: "grpclib.server.Stream[GetServerTimeRequest, GetServerTimeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_server_time(request)
        await stream.send_message(response)

    async def __rpc_get_recent_block_hash(
        self,
        stream: "grpclib.server.Stream[GetRecentBlockHashRequest, GetRecentBlockHashResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_recent_block_hash(request)
        await stream.send_message(response)

    async def __rpc_get_account_balance(
        self,
        stream: "grpclib.server.Stream[GetAccountBalanceRequest, GetAccountBalanceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_account_balance(request)
        await stream.send_message(response)

    async def __rpc_get_token_accounts(
        self,
        stream: "grpclib.server.Stream[GetTokenAccountsRequest, GetTokenAccountsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_token_accounts(request)
        await stream.send_message(response)

    async def __rpc_post_order(
        self, stream: "grpclib.server.Stream[PostOrderRequest, PostOrderResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_order(request)
        await stream.send_message(response)

    async def __rpc_post_submit(
        self, stream: "grpclib.server.Stream[PostSubmitRequest, PostSubmitResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_submit(request)
        await stream.send_message(response)

    async def __rpc_post_submit_batch(
        self,
        stream: "grpclib.server.Stream[PostSubmitBatchRequest, PostSubmitBatchResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_submit_batch(request)
        await stream.send_message(response)

    async def __rpc_post_cancel_order(
        self,
        stream: "grpclib.server.Stream[PostCancelOrderRequest, PostCancelOrderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_cancel_order(request)
        await stream.send_message(response)

    async def __rpc_post_cancel_by_client_order_id(
        self,
        stream: "grpclib.server.Stream[PostCancelByClientOrderIdRequest, PostCancelOrderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_cancel_by_client_order_id(request)
        await stream.send_message(response)

    async def __rpc_post_cancel_all(
        self,
        stream: "grpclib.server.Stream[PostCancelAllRequest, PostCancelAllResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_cancel_all(request)
        await stream.send_message(response)

    async def __rpc_post_replace_by_client_order_id(
        self, stream: "grpclib.server.Stream[PostOrderRequest, PostOrderResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_replace_by_client_order_id(request)
        await stream.send_message(response)

    async def __rpc_post_replace_order(
        self,
        stream: "grpclib.server.Stream[PostReplaceOrderRequest, PostOrderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_replace_order(request)
        await stream.send_message(response)

    async def __rpc_post_settle(
        self, stream: "grpclib.server.Stream[PostSettleRequest, PostSettleResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_settle(request)
        await stream.send_message(response)

    async def __rpc_post_trade_swap(
        self, stream: "grpclib.server.Stream[TradeSwapRequest, TradeSwapResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_trade_swap(request)
        await stream.send_message(response)

    async def __rpc_get_orders(
        self, stream: "grpclib.server.Stream[GetOrdersRequest, GetOrdersResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_orders(request)
        await stream.send_message(response)

    async def __rpc_get_open_orders(
        self,
        stream: "grpclib.server.Stream[GetOpenOrdersRequest, GetOpenOrdersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_open_orders(request)
        await stream.send_message(response)

    async def __rpc_get_order_by_id(
        self, stream: "grpclib.server.Stream[GetOrderByIdRequest, GetOrderByIdResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_order_by_id(request)
        await stream.send_message(response)

    async def __rpc_get_unsettled(
        self, stream: "grpclib.server.Stream[GetUnsettledRequest, GetUnsettledResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_unsettled(request)
        await stream.send_message(response)

    async def __rpc_post_route_trade_swap(
        self, stream: "grpclib.server.Stream[RouteTradeSwapRequest, TradeSwapResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_route_trade_swap(request)
        await stream.send_message(response)

    async def __rpc_post_perp_order(
        self,
        stream: "grpclib.server.Stream[PostPerpOrderRequest, PostPerpOrderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_perp_order(request)
        await stream.send_message(response)

    async def __rpc_get_perp_positions(
        self,
        stream: "grpclib.server.Stream[GetPerpPositionsRequest, GetPerpPositionsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_perp_positions(request)
        await stream.send_message(response)

    async def __rpc_get_open_perp_orders(
        self,
        stream: "grpclib.server.Stream[GetOpenPerpOrdersRequest, GetOpenPerpOrdersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_open_perp_orders(request)
        await stream.send_message(response)

    async def __rpc_post_cancel_perp_orders(
        self,
        stream: "grpclib.server.Stream[PostCancelPerpOrdersRequest, PostCancelPerpOrdersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_cancel_perp_orders(request)
        await stream.send_message(response)

    async def __rpc_post_cancel_perp_order(
        self,
        stream: "grpclib.server.Stream[PostCancelPerpOrderRequest, PostCancelPerpOrderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_cancel_perp_order(request)
        await stream.send_message(response)

    async def __rpc_post_close_perp_positions(
        self,
        stream: "grpclib.server.Stream[PostClosePerpPositionsRequest, PostClosePerpPositionsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_close_perp_positions(request)
        await stream.send_message(response)

    async def __rpc_get_perp_orderbook(
        self,
        stream: "grpclib.server.Stream[GetPerpOrderbookRequest, GetPerpOrderbookResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_perp_orderbook(request)
        await stream.send_message(response)

    async def __rpc_post_create_user(
        self,
        stream: "grpclib.server.Stream[PostCreateUserRequest, PostCreateUserResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_create_user(request)
        await stream.send_message(response)

    async def __rpc_get_user(
        self, stream: "grpclib.server.Stream[GetUserRequest, GetUserResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_user(request)
        await stream.send_message(response)

    async def __rpc_post_manage_collateral(
        self,
        stream: "grpclib.server.Stream[PostManageCollateralRequest, PostManageCollateralResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_manage_collateral(request)
        await stream.send_message(response)

    async def __rpc_post_settle_pnl(
        self,
        stream: "grpclib.server.Stream[PostSettlePnlRequest, PostSettlePnlResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_settle_pnl(request)
        await stream.send_message(response)

    async def __rpc_post_settle_pn_ls(
        self,
        stream: "grpclib.server.Stream[PostSettlePnLsRequest, PostSettlePnLsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_settle_pn_ls(request)
        await stream.send_message(response)

    async def __rpc_get_assets(
        self, stream: "grpclib.server.Stream[GetAssetsRequest, GetAssetsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_assets(request)
        await stream.send_message(response)

    async def __rpc_get_perp_contracts(
        self,
        stream: "grpclib.server.Stream[GetPerpContractsRequest, GetPerpContractsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_perp_contracts(request)
        await stream.send_message(response)

    async def __rpc_post_liquidate_perp(
        self,
        stream: "grpclib.server.Stream[PostLiquidatePerpRequest, PostLiquidatePerpResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.post_liquidate_perp(request)
        await stream.send_message(response)

    async def __rpc_get_open_perp_order(
        self,
        stream: "grpclib.server.Stream[GetOpenPerpOrderRequest, GetOpenPerpOrderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_open_perp_order(request)
        await stream.send_message(response)

    async def __rpc_get_orderbooks_stream(
        self,
        stream: "grpclib.server.Stream[GetOrderbooksRequest, GetOrderbooksStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_orderbooks_stream,
            stream,
            request,
        )

    async def __rpc_get_market_depths_stream(
        self,
        stream: "grpclib.server.Stream[GetMarketDepthsRequest, GetMarketDepthsStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_market_depths_stream,
            stream,
            request,
        )

    async def __rpc_get_tickers_stream(
        self,
        stream: "grpclib.server.Stream[GetTickersRequest, GetTickersStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_tickers_stream,
            stream,
            request,
        )

    async def __rpc_get_trades_stream(
        self, stream: "grpclib.server.Stream[GetTradesRequest, GetTradesStreamResponse]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_trades_stream,
            stream,
            request,
        )

    async def __rpc_get_order_status_stream(
        self,
        stream: "grpclib.server.Stream[GetOrderStatusStreamRequest, GetOrderStatusStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_order_status_stream,
            stream,
            request,
        )

    async def __rpc_get_recent_block_hash_stream(
        self,
        stream: "grpclib.server.Stream[GetRecentBlockHashRequest, GetRecentBlockHashResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_recent_block_hash_stream,
            stream,
            request,
        )

    async def __rpc_get_block_stream(
        self,
        stream: "grpclib.server.Stream[GetBlockStreamRequest, GetBlockStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_block_stream,
            stream,
            request,
        )

    async def __rpc_get_quotes_stream(
        self,
        stream: "grpclib.server.Stream[GetQuotesStreamRequest, GetQuotesStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_quotes_stream,
            stream,
            request,
        )

    async def __rpc_get_pool_reserves_stream(
        self,
        stream: "grpclib.server.Stream[GetPoolReservesStreamRequest, GetPoolReservesStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_pool_reserves_stream,
            stream,
            request,
        )

    async def __rpc_get_prices_stream(
        self,
        stream: "grpclib.server.Stream[GetPricesStreamRequest, GetPricesStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_prices_stream,
            stream,
            request,
        )

    async def __rpc_get_new_raydium_pools_stream(
        self,
        stream: "grpclib.server.Stream[GetNewRaydiumPoolsRequest, GetNewRaydiumPoolsResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_new_raydium_pools_stream,
            stream,
            request,
        )

    async def __rpc_get_swaps_stream(
        self,
        stream: "grpclib.server.Stream[GetSwapsStreamRequest, GetSwapsStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_swaps_stream,
            stream,
            request,
        )

    async def __rpc_get_perp_orderbooks_stream(
        self,
        stream: "grpclib.server.Stream[GetPerpOrderbooksRequest, GetPerpOrderbooksStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_perp_orderbooks_stream,
            stream,
            request,
        )

    async def __rpc_get_perp_trades_stream(
        self,
        stream: "grpclib.server.Stream[GetPerpTradesStreamRequest, GetPerpTradesStreamResponse]",
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.get_perp_trades_stream,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/api.Api/GetTransaction": grpclib.const.Handler(
                self.__rpc_get_transaction,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTransactionRequest,
                GetTransactionResponse,
            ),
            "/api.Api/PostSubmitV2": grpclib.const.Handler(
                self.__rpc_post_submit_v2,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostSubmitRequest,
                PostSubmitResponse,
            ),
            "/api.Api/PostSubmitBatchV2": grpclib.const.Handler(
                self.__rpc_post_submit_batch_v2,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostSubmitBatchRequest,
                PostSubmitBatchResponse,
            ),
            "/api.Api/GetRaydiumPools": grpclib.const.Handler(
                self.__rpc_get_raydium_pools,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetRaydiumPoolsRequest,
                GetRaydiumPoolsResponse,
            ),
            "/api.Api/GetRaydiumQuotes": grpclib.const.Handler(
                self.__rpc_get_raydium_quotes,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetRaydiumQuotesRequest,
                GetRaydiumQuotesResponse,
            ),
            "/api.Api/GetRaydiumPrices": grpclib.const.Handler(
                self.__rpc_get_raydium_prices,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetRaydiumPricesRequest,
                GetRaydiumPricesResponse,
            ),
            "/api.Api/PostRaydiumSwap": grpclib.const.Handler(
                self.__rpc_post_raydium_swap,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostRaydiumSwapRequest,
                PostRaydiumSwapResponse,
            ),
            "/api.Api/PostRaydiumRouteSwap": grpclib.const.Handler(
                self.__rpc_post_raydium_route_swap,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostRaydiumRouteSwapRequest,
                PostRaydiumRouteSwapResponse,
            ),
            "/api.Api/GetJupiterQuotes": grpclib.const.Handler(
                self.__rpc_get_jupiter_quotes,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetJupiterQuotesRequest,
                GetJupiterQuotesResponse,
            ),
            "/api.Api/GetJupiterPrices": grpclib.const.Handler(
                self.__rpc_get_jupiter_prices,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetJupiterPricesRequest,
                GetJupiterPricesResponse,
            ),
            "/api.Api/PostJupiterSwap": grpclib.const.Handler(
                self.__rpc_post_jupiter_swap,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostJupiterSwapRequest,
                PostJupiterSwapResponse,
            ),
            "/api.Api/PostJupiterRouteSwap": grpclib.const.Handler(
                self.__rpc_post_jupiter_route_swap,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostJupiterRouteSwapRequest,
                PostJupiterRouteSwapResponse,
            ),
            "/api.Api/PostCloseDriftPerpPositions": grpclib.const.Handler(
                self.__rpc_post_close_drift_perp_positions,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostCloseDriftPerpPositionsRequest,
                PostCloseDriftPerpPositionsResponse,
            ),
            "/api.Api/GetDriftPerpOrderbook": grpclib.const.Handler(
                self.__rpc_get_drift_perp_orderbook,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDriftPerpOrderbookRequest,
                GetDriftPerpOrderbookResponse,
            ),
            "/api.Api/PostCreateDriftUser": grpclib.const.Handler(
                self.__rpc_post_create_drift_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostCreateDriftUserRequest,
                PostCreateDriftUserResponse,
            ),
            "/api.Api/GetDriftUser": grpclib.const.Handler(
                self.__rpc_get_drift_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDriftUserRequest,
                GetDriftUserResponse,
            ),
            "/api.Api/PostDriftManageCollateral": grpclib.const.Handler(
                self.__rpc_post_drift_manage_collateral,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostDriftManageCollateralRequest,
                PostDriftManageCollateralResponse,
            ),
            "/api.Api/PostDriftPerpOrder": grpclib.const.Handler(
                self.__rpc_post_drift_perp_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostDriftPerpOrderRequest,
                PostDriftPerpOrderResponse,
            ),
            "/api.Api/PostDriftSettlePNL": grpclib.const.Handler(
                self.__rpc_post_drift_settle_pnl,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostDriftSettlePnlRequest,
                PostDriftSettlePnlResponse,
            ),
            "/api.Api/PostDriftSettlePNLs": grpclib.const.Handler(
                self.__rpc_post_drift_settle_pn_ls,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostDriftSettlePnLsRequest,
                PostDriftSettlePnLsResponse,
            ),
            "/api.Api/GetDriftAssets": grpclib.const.Handler(
                self.__rpc_get_drift_assets,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDriftAssetsRequest,
                GetDriftAssetsResponse,
            ),
            "/api.Api/GetDriftPerpContracts": grpclib.const.Handler(
                self.__rpc_get_drift_perp_contracts,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDriftPerpContractsRequest,
                GetDriftPerpContractsResponse,
            ),
            "/api.Api/PostLiquidateDriftPerp": grpclib.const.Handler(
                self.__rpc_post_liquidate_drift_perp,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostLiquidateDriftPerpRequest,
                PostLiquidateDriftPerpResponse,
            ),
            "/api.Api/GetDriftOpenPerpOrder": grpclib.const.Handler(
                self.__rpc_get_drift_open_perp_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDriftOpenPerpOrderRequest,
                GetDriftOpenPerpOrderResponse,
            ),
            "/api.Api/GetDriftOpenMarginOrder": grpclib.const.Handler(
                self.__rpc_get_drift_open_margin_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDriftOpenMarginOrderRequest,
                GetDriftOpenMarginOrderResponse,
            ),
            "/api.Api/GetDriftPerpPositions": grpclib.const.Handler(
                self.__rpc_get_drift_perp_positions,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDriftPerpPositionsRequest,
                GetDriftPerpPositionsResponse,
            ),
            "/api.Api/GetDriftOpenPerpOrders": grpclib.const.Handler(
                self.__rpc_get_drift_open_perp_orders,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDriftOpenPerpOrdersRequest,
                GetDriftOpenPerpOrdersResponse,
            ),
            "/api.Api/PostDriftCancelPerpOrder": grpclib.const.Handler(
                self.__rpc_post_drift_cancel_perp_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostDriftCancelPerpOrderRequest,
                PostDriftCancelPerpOrderResponse,
            ),
            "/api.Api/PostModifyDriftOrder": grpclib.const.Handler(
                self.__rpc_post_modify_drift_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostModifyDriftOrderRequest,
                PostModifyDriftOrderResponse,
            ),
            "/api.Api/PostCancelDriftMarginOrder": grpclib.const.Handler(
                self.__rpc_post_cancel_drift_margin_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostCancelDriftMarginOrderRequest,
                PostCancelDriftMarginOrderResponse,
            ),
            "/api.Api/GetDriftOpenMarginOrders": grpclib.const.Handler(
                self.__rpc_get_drift_open_margin_orders,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDriftOpenMarginOrdersRequest,
                GetDriftOpenMarginOrdersResponse,
            ),
            "/api.Api/GetDriftMarkets": grpclib.const.Handler(
                self.__rpc_get_drift_markets,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDriftMarketsRequest,
                GetDriftMarketsResponse,
            ),
            "/api.Api/PostDriftMarginOrder": grpclib.const.Handler(
                self.__rpc_post_drift_margin_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostDriftMarginOrderRequest,
                PostDriftMarginOrderResponse,
            ),
            "/api.Api/PostDriftEnableMarginTrading": grpclib.const.Handler(
                self.__rpc_post_drift_enable_margin_trading,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostDriftEnableMarginTradingRequest,
                PostDriftEnableMarginTradingResponse,
            ),
            "/api.Api/GetDriftMarginOrderbook": grpclib.const.Handler(
                self.__rpc_get_drift_margin_orderbook,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDriftMarginOrderbookRequest,
                GetDriftMarginOrderbookResponse,
            ),
            "/api.Api/GetDriftMarketDepth": grpclib.const.Handler(
                self.__rpc_get_drift_market_depth,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDriftMarketDepthRequest,
                GetDriftMarketDepthResponse,
            ),
            "/api.Api/GetDriftMarginOrderbooksStream": grpclib.const.Handler(
                self.__rpc_get_drift_margin_orderbooks_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                GetDriftMarginOrderbooksRequest,
                GetDriftMarginOrderbooksStreamResponse,
            ),
            "/api.Api/GetDriftMarketDepthsStream": grpclib.const.Handler(
                self.__rpc_get_drift_market_depths_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                GetDriftMarketDepthsStreamRequest,
                GetDriftMarketDepthStreamResponse,
            ),
            "/api.Api/GetMarketsV2": grpclib.const.Handler(
                self.__rpc_get_markets_v2,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetMarketsRequestV2,
                GetMarketsResponseV2,
            ),
            "/api.Api/GetTickersV2": grpclib.const.Handler(
                self.__rpc_get_tickers_v2,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTickersRequestV2,
                GetTickersResponseV2,
            ),
            "/api.Api/GetOrderbookV2": grpclib.const.Handler(
                self.__rpc_get_orderbook_v2,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetOrderbookRequestV2,
                GetOrderbookResponseV2,
            ),
            "/api.Api/GetMarketDepthV2": grpclib.const.Handler(
                self.__rpc_get_market_depth_v2,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetMarketDepthRequestV2,
                GetMarketDepthResponseV2,
            ),
            "/api.Api/PostOrderV2": grpclib.const.Handler(
                self.__rpc_post_order_v2,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostOrderRequestV2,
                PostOrderResponse,
            ),
            "/api.Api/PostCancelOrderV2": grpclib.const.Handler(
                self.__rpc_post_cancel_order_v2,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostCancelOrderRequestV2,
                PostCancelOrderResponseV2,
            ),
            "/api.Api/PostReplaceOrderV2": grpclib.const.Handler(
                self.__rpc_post_replace_order_v2,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostReplaceOrderRequestV2,
                PostOrderResponse,
            ),
            "/api.Api/PostSettleV2": grpclib.const.Handler(
                self.__rpc_post_settle_v2,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostSettleRequestV2,
                PostSettleResponse,
            ),
            "/api.Api/GetOpenOrdersV2": grpclib.const.Handler(
                self.__rpc_get_open_orders_v2,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetOpenOrdersRequestV2,
                GetOpenOrdersResponseV2,
            ),
            "/api.Api/GetUnsettledV2": grpclib.const.Handler(
                self.__rpc_get_unsettled_v2,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetUnsettledRequestV2,
                GetUnsettledResponse,
            ),
            "/api.Api/GetPrice": grpclib.const.Handler(
                self.__rpc_get_price,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetPriceRequest,
                GetPriceResponse,
            ),
            "/api.Api/GetMarkets": grpclib.const.Handler(
                self.__rpc_get_markets,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetMarketsRequest,
                GetMarketsResponse,
            ),
            "/api.Api/GetPools": grpclib.const.Handler(
                self.__rpc_get_pools,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetPoolsRequest,
                GetPoolsResponse,
            ),
            "/api.Api/GetTickers": grpclib.const.Handler(
                self.__rpc_get_tickers,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTickersRequest,
                GetTickersResponse,
            ),
            "/api.Api/GetKline": grpclib.const.Handler(
                self.__rpc_get_kline,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetKlineRequest,
                GetKlineResponse,
            ),
            "/api.Api/GetOrderbook": grpclib.const.Handler(
                self.__rpc_get_orderbook,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetOrderbookRequest,
                GetOrderbookResponse,
            ),
            "/api.Api/GetMarketDepth": grpclib.const.Handler(
                self.__rpc_get_market_depth,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetMarketDepthRequest,
                GetMarketDepthResponse,
            ),
            "/api.Api/GetTrades": grpclib.const.Handler(
                self.__rpc_get_trades,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTradesRequest,
                GetTradesResponse,
            ),
            "/api.Api/GetQuotes": grpclib.const.Handler(
                self.__rpc_get_quotes,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetQuotesRequest,
                GetQuotesResponse,
            ),
            "/api.Api/GetServerTime": grpclib.const.Handler(
                self.__rpc_get_server_time,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetServerTimeRequest,
                GetServerTimeResponse,
            ),
            "/api.Api/GetRecentBlockHash": grpclib.const.Handler(
                self.__rpc_get_recent_block_hash,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetRecentBlockHashRequest,
                GetRecentBlockHashResponse,
            ),
            "/api.Api/GetAccountBalance": grpclib.const.Handler(
                self.__rpc_get_account_balance,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAccountBalanceRequest,
                GetAccountBalanceResponse,
            ),
            "/api.Api/GetTokenAccounts": grpclib.const.Handler(
                self.__rpc_get_token_accounts,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTokenAccountsRequest,
                GetTokenAccountsResponse,
            ),
            "/api.Api/PostOrder": grpclib.const.Handler(
                self.__rpc_post_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostOrderRequest,
                PostOrderResponse,
            ),
            "/api.Api/PostSubmit": grpclib.const.Handler(
                self.__rpc_post_submit,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostSubmitRequest,
                PostSubmitResponse,
            ),
            "/api.Api/PostSubmitBatch": grpclib.const.Handler(
                self.__rpc_post_submit_batch,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostSubmitBatchRequest,
                PostSubmitBatchResponse,
            ),
            "/api.Api/PostCancelOrder": grpclib.const.Handler(
                self.__rpc_post_cancel_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostCancelOrderRequest,
                PostCancelOrderResponse,
            ),
            "/api.Api/PostCancelByClientOrderID": grpclib.const.Handler(
                self.__rpc_post_cancel_by_client_order_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostCancelByClientOrderIdRequest,
                PostCancelOrderResponse,
            ),
            "/api.Api/PostCancelAll": grpclib.const.Handler(
                self.__rpc_post_cancel_all,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostCancelAllRequest,
                PostCancelAllResponse,
            ),
            "/api.Api/PostReplaceByClientOrderID": grpclib.const.Handler(
                self.__rpc_post_replace_by_client_order_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostOrderRequest,
                PostOrderResponse,
            ),
            "/api.Api/PostReplaceOrder": grpclib.const.Handler(
                self.__rpc_post_replace_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostReplaceOrderRequest,
                PostOrderResponse,
            ),
            "/api.Api/PostSettle": grpclib.const.Handler(
                self.__rpc_post_settle,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostSettleRequest,
                PostSettleResponse,
            ),
            "/api.Api/PostTradeSwap": grpclib.const.Handler(
                self.__rpc_post_trade_swap,
                grpclib.const.Cardinality.UNARY_UNARY,
                TradeSwapRequest,
                TradeSwapResponse,
            ),
            "/api.Api/GetOrders": grpclib.const.Handler(
                self.__rpc_get_orders,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetOrdersRequest,
                GetOrdersResponse,
            ),
            "/api.Api/GetOpenOrders": grpclib.const.Handler(
                self.__rpc_get_open_orders,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetOpenOrdersRequest,
                GetOpenOrdersResponse,
            ),
            "/api.Api/GetOrderByID": grpclib.const.Handler(
                self.__rpc_get_order_by_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetOrderByIdRequest,
                GetOrderByIdResponse,
            ),
            "/api.Api/GetUnsettled": grpclib.const.Handler(
                self.__rpc_get_unsettled,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetUnsettledRequest,
                GetUnsettledResponse,
            ),
            "/api.Api/PostRouteTradeSwap": grpclib.const.Handler(
                self.__rpc_post_route_trade_swap,
                grpclib.const.Cardinality.UNARY_UNARY,
                RouteTradeSwapRequest,
                TradeSwapResponse,
            ),
            "/api.Api/PostPerpOrder": grpclib.const.Handler(
                self.__rpc_post_perp_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostPerpOrderRequest,
                PostPerpOrderResponse,
            ),
            "/api.Api/GetPerpPositions": grpclib.const.Handler(
                self.__rpc_get_perp_positions,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetPerpPositionsRequest,
                GetPerpPositionsResponse,
            ),
            "/api.Api/GetOpenPerpOrders": grpclib.const.Handler(
                self.__rpc_get_open_perp_orders,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetOpenPerpOrdersRequest,
                GetOpenPerpOrdersResponse,
            ),
            "/api.Api/PostCancelPerpOrders": grpclib.const.Handler(
                self.__rpc_post_cancel_perp_orders,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostCancelPerpOrdersRequest,
                PostCancelPerpOrdersResponse,
            ),
            "/api.Api/PostCancelPerpOrder": grpclib.const.Handler(
                self.__rpc_post_cancel_perp_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostCancelPerpOrderRequest,
                PostCancelPerpOrderResponse,
            ),
            "/api.Api/PostClosePerpPositions": grpclib.const.Handler(
                self.__rpc_post_close_perp_positions,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostClosePerpPositionsRequest,
                PostClosePerpPositionsResponse,
            ),
            "/api.Api/GetPerpOrderbook": grpclib.const.Handler(
                self.__rpc_get_perp_orderbook,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetPerpOrderbookRequest,
                GetPerpOrderbookResponse,
            ),
            "/api.Api/PostCreateUser": grpclib.const.Handler(
                self.__rpc_post_create_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostCreateUserRequest,
                PostCreateUserResponse,
            ),
            "/api.Api/GetUser": grpclib.const.Handler(
                self.__rpc_get_user,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetUserRequest,
                GetUserResponse,
            ),
            "/api.Api/PostManageCollateral": grpclib.const.Handler(
                self.__rpc_post_manage_collateral,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostManageCollateralRequest,
                PostManageCollateralResponse,
            ),
            "/api.Api/PostSettlePNL": grpclib.const.Handler(
                self.__rpc_post_settle_pnl,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostSettlePnlRequest,
                PostSettlePnlResponse,
            ),
            "/api.Api/PostSettlePNLs": grpclib.const.Handler(
                self.__rpc_post_settle_pn_ls,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostSettlePnLsRequest,
                PostSettlePnLsResponse,
            ),
            "/api.Api/GetAssets": grpclib.const.Handler(
                self.__rpc_get_assets,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetAssetsRequest,
                GetAssetsResponse,
            ),
            "/api.Api/GetPerpContracts": grpclib.const.Handler(
                self.__rpc_get_perp_contracts,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetPerpContractsRequest,
                GetPerpContractsResponse,
            ),
            "/api.Api/PostLiquidatePerp": grpclib.const.Handler(
                self.__rpc_post_liquidate_perp,
                grpclib.const.Cardinality.UNARY_UNARY,
                PostLiquidatePerpRequest,
                PostLiquidatePerpResponse,
            ),
            "/api.Api/GetOpenPerpOrder": grpclib.const.Handler(
                self.__rpc_get_open_perp_order,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetOpenPerpOrderRequest,
                GetOpenPerpOrderResponse,
            ),
            "/api.Api/GetOrderbooksStream": grpclib.const.Handler(
                self.__rpc_get_orderbooks_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                GetOrderbooksRequest,
                GetOrderbooksStreamResponse,
            ),
            "/api.Api/GetMarketDepthsStream": grpclib.const.Handler(
                self.__rpc_get_market_depths_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                GetMarketDepthsRequest,
                GetMarketDepthsStreamResponse,
            ),
            "/api.Api/GetTickersStream": grpclib.const.Handler(
                self.__rpc_get_tickers_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                GetTickersRequest,
                GetTickersStreamResponse,
            ),
            "/api.Api/GetTradesStream": grpclib.const.Handler(
                self.__rpc_get_trades_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                GetTradesRequest,
                GetTradesStreamResponse,
            ),
            "/api.Api/GetOrderStatusStream": grpclib.const.Handler(
                self.__rpc_get_order_status_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                GetOrderStatusStreamRequest,
                GetOrderStatusStreamResponse,
            ),
            "/api.Api/GetRecentBlockHashStream": grpclib.const.Handler(
                self.__rpc_get_recent_block_hash_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                GetRecentBlockHashRequest,
                GetRecentBlockHashResponse,
            ),
            "/api.Api/GetBlockStream": grpclib.const.Handler(
                self.__rpc_get_block_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                GetBlockStreamRequest,
                GetBlockStreamResponse,
            ),
            "/api.Api/GetQuotesStream": grpclib.const.Handler(
                self.__rpc_get_quotes_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                GetQuotesStreamRequest,
                GetQuotesStreamResponse,
            ),
            "/api.Api/GetPoolReservesStream": grpclib.const.Handler(
                self.__rpc_get_pool_reserves_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                GetPoolReservesStreamRequest,
                GetPoolReservesStreamResponse,
            ),
            "/api.Api/GetPricesStream": grpclib.const.Handler(
                self.__rpc_get_prices_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                GetPricesStreamRequest,
                GetPricesStreamResponse,
            ),
            "/api.Api/GetNewRaydiumPoolsStream": grpclib.const.Handler(
                self.__rpc_get_new_raydium_pools_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                GetNewRaydiumPoolsRequest,
                GetNewRaydiumPoolsResponse,
            ),
            "/api.Api/GetSwapsStream": grpclib.const.Handler(
                self.__rpc_get_swaps_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                GetSwapsStreamRequest,
                GetSwapsStreamResponse,
            ),
            "/api.Api/GetPerpOrderbooksStream": grpclib.const.Handler(
                self.__rpc_get_perp_orderbooks_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                GetPerpOrderbooksRequest,
                GetPerpOrderbooksStreamResponse,
            ),
            "/api.Api/GetPerpTradesStream": grpclib.const.Handler(
                self.__rpc_get_perp_trades_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                GetPerpTradesStreamRequest,
                GetPerpTradesStreamResponse,
            ),
        }
