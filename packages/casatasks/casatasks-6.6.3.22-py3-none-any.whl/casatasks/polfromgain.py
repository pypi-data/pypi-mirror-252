##################### generated by xml-casa (v2) from polfromgain.xml ###############
##################### 09dcbeb422075b24cdc8c7d5a1d330d1 ##############################
from __future__ import absolute_import
import numpy
from casatools.typecheck import CasaValidator as _val_ctor
_pc = _val_ctor( )
from casatools.coercetype import coerce as _coerce
from casatools.errors import create_error_string
from .private.task_polfromgain import polfromgain as _polfromgain_t
from casatasks.private.task_logging import start_log as _start_log
from casatasks.private.task_logging import end_log as _end_log
from casatasks.private.task_logging import except_log as _except_log

class _polfromgain:
    """
    polfromgain ---- Derive linear polarization from gain ratio

    
    TBD
    

    --------- parameter descriptions ---------------------------------------------

    vis      Name of input visibility file (MS)
    tablein  Input calibration table
    caltable Output calibration table (forces polarization correction if specified)
    paoffset Manual position angle offset
    [1;42mRETURNS[1;m     void

    --------- examples -----------------------------------------------------------

    
    
    
    TBD...
    
    Keyword arguments:
    vis -- Name of input visibility file
    default: none;
    tablein -- Input calibration table (G or T)
    default: none;
    caltable -- Output calibration table
    default: ''  (no new table)
    if specified, new caltable with polarization removed is generated
    paoffset -- Manual position angle offset
    default: 0.0  (no extra offset)
    example: paoffset=10.0  (10 degree offset)
    
    


    """

    _info_group_ = """calibration"""
    _info_desc_ = """Derive linear polarization from gain ratio"""

    def __call__( self, vis='', tablein='', caltable='', paoffset=float(0.0) ):
        schema = {'vis': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'tablein': {'type': 'cReqPath', 'coerce': _coerce.expand_path}, 'caltable': {'type': 'cStr', 'coerce': _coerce.to_str}, 'paoffset': {'type': 'cFloat', 'coerce': _coerce.to_float}}
        doc = {'vis': vis, 'tablein': tablein, 'caltable': caltable, 'paoffset': paoffset}
        assert _pc.validate(doc,schema), create_error_string(_pc.errors)
        _logging_state_ = _start_log( 'polfromgain', [ 'vis=' + repr(_pc.document['vis']), 'tablein=' + repr(_pc.document['tablein']), 'caltable=' + repr(_pc.document['caltable']), 'paoffset=' + repr(_pc.document['paoffset']) ] )
        task_result = None
        try:
            task_result = _polfromgain_t( _pc.document['vis'], _pc.document['tablein'], _pc.document['caltable'], _pc.document['paoffset'] )
        except Exception as exc:
            _except_log('polfromgain', exc)
            raise
        finally:
            task_result = _end_log( _logging_state_, 'polfromgain', task_result )
        return task_result

polfromgain = _polfromgain( )

