{"version":3,"file":"Bn5mF1Ai.js","mappings":";;AAeA;;AAEA;AAhBA;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+HA;ACQA;AACA;AAIA;AACA;AACA;AACA;AACA;;AAEA;;;AAIA;;AAEA;AAEA;AACA;AACA;;AAEA;;;AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAGA;AAEA;AACA;;;AAIA;;;AAKA;;;AAIA;;;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAIA;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4HA;;ACxUA;AACA;;;;AAOA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;;AAEA;AACA;;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;;;;;AAMA;AACA;;AAEA;;AAEA;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA;;ACEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-dialog.ts","webpack://knx-frontend/./homeassistant-frontend/src/layouts/hass-tabs-subpage-data-table.ts","webpack://knx-frontend/./src/dialogs/knx-telegram-info-dialog.ts","webpack://knx-frontend/./src/views/group_monitor.ts"],"sourcesContent":["import { DialogBase } from \"@material/mwc-dialog/mwc-dialog-base\";\nimport { styles } from \"@material/mwc-dialog/mwc-dialog.css\";\nimport { mdiClose } from \"@mdi/js\";\nimport { css, html, TemplateResult } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HomeAssistant } from \"../types\";\nimport \"./ha-icon-button\";\n\nconst SUPPRESS_DEFAULT_PRESS_SELECTOR = [\"button\", \"ha-list-item\"];\n\nexport const createCloseHeading = (\n  hass: HomeAssistant | undefined,\n  title: string | TemplateResult\n) => html`\n  <div class=\"header_title\">${title}</div>\n  <ha-icon-button\n    .label=${hass?.localize(\"ui.dialogs.generic.close\") ?? \"Close\"}\n    .path=${mdiClose}\n    dialogAction=\"close\"\n    class=\"header_button\"\n  ></ha-icon-button>\n`;\n\n@customElement(\"ha-dialog\")\nexport class HaDialog extends DialogBase {\n  protected readonly [FOCUS_TARGET];\n\n  public scrollToPos(x: number, y: number) {\n    this.contentElement?.scrollTo(x, y);\n  }\n\n  protected renderHeading() {\n    return html`<slot name=\"heading\"> ${super.renderHeading()} </slot>`;\n  }\n\n  protected firstUpdated(): void {\n    super.firstUpdated();\n    this.suppressDefaultPressSelector = [\n      this.suppressDefaultPressSelector,\n      SUPPRESS_DEFAULT_PRESS_SELECTOR,\n    ].join(\", \");\n    this._updateScrolledAttribute();\n    this.contentElement?.addEventListener(\"scroll\", this._onScroll, {\n      passive: true,\n    });\n  }\n\n  disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this.contentElement.removeEventListener(\"scroll\", this._onScroll);\n  }\n\n  private _onScroll = () => {\n    this._updateScrolledAttribute();\n  };\n\n  private _updateScrolledAttribute() {\n    if (!this.contentElement) return;\n    this.toggleAttribute(\"scrolled\", this.contentElement.scrollTop !== 0);\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host([scrolled]) ::slotted(ha-dialog-header) {\n        border-bottom: 1px solid\n          var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n      }\n      .mdc-dialog {\n        --mdc-dialog-scroll-divider-color: var(\n          --dialog-scroll-divider-color,\n          var(--divider-color)\n        );\n        z-index: var(--dialog-z-index, 8);\n        -webkit-backdrop-filter: var(--dialog-backdrop-filter, none);\n        backdrop-filter: var(--dialog-backdrop-filter, none);\n        --mdc-dialog-box-shadow: var(--dialog-box-shadow, none);\n        --mdc-typography-headline6-font-weight: 400;\n        --mdc-typography-headline6-font-size: 1.574rem;\n      }\n      .mdc-dialog__actions {\n        justify-content: var(--justify-action-buttons, flex-end);\n        padding-bottom: max(env(safe-area-inset-bottom), 24px);\n      }\n      .mdc-dialog__actions span:nth-child(1) {\n        flex: var(--secondary-action-button-flex, unset);\n      }\n      .mdc-dialog__actions span:nth-child(2) {\n        flex: var(--primary-action-button-flex, unset);\n      }\n      .mdc-dialog__container {\n        align-items: var(--vertical-align-dialog, center);\n      }\n      .mdc-dialog__title {\n        padding: 24px 24px 0 24px;\n        text-overflow: ellipsis;\n        overflow: hidden;\n      }\n      .mdc-dialog__actions {\n        padding: 12px 24px 12px 24px;\n      }\n      .mdc-dialog__title::before {\n        display: block;\n        height: 0px;\n      }\n      .mdc-dialog .mdc-dialog__content {\n        position: var(--dialog-content-position, relative);\n        padding: var(--dialog-content-padding, 24px);\n      }\n      :host([hideactions]) .mdc-dialog .mdc-dialog__content {\n        padding-bottom: max(\n          var(--dialog-content-padding, 24px),\n          env(safe-area-inset-bottom)\n        );\n      }\n      .mdc-dialog .mdc-dialog__surface {\n        position: var(--dialog-surface-position, relative);\n        top: var(--dialog-surface-top);\n        margin-top: var(--dialog-surface-margin-top);\n        min-height: var(--mdc-dialog-min-height, auto);\n        border-radius: var(--ha-dialog-border-radius, 28px);\n      }\n      :host([flexContent]) .mdc-dialog .mdc-dialog__content {\n        display: flex;\n        flex-direction: column;\n      }\n      .header_title {\n        margin-right: 32px;\n        margin-inline-end: 32px;\n        margin-inline-start: initial;\n        direction: var(--direction);\n      }\n      .header_button {\n        position: absolute;\n        right: 16px;\n        top: 14px;\n        text-decoration: none;\n        color: inherit;\n        inset-inline-start: initial;\n        inset-inline-end: 16px;\n        direction: var(--direction);\n      }\n      .dialog-actions {\n        inset-inline-start: initial !important;\n        inset-inline-end: 0px !important;\n        direction: var(--direction);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog\": HaDialog;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@lrnwebcomponents/simple-tooltip/simple-tooltip\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { LocalizeFunc } from \"../common/translations/localize\";\nimport { computeRTLDirection } from \"../common/util/compute_rtl\";\nimport \"../components/data-table/ha-data-table\";\nimport type {\n  DataTableColumnContainer,\n  DataTableRowData,\n  HaDataTable,\n} from \"../components/data-table/ha-data-table\";\nimport type { HomeAssistant, Route } from \"../types\";\nimport \"./hass-tabs-subpage\";\nimport type { PageNavigation } from \"./hass-tabs-subpage\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"search-changed\": { value: string };\n    \"clear-filter\": undefined;\n  }\n}\n\n@customElement(\"hass-tabs-subpage-data-table\")\nexport class HaTabsSubpageDataTable extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public localizeFunc?: LocalizeFunc;\n\n  @property({ type: Boolean }) public isWide = false;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public supervisor = false;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  /**\n   * Object with the columns.\n   * @type {Object}\n   */\n  @property({ type: Object }) public columns: DataTableColumnContainer = {};\n\n  /**\n   * Data to show in the table.\n   * @type {Array}\n   */\n  @property({ type: Array }) public data: DataTableRowData[] = [];\n\n  /**\n   * Should rows be selectable.\n   * @type {Boolean}\n   */\n  @property({ type: Boolean }) public selectable = false;\n\n  /**\n   * Should rows be clickable.\n   * @type {Boolean}\n   */\n  @property({ type: Boolean }) public clickable = false;\n\n  /**\n   * Do we need to add padding for a fab.\n   * @type {Boolean}\n   */\n  @property({ type: Boolean }) public hasFab = false;\n\n  /**\n   * Add an extra row at the bottom of the data table\n   * @type {TemplateResult}\n   */\n  @property({ attribute: false }) public appendRow?: TemplateResult;\n\n  /**\n   * Field with a unique id per entry in data.\n   * @type {String}\n   */\n  @property({ type: String }) public id = \"id\";\n\n  /**\n   * String to filter the data in the data table on.\n   * @type {String}\n   */\n  @property({ type: String }) public filter = \"\";\n\n  @property() public searchLabel?: string;\n\n  /**\n   * List of strings that show what the data is currently filtered by.\n   * @type {Array}\n   */\n  @property({ type: Array }) public activeFilters?;\n\n  /**\n   * Text to how how many items are hidden.\n   * @type {String}\n   */\n  @property() public hiddenLabel?: string;\n\n  /**\n   * How many items are hidden because of active filters.\n   * @type {Number}\n   */\n  @property({ type: Number }) public numHidden = 0;\n\n  /**\n   * What path to use when the back button is pressed.\n   * @type {String}\n   * @attr back-path\n   */\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  /**\n   * Function to call when the back button is pressed.\n   * @type {() => void}\n   */\n  @property() public backCallback?: () => void;\n\n  /**\n   * String to show when there are no records in the data table.\n   * @type {String}\n   */\n  @property({ type: String }) public noDataText?: string;\n\n  @property() public route!: Route;\n\n  /**\n   * Array of tabs to show on the page.\n   * @type {Array}\n   */\n  @property() public tabs: PageNavigation[] = [];\n\n  /**\n   * Force hides the filter menu.\n   * @type {Boolean}\n   */\n  @property({ type: Boolean }) public hideFilterMenu = false;\n\n  @query(\"ha-data-table\", true) private _dataTable!: HaDataTable;\n\n  public clearSelection() {\n    this._dataTable.clearSelection();\n  }\n\n  protected render(): TemplateResult {\n    const hiddenLabel = this.numHidden\n      ? this.hiddenLabel ||\n        this.hass.localize(\"ui.components.data-table.hidden\", {\n          number: this.numHidden,\n        }) ||\n        this.numHidden\n      : undefined;\n\n    const filterInfo = this.activeFilters\n      ? html`${this.hass.localize(\"ui.components.data-table.filtering_by\")}\n        ${this.activeFilters.join(\", \")}\n        ${hiddenLabel ? `(${hiddenLabel})` : \"\"}`\n      : hiddenLabel;\n\n    const headerToolbar = html`<search-input\n      .hass=${this.hass}\n      .filter=${this.filter}\n      .suffix=${!this.narrow}\n      @value-changed=${this._handleSearchChange}\n      .label=${this.searchLabel}\n    >\n      ${!this.narrow\n        ? html`<div\n            class=\"filters\"\n            slot=\"suffix\"\n            @click=${this._preventDefault}\n          >\n            ${filterInfo\n              ? html`<div class=\"active-filters\">\n                  ${filterInfo}\n                  <mwc-button @click=${this._clearFilter}>\n                    ${this.hass.localize(\"ui.components.data-table.clear\")}\n                  </mwc-button>\n                </div>`\n              : \"\"}\n            <slot name=\"filter-menu\"></slot>\n          </div>`\n        : \"\"}\n    </search-input>`;\n\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .localizeFunc=${this.localizeFunc}\n        .narrow=${this.narrow}\n        .isWide=${this.isWide}\n        .backPath=${this.backPath}\n        .backCallback=${this.backCallback}\n        .route=${this.route}\n        .tabs=${this.tabs}\n        .mainPage=${this.mainPage}\n        .supervisor=${this.supervisor}\n      >\n        ${!this.hideFilterMenu\n          ? html`\n              <div slot=\"toolbar-icon\">\n                ${this.narrow\n                  ? html`\n                      <div class=\"filter-menu\">\n                        ${this.numHidden || this.activeFilters\n                          ? html`<span class=\"badge\"\n                              >${this.numHidden || \"!\"}</span\n                            >`\n                          : \"\"}\n                        <slot name=\"filter-menu\"></slot>\n                      </div>\n                    `\n                  : \"\"}<slot name=\"toolbar-icon\"></slot>\n              </div>\n            `\n          : \"\"}\n        ${this.narrow\n          ? html`\n              <div slot=\"header\">\n                <slot name=\"header\">\n                  <div class=\"search-toolbar\">${headerToolbar}</div>\n                </slot>\n              </div>\n            `\n          : \"\"}\n        <ha-data-table\n          .hass=${this.hass}\n          .columns=${this.columns}\n          .data=${this.data}\n          .filter=${this.filter}\n          .selectable=${this.selectable}\n          .hasFab=${this.hasFab}\n          .id=${this.id}\n          .noDataText=${this.noDataText}\n          .dir=${computeRTLDirection(this.hass)}\n          .clickable=${this.clickable}\n          .appendRow=${this.appendRow}\n        >\n          ${!this.narrow\n            ? html`\n                <div slot=\"header\">\n                  <slot name=\"header\">\n                    <div class=\"table-header\">${headerToolbar}</div>\n                  </slot>\n                </div>\n              `\n            : html` <div slot=\"header\"></div> `}\n        </ha-data-table>\n        <div slot=\"fab\"><slot name=\"fab\"></slot></div>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private _preventDefault(ev) {\n    ev.preventDefault();\n  }\n\n  private _handleSearchChange(ev: CustomEvent) {\n    if (this.filter === ev.detail.value) {\n      return;\n    }\n    this.filter = ev.detail.value;\n    fireEvent(this, \"search-changed\", { value: this.filter });\n  }\n\n  private _clearFilter() {\n    fireEvent(this, \"clear-filter\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-data-table {\n        width: 100%;\n        height: 100%;\n        --data-table-border-width: 0;\n      }\n      :host(:not([narrow])) ha-data-table {\n        height: calc(100vh - 1px - var(--header-height));\n        display: block;\n      }\n      :host([narrow]) hass-tabs-subpage {\n        --main-title-margin: 0;\n      }\n      .table-header {\n        display: flex;\n        align-items: center;\n        --mdc-shape-small: 0;\n        height: 56px;\n      }\n      .search-toolbar {\n        display: flex;\n        align-items: center;\n        color: var(--secondary-text-color);\n      }\n      search-input {\n        --mdc-text-field-fill-color: var(--sidebar-background-color);\n        --mdc-text-field-idle-line-color: var(--divider-color);\n        --text-field-overflow: visible;\n        z-index: 5;\n      }\n      .table-header search-input {\n        display: block;\n        position: absolute;\n        top: 0;\n        right: 0;\n        left: 0;\n      }\n      .search-toolbar search-input {\n        display: block;\n        width: 100%;\n        color: var(--secondary-text-color);\n        --mdc-ripple-color: transparant;\n      }\n      .filters {\n        --mdc-text-field-fill-color: var(--input-fill-color);\n        --mdc-text-field-idle-line-color: var(--input-idle-line-color);\n        --mdc-shape-small: 4px;\n        --text-field-overflow: initial;\n        display: flex;\n        justify-content: flex-end;\n        color: var(--primary-text-color);\n      }\n      .active-filters {\n        color: var(--primary-text-color);\n        position: relative;\n        display: flex;\n        align-items: center;\n        padding: 2px 2px 2px 8px;\n        margin-left: 4px;\n        margin-inline-start: 4px;\n        margin-inline-end: initial;\n        font-size: 14px;\n        width: max-content;\n        cursor: initial;\n        direction: var(--direction);\n      }\n      .active-filters ha-svg-icon {\n        color: var(--primary-color);\n      }\n      .active-filters mwc-button {\n        margin-left: 8px;\n        margin-inline-start: 8px;\n        margin-inline-end: initial;\n        direction: var(--direction);\n      }\n      .active-filters::before {\n        background-color: var(--primary-color);\n        opacity: 0.12;\n        border-radius: 4px;\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        content: \"\";\n      }\n      .badge {\n        min-width: 20px;\n        box-sizing: border-box;\n        border-radius: 50%;\n        font-weight: 400;\n        background-color: var(--primary-color);\n        line-height: 20px;\n        text-align: center;\n        padding: 0px 4px;\n        color: var(--text-primary-color);\n        position: absolute;\n        right: 0;\n        top: 4px;\n        font-size: 0.65em;\n      }\n      .filter-menu {\n        position: relative;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-tabs-subpage-data-table\": HaTabsSubpageDataTable;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport { LitElement, nothing, html, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\nimport { fireEvent } from \"@ha/common/dom/fire_event\";\nimport { haStyleDialog } from \"@ha/resources/styles\";\nimport { HomeAssistant } from \"@ha/types\";\nimport { createCloseHeading } from \"@ha/components/ha-dialog\";\n\nimport { KNX } from \"../types/knx\";\nimport { TelegramDict } from \"../types/websocket\";\nimport { TelegramDictFormatter } from \"../utils/format\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"next-telegram\": undefined;\n    \"previous-telegram\": undefined;\n    \"dialog-close\": undefined;\n  }\n}\n\n@customElement(\"knx-telegram-info-dialog\")\nclass TelegramInfoDialog extends LitElement {\n  public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public knx!: KNX;\n\n  @property() public index?: number;\n\n  @property() public telegram?: TelegramDict;\n\n  @property() public disableNext = false;\n\n  @property() public disablePrevious = false;\n\n  public closeDialog() {\n    this.telegram = undefined;\n    this.index = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName }, { bubbles: false });\n  }\n\n  protected render() {\n    if (this.telegram == null) {\n      this.closeDialog();\n      return nothing;\n    }\n    return html`<ha-dialog\n      open\n      @closed=${this.closeDialog}\n      .heading=${createCloseHeading(\n        this.hass,\n        this.knx.localize(\"group_monitor_telegram\") + \" \" + this.index,\n      )}\n    >\n      <div class=\"content\">\n        <div class=\"row\">\n          <div>${TelegramDictFormatter.dateWithMilliseconds(this.telegram)}</div>\n          <div>${this.knx.localize(this.telegram.direction)}</div>\n        </div>\n        <div class=\"section\">\n          <h4>${this.knx.localize(\"group_monitor_source\")}</h4>\n          <div>${this.telegram.source}</div>\n          <div>${this.telegram.source_name}</div>\n        </div>\n        <div class=\"section\">\n          <h4>${this.knx.localize(\"group_monitor_destination\")}</h4>\n          <div>${this.telegram.destination}</div>\n          <div>${this.telegram.destination_name}</div>\n        </div>\n        <div class=\"section\">\n          <h4>${this.knx.localize(\"group_monitor_message\")}</h4>\n          <div class=\"row\">\n            <div>${this.telegram.telegramtype}</div>\n            <div>${TelegramDictFormatter.dptNameNumber(this.telegram)}</div>\n          </div>\n          ${this.telegram.value != null\n            ? html` <div class=\"row\">\n                <div>${this.knx.localize(\"group_monitor_value\")}</div>\n                <div>${TelegramDictFormatter.valueWithUnit(this.telegram)}</div>\n              </div>`\n            : nothing}\n          ${this.telegram.payload != null\n            ? html` <div class=\"row\">\n                <div>${this.knx.localize(\"group_monitor_payload\")}</div>\n                <div>${TelegramDictFormatter.payload(this.telegram)}</div>\n              </div>`\n            : nothing}\n        </div>\n      </div>\n      <mwc-button\n        slot=\"secondaryAction\"\n        @click=${this.previousTelegram}\n        .disabled=${this.disablePrevious}\n      >\n        ${this.hass.localize(\"ui.common.previous\")}\n      </mwc-button>\n      <mwc-button slot=\"primaryAction\" @click=${this.nextTelegram} .disabled=${this.disableNext}>\n        ${this.hass.localize(\"ui.common.next\")}\n      </mwc-button>\n    </ha-dialog>`;\n  }\n\n  private nextTelegram() {\n    fireEvent(this, \"next-telegram\");\n  }\n\n  private previousTelegram() {\n    fireEvent(this, \"previous-telegram\");\n  }\n\n  static get styles() {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          /* Set the top top of the dialog to a fixed position, so it doesnt jump when the content changes size */\n          --vertical-align-dialog: flex-start;\n          --dialog-surface-margin-top: 40px;\n          --dialog-z-index: 20;\n        }\n\n        .content {\n          display: flex;\n          flex-direction: column;\n          outline: none;\n          flex: 1;\n        }\n\n        h4 {\n          margin-top: 24px;\n          margin-bottom: 12px;\n          border-bottom: 1px solid var(--divider-color);\n          color: var(--secondary-text-color);\n        }\n\n        .section > div {\n          margin-bottom: 12px;\n        }\n        .row {\n          display: flex;\n          flex-direction: row;\n          justify-content: space-between;\n          flex-wrap: wrap;\n        }\n\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          /* When in fullscreen dialog should be attached to top */\n          ha-dialog {\n            --dialog-surface-margin-top: 0px;\n          }\n        }\n\n        @media all and (min-width: 600px) and (min-height: 501px) {\n          ha-dialog {\n            --mdc-dialog-min-width: 580px;\n            --mdc-dialog-max-width: 580px;\n            --mdc-dialog-max-height: calc(100% - 72px);\n          }\n\n          .main-title {\n            cursor: default;\n          }\n\n          :host([large]) ha-dialog {\n            --mdc-dialog-min-width: 90vw;\n            --mdc-dialog-max-width: 90vw;\n          }\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"knx-telegram-info-dialog\": TelegramInfoDialog;\n  }\n}\n","import { html, CSSResultGroup, LitElement, TemplateResult, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\n\nimport \"@ha/layouts/hass-tabs-subpage-data-table\";\nimport { HASSDomEvent } from \"@ha/common/dom/fire_event\";\nimport { computeRTLDirection } from \"@ha/common/util/compute_rtl\";\nimport type {\n  DataTableColumnContainer,\n  DataTableRowData,\n  RowClickedEvent,\n} from \"@ha/components/data-table/ha-data-table\";\nimport { haStyle } from \"@ha/resources/styles\";\nimport { HomeAssistant, Route } from \"@ha/types\";\n\nimport type { PageNavigation } from \"@ha/layouts/hass-tabs-subpage\";\nimport { subscribeKnxTelegrams, getGroupMonitorInfo } from \"../services/websocket.service\";\nimport { KNX } from \"../types/knx\";\nimport { TelegramDict } from \"../types/websocket\";\nimport { TelegramDictFormatter } from \"../utils/format\";\nimport \"../dialogs/knx-telegram-info-dialog\";\nimport { KNXLogger } from \"../tools/knx-logger\";\n\nconst logger = new KNXLogger(\"group_monitor\");\n\n@customElement(\"knx-group-monitor\")\nexport class KNXGroupMonitor extends LitElement {\n  @property({ type: Object }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public knx!: KNX;\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Object }) public route?: Route;\n\n  @property({ type: Array, reflect: false }) public tabs!: PageNavigation[];\n\n  @property() private columns: DataTableColumnContainer = {};\n\n  @state() private projectLoaded = false;\n\n  @state() private subscribed?: () => void;\n\n  @state() private telegrams: TelegramDict[] = [];\n\n  @state() private rows: DataTableRowData[] = [];\n\n  @property() private _dialogIndex: number | null = null;\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this.subscribed) {\n      this.subscribed();\n      this.subscribed = undefined;\n    }\n  }\n\n  protected async firstUpdated() {\n    if (!this.subscribed) {\n      getGroupMonitorInfo(this.hass).then(\n        (groupMonitorInfo) => {\n          this.projectLoaded = groupMonitorInfo.project_loaded;\n          this.telegrams = groupMonitorInfo.recent_telegrams;\n          this.rows = this.telegrams.map((telegram, index) => this._telegramToRow(telegram, index));\n        },\n        (err) => {\n          logger.error(\"getGroupMonitorInfo\", err);\n        },\n      );\n      this.subscribed = await subscribeKnxTelegrams(this.hass, (message) => {\n        this.telegram_callback(message);\n        this.requestUpdate();\n      });\n\n      //! We need to lateinit this property due to the fact that this.hass needs to be available\n      this.columns = {\n        index: {\n          hidden: this.narrow,\n          title: \"#\",\n          sortable: true,\n          direction: \"desc\",\n          type: \"numeric\",\n          width: \"60px\", // 4 digits\n        },\n        timestamp: {\n          filterable: true,\n          sortable: true,\n          title: html`${this.knx.localize(\"group_monitor_time\")}`,\n          width: \"110px\",\n        },\n        direction: {\n          hidden: this.narrow,\n          filterable: true,\n          title: html`${this.knx.localize(\"group_monitor_direction\")}`,\n          width: \"120px\",\n        },\n        sourceAddress: {\n          filterable: true,\n          sortable: true,\n          title: html`${this.knx.localize(\"group_monitor_source\")}`,\n          width: this.narrow ? \"90px\" : this.projectLoaded ? \"95px\" : \"20%\",\n        },\n        sourceText: {\n          hidden: this.narrow || !this.projectLoaded,\n          filterable: true,\n          sortable: true,\n          title: html`${this.knx.localize(\"group_monitor_source\")}`,\n          width: \"20%\",\n        },\n        destinationAddress: {\n          sortable: true,\n          filterable: true,\n          title: html`${this.knx.localize(\"group_monitor_destination\")}`,\n          width: this.narrow ? \"90px\" : this.projectLoaded ? \"96px\" : \"20%\",\n        },\n        destinationText: {\n          hidden: this.narrow || !this.projectLoaded,\n          sortable: true,\n          filterable: true,\n          title: html`${this.knx.localize(\"group_monitor_destination\")}`,\n          width: \"20%\",\n        },\n        type: {\n          hidden: this.narrow,\n          title: html`${this.knx.localize(\"group_monitor_type\")}`,\n          filterable: true,\n          width: \"155px\", // 155px suits for \"GroupValueResponse\"\n        },\n        payload: {\n          hidden: this.narrow && this.projectLoaded,\n          title: html`${this.knx.localize(\"group_monitor_payload\")}`,\n          filterable: true,\n          type: \"numeric\",\n          width: \"105px\",\n        },\n        value: {\n          hidden: !this.projectLoaded,\n          title: html`${this.knx.localize(\"group_monitor_value\")}`,\n          filterable: true,\n          width: this.narrow ? \"105px\" : \"150px\",\n        },\n      };\n    }\n  }\n\n  protected telegram_callback(telegram: TelegramDict): void {\n    this.telegrams.push(telegram);\n    const rows = [...this.rows];\n    rows.push(this._telegramToRow(telegram, rows.length));\n    this.rows = rows;\n  }\n\n  protected _telegramToRow(telegram: TelegramDict, index: number): DataTableRowData {\n    const value = TelegramDictFormatter.valueWithUnit(telegram);\n    const payload = TelegramDictFormatter.payload(telegram);\n    return {\n      index: index,\n      destinationAddress: telegram.destination,\n      destinationText: telegram.destination_name,\n      direction: this.knx.localize(telegram.direction),\n      payload: payload,\n      sourceAddress: telegram.source,\n      sourceText: telegram.source_name,\n      timestamp: TelegramDictFormatter.timeWithMilliseconds(telegram),\n      type: telegram.telegramtype,\n      value: !this.narrow\n        ? value\n        : value || payload || (telegram.telegramtype === \"GroupValueRead\" ? \"GroupRead\" : \"\"),\n    };\n  }\n\n  protected render(): TemplateResult | void {\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow!}\n        .route=${this.route!}\n        .tabs=${this.tabs}\n        .localizeFunc=${this.knx.localize}\n        .columns=${this.columns}\n        .noDataText=${this.subscribed\n          ? this.knx.localize(\"group_monitor_connected_waiting_telegrams\")\n          : this.knx.localize(\"group_monitor_waiting_to_connect\")}\n        .data=${this.rows}\n        .hasFab=${false}\n        .searchLabel=${this.hass.localize(\"ui.components.data-table.search\")}\n        .dir=${computeRTLDirection(this.hass)}\n        id=\"index\"\n        .clickable=${true}\n        @row-click=${this._rowClicked}\n      ></hass-tabs-subpage-data-table>\n      ${this._dialogIndex !== null ? this._renderTelegramInfoDialog(this._dialogIndex) : nothing}\n    `;\n  }\n\n  private _renderTelegramInfoDialog(index: number): TemplateResult {\n    return html` <knx-telegram-info-dialog\n      .hass=${this.hass}\n      .knx=${this.knx}\n      .telegram=${this.telegrams[index]}\n      .index=${index}\n      .disableNext=${index! + 1 >= this.telegrams.length}\n      .disablePrevious=${index <= 0}\n      @next-telegram=${this._dialogNext}\n      @previous-telegram=${this._dialogPrevious}\n      @dialog-closed=${this._dialogClosed}\n    ></knx-telegram-info-dialog>`;\n  }\n\n  private async _rowClicked(ev: HASSDomEvent<RowClickedEvent>): Promise<void> {\n    const telegramIndex: number = Number(ev.detail.id);\n    this._dialogIndex = telegramIndex;\n  }\n\n  private _dialogNext(): void {\n    this._dialogIndex = this._dialogIndex! + 1;\n  }\n\n  private _dialogPrevious(): void {\n    this._dialogIndex = this._dialogIndex! - 1;\n  }\n\n  private _dialogClosed(): void {\n    this._dialogIndex = null;\n  }\n\n  static get styles(): CSSResultGroup {\n    return haStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"knx-group-monitor\": KNXGroupMonitor;\n  }\n}\n"],"names":[],"sourceRoot":""}