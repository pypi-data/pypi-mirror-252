{"version":3,"file":"HtswSIOK.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA;AAIA;;AAKA;;;;ACzBA;ACxBA;AAGA;;AAGA;AACA;;AAEA;;AAGA;AACA;;;;;;AAMA;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;;AC9CA;AACA;;AAEA;;;AAIA;AACA;AACA;AAEA;;;AAkBA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;;;AASA;;AAGA;;;AAkBA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;AAGA;AC9EA;AACA;AACA;;AAMA;AACA;AAGA;AAMA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwHA;ACpHA;AACA;;AAmCA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAEA;AACA;;AAGA;;AAGA;AACA;;AAEA;;;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA","sources":["webpack://knx-frontend/./homeassistant-frontend/src/components/ha-card.ts","webpack://knx-frontend/./homeassistant-frontend/src/components/ha-circular-progress.ts","webpack://knx-frontend/./homeassistant-frontend/src/layouts/hass-loading-screen.ts","webpack://knx-frontend/mwc-circular-progress-base.ts","webpack://knx-frontend/./src/components/knx-project-tree-view.ts","webpack://knx-frontend/./src/views/project_view.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public raised = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        box-shadow: var(--ha-card-box-shadow, none);\n        box-sizing: border-box;\n        border-radius: var(--ha-card-border-radius, 12px);\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([raised]) {\n        border: none;\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render() {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : nothing}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { CircularProgress } from \"@material/mwc-circular-progress\";\nimport { CSSResultGroup, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-circular-progress\")\n// @ts-ignore\nexport class HaCircularProgress extends CircularProgress {\n  @property({ type: Boolean })\n  public active = false;\n\n  @property()\n  public alt = \"Loading\";\n\n  @property()\n  public size: \"tiny\" | \"small\" | \"medium\" | \"large\" = \"medium\";\n\n  // @ts-ignore\n  public set density(_) {\n    // just a dummy\n  }\n\n  public get density() {\n    switch (this.size) {\n      case \"tiny\":\n        return -8;\n      case \"small\":\n        return -5;\n      case \"medium\":\n        return 0;\n      case \"large\":\n        return 5;\n      default:\n        return 0;\n    }\n  }\n\n  // @ts-ignore\n  public set indeterminate(_) {\n    // just a dummy\n  }\n\n  public get indeterminate() {\n    return this.active;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.styles,\n      css`\n        :host {\n          overflow: hidden;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-circular-progress\": HaCircularProgress;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  nothing,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../components/ha-circular-progress\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport \"../components/ha-menu-button\";\nimport { haStyle } from \"../resources/styles\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"hass-loading-screen\")\nclass HassLoadingScreen extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Boolean, attribute: \"no-toolbar\" })\n  public noToolbar = false;\n\n  @property({ type: Boolean }) public rootnav = false;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property() public message?: string;\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.noToolbar\n        ? \"\"\n        : html`<div class=\"toolbar\">\n            ${this.rootnav || history.state?.root\n              ? html`\n                  <ha-menu-button\n                    .hass=${this.hass}\n                    .narrow=${this.narrow}\n                  ></ha-menu-button>\n                `\n              : html`\n                  <ha-icon-button-arrow-prev\n                    .hass=${this.hass}\n                    @click=${this._handleBack}\n                  ></ha-icon-button-arrow-prev>\n                `}\n          </div>`}\n      <div class=\"content\">\n        <ha-circular-progress active></ha-circular-progress>\n        ${this.message\n          ? html`<div id=\"loading-text\">${this.message}</div>`\n          : nothing}\n      </div>\n    `;\n  }\n\n  private _handleBack() {\n    history.back();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n          height: 100%;\n          background-color: var(--primary-background-color);\n        }\n        .toolbar {\n          display: flex;\n          align-items: center;\n          font-size: 20px;\n          height: var(--header-height);\n          padding: 8px 12px;\n          pointer-events: none;\n          background-color: var(--app-header-background-color);\n          font-weight: 400;\n          color: var(--app-header-text-color, white);\n          border-bottom: var(--app-header-border-bottom, none);\n          box-sizing: border-box;\n        }\n        @media (max-width: 599px) {\n          .toolbar {\n            padding: 4px;\n          }\n        }\n        ha-menu-button,\n        ha-icon-button-arrow-prev {\n          pointer-events: auto;\n        }\n        .content {\n          height: calc(100% - var(--header-height));\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n        }\n        #loading-text {\n          max-width: 350px;\n          margin-top: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-loading-screen\": HassLoadingScreen;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport {ariaProperty} from '@material/mwc-base/aria-property.js';\nimport {html, LitElement, PropertyValues, TemplateResult} from 'lit';\nimport {property} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\nimport {styleMap} from 'lit/directives/style-map.js';\n\n/** @soyCompatible */\nexport class CircularProgressBase extends LitElement {\n  @property({type: Boolean, reflect: true}) indeterminate = false;\n\n  @property({type: Number, reflect: true}) progress = 0;\n\n  @property({type: Number, reflect: true}) density = 0;\n\n  @property({type: Boolean, reflect: true}) closed = false;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty\n  @property({type: String, attribute: 'aria-label'})\n  override ariaLabel!: string\n\n  open() {\n    this.closed = false;\n  }\n\n  close() {\n    this.closed = true;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected override render(): TemplateResult {\n    /** @classMap */\n    const classes = {\n      'mdc-circular-progress--closed': this.closed,\n      'mdc-circular-progress--indeterminate': this.indeterminate,\n    };\n\n    const containerSideLength = 48 + this.density * 4;\n    /** @styleMap */\n    const styles = {\n      'width': `${containerSideLength}px`,\n      'height': `${containerSideLength}px`,\n    };\n\n    return html`\n      <div\n        class=\"mdc-circular-progress ${classMap(classes)}\"\n        style=\"${styleMap(styles)}\"\n        role=\"progressbar\"\n        aria-label=\"${ifDefined(this.ariaLabel)}\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"1\"\n        aria-valuenow=\"${\n        ifDefined(this.indeterminate ? undefined : this.progress)}\">\n        ${this.renderDeterminateContainer()}\n        ${this.renderIndeterminateContainer()}\n      </div>`;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected renderDeterminateContainer(): TemplateResult {\n    const sideLength = 48 + this.density * 4;\n    const center = sideLength / 2;\n    const circleRadius = this.density >= -3 ? 18 + this.density * 11 / 6 :\n                                              12.5 + (this.density + 3) * 5 / 4;\n    const circumference = 2 * 3.1415926 * circleRadius;\n    const determinateStrokeDashOffset = (1 - this.progress) * circumference;\n    const strokeWidth = this.density >= -3 ? 4 + this.density * (1 / 3) :\n                                             3 + (this.density + 3) * (1 / 6);\n\n    return html`\n      <div class=\"mdc-circular-progress__determinate-container\">\n        <svg class=\"mdc-circular-progress__determinate-circle-graphic\"\n             viewBox=\"0 0 ${sideLength} ${sideLength}\">\n          <circle class=\"mdc-circular-progress__determinate-track\"\n                  cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                  stroke-width=\"${strokeWidth}\"></circle>\n          <circle class=\"mdc-circular-progress__determinate-circle\"\n                  cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                  stroke-dasharray=\"${2 * 3.1415926 * circleRadius}\"\n                  stroke-dashoffset=\"${determinateStrokeDashOffset}\"\n                  stroke-width=\"${strokeWidth}\"></circle>\n        </svg>\n      </div>`;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected renderIndeterminateContainer(): TemplateResult {\n    return html`\n      <div class=\"mdc-circular-progress__indeterminate-container\">\n        <div class=\"mdc-circular-progress__spinner-layer\">\n          ${this.renderIndeterminateSpinnerLayer()}\n        </div>\n      </div>`;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected renderIndeterminateSpinnerLayer(): TemplateResult {\n    const sideLength = 48 + this.density * 4;\n    const center = sideLength / 2;\n    const circleRadius = this.density >= -3 ? 18 + this.density * 11 / 6 :\n                                              12.5 + (this.density + 3) * 5 / 4;\n    const circumference = 2 * 3.1415926 * circleRadius;\n    const halfCircumference = 0.5 * circumference;\n    const strokeWidth = this.density >= -3 ? 4 + this.density * (1 / 3) :\n                                             3 + (this.density + 3) * (1 / 6);\n\n    return html`\n        <div class=\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-left\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth}\"></circle>\n          </svg>\n        </div>\n        <div class=\"mdc-circular-progress__gap-patch\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth * 0.8}\"></circle>\n          </svg>\n        </div>\n        <div class=\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-right\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth}\"></circle>\n          </svg>\n        </div>`;\n  }\n\n  override update(changedProperties: PropertyValues<this>) {\n    super.update(changedProperties);\n\n    // Bound progress value in interval [0, 1].\n    if (changedProperties.has('progress')) {\n      if (this.progress > 1) {\n        this.progress = 1;\n      }\n\n      if (this.progress < 0) {\n        this.progress = 0;\n      }\n    }\n  }\n}\n","import { css, CSSResultGroup, html, LitElement, nothing, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\n\nimport { fireEvent } from \"@ha/common/dom/fire_event\";\n\nimport { GroupRange, KNXProject } from \"../types/websocket\";\nimport { KNXLogger } from \"../tools/knx-logger\";\n\nconst logger = new KNXLogger(\"knx-project-tree-view\");\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"knx-group-range-selection-changed\": GroupRangeSelectionChangedEvent;\n  }\n}\n\nexport interface GroupRangeSelectionChangedEvent {\n  groupAddresses: string[];\n}\n\ninterface RangeInfo {\n  selected: boolean;\n  groupAddresses: string[];\n}\n\n@customElement(\"knx-project-tree-view\")\nexport class KNXProjectTreeView extends LitElement {\n  @property({ attribute: false }) data!: KNXProject;\n\n  @property({ attribute: false }) multiselect = false;\n\n  @state() private _selectableRanges: { [key: string]: RangeInfo } = {};\n\n  connectedCallback() {\n    super.connectedCallback();\n\n    const initSelectableRanges = (data: { [key: string]: GroupRange }) => {\n      Object.entries(data).forEach(([key, groupRange]) => {\n        if (groupRange.group_addresses.length > 0) {\n          this._selectableRanges[key] = {\n            selected: false,\n            groupAddresses: groupRange.group_addresses,\n          };\n        }\n        initSelectableRanges(groupRange.group_ranges);\n      });\n    };\n    initSelectableRanges(this.data.group_ranges);\n    logger.debug(\"ranges\", this._selectableRanges);\n  }\n\n  protected render(): TemplateResult {\n    return html`<div class=\"ha-tree-view\">${this._recurseData(this.data.group_ranges)}</div>`;\n  }\n\n  protected _recurseData(data: { [key: string]: GroupRange }, level: number = 0): TemplateResult {\n    const childTemplates = Object.entries(data).map(([key, groupRange]) => {\n      const hasSubRange = Object.keys(groupRange.group_ranges).length > 0;\n      const empty = !(hasSubRange || groupRange.group_addresses.length > 0);\n      if (empty) {\n        return nothing;\n      }\n      const selectable = key in this._selectableRanges;\n      const selected = selectable ? this._selectableRanges[key].selected : false;\n      const rangeClasses = {\n        \"range-item\": true,\n        \"root-range\": level === 0,\n        \"sub-range\": level > 0,\n        selectable: selectable,\n        \"selected-range\": selected,\n        \"non-selected-range\": selectable && !selected,\n      };\n      const rangeContent = html`<div\n        class=${classMap(rangeClasses)}\n        toggle-range=${selectable ? key : nothing}\n        @click=${selectable\n          ? this.multiselect\n            ? this._selectionChangedMulti\n            : this._selectionChangedSingle\n          : nothing}\n      >\n        <span class=\"range-key\">${key}</span>\n        <span class=\"range-text\">${groupRange.name}</span>\n      </div>`;\n\n      if (hasSubRange) {\n        const groupClasses = {\n          \"root-group\": level === 0,\n          \"sub-group\": level !== 0,\n        };\n        return html`<div class=${classMap(groupClasses)}>\n          ${rangeContent} ${this._recurseData(groupRange.group_ranges, level + 1)}\n        </div>`;\n      }\n\n      return html`${rangeContent}`;\n    });\n    return html`${childTemplates}`;\n  }\n\n  private _selectionChangedMulti(ev) {\n    const rangeKey = (ev.target as Element).getAttribute(\"toggle-range\")!;\n    this._selectableRanges[rangeKey].selected = !this._selectableRanges[rangeKey].selected;\n    this._selectionUpdate();\n    this.requestUpdate();\n  }\n\n  private _selectionChangedSingle(ev) {\n    const rangeKey = (ev.target as Element).getAttribute(\"toggle-range\")!;\n    const rangePreviouslySelected = this._selectableRanges[rangeKey].selected;\n    Object.values(this._selectableRanges).forEach((rangeInfo) => {\n      rangeInfo.selected = false;\n    });\n    this._selectableRanges[rangeKey].selected = !rangePreviouslySelected;\n    this._selectionUpdate();\n    this.requestUpdate();\n  }\n\n  private _selectionUpdate() {\n    const _gaOfSelectedRanges = Object.values(this._selectableRanges).reduce(\n      (result, rangeInfo) =>\n        rangeInfo.selected ? result.concat(rangeInfo.groupAddresses) : result,\n      [] as string[],\n    );\n    logger.debug(\"selection changed\", _gaOfSelectedRanges);\n    fireEvent(this, \"knx-group-range-selection-changed\", { groupAddresses: _gaOfSelectedRanges });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        margin: 0;\n        height: 100%;\n        overflow-y: scroll;\n        overflow-x: hidden;\n        background-color: var(--card-background-color);\n      }\n\n      .ha-tree-view {\n        cursor: default;\n      }\n\n      .root-group {\n        margin-bottom: 8px;\n      }\n\n      .root-group > * {\n        padding-top: 5px;\n        padding-bottom: 5px;\n      }\n\n      .range-item {\n        display: block;\n        overflow: hidden;\n        white-space: nowrap;\n        text-overflow: ellipsis;\n        font-size: 0.875rem;\n      }\n\n      .range-item > * {\n        vertical-align: middle;\n        pointer-events: none;\n      }\n\n      .range-key {\n        color: var(--text-primary-color);\n        font-size: 0.75rem;\n        font-weight: 700;\n        background-color: var(--label-badge-grey);\n        border-radius: 4px;\n        padding: 1px 4px;\n        margin-right: 2px;\n      }\n\n      .root-range {\n        padding-left: 8px;\n        font-weight: 500;\n        background-color: var(--secondary-background-color);\n\n        & .range-key {\n          color: var(--primary-text-color);\n          background-color: var(--card-background-color);\n        }\n      }\n\n      .sub-range {\n        padding-left: 13px;\n      }\n\n      .selectable {\n        cursor: pointer;\n      }\n\n      .selectable:hover {\n        background-color: rgba(var(--rgb-primary-text-color), 0.04);\n      }\n\n      .selected-range {\n        background-color: rgba(var(--rgb-primary-color), 0.12);\n\n        & .range-key {\n          background-color: var(--primary-color);\n        }\n      }\n\n      .selected-range:hover {\n        background-color: rgba(var(--rgb-primary-color), 0.07);\n      }\n\n      .non-selected-range {\n        background-color: var(--card-background-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"knx-project-tree-view\": KNXProjectTreeView;\n  }\n}\n","import { mdiFilterVariant } from \"@mdi/js\";\nimport { LitElement, TemplateResult, html, css, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\n\nimport memoize from \"memoize-one\";\n\nimport { HASSDomEvent } from \"@ha/common/dom/fire_event\";\nimport \"@ha/layouts/hass-loading-screen\";\nimport \"@ha/layouts/hass-tabs-subpage\";\nimport type { PageNavigation } from \"@ha/layouts/hass-tabs-subpage\";\nimport \"@ha/components/ha-card\";\nimport \"@ha/components/ha-icon-button\";\nimport \"@ha/components/data-table/ha-data-table\";\nimport type { DataTableColumnContainer } from \"@ha/components/data-table/ha-data-table\";\n\nimport \"../components/knx-project-tree-view\";\n\nimport { compare } from \"compare-versions\";\n\nimport { HomeAssistant, Route } from \"@ha/types\";\nimport { KNX } from \"../types/knx\";\nimport type { GroupRangeSelectionChangedEvent } from \"../components/knx-project-tree-view\";\nimport { GroupAddress } from \"../types/websocket\";\nimport { KNXLogger } from \"../tools/knx-logger\";\n\nconst logger = new KNXLogger(\"knx-project-view\");\n// Minimum XKNXProject Version needed which was used for parsing the ETS Project\nconst MIN_XKNXPROJECT_VERSION = \"3.3.0\";\n\n@customElement(\"knx-project-view\")\nexport class KNXProjectView extends LitElement {\n  @property({ type: Object }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public knx!: KNX;\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  @property({ type: Object }) public route?: Route;\n\n  @property({ type: Array, reflect: false }) public tabs!: PageNavigation[];\n\n  @property({ type: Boolean, reflect: true }) private rangeSelectorHidden = true;\n\n  @state() private _visibleGroupAddresses: string[] = [];\n\n  @state() private _groupRangeAvailable: boolean = false;\n\n  protected firstUpdated() {\n    if (!this.knx.project) {\n      this.knx.loadProject().then(() => {\n        this._isGroupRangeAvailable();\n        this.requestUpdate();\n      });\n    } else {\n      // project was already loaded\n      this._isGroupRangeAvailable();\n    }\n  }\n\n  private _isGroupRangeAvailable() {\n    const projectVersion = this.knx.project?.knxproject.info.xknxproject_version ?? \"0.0.0\";\n    logger.debug(\"project version: \" + projectVersion);\n    this._groupRangeAvailable = compare(projectVersion, MIN_XKNXPROJECT_VERSION, \">=\");\n  }\n\n  private _columns = memoize((narrow, _language): DataTableColumnContainer<GroupAddress> => {\n    const addressWidth = \"100px\";\n    const dptWidth = \"82px\";\n\n    return {\n      address: {\n        filterable: true,\n        sortable: true,\n        title: this.knx.localize(\"project_view_table_address\"),\n        width: addressWidth,\n      },\n      name: {\n        filterable: true,\n        sortable: true,\n        title: this.knx.localize(\"project_view_table_name\"),\n        width: narrow\n          ? \"calc(100% - \" + dptWidth + \" - \" + addressWidth + \")\"\n          : \"calc(50% - \" + dptWidth + \")\",\n      },\n      description: {\n        filterable: true,\n        sortable: true,\n        hidden: narrow,\n        title: this.knx.localize(\"project_view_table_description\"),\n        width: \"calc(50% - \" + addressWidth + \")\",\n      },\n      dpt: {\n        sortable: true,\n        filterable: true,\n        title: this.knx.localize(\"project_view_table_dpt\"),\n        width: dptWidth,\n        template: (ga: GroupAddress) =>\n          ga.dpt\n            ? html`<span style=\"display:inline-block;width:24px;text-align:right;\"\n                  >${ga.dpt.main}</span\n                >${ga.dpt.sub ? \".\" + ga.dpt.sub.toString().padStart(3, \"0\") : \"\"} `\n            : \"\",\n      },\n    };\n  });\n\n  private _getRows(visibleGroupAddresses: string[]): GroupAddress[] {\n    if (!visibleGroupAddresses.length)\n      // if none is set, default to show all\n      return Object.values(this.knx.project!.knxproject.group_addresses);\n\n    return Object.entries(this.knx.project!.knxproject.group_addresses).reduce(\n      (result, [key, groupAddress]) => {\n        if (visibleGroupAddresses.includes(key)) {\n          result.push(groupAddress);\n        }\n        return result;\n      },\n      [] as GroupAddress[],\n    );\n  }\n\n  private _visibleAddressesChanged(ev: HASSDomEvent<GroupRangeSelectionChangedEvent>) {\n    this._visibleGroupAddresses = ev.detail.groupAddresses;\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.knx.project) {\n      return html` <hass-loading-screen></hass-loading-screen> `;\n    }\n\n    const filtered = this._getRows(this._visibleGroupAddresses);\n\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow!}\n        .route=${this.route!}\n        .tabs=${this.tabs}\n        .localizeFunc=${this.knx.localize}\n      >\n        ${this.knx.project.project_loaded\n          ? html`${this.narrow && this._groupRangeAvailable\n                ? html`<ha-icon-button\n                    slot=\"toolbar-icon\"\n                    .label=${this.hass.localize(\"ui.components.related-filter-menu.filter\")}\n                    .path=${mdiFilterVariant}\n                    @click=${this._toggleRangeSelector}\n                  ></ha-icon-button>`\n                : nothing}\n              <div class=\"sections\">\n                ${this._groupRangeAvailable\n                  ? html`\n                      <knx-project-tree-view\n                        .data=${this.knx.project.knxproject}\n                        @knx-group-range-selection-changed=${this._visibleAddressesChanged}\n                      ></knx-project-tree-view>\n                    `\n                  : nothing}\n                <ha-data-table\n                  class=\"ga-table\"\n                  .hass=${this.hass}\n                  .columns=${this._columns(this.narrow, this.hass.language)}\n                  .data=${filtered}\n                  .hasFab=${false}\n                  .searchLabel=${this.hass.localize(\"ui.components.data-table.search\")}\n                  .clickable=${false}\n                ></ha-data-table>\n              </div>`\n          : html` <ha-card .header=${this.knx.localize(\"attention\")}>\n              <div class=\"card-content\">\n                <p>${this.knx.localize(\"project_view_upload\")}</p>\n              </div>\n            </ha-card>`}\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private _toggleRangeSelector() {\n    this.rangeSelectorHidden = !this.rangeSelectorHidden;\n  }\n\n  static get styles() {\n    return css`\n      hass-loading-screen {\n        --app-header-background-color: var(--sidebar-background-color);\n        --app-header-text-color: var(--sidebar-text-color);\n      }\n      .sections {\n        display: flex;\n        flex-direction: row;\n        height: 100%;\n      }\n\n      :host([narrow]) knx-project-tree-view {\n        position: absolute;\n        max-width: calc(100% - 60px); /* 100% -> max 871px before not narrow */\n        z-index: 1;\n        right: 0;\n        transition: 0.5s;\n        border-left: 1px solid var(--divider-color);\n      }\n\n      :host([narrow][rangeSelectorHidden]) knx-project-tree-view {\n        width: 0;\n      }\n\n      :host(:not([narrow])) knx-project-tree-view {\n        max-width: 255px; /* min 616px - 816px for tree-view + ga-table (depending on side menu) */\n      }\n\n      .ga-table {\n        flex: 1;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"knx-project-view\": KNXProjectView;\n  }\n}\n"],"names":[],"sourceRoot":""}