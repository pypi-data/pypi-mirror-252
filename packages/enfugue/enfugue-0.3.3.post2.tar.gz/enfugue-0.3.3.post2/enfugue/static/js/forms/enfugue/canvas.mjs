import{isEmpty}from"../../base/helpers.mjs";import{FormView}from"../base.mjs";import{NumberInputView,CheckboxInputView,SelectInputView,MaskTypeInputView,EngineSizeInputView}from"../input.mjs";let defaultWidth=512,defaultHeight=512,defaultTilingStride=128;if(!(isEmpty(window.enfugue)||isEmpty(window.enfugue.config)||isEmpty(window.enfugue.config.model)||isEmpty(window.enfugue.config.model.invocation))){let e=window.enfugue.config.model.invocation;isEmpty(e.width)||(defaultWidth=e.width),isEmpty(e.height)||(defaultHeight=e.height),isEmpty(e.tilingSize)||(defaultTilingStride=e.tilingSize)}class CanvasSizeInputView extends SelectInputView{static defaultOptions={"320_576":"320×576","512_512":"512×512","512_768":"512×768","576_320":"576×320","576_1024":"576×1024","640_320":"640×320","640_480":"640×480","768_512":"768×512","768_768":"768×768","768_1024":"768×1024","768_1344":"768×1344","896_1152":"896×1152","1024_576":"1024×576","1024_640":"1024×640","1024_768":"1024×768","1024_1024":"1024×1024","1152_896":"1152×896","1216_832":"1216×832","1280_720":"1280×720","1344_768":"1344×768","1440_1080":"1440×1080","1536_640":"1536×640","1920_1080":"1920×1080","2048_1080":"2048×1080","3840_2160":"3840×2160","4096_2160":"4096×2160",custom:"Custom"}}class CanvasFormView extends FormView{static className="canvas-form-view";static autoSubmit=!0;static fieldSets={Dimensions:{size:{label:"Size",class:CanvasSizeInputView,config:{value:"512_512"}},width:{label:"Width",class:NumberInputView,config:{min:64,max:16384,value:defaultWidth,step:8,tooltip:"The width of the canvas in pixels.",allowNull:!1}},height:{label:"Height",class:NumberInputView,config:{min:64,max:16384,value:defaultHeight,step:8,tooltip:"The height of the canvas in pixels.",allowNull:!1}},tileHorizontal:{label:"Horizontally<br/>Tiling",class:CheckboxInputView,config:{tooltip:"When enabled, the resulting image will tile horizontally, i.e., when duplicated and placed side-by-side, there will be no seams between the copies."}},tileVertical:{label:"Vertically<br/>Tiling",class:CheckboxInputView,config:{tooltip:"When enabled, the resulting image will tile vertically, i.e., when duplicated and placed with on image on top of the other, there will be no seams between the copies."}},tilingUnet:{label:"Enable<br />Tiled UNet",class:CheckboxInputView,config:{tooltip:"When enabled, the engine will only ever process a square in the size of the configured model size at once. After each square, the frame will be moved by the configured amount of pixels along either the horizontal or vertical axis, and then the image is re-diffused. When this is disabled, the entire canvas will be diffused at once.",value:!1}},tilingVae:{label:"Enable<br />Tiled VAE",class:CheckboxInputView,config:{tooltip:"When enabled, the engine will only ever decode or encode a square in the size of the configured model size at once.",value:!1}},tilingSize:{label:"Tile Size",class:EngineSizeInputView,config:{required:!1,value:null}},tilingStride:{label:"Tile Stride",class:SelectInputView,config:{options:["8","16","32","64","128","256","512"],value:`${defaultTilingStride}`,tooltip:"The number of pixels to move the frame when doing tiled diffusion. A low number can produce more detailed results, but can be noisy, and takes longer to process. A high number is faster to process, but can have poor results especially along frame boundaries. The recommended value is set by default."}},tilingMaskType:{label:"Tile Mask",class:MaskTypeInputView}}};async inputChanged(e,i){if("size"===e){let e=i.getValue();if("custom"!==e){let[i,t]=e.split("_"),s=await this.getInputView("width"),l=await this.getInputView("height");i=parseInt(i),t=parseInt(t),s.setValue(i,!1),l.setValue(t,!1),this.values.width=i,this.values.height=t}}return await super.inputChanged(e,i)}async submit(){await super.submit();let e=await this.getInputView("tilingUnet"),i=await this.getInputView("tilingVae"),t=await this.getInputView("width"),s=await this.getInputView("height");if(this.values.tileHorizontal||this.values.tileVertical){this.removeClass("no-tiling");for(let t of[e,i])t.setValue(!0,!1),t.disable()}else{for(let t of[e,i])t.enable();this.values.tilingUnet||this.values.tilingVae?this.removeClass("no-tiling"):this.addClass("no-tiling")}if(!isEmpty(this.values.size)||isEmpty(this.values.width)||isEmpty(this.values.height)){if("custom"===this.values.size)this.addClass("custom-size");else if(!isEmpty(this.values.size)){this.removeClass("custom-size");let[e,i]=this.values.size.split("_");t.setValue(parseInt(e),!1),s.setValue(parseInt(i),!1),this.values.width=e,this.values.height=i}}else{let e=await this.getInputView("size"),i=`${this.values.width}_${this.values.height}`;isEmpty(CanvasSizeInputView.defaultOptions[i])?(e.setValue("custom",!1),this.values.size="custom",this.addClass("custom-size")):(e.setValue(i,!1),this.values.size=i,this.removeClass("custom-size"))}}async setValues(e){if(isEmpty(e.width)||isEmpty(e.height)){if(!isEmpty(e.size))if("custom"!==e.size){let[i,t]=e.size.split("_");e.width=parseInt(i),e.height=parseInt(t),this.removeClass("custom-size")}else this.addClass("custom-size")}else{let i=`${e.width}_${e.height}`;isEmpty(CanvasSizeInputView.defaultOptions[i])?(e.size="custom",this.addClass("custom-size")):(e.size=i,this.removeClass("custom-size"))}return await super.setValues(e)}}export{CanvasFormView};
