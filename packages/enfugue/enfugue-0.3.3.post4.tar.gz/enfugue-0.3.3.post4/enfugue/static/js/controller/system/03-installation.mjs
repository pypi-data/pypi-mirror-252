import{isEmpty,humanSize}from"../../base/helpers.mjs";import{ElementBuilder}from"../../base/builder.mjs";import{MenuController}from"../menu.mjs";import{View,ParentView}from"../../view/base.mjs";import{TableView}from"../../view/table.mjs";import{ButtonInputView}from"../../forms/input.mjs";import{DirectoryFormView,FileFormView}from"../../forms/enfugue/files.mjs";const E=new ElementBuilder;class UploadFileButtonInputView extends ButtonInputView{static className="upload-file-input-view";static defaultValue="Upload File"}class InstallationDirectorySummaryTableView extends TableView{static className="installation-directory-summary-table-view";static columns={location:"Location",directory:"Directory",items:"Items",bytes:"Total File Size"};static columnFormatters={bytes:t=>humanSize(t)}}class InstallationDirectoryTableView extends TableView{static className="installation-directory-table-view";static columns={name:"Name",bytes:"Total File Size"};static columnFormatters={bytes:t=>humanSize(t)}}class TensorRTEngineTableView extends TableView{static columns={model:"Model",type:"Type",size:"Size",lora:"LoRA",inversion:"Inversions",bytes:"File Size",used_by:"Used By"};static columnFormatters={type:(t,e)=>{let i="";return e.model.endsWith("-inpainting")&&(i="Inpainting "),`${i}${{unet:"UNet",controlledunet:"Controlled UNet",clip:"CLIP",vae:"VAE",controlnet:"ControlNet"}[t]}`},size:t=>`${t}px`,bytes:t=>humanSize(t),lora:t=>isEmpty(t)?"None":t.map((t=>t.join(":"))).join("<br />"),inversion:t=>isEmpty(t)?"None":t.map((t=>t.model)).join("<br />"),used_by:t=>isEmpty(t)?"None":t.length<=2?t.join("<br />"):t.slice(0,2).join("<br />")+`<br />â€¦and ${t.length-2} more`}}class TensorRTEngineSummaryTableView extends TableView{static columns={total:"Total Engines",used:"Currently Used",bytes:"Total File Size"};static columnFormatters={total:t=>isEmpty(t)?"None":`${t}`,used:t=>isEmpty(t)?"None":`${t}`,bytes:t=>isEmpty(t)?"0 Bytes":humanSize(t)}}class InstallationSummaryView extends View{constructor(t){super(t.config),this.controller=t,this.summaryTable=new InstallationDirectorySummaryTableView(this.config),this.summaryTable.addButton("Manage","fa-solid fa-list-check",(t=>{this.controller.showDirectoryManager(t.directory)})),this.summaryTable.addButton("Change Directory","fa-solid fa-edit",(t=>{this.controller.showChangeDirectory(t.directory,t.location)})),this.engineTable=new TensorRTEngineSummaryTableView(this.config),this.engineTable.addButton("Manage","fa-solid fa-list-check",(()=>{this.controller.showTensorRTManager()}))}async update(){let t=await this.controller.model.get("/installation"),e=await this.controller.model.get("/tensorrt");await this.summaryTable.setData(Object.getOwnPropertyNames(t).map((e=>({directory:e,location:t[e].path,items:t[e].items,bytes:t[e].bytes}))),!1),await this.engineTable.setData([e.reduce(((t,e)=>(void 0===t.total&&(t.total=0),void 0===t.used&&(t.used=0),void 0===t.bytes&&(t.bytes=0),t.total+=1,t.used+=e.used,t.bytes+=e.bytes,t)),{})],!1)}async build(){let t=await super.build();return await this.update(),t.content(E.h2().content("Installation Directories"),await this.summaryTable.getNode(),E.h2().content("TensorRT Engines"),await this.engineTable.getNode())}}class InstallationController extends MenuController{static menuName="Installation";static menuIcon="fa-solid fa-folder-tree";static menuShortcut="i";static summaryWindowWidth=600;static summaryWindowHeight=960;static managerWindowWidth=600;static managerWindowHeight=800;static uploadWindowWidth=400;static uploadWindowHeight=250;static changeDirectoryWindowWidth=400;static changeDirectoryWindowHeight=200;static uploadableDirectories=["lora","checkpoint","inversion","lycoris","motion"];async initialize(){await super.initialize(),this.directoryWindows={}}async showSummaryWindow(){isEmpty(this.summaryWindow)?(this.summaryWindow=await this.spawnWindow("Installation Summary",await this.getSummaryView(),this.constructor.summaryWindowWidth,this.constructor.summaryWindowHeight),this.summaryWindow.onClose((()=>{this.summaryWindow=null}))):this.summaryWindow.focus()}async getSummaryView(){return isEmpty(this.summaryView)?this.summaryView=new InstallationSummaryView(this):this.summaryView.update(),this.summaryView}async showTensorRTManager(){let t=await this.model.get("/tensorrt");if(isEmpty(this.tensorRTManagerWindow)){let e=new TensorRTEngineTableView(this.config,t);e.addButton("Delete","fa-solid fa-trash",(async t=>{let i=`/tensorrt/${t.model}/${t.type}/${t.key}`;try{await this.model.delete(i),this.notify("info","Success","TensorRT engine deleted."),e.setData(await this.model.get("/tensorrt"),!1),isEmpty(this.summaryView)||this.summaryView.update()}catch(t){let e=`${t}`;isEmpty(t.detail)?isEmpty(t.title)||(e=t.title):e=t.detail,this.notify("error","Couldn't Delete",e)}})),this.tensorRTManagerWindow=await this.spawnWindow("TensorRT Engines",e,this.constructor.managerWindowWidth,this.constructor.managerWindowHeight),this.tensorRTManagerWindow.onClose((()=>{this.tensorRTManagerWindow=null}))}else this.tensorRTManagerWindow.content.setData(t,!1),this.tensorRTManagerWindow.focus()}async showUploadFile(t){let e=new FileFormView(this.config),i=await this.spawnWindow(`Upload File to '${t}'`,e,this.constructor.uploadWindowWidth,this.constructor.uploadWindowHeight);e.onSubmit((async s=>{await this.model.multiPart(`/installation/${t}`,null,null,{file:s.file},(async t=>{(await e.getInputView("file")).setProgress(t.loaded/t.total)})),this.notify("info","Uploaded",`File successfully uploaded to '${t}'`),isEmpty(this.summaryView)||this.summaryView.update(),isEmpty(this.directoryWindows[t])||this.directoryWindows[t].content.getChild(0).setData(await this.model.get(`/installation/${t}`),!1),i.remove()})),e.onCancel((()=>{i.remove()}))}async showChangeDirectory(t,e){let i=new DirectoryFormView(this.config,{directory:e}),s=await this.spawnWindow(`Change Filesystem Location for ${t}`,i,this.constructor.changeDirectoryWindowWidth,this.constructor.changeDirectoryWindowHeight);i.onSubmit((async e=>{try{await this.model.post(`/installation/${t}/move`,null,null,{directory:e.directory}),this.notify("info","Changed",`Filesystem Location successfully changed for ${t}`),isEmpty(this.summaryView)||this.summaryView.update(),isEmpty(this.directoryWindows[t])||this.directoryWindows[t].content.getChild(0).setData(await this.model.get(`/installation/${t}`),!1),s.remove()}catch(t){let e=`${t}`;isEmpty(t.detail)?isEmpty(t.title)||(e=t.title):e=t.detail,this.notify("error","Couldn't Change",e),i.enable()}})),i.onCancel((()=>{s.remove()}))}async showDirectoryManager(t){let e=await this.model.get(`/installation/${t}`);if(isEmpty(this.directoryWindows[t])){let i=new InstallationDirectoryTableView(this.config,e);i.addButton("Delete","fa-solid fa-trash",(async e=>{let s=`/installation/${t}/${e.name}`;try{await this.model.delete(s),this.notify("info","Success",`Successfully deleted <strong>${t}/${e.name}</strong>`),i.setData(await this.model.get(`/installation/${t}`),!1),isEmpty(this.summaryView)||this.summaryView.update()}catch(t){let e=`${t}`;isEmpty(t.detail)?isEmpty(t.title)||(e=t.title):e=t.detail,this.notify("error","Couldn't Delete",e)}}));let s=new ParentView(this.config);if(s.addClass("installation-summary-view"),s.addChild(i),-1!==this.constructor.uploadableDirectories.indexOf(t)){let e=new UploadFileButtonInputView(this.config);e.onChange((()=>{this.showUploadFile(t)})),s.addChild(e)}this.directoryWindows[t]=await this.spawnWindow(`Manage Directory '${t}'`,s,this.constructor.managerWindowWidth,this.constructor.managerWindowHeight),this.directoryWindows[t].onClose((()=>{this.directoryWindows[t]=null}))}else this.directoryWindows[t].content.getChild(0).setData(e),this.directoryWindows[t].focus()}async onClick(){this.showSummaryWindow()}}export{InstallationController as MenuController};
