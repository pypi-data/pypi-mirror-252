import{ImageFilter}from"./image-filter.mjs";function performImageAdjustments(image){const seed=this.constants.seed[this.thread.y][this.thread.x];const redFactor=this.constants.red/100;const greenFactor=this.constants.green/100;const blueFactor=this.constants.blue/100;const contrastFactor=this.constants.contrast/100+1;const hueFactor=(this.constants.hue<0?100+this.constants.hue:this.constants.hue)/100;const saturationFactor=this.constants.saturation/100;const brightnessFactor=this.constants.brightness/100;const lightnessFactor=this.constants.lightness/100;const hueNoiseFactor=Math.pow(this.constants.hueNoise/100,this.constants.noiseExponent);const saturationNoiseFactor=Math.pow(this.constants.saturationNoise/100,this.constants.noiseExponent);const lightnessNoiseFactor=Math.pow(this.constants.lightnessNoise/100,this.constants.noiseExponent);let pixel=image[this.thread.y][this.thread.x];pixel[0]=pixel[0]+pixel[0]*redFactor;pixel[1]=pixel[1]+pixel[1]*greenFactor;pixel[2]=pixel[2]+pixel[2]*blueFactor;if(this.constants.invert===1){pixel[0]=1-pixel[0];pixel[1]=1-pixel[1];pixel[2]=1-pixel[2]}pixel[0]=(pixel[0]-.5)*contrastFactor+.5;pixel[1]=(pixel[1]-.5)*contrastFactor+.5;pixel[2]=(pixel[2]-.5)*contrastFactor+.5;pixel[0]=pixel[0]+brightnessFactor;pixel[1]=pixel[1]+brightnessFactor;pixel[2]=pixel[2]+brightnessFactor;pixel[0]=Math.min(Math.max(pixel[0],0),1);pixel[1]=Math.min(Math.max(pixel[1],0),1);pixel[2]=Math.min(Math.max(pixel[2],0),1);const maxShade=Math.max(Math.max(pixel[0],pixel[1]),pixel[2]);const minShade=Math.min(Math.min(pixel[0],pixel[1]),pixel[2]);const difference=maxShade-minShade;let hue=0;let saturation=0;let lightness=(maxShade+minShade)/2;if(maxShade!=minShade){saturation=lightness>.5?difference/(2-maxShade-minShade):difference/(maxShade+minShade);if(maxShade==pixel[0]){hue=(pixel[1]-pixel[2])/difference+(pixel[1]<pixel[2]?6:0)}else if(maxShade==pixel[1]){hue=(pixel[2]-pixel[0])/difference+2}else if(maxShade==pixel[2]){hue=(pixel[0]-pixel[1])/difference+4}hue=hue/6}hue=(hue+hueFactor)%1;saturation=saturation+saturation*saturationFactor;lightness=lightness+lightness*lightnessFactor;hue=(hue+(.5-seed)*hueNoiseFactor)%1;saturation=saturation+(.5-seed)*saturationNoiseFactor;lightness=lightness+(.5-seed)*lightnessNoiseFactor;saturation=Math.min(Math.max(saturation,0),1);lightness=Math.min(Math.max(lightness,0),1);let red=0;let green=0;let blue=0;if(saturation<=0){red=lightness;green=lightness;blue=lightness}else{function hueToRGB(p,q,t){if(t<0){t+=1}else if(t>1){t-=1}if(t<1/6){return p+(q-p)*6*t}else if(t<1/2){return q}else if(t<2/3){return p+(q-p)*(2/3-t)*6}else{return p}}let q=lightness<.5?lightness*(1+saturation):lightness+saturation-lightness*saturation;let p=2*lightness-q;red=hueToRGB(p,q,hue+1/3);green=hueToRGB(p,q,hue);blue=hueToRGB(p,q,hue-1/3)}this.color(red,green,blue,pixel[3])}class ImageAdjustmentFilter extends ImageFilter{static filterFunction=performImageAdjustments;reset(execute=true){super.reset(false);this.constants={noiseExponent:3,invert:0,contrast:0,brightness:0,lightness:0,saturation:0,hue:0,red:0,green:0,blue:0,hueNoise:0,saturationNoise:0,lightnessNoise:0,...this.constants};if(execute){this.execute()}}setConstants(constants,execute=true){super.setConstants(constants,false);this.constants.contrast=parseInt(constants.contrast===undefined?this.constants.contrast:constants.contrast);this.constants.brightness=parseInt(constants.brightness===undefined?this.constants.brightness:constants.brightness);this.constants.saturation=parseInt(constants.saturation===undefined?this.constants.saturation:constants.saturation);this.constants.lightness=parseInt(constants.lightness===undefined?this.constants.lightness:constants.lightness);this.constants.hue=parseInt(constants.hue===undefined?this.constants.hue:constants.hue);this.constants.red=parseInt(constants.red===undefined?this.constants.red:constants.red);this.constants.green=parseInt(constants.green===undefined?this.constants.green:constants.green);this.constants.blue=parseInt(constants.blue===undefined?this.constants.blue:constants.blue);this.constants.hueNoise=parseInt(constants.hueNoise===undefined?this.constants.hueNoise:constants.hueNoise);this.constants.saturationNoise=parseInt(constants.saturationNoise===undefined?this.constants.saturationNoise:constants.saturationNoise);this.constants.lightnessNoise=parseInt(constants.lightnessNoise===undefined?this.constants.lightnessNoise:constants.lightnessNoise);this.constants.invert=constants.invert===undefined?this.constants.invert:constants.invert===true?1:0;if(execute){this.execute()}}set contrast(newContrast){this.constants.contrast=parseInt(newContrast);this.execute()}set brightness(newBrightness){this.constants.brightness=parseInt(newBrightness);this.execute()}set lightness(newLightness){this.constants.lightness=parseInt(newLightness);this.execute()}set saturation(newSaturation){this.constants.saturation=parseInt(newSaturation);this.execute()}set hue(newHue){this.constants.hue=parseInt(newHue);this.execute()}set red(newRed){this.constants.red=parseInt(newRed);this.execute()}set green(newGreen){this.constants.green=parseInt(newGreen);this.execute()}set blue(newBlue){this.constants.blue=parseInt(newBlue);this.execute()}set hueNoise(newNoise){this.constants.hueNoise=parseInt(newNoise);this.execute()}set saturationNoise(newNoise){this.constants.saturationNoise=parseInt(newNoise);this.execute()}set lightnessNoise(newNoise){this.constants.lightnessNoise=parseInt(newNoise);this.execute()}set invert(newInvert){this.constants.invert=newInvert===true?1:0;this.execute()}}export{ImageAdjustmentFilter};
