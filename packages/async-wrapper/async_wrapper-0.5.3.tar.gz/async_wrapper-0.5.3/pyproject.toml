[tool.poetry]
name = "async-wrapper"
version = "0.5.3"
description = "async wrapper"
authors = ["phi <phi.friday@gmail.com>"]
readme = "README.md"
license = "MIT License"
homepage = "https://async-wrapper.readthedocs.io/"
repository = "https://github.com/phi-friday/async-wrapper"
packages = [{ include = "async_wrapper", from = 'src' }]

[tool.poetry.dependencies]
python = ">=3.8"
typing-extensions = "^4.6.3"
anyio = "^3.7.0"
sniffio = "1.3.0"
uvloop = { version = ">=0.19.0", optional = true, markers = "platform_system != 'Windows'" }
exceptiongroup = { version = "^1.1.2", markers = "python_version < '3.11'" }

[tool.poetry.extras]
uvloop = ['uvloop']

[tool.poetry.group.dev.dependencies]
ruff = "0.0.282"
black = "23.7.0"
ipykernel = "^6.23.3"
pytest = "^7.4.0"
pre-commit = "^3.3.3"
trio = "^0.22.2"
pyyaml = ">=6.0.1"    # cython error
pytest-cov = "^4.1.0"


[tool.poetry.group.docs.dependencies]
sphinx = "^7.1.2"
readthedocs-sphinx-search = "^0.3.1"
sphinx-rtd-theme = "^1.2.2"
sphinx-mdinclude = "^0.5.3"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py38"
select = ["ALL"]
fixable = [
    "UP",
    'F401',   # unused imports
    "F522",   # string-dot-format-extra-named-arguments
    "F541",   # f-string-missing-placeholders
    "W292",   # no-new-line-at-end-of-file
    "E711",   # none-comparison
    "E712",   # true-false-comparison
    "E713",   # not-in-test
    "E714",   # not-is-test
    "I001",   # unsorted-imports
    "COM812", # trailing-comma-missing
    "Q000",   # bad-quotes-inline-string
    "Q001",   # bad-quotes-multiline-string
    "UP037",  # quoted-annotation
    "W293",   # blank-line-with-whitespace
    "RSE102", # unnecessary-paren-on-raise-exception
    "SIM108", # if-else-block-instead-of-if-exp
    "I002",   #	missing-required-import	
    "RUF100", # unused-noqa
]
ignore = [
    'TD',     # flake8-todos
    'E712',   # TrueFalseComparison # sqlalchemy
    "E711",   # none-comparison # sqlalchemy
    "D100",   # public-module
    "D104",   # public-package
    "D107",   # public-init
    "D201",   # no-blank-line-before-function
    "D202",   # no-blank-line-after-function
    "D203",   # one-blank-line-before-class
    "D204",   # one-blank-line-after-class
    "D211",   # no-blank-line-before-class
    "D212",   # multi-line-summary-first-line
    "D213",   # multi-line-summary-second-line
    "D400",   # ends-in-period
    "D401",   # non-imperative-mood
    "D403",   # first-line-capitalized
    "D406",   # new-line-after-section-name
    "D407",   # dashed-underline-after-section
    "D417",   # undocumented-param
    "D415",   # ends-in-punctuation
    "EM101",  # raw-string-in-exception
    "TRY003", # raise-vanilla-args
    "ANN101", # missing-type-self
    "ANN102", # missing-type-cls
    "ANN401", # dynamically-typed-expression
    "FBT002", # boolean-default-value-in-function-definition
    "PGH003", # blanket-type-ignore
    "SIM117", # multiple-with-statements # python3.8
    "B905",   # zip-without-explicit-strict
    "PD010",  # use-of-dot-pivot-or-unstack
    "D105",   # undocumented-magic-method
    "TD",     # flake8-todos
    "FIX",    # flake8-fixme
]

[tool.ruff.per-file-ignores]
"./tests/**/*.py" = [
    "TCH001",
    "TCH002",
    "TCH003",
    "S101",
    "D101",
    "ANN001",
    "ANN201",
    "PLR0133",
    "W605",
    "D103",
    "D102",
    "PLR2004",
]
"./src/docs/conf.py" = ['E402']

[tool.ruff.isort]
known-local-folder = ["async_wrapper"]
required-imports = ["from __future__ import annotations"]

[tool.pyright]
include = ["src", "tests"]
pythonVersion = '3.8'
pythonPlatform = 'Linux'
diagnostic = 'basic'

[tool.pytest.ini_options]
addopts = "--cov=src/async_wrapper --cov-report html --cov-report=xml"
testpaths = ["tests"]

[tool.coverage.run]
omit = ["./tests/**/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
]