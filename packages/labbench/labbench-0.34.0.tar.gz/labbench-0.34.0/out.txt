============================= test session starts ==============================
platform darwin -- Python 3.12.1, pytest-7.4.4, pluggy-1.3.0
rootdir: /Users/dkuester/Documents/src/labbench
plugins: cov-4.1.0
collected 8 items

tests/test_paramattr_method.py FF.return value is 0
....F

=================================== FAILURES ===================================
__________________________________ test_cache __________________________________

opened_device = StoreTestDevice()

    def test_cache(opened_device: StoreTestDevice):
        # repeat to set->get to ensure proper caching
>       eval_set_then_get(opened_device, "str_cached", set_then_get)

tests/test_paramattr_method.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/paramattr_tooling.py:27: in eval_set_then_get
    value_out = single_set_get(device, attr_name, value_in, arguments)
tests/test_paramattr_method.py:82: in set_then_get
    return get_param(device, attr_name, arguments)
tests/test_paramattr_method.py:77: in get_param
    return param_method(**arguments)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = StoreTestDevice(), new_value = <class 'inspect._empty'>, kwargs = {}
validated_kws = {}

    def method(
        owner: HasParamAttrs,
        /,
        new_value: Union[None, paramattr._type, Type[Undefined]] = Undefined,
        **kwargs,
    ) -> Union[None, paramattr._type]:
        """the autogenerated method that binds the key to an owner and the attribute definition"""
    
        validated_kws = {
            # cast each keyword argument
            k: self.key_arguments[k]._finalize_get_value(owner, v)
            for k, v in kwargs.items()
        }
    
        if new_value is Undefined:
>           if not self.gets:
E           AttributeError: 'key_store_adapter' object has no attribute 'gets'. Did you mean: 'get'?

labbench/paramattr/_bases.py:242: AttributeError
____________________________ test_get_on_set_keyed _____________________________

opened_device = StoreTestDevice()

    def test_get_on_set_keyed(opened_device: StoreTestDevice):
        attr_name = 'int_keyed_get_on_set'
        arguments = {'registered_channel': 1}
        bound_method = getattr(opened_device, attr_name)
>       bound_method(5, **arguments)

tests/test_paramattr_method.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
labbench/paramattr/_bases.py:253: in method
    method(owner, Undefined, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = StoreTestDevice(), new_value = <class 'inspect._empty'>
kwargs = {'registered_channel': 1}, validated_kws = {'registered_channel': 1}

    def method(
        owner: HasParamAttrs,
        /,
        new_value: Union[None, paramattr._type, Type[Undefined]] = Undefined,
        **kwargs,
    ) -> Union[None, paramattr._type]:
        """the autogenerated method that binds the key to an owner and the attribute definition"""
    
        validated_kws = {
            # cast each keyword argument
            k: self.key_arguments[k]._finalize_get_value(owner, v)
            for k, v in kwargs.items()
        }
    
        if new_value is Undefined:
>           if not self.gets:
E           AttributeError: 'key_store_adapter' object has no attribute 'gets'. Did you mean: 'get'?

labbench/paramattr/_bases.py:242: AttributeError
______________________________ test_all_get_sets _______________________________

opened_device = StoreTestDevice()
role_type = <class 'labbench.paramattr._bases.Method'>

    def test_all_get_sets(opened_device, role_type):
>       loop_closed_loop_set_gets(opened_device, role_type, set_then_get)

tests/test_paramattr_method.py:202: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/paramattr_tooling.py:65: in loop_closed_loop_set_gets
    result = eval_set_then_get(device, attr_name, single_set_get)
tests/paramattr_tooling.py:27: in eval_set_then_get
    value_out = single_set_get(device, attr_name, value_in, arguments)
tests/test_paramattr_method.py:82: in set_then_get
    return get_param(device, attr_name, arguments)
tests/test_paramattr_method.py:77: in get_param
    return param_method(**arguments)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

owner = StoreTestDevice(), new_value = <class 'inspect._empty'>, kwargs = {}
validated_kws = {}

    def method(
        owner: HasParamAttrs,
        /,
        new_value: Union[None, paramattr._type, Type[Undefined]] = Undefined,
        **kwargs,
    ) -> Union[None, paramattr._type]:
        """the autogenerated method that binds the key to an owner and the attribute definition"""
    
        validated_kws = {
            # cast each keyword argument
            k: self.key_arguments[k]._finalize_get_value(owner, v)
            for k, v in kwargs.items()
        }
    
        if new_value is Undefined:
>           if not self.gets:
E           AttributeError: 'key_store_adapter' object has no attribute 'gets'. Did you mean: 'get'?

labbench/paramattr/_bases.py:242: AttributeError
=============================== warnings summary ===============================
tests/test_paramattr_method.py::test_cache
  /Users/dkuester/Documents/src/labbench/.venv/lib/python3.12/site-packages/dateutil/tz/tz.py:37: DeprecationWarning: datetime.datetime.utcfromtimestamp() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.fromtimestamp(timestamp, datetime.UTC).
    EPOCH = datetime.datetime.utcfromtimestamp(0)

tests/test_paramattr_method.py::test_cache
  <frozen importlib.util>:193: DeprecationWarning: 'telnetlib' is deprecated and slated for removal in Python 3.13

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_paramattr_method.py::test_cache - AttributeError: 'key_stor...
FAILED tests/test_paramattr_method.py::test_get_on_set_keyed - AttributeError...
FAILED tests/test_paramattr_method.py::test_all_get_sets - AttributeError: 'k...
=================== 3 failed, 5 passed, 2 warnings in 0.53s ====================
