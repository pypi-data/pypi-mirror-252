# coding: utf-8

"""
    Cirro Data

    Cirro Data Platform service API

    The version of the OpenAPI document: latest
    Contact: support@cirro.bio
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from typing_extensions import Annotated
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class CustomPipelineSettings(BaseModel):
    """
    Used to describe the location of the process definition dependencies
    """ # noqa: E501
    repository: Annotated[str, Field(min_length=1, strict=True)] = Field(description="GitHub repository that contains the process definition")
    branch: Optional[StrictStr] = Field(default='main', description="Branch, tag, or commit hash of the repo that contains the process definition")
    folder: Optional[StrictStr] = Field(default='.cirro', description="Folder within the repo that contains the process definition")
    last_sync: Optional[datetime] = Field(default=None, description="Time of last sync", alias="lastSync")
    sync_status: Optional[Any] = Field(default=None, alias="syncStatus")
    commit_hash: Optional[StrictStr] = Field(default=None, description="Commit hash of the last successful sync", alias="commitHash")
    __properties: ClassVar[List[str]] = ["repository", "branch", "folder", "lastSync", "syncStatus", "commitHash"]

    @field_validator('repository')
    def repository_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[\w-]+\/[\w-]+$", value):
            raise ValueError(r"must validate the regular expression /^[\w-]+\/[\w-]+$/")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of CustomPipelineSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sync_status
        if self.sync_status:
            _dict['syncStatus'] = self.sync_status.to_dict()
        # set to None if last_sync (nullable) is None
        # and model_fields_set contains the field
        if self.last_sync is None and "last_sync" in self.model_fields_set:
            _dict['lastSync'] = None

        # set to None if sync_status (nullable) is None
        # and model_fields_set contains the field
        if self.sync_status is None and "sync_status" in self.model_fields_set:
            _dict['syncStatus'] = None

        # set to None if commit_hash (nullable) is None
        # and model_fields_set contains the field
        if self.commit_hash is None and "commit_hash" in self.model_fields_set:
            _dict['commitHash'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of CustomPipelineSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "repository": obj.get("repository"),
            "branch": obj.get("branch") if obj.get("branch") is not None else 'main',
            "folder": obj.get("folder") if obj.get("folder") is not None else '.cirro',
            "lastSync": obj.get("lastSync"),
            "syncStatus": SyncStatus.from_dict(obj.get("syncStatus")) if obj.get("syncStatus") is not None else None,
            "commitHash": obj.get("commitHash")
        })
        return _obj


