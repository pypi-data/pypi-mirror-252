Metadata-Version: 2.1
Name: earnalliance-python
Version: 1.0.1
Summary: Earn Alliance python SDK
License-File: LICENSE
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.11
Description-Content-Type: text/markdown

<p align="center">
  <a href="https://www.earnalliance.com?utm_source=github&utm_medium=logo" target="_blank">
    <img src="https://www.earnalliance.com/new/svgs/ea_logo.svg" alt="Earn Alliance" width="280">
  </a>
</p>

# Official Earn Alliance SDKs for Python

## Links

- [![Discord](https://img.shields.io/discord/926167446648397836)](http://discord.gg/2VqABVytBZ)
- [![Twitter Follow](https://img.shields.io/twitter/follow/earnalliance?label=Earn%20Alliance&style=social)](https://twitter.com/intent/follow?screen_name=earnalliance)

## Contents

- [Supported Platforms](#supported-platforms)
- [Installation and Usage](#installation-and-usage)

## Supported Platforms

Any platform capable of running python3

## Prerequisites
* python 3.11+

## Installation and Usage

To install a SDK, simply run the build command

```sh
python3 -m pip install .
```

To build a ready-to-publish distribution, simply run the build command (ensure build command is available for your environment)

```sh
python3 -m build
```

To run tests - simply run (ensure pytest is available for your environment)

```sh
./run_test.sh
```

### Initialize

Setup client so it can start sending events!

```python
alliance = sdk.init(
    options.NodeOptions(
        clientId="[clientId]",
        clientSecret="[clientSecret]",
        gameId="[gameId]",
        dsn="[dsn]",
        ...
    )
)
```

The client configuration can also be read from environment variables if not
provided as an option.

```python
# If the client id, secret, game id and dsn are not specific, the init
# function will by default look for the environment variables
# `ALLIANCE_CLIENT_ID`, `ALLIANCE_CLIENT_SECRET`, `ALLIANCE_GAME_ID` and
# `ALLIANCE_DSN`.
alliance = sdk.init()
```

### Set User Identifiers

Whenever a new user identifier is set, or a new user is registered, you can add or update the identifiers associated with the internal user id.

This is used to tell us the user has installed the app and enrich information when more game platform accounts or social accounts are added to help us map the user to the game events.

```python
# This shows all of our currently supported platforms, but you only need to
# provide the identifiers that are relevant for your game.
properties = IdentifyingProperties(email="test@test.com", discordId="123456")
await alliance.set_user_identifiers("1234", properties)
```

Note that if you pass any falsey value identifier to `set_user_identifiers`, it will be ignored.
This is the avoid unintentionally removing previously set identifiers. If you want
to remove previously set identifiers, use the `remove_identifiers` function.

```python
from model.identifier_prop_names import IdentifierPropNames as ipn
await alliance.remove_identifiers(identifier, ipn.DISCORD_ID, ipn.EMAIL)
```

### Track User Start Session

Sends standard TRACK event for launching a game. This let's us know that the user
has the game launched and is ready to start a challenge.

```python
alliance.start_game("[internal user id]")
```

### Track Events

Tracking events that happens in a game. Tracked events are batched together and sent after 30 seconds interval, or when a batch size of 100 events have
accumulated, whichever comes first. Both the interval and the batch size are
configurable in the client options.

The name of the events can be almost anything, but we recommend sticking to
common terms as shown in the following examples.

```python
# An event without any specific value, commonly used for counting event
# instances, i.e. "Kill X Zombies".
await alliance.track("[internal user id]", "KILL_ZOMBIE")

# An event with an associated value, commonly used for accumulating or
# checking min / max values, i.e. "Score a total of X" or "Achieve a
# highscore of at least X".
await alliance.track_with_value("[internal user id]", "SCORE", 100)

# The client can track events for multiple users in parallel.
await alliance.track_with_value("[internal user id]", "DAMAGE_DONE", 500)
await alliance.track_with_value("[another user id]", "DAMAGE_TAKEN", 500)

# Additional traits can be added to the event, which can be used to
# create more detailed challenges, i.e. "Kill X monsters with a knife".
weaponTrait = {"weapon": "knife"}
mobTrait = {"mob": "zombie"}
await alliance.track_with_traits("[internal user id]", "KILL", weaponTrait, mobTrait)
```

### Group Tracked Events

You can group events together, i.e. a game round or a match, whichever makes
sense for your game. This allows for natural challenge scopes like "Kill X players
in a match".

```python
# Generates unique group id which will be associated with all the events
round = alliance.start_round("[group id]")
await round.track("[internal user id]", "KILL_ZOMBIE")
```

### Flush event queue

For events that have higher priority (i.e. setUserIdentifiers), instead of
initiating a scheduled batch, they trigger the use of an event queue flush.
This means that as long as the client has not been flushed prior to the event,
the event will be sent to the api right away.

Once the queue has been has been flushed, the client enters a 10 second cooldown
period, during which any subsequent calls to flush, will wait for the cooldown
to finish, before it's triggered. Not that any normal procedures, like the queue
size reaches the batch limit, will still send the events to the api.

The `flush` function can also be called manually on the client instance, but
it is still restricted by the same cooldown mechanic.

```python
await alliance.flush();
```
