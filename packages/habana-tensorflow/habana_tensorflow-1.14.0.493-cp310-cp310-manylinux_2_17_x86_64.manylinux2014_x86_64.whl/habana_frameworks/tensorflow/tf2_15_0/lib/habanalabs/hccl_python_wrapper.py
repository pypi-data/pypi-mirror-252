# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")


from habana_frameworks.tensorflow.sysconfig import get_lib_dir
import tensorflow as tf
import ctypes
import imp
import os
hccl_python_wrapper_so_path=f'{get_lib_dir()}/_hccl_python_wrapper.so.{tf.__version__}'
_hccl_python_wrapper = imp.load_dynamic('_hccl_python_wrapper', hccl_python_wrapper_so_path)


try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _hccl_python_wrapper.delete_SwigPyIterator

    def value(self):
        return _hccl_python_wrapper.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _hccl_python_wrapper.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _hccl_python_wrapper.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _hccl_python_wrapper.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _hccl_python_wrapper.SwigPyIterator_equal(self, x)

    def copy(self):
        return _hccl_python_wrapper.SwigPyIterator_copy(self)

    def next(self):
        return _hccl_python_wrapper.SwigPyIterator_next(self)

    def __next__(self):
        return _hccl_python_wrapper.SwigPyIterator___next__(self)

    def previous(self):
        return _hccl_python_wrapper.SwigPyIterator_previous(self)

    def advance(self, n):
        return _hccl_python_wrapper.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _hccl_python_wrapper.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _hccl_python_wrapper.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _hccl_python_wrapper.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _hccl_python_wrapper.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _hccl_python_wrapper.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _hccl_python_wrapper.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _hccl_python_wrapper:
_hccl_python_wrapper.SwigPyIterator_swigregister(SwigPyIterator)

HCCL_UNIQUE_ID_MAX_BYTES = _hccl_python_wrapper.HCCL_UNIQUE_ID_MAX_BYTES
class hcclUniqueId(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    internal = property(_hccl_python_wrapper.hcclUniqueId_internal_get, _hccl_python_wrapper.hcclUniqueId_internal_set)
    length = property(_hccl_python_wrapper.hcclUniqueId_length_get, _hccl_python_wrapper.hcclUniqueId_length_set)

    def __init__(self):
        _hccl_python_wrapper.hcclUniqueId_swiginit(self, _hccl_python_wrapper.new_hcclUniqueId())
    __swig_destroy__ = _hccl_python_wrapper.delete_hcclUniqueId

# Register hcclUniqueId in _hccl_python_wrapper:
_hccl_python_wrapper.hcclUniqueId_swigregister(hcclUniqueId)

hcclSum = _hccl_python_wrapper.hcclSum
hcclProd = _hccl_python_wrapper.hcclProd
hcclMin = _hccl_python_wrapper.hcclMin
hcclMax = _hccl_python_wrapper.hcclMax
hcclAvg = _hccl_python_wrapper.hcclAvg
hcclOpNone = _hccl_python_wrapper.hcclOpNone
hcclSuccess = _hccl_python_wrapper.hcclSuccess
hcclNoDeviceFound = _hccl_python_wrapper.hcclNoDeviceFound
hcclUnsupported = _hccl_python_wrapper.hcclUnsupported
hcclOutOfMemory = _hccl_python_wrapper.hcclOutOfMemory
hcclUnhandledSynapseError = _hccl_python_wrapper.hcclUnhandledSynapseError
hcclSystemError = _hccl_python_wrapper.hcclSystemError
hcclInternalError = _hccl_python_wrapper.hcclInternalError
hcclInvalidArgument = _hccl_python_wrapper.hcclInvalidArgument
hcclInvalidUsage = _hccl_python_wrapper.hcclInvalidUsage
hcclSocketError = _hccl_python_wrapper.hcclSocketError
hcclLibfabricError = _hccl_python_wrapper.hcclLibfabricError
hcclTryAgainError = _hccl_python_wrapper.hcclTryAgainError
hcclBusy = _hccl_python_wrapper.hcclBusy
hcclNumResults = _hccl_python_wrapper.hcclNumResults
hcclStreamError = _hccl_python_wrapper.hcclStreamError
hcclSynapseTerminated = _hccl_python_wrapper.hcclSynapseTerminated
hcclInt8 = _hccl_python_wrapper.hcclInt8
hcclChar = _hccl_python_wrapper.hcclChar
hcclUint8 = _hccl_python_wrapper.hcclUint8
hcclInt32 = _hccl_python_wrapper.hcclInt32
hcclInt = _hccl_python_wrapper.hcclInt
hcclUint32 = _hccl_python_wrapper.hcclUint32
hcclInt64 = _hccl_python_wrapper.hcclInt64
hcclUint64 = _hccl_python_wrapper.hcclUint64
hcclFloat16 = _hccl_python_wrapper.hcclFloat16
hcclHalf = _hccl_python_wrapper.hcclHalf
hcclFloat32 = _hccl_python_wrapper.hcclFloat32
hcclFloat = _hccl_python_wrapper.hcclFloat
hcclFloat64 = _hccl_python_wrapper.hcclFloat64
hcclDouble = _hccl_python_wrapper.hcclDouble
hcclBfloat16 = _hccl_python_wrapper.hcclBfloat16
hcclNumTypes = _hccl_python_wrapper.hcclNumTypes
HCCL_P2P_SUPPORTED = _hccl_python_wrapper.HCCL_P2P_SUPPORTED
HCCL_WRAPPER_USE_STREAM = _hccl_python_wrapper.HCCL_WRAPPER_USE_STREAM
HCCL_MAJOR = _hccl_python_wrapper.HCCL_MAJOR
HCCL_MINOR = _hccl_python_wrapper.HCCL_MINOR
HCCL_PATCH = _hccl_python_wrapper.HCCL_PATCH
HCCL_SUFFIX = _hccl_python_wrapper.HCCL_SUFFIX
HCCL_VERSION_CODE = _hccl_python_wrapper.HCCL_VERSION_CODE

def hcclGetVersion(version):
    return _hccl_python_wrapper.hcclGetVersion(version)

def hcclGetUniqueId(uniqueId):
    return _hccl_python_wrapper.hcclGetUniqueId(uniqueId)

def hcclCommInitRank(nranks, commId, rank):
    return _hccl_python_wrapper.hcclCommInitRank(nranks, commId, rank)

def hcclCommInitAll(ndev, devlist):
    return _hccl_python_wrapper.hcclCommInitAll(ndev, devlist)

def hcclCommDestroy(comm):
    return _hccl_python_wrapper.hcclCommDestroy(comm)

def hcclCommAbort(comm):
    return _hccl_python_wrapper.hcclCommAbort(comm)

def hcclGetErrorString(result):
    return _hccl_python_wrapper.hcclGetErrorString(result)

def hcclCommCount(comm, count):
    return _hccl_python_wrapper.hcclCommCount(comm, count)

def hcclCommSynDevice(comm, device):
    return _hccl_python_wrapper.hcclCommSynDevice(comm, device)

def hcclCommUserRank(comm, rank):
    return _hccl_python_wrapper.hcclCommUserRank(comm, rank)

def hcclLookupDMABuff(addr, size, fd):
    return _hccl_python_wrapper.hcclLookupDMABuff(addr, size, fd)

def hcclReduce(sendbuff, recvbuff, count, datatype, reduceOp, root, comm, stream_handle):
    return _hccl_python_wrapper.hcclReduce(sendbuff, recvbuff, count, datatype, reduceOp, root, comm, stream_handle)

def hcclBcast(buff, count, datatype, root, comm, stream_handle):
    return _hccl_python_wrapper.hcclBcast(buff, count, datatype, root, comm, stream_handle)

def hcclBroadcast(sendbuff, recvbuff, count, datatype, root, comm, stream_handle):
    return _hccl_python_wrapper.hcclBroadcast(sendbuff, recvbuff, count, datatype, root, comm, stream_handle)

def hcclAllReduce(sendbuff, recvbuff, count, datatype, reduceOp, comm, stream_handle):
    return _hccl_python_wrapper.hcclAllReduce(sendbuff, recvbuff, count, datatype, reduceOp, comm, stream_handle)

def hcclReduceScatter(sendbuff, recvbuff, recvcount, datatype, reduceOp, comm, stream_handle):
    return _hccl_python_wrapper.hcclReduceScatter(sendbuff, recvbuff, recvcount, datatype, reduceOp, comm, stream_handle)

def hcclAllGather(sendbuff, recvbuff, sendcount, datatype, comm, stream_handle):
    return _hccl_python_wrapper.hcclAllGather(sendbuff, recvbuff, sendcount, datatype, comm, stream_handle)

def hcclAlltoAll(sendbuff, recvbuff, count, datatype, comm, stream_handle):
    return _hccl_python_wrapper.hcclAlltoAll(sendbuff, recvbuff, count, datatype, comm, stream_handle)

def hcclSend(sendbuff, count, datatype, peer, comm, stream):
    return _hccl_python_wrapper.hcclSend(sendbuff, count, datatype, peer, comm, stream)

def hcclRecv(recvbuff, count, datatype, peer, comm, stream):
    return _hccl_python_wrapper.hcclRecv(recvbuff, count, datatype, peer, comm, stream)

def hcclGroupStart():
    return _hccl_python_wrapper.hcclGroupStart()

def hcclGroupEnd():
    return _hccl_python_wrapper.hcclGroupEnd()
hcclxMemcpyHostToHost = _hccl_python_wrapper.hcclxMemcpyHostToHost
hcclxMemcpyHostToDevice = _hccl_python_wrapper.hcclxMemcpyHostToDevice
hcclxMemcpyDeviceToHost = _hccl_python_wrapper.hcclxMemcpyDeviceToHost
hcclxMemcpyDeviceToDevice = _hccl_python_wrapper.hcclxMemcpyDeviceToDevice
hcclxMemcpyDefault = _hccl_python_wrapper.hcclxMemcpyDefault
hcclxNumMemcpyKindTypes = _hccl_python_wrapper.hcclxNumMemcpyKindTypes

def hcclxCreateDevice(ordinal, device_id_ptr):
    return _hccl_python_wrapper.hcclxCreateDevice(ordinal, device_id_ptr)

def hcclxCloseDevice(device_id):
    return _hccl_python_wrapper.hcclxCloseDevice(device_id)

def hcclxOpenDevice(device_id):
    return _hccl_python_wrapper.hcclxOpenDevice(device_id)

def hcclxSetDevice(device_id):
    return _hccl_python_wrapper.hcclxSetDevice(device_id)

def hcclxLockDeviceAddress(address):
    return _hccl_python_wrapper.hcclxLockDeviceAddress(address)

def hcclxUnlockDeviceAddress(device_address):
    return _hccl_python_wrapper.hcclxUnlockDeviceAddress(device_address)

def hcclxAcquireCollectiveStream(device_id):
    return _hccl_python_wrapper.hcclxAcquireCollectiveStream(device_id)

def hcclxReleaseCollectiveStream(stream_handle):
    return _hccl_python_wrapper.hcclxReleaseCollectiveStream(stream_handle)

def hcclxAcquireCopyStream(device_id, kind):
    return _hccl_python_wrapper.hcclxAcquireCopyStream(device_id, kind)

def hcclxReleaseCopyStream(stream_handle):
    return _hccl_python_wrapper.hcclxReleaseCopyStream(stream_handle)

def hcclxMalloc(size):
    return _hccl_python_wrapper.hcclxMalloc(size)

def hcclxFree(address):
    return _hccl_python_wrapper.hcclxFree(address)

def hcclxMemcpySync(dst_device_address, src_device_address, size, kind):
    return _hccl_python_wrapper.hcclxMemcpySync(dst_device_address, src_device_address, size, kind)

def hcclxPrepareStream(stream_handle, array_length):
    return _hccl_python_wrapper.hcclxPrepareStream(stream_handle, array_length)

def hcclxSubmitEvents(stream_handle, array_length, cleanup_callback, callback_cookie):
    return _hccl_python_wrapper.hcclxSubmitEvents(stream_handle, array_length, cleanup_callback, callback_cookie)

def hcclxStreamSynchronize(stream_handle):
    return _hccl_python_wrapper.hcclxStreamSynchronize(stream_handle)

def hcclxGetExecutionOrder(order_id, execution_order):
    return _hccl_python_wrapper.hcclxGetExecutionOrder(order_id, execution_order)

def int64_to_void_ptr(v):
    return _hccl_python_wrapper.int64_to_void_ptr(v)

def void_ptr_to_int64(v):
    return _hccl_python_wrapper.void_ptr_to_int64(v)

def as_hccl_stream_handle_ptr(v):
    return _hccl_python_wrapper.as_hccl_stream_handle_ptr(v)

def as_hccl_stream_handle(v):
    return _hccl_python_wrapper.as_hccl_stream_handle(v)

def as_comm_handle_ptr(v):
    return _hccl_python_wrapper.as_comm_handle_ptr(v)

def as_comm_handle(v):
    return _hccl_python_wrapper.as_comm_handle(v)

def unique_id_to_byte_vector(unique_id):
    return _hccl_python_wrapper.unique_id_to_byte_vector(unique_id)

def unique_id_from_byte_vector(byte_vec):
    return _hccl_python_wrapper.unique_id_from_byte_vector(byte_vec)

def hcclxLockDeviceAddress2(dev_addr):
    return _hccl_python_wrapper.hcclxLockDeviceAddress2(dev_addr)

def hcclxMalloc2(size):
    return _hccl_python_wrapper.hcclxMalloc2(size)

def upload_data(*args):
    return _hccl_python_wrapper.upload_data(*args)

def download_data(*args):
    return _hccl_python_wrapper.download_data(*args)

def hcclxPrepareStream2(stream_handle, input_addresses):
    return _hccl_python_wrapper.hcclxPrepareStream2(stream_handle, input_addresses)

def hcclxSubmitEvents2(stream_handle, input_addresses_array_ptr):
    return _hccl_python_wrapper.hcclxSubmitEvents2(stream_handle, input_addresses_array_ptr)

def convert_data_to_float(*args):
    return _hccl_python_wrapper.convert_data_to_float(*args)

def convert_float_to_data(*args):
    return _hccl_python_wrapper.convert_float_to_data(*args)

def new_int_ptr():
    return _hccl_python_wrapper.new_int_ptr()

def copy_int_ptr(value):
    return _hccl_python_wrapper.copy_int_ptr(value)

def delete_int_ptr(obj):
    return _hccl_python_wrapper.delete_int_ptr(obj)

def int_ptr_assign(obj, value):
    return _hccl_python_wrapper.int_ptr_assign(obj, value)

def int_ptr_value(obj):
    return _hccl_python_wrapper.int_ptr_value(obj)

def new_intptr_ptr():
    return _hccl_python_wrapper.new_intptr_ptr()

def copy_intptr_ptr(value):
    return _hccl_python_wrapper.copy_intptr_ptr(value)

def delete_intptr_ptr(obj):
    return _hccl_python_wrapper.delete_intptr_ptr(obj)

def intptr_ptr_assign(obj, value):
    return _hccl_python_wrapper.intptr_ptr_assign(obj, value)

def intptr_ptr_value(obj):
    return _hccl_python_wrapper.intptr_ptr_value(obj)

def new_hcclUniqueId_ptr():
    return _hccl_python_wrapper.new_hcclUniqueId_ptr()

def copy_hcclUniqueId_ptr(value):
    return _hccl_python_wrapper.copy_hcclUniqueId_ptr(value)

def delete_hcclUniqueId_ptr(obj):
    return _hccl_python_wrapper.delete_hcclUniqueId_ptr(obj)

def hcclUniqueId_ptr_assign(obj, value):
    return _hccl_python_wrapper.hcclUniqueId_ptr_assign(obj, value)

def hcclUniqueId_ptr_value(obj):
    return _hccl_python_wrapper.hcclUniqueId_ptr_value(obj)
class ByteVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hccl_python_wrapper.ByteVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hccl_python_wrapper.ByteVector___nonzero__(self)

    def __bool__(self):
        return _hccl_python_wrapper.ByteVector___bool__(self)

    def __len__(self):
        return _hccl_python_wrapper.ByteVector___len__(self)

    def __getslice__(self, i, j):
        return _hccl_python_wrapper.ByteVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hccl_python_wrapper.ByteVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hccl_python_wrapper.ByteVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hccl_python_wrapper.ByteVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hccl_python_wrapper.ByteVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hccl_python_wrapper.ByteVector___setitem__(self, *args)

    def pop(self):
        return _hccl_python_wrapper.ByteVector_pop(self)

    def append(self, x):
        return _hccl_python_wrapper.ByteVector_append(self, x)

    def empty(self):
        return _hccl_python_wrapper.ByteVector_empty(self)

    def size(self):
        return _hccl_python_wrapper.ByteVector_size(self)

    def swap(self, v):
        return _hccl_python_wrapper.ByteVector_swap(self, v)

    def begin(self):
        return _hccl_python_wrapper.ByteVector_begin(self)

    def end(self):
        return _hccl_python_wrapper.ByteVector_end(self)

    def rbegin(self):
        return _hccl_python_wrapper.ByteVector_rbegin(self)

    def rend(self):
        return _hccl_python_wrapper.ByteVector_rend(self)

    def clear(self):
        return _hccl_python_wrapper.ByteVector_clear(self)

    def get_allocator(self):
        return _hccl_python_wrapper.ByteVector_get_allocator(self)

    def pop_back(self):
        return _hccl_python_wrapper.ByteVector_pop_back(self)

    def erase(self, *args):
        return _hccl_python_wrapper.ByteVector_erase(self, *args)

    def __init__(self, *args):
        _hccl_python_wrapper.ByteVector_swiginit(self, _hccl_python_wrapper.new_ByteVector(*args))

    def push_back(self, x):
        return _hccl_python_wrapper.ByteVector_push_back(self, x)

    def front(self):
        return _hccl_python_wrapper.ByteVector_front(self)

    def back(self):
        return _hccl_python_wrapper.ByteVector_back(self)

    def assign(self, n, x):
        return _hccl_python_wrapper.ByteVector_assign(self, n, x)

    def resize(self, *args):
        return _hccl_python_wrapper.ByteVector_resize(self, *args)

    def insert(self, *args):
        return _hccl_python_wrapper.ByteVector_insert(self, *args)

    def reserve(self, n):
        return _hccl_python_wrapper.ByteVector_reserve(self, n)

    def capacity(self):
        return _hccl_python_wrapper.ByteVector_capacity(self)
    __swig_destroy__ = _hccl_python_wrapper.delete_ByteVector

# Register ByteVector in _hccl_python_wrapper:
_hccl_python_wrapper.ByteVector_swigregister(ByteVector)

class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hccl_python_wrapper.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hccl_python_wrapper.FloatVector___nonzero__(self)

    def __bool__(self):
        return _hccl_python_wrapper.FloatVector___bool__(self)

    def __len__(self):
        return _hccl_python_wrapper.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _hccl_python_wrapper.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hccl_python_wrapper.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hccl_python_wrapper.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hccl_python_wrapper.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hccl_python_wrapper.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hccl_python_wrapper.FloatVector___setitem__(self, *args)

    def pop(self):
        return _hccl_python_wrapper.FloatVector_pop(self)

    def append(self, x):
        return _hccl_python_wrapper.FloatVector_append(self, x)

    def empty(self):
        return _hccl_python_wrapper.FloatVector_empty(self)

    def size(self):
        return _hccl_python_wrapper.FloatVector_size(self)

    def swap(self, v):
        return _hccl_python_wrapper.FloatVector_swap(self, v)

    def begin(self):
        return _hccl_python_wrapper.FloatVector_begin(self)

    def end(self):
        return _hccl_python_wrapper.FloatVector_end(self)

    def rbegin(self):
        return _hccl_python_wrapper.FloatVector_rbegin(self)

    def rend(self):
        return _hccl_python_wrapper.FloatVector_rend(self)

    def clear(self):
        return _hccl_python_wrapper.FloatVector_clear(self)

    def get_allocator(self):
        return _hccl_python_wrapper.FloatVector_get_allocator(self)

    def pop_back(self):
        return _hccl_python_wrapper.FloatVector_pop_back(self)

    def erase(self, *args):
        return _hccl_python_wrapper.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _hccl_python_wrapper.FloatVector_swiginit(self, _hccl_python_wrapper.new_FloatVector(*args))

    def push_back(self, x):
        return _hccl_python_wrapper.FloatVector_push_back(self, x)

    def front(self):
        return _hccl_python_wrapper.FloatVector_front(self)

    def back(self):
        return _hccl_python_wrapper.FloatVector_back(self)

    def assign(self, n, x):
        return _hccl_python_wrapper.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _hccl_python_wrapper.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _hccl_python_wrapper.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _hccl_python_wrapper.FloatVector_reserve(self, n)

    def capacity(self):
        return _hccl_python_wrapper.FloatVector_capacity(self)
    __swig_destroy__ = _hccl_python_wrapper.delete_FloatVector

# Register FloatVector in _hccl_python_wrapper:
_hccl_python_wrapper.FloatVector_swigregister(FloatVector)

class VoidPtrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _hccl_python_wrapper.VoidPtrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _hccl_python_wrapper.VoidPtrVector___nonzero__(self)

    def __bool__(self):
        return _hccl_python_wrapper.VoidPtrVector___bool__(self)

    def __len__(self):
        return _hccl_python_wrapper.VoidPtrVector___len__(self)

    def __getslice__(self, i, j):
        return _hccl_python_wrapper.VoidPtrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _hccl_python_wrapper.VoidPtrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _hccl_python_wrapper.VoidPtrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _hccl_python_wrapper.VoidPtrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _hccl_python_wrapper.VoidPtrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _hccl_python_wrapper.VoidPtrVector___setitem__(self, *args)

    def pop(self):
        return _hccl_python_wrapper.VoidPtrVector_pop(self)

    def append(self, x):
        return _hccl_python_wrapper.VoidPtrVector_append(self, x)

    def empty(self):
        return _hccl_python_wrapper.VoidPtrVector_empty(self)

    def size(self):
        return _hccl_python_wrapper.VoidPtrVector_size(self)

    def swap(self, v):
        return _hccl_python_wrapper.VoidPtrVector_swap(self, v)

    def begin(self):
        return _hccl_python_wrapper.VoidPtrVector_begin(self)

    def end(self):
        return _hccl_python_wrapper.VoidPtrVector_end(self)

    def rbegin(self):
        return _hccl_python_wrapper.VoidPtrVector_rbegin(self)

    def rend(self):
        return _hccl_python_wrapper.VoidPtrVector_rend(self)

    def clear(self):
        return _hccl_python_wrapper.VoidPtrVector_clear(self)

    def get_allocator(self):
        return _hccl_python_wrapper.VoidPtrVector_get_allocator(self)

    def pop_back(self):
        return _hccl_python_wrapper.VoidPtrVector_pop_back(self)

    def erase(self, *args):
        return _hccl_python_wrapper.VoidPtrVector_erase(self, *args)

    def __init__(self, *args):
        _hccl_python_wrapper.VoidPtrVector_swiginit(self, _hccl_python_wrapper.new_VoidPtrVector(*args))

    def push_back(self, x):
        return _hccl_python_wrapper.VoidPtrVector_push_back(self, x)

    def front(self):
        return _hccl_python_wrapper.VoidPtrVector_front(self)

    def back(self):
        return _hccl_python_wrapper.VoidPtrVector_back(self)

    def assign(self, n, x):
        return _hccl_python_wrapper.VoidPtrVector_assign(self, n, x)

    def resize(self, *args):
        return _hccl_python_wrapper.VoidPtrVector_resize(self, *args)

    def insert(self, *args):
        return _hccl_python_wrapper.VoidPtrVector_insert(self, *args)

    def reserve(self, n):
        return _hccl_python_wrapper.VoidPtrVector_reserve(self, n)

    def capacity(self):
        return _hccl_python_wrapper.VoidPtrVector_capacity(self)
    __swig_destroy__ = _hccl_python_wrapper.delete_VoidPtrVector

# Register VoidPtrVector in _hccl_python_wrapper:
_hccl_python_wrapper.VoidPtrVector_swigregister(VoidPtrVector)



