# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class WebhookCreateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'topic': 'str',
        'webhook_uri': 'str',
        'basic_auth_username': 'str',
        'basic_auth_password': 'str',
        'is_active': 'bool'
    }

    attribute_map = {
        'topic': 'topic',
        'webhook_uri': 'webhookUri',
        'basic_auth_username': 'basicAuthUsername',
        'basic_auth_password': 'basicAuthPassword',
        'is_active': 'isActive'
    }

    def __init__(self, topic=None, webhook_uri=None, basic_auth_username=None, basic_auth_password=None, is_active=None, local_vars_configuration=None):  # noqa: E501
        """WebhookCreateRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._topic = None
        self._webhook_uri = None
        self._basic_auth_username = None
        self._basic_auth_password = None
        self._is_active = None
        self.discriminator = None

        self.topic = topic
        self.webhook_uri = webhook_uri
        self.basic_auth_username = basic_auth_username
        self.basic_auth_password = basic_auth_password
        self.is_active = is_active

    @property
    def topic(self):
        """Gets the topic of this WebhookCreateRequest.  # noqa: E501

        Webhook topics are structure like such `DOMAIN/ACTION`.   Supported domains are `absence`, `vacancy`, `substitute_assignment`.  Supported actions are `create`, `update`, `delete`.  # noqa: E501

        :return: The topic of this WebhookCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this WebhookCreateRequest.

        Webhook topics are structure like such `DOMAIN/ACTION`.   Supported domains are `absence`, `vacancy`, `substitute_assignment`.  Supported actions are `create`, `update`, `delete`.  # noqa: E501

        :param topic: The topic of this WebhookCreateRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and topic is None:  # noqa: E501
            raise ValueError("Invalid value for `topic`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                topic is not None and len(topic) < 1):
            raise ValueError("Invalid value for `topic`, length must be greater than or equal to `1`")  # noqa: E501

        self._topic = topic

    @property
    def webhook_uri(self):
        """Gets the webhook_uri of this WebhookCreateRequest.  # noqa: E501

        The absolute uri that data will be posted to  # noqa: E501

        :return: The webhook_uri of this WebhookCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._webhook_uri

    @webhook_uri.setter
    def webhook_uri(self, webhook_uri):
        """Sets the webhook_uri of this WebhookCreateRequest.

        The absolute uri that data will be posted to  # noqa: E501

        :param webhook_uri: The webhook_uri of this WebhookCreateRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and webhook_uri is None:  # noqa: E501
            raise ValueError("Invalid value for `webhook_uri`, must not be `None`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                webhook_uri is not None and len(webhook_uri) < 1):
            raise ValueError("Invalid value for `webhook_uri`, length must be greater than or equal to `1`")  # noqa: E501

        self._webhook_uri = webhook_uri

    @property
    def basic_auth_username(self):
        """Gets the basic_auth_username of this WebhookCreateRequest.  # noqa: E501

        The Basic Auth username for the Basic Auth header that will be included in the Webhook payload (optional)  # noqa: E501

        :return: The basic_auth_username of this WebhookCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._basic_auth_username

    @basic_auth_username.setter
    def basic_auth_username(self, basic_auth_username):
        """Sets the basic_auth_username of this WebhookCreateRequest.

        The Basic Auth username for the Basic Auth header that will be included in the Webhook payload (optional)  # noqa: E501

        :param basic_auth_username: The basic_auth_username of this WebhookCreateRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                basic_auth_username is not None and len(basic_auth_username) > 100):
            raise ValueError("Invalid value for `basic_auth_username`, length must be less than or equal to `100`")  # noqa: E501

        self._basic_auth_username = basic_auth_username

    @property
    def basic_auth_password(self):
        """Gets the basic_auth_password of this WebhookCreateRequest.  # noqa: E501

        The Basic Auth password for the Basic Auth header that will be included in the Webhook payload (optional)  # noqa: E501

        :return: The basic_auth_password of this WebhookCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._basic_auth_password

    @basic_auth_password.setter
    def basic_auth_password(self, basic_auth_password):
        """Sets the basic_auth_password of this WebhookCreateRequest.

        The Basic Auth password for the Basic Auth header that will be included in the Webhook payload (optional)  # noqa: E501

        :param basic_auth_password: The basic_auth_password of this WebhookCreateRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                basic_auth_password is not None and len(basic_auth_password) > 100):
            raise ValueError("Invalid value for `basic_auth_password`, length must be less than or equal to `100`")  # noqa: E501

        self._basic_auth_password = basic_auth_password

    @property
    def is_active(self):
        """Gets the is_active of this WebhookCreateRequest.  # noqa: E501

        Whether this Webhook is active. If it is inactive, no data will be posted to it  # noqa: E501

        :return: The is_active of this WebhookCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this WebhookCreateRequest.

        Whether this Webhook is active. If it is inactive, no data will be posted to it  # noqa: E501

        :param is_active: The is_active of this WebhookCreateRequest.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookCreateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WebhookCreateRequest):
            return True

        return self.to_dict() != other.to_dict()
