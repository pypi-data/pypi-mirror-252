# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class PositionScheduleCustomVariantRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'start_time': 'str',
        'half_day_morning_end_time': 'str',
        'half_day_afternoon_start_time': 'str',
        'end_time': 'str',
        'next_start_time': 'str',
        'is_work_time': 'bool',
        'needs_replacement': 'bool',
        'needs_replacement_am': 'bool',
        'needs_replacement_pm': 'bool',
        'work_day_schedule_variant_type': 'Int32LocatorRequest'
    }

    attribute_map = {
        'start_time': 'startTime',
        'half_day_morning_end_time': 'halfDayMorningEndTime',
        'half_day_afternoon_start_time': 'halfDayAfternoonStartTime',
        'end_time': 'endTime',
        'next_start_time': 'nextStartTime',
        'is_work_time': 'isWorkTime',
        'needs_replacement': 'needsReplacement',
        'needs_replacement_am': 'needsReplacementAm',
        'needs_replacement_pm': 'needsReplacementPm',
        'work_day_schedule_variant_type': 'workDayScheduleVariantType'
    }

    def __init__(self, start_time=None, half_day_morning_end_time=None, half_day_afternoon_start_time=None, end_time=None, next_start_time=None, is_work_time=None, needs_replacement=None, needs_replacement_am=None, needs_replacement_pm=None, work_day_schedule_variant_type=None, local_vars_configuration=None):  # noqa: E501
        """PositionScheduleCustomVariantRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._start_time = None
        self._half_day_morning_end_time = None
        self._half_day_afternoon_start_time = None
        self._end_time = None
        self._next_start_time = None
        self._is_work_time = None
        self._needs_replacement = None
        self._needs_replacement_am = None
        self._needs_replacement_pm = None
        self._work_day_schedule_variant_type = None
        self.discriminator = None

        self.start_time = start_time
        self.half_day_morning_end_time = half_day_morning_end_time
        self.half_day_afternoon_start_time = half_day_afternoon_start_time
        self.end_time = end_time
        self.next_start_time = next_start_time
        if is_work_time is not None:
            self.is_work_time = is_work_time
        if needs_replacement is not None:
            self.needs_replacement = needs_replacement
        if needs_replacement_am is not None:
            self.needs_replacement_am = needs_replacement_am
        if needs_replacement_pm is not None:
            self.needs_replacement_pm = needs_replacement_pm
        if work_day_schedule_variant_type is not None:
            self.work_day_schedule_variant_type = work_day_schedule_variant_type

    @property
    def start_time(self):
        """Gets the start_time of this PositionScheduleCustomVariantRequest.  # noqa: E501

        The start time  # noqa: E501

        :return: The start_time of this PositionScheduleCustomVariantRequest.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this PositionScheduleCustomVariantRequest.

        The start time  # noqa: E501

        :param start_time: The start_time of this PositionScheduleCustomVariantRequest.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def half_day_morning_end_time(self):
        """Gets the half_day_morning_end_time of this PositionScheduleCustomVariantRequest.  # noqa: E501

        Halfday morning start time  # noqa: E501

        :return: The half_day_morning_end_time of this PositionScheduleCustomVariantRequest.  # noqa: E501
        :rtype: str
        """
        return self._half_day_morning_end_time

    @half_day_morning_end_time.setter
    def half_day_morning_end_time(self, half_day_morning_end_time):
        """Sets the half_day_morning_end_time of this PositionScheduleCustomVariantRequest.

        Halfday morning start time  # noqa: E501

        :param half_day_morning_end_time: The half_day_morning_end_time of this PositionScheduleCustomVariantRequest.  # noqa: E501
        :type: str
        """

        self._half_day_morning_end_time = half_day_morning_end_time

    @property
    def half_day_afternoon_start_time(self):
        """Gets the half_day_afternoon_start_time of this PositionScheduleCustomVariantRequest.  # noqa: E501

        Halfday afternoon start time  # noqa: E501

        :return: The half_day_afternoon_start_time of this PositionScheduleCustomVariantRequest.  # noqa: E501
        :rtype: str
        """
        return self._half_day_afternoon_start_time

    @half_day_afternoon_start_time.setter
    def half_day_afternoon_start_time(self, half_day_afternoon_start_time):
        """Sets the half_day_afternoon_start_time of this PositionScheduleCustomVariantRequest.

        Halfday afternoon start time  # noqa: E501

        :param half_day_afternoon_start_time: The half_day_afternoon_start_time of this PositionScheduleCustomVariantRequest.  # noqa: E501
        :type: str
        """

        self._half_day_afternoon_start_time = half_day_afternoon_start_time

    @property
    def end_time(self):
        """Gets the end_time of this PositionScheduleCustomVariantRequest.  # noqa: E501

        The next end time  # noqa: E501

        :return: The end_time of this PositionScheduleCustomVariantRequest.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this PositionScheduleCustomVariantRequest.

        The next end time  # noqa: E501

        :param end_time: The end_time of this PositionScheduleCustomVariantRequest.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def next_start_time(self):
        """Gets the next_start_time of this PositionScheduleCustomVariantRequest.  # noqa: E501

        The next start time  # noqa: E501

        :return: The next_start_time of this PositionScheduleCustomVariantRequest.  # noqa: E501
        :rtype: str
        """
        return self._next_start_time

    @next_start_time.setter
    def next_start_time(self, next_start_time):
        """Sets the next_start_time of this PositionScheduleCustomVariantRequest.

        The next start time  # noqa: E501

        :param next_start_time: The next_start_time of this PositionScheduleCustomVariantRequest.  # noqa: E501
        :type: str
        """

        self._next_start_time = next_start_time

    @property
    def is_work_time(self):
        """Gets the is_work_time of this PositionScheduleCustomVariantRequest.  # noqa: E501

        If is work time  # noqa: E501

        :return: The is_work_time of this PositionScheduleCustomVariantRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_work_time

    @is_work_time.setter
    def is_work_time(self, is_work_time):
        """Sets the is_work_time of this PositionScheduleCustomVariantRequest.

        If is work time  # noqa: E501

        :param is_work_time: The is_work_time of this PositionScheduleCustomVariantRequest.  # noqa: E501
        :type: bool
        """

        self._is_work_time = is_work_time

    @property
    def needs_replacement(self):
        """Gets the needs_replacement of this PositionScheduleCustomVariantRequest.  # noqa: E501

        If needs replacement  # noqa: E501

        :return: The needs_replacement of this PositionScheduleCustomVariantRequest.  # noqa: E501
        :rtype: bool
        """
        return self._needs_replacement

    @needs_replacement.setter
    def needs_replacement(self, needs_replacement):
        """Sets the needs_replacement of this PositionScheduleCustomVariantRequest.

        If needs replacement  # noqa: E501

        :param needs_replacement: The needs_replacement of this PositionScheduleCustomVariantRequest.  # noqa: E501
        :type: bool
        """

        self._needs_replacement = needs_replacement

    @property
    def needs_replacement_am(self):
        """Gets the needs_replacement_am of this PositionScheduleCustomVariantRequest.  # noqa: E501

        If needs replacement for AM  # noqa: E501

        :return: The needs_replacement_am of this PositionScheduleCustomVariantRequest.  # noqa: E501
        :rtype: bool
        """
        return self._needs_replacement_am

    @needs_replacement_am.setter
    def needs_replacement_am(self, needs_replacement_am):
        """Sets the needs_replacement_am of this PositionScheduleCustomVariantRequest.

        If needs replacement for AM  # noqa: E501

        :param needs_replacement_am: The needs_replacement_am of this PositionScheduleCustomVariantRequest.  # noqa: E501
        :type: bool
        """

        self._needs_replacement_am = needs_replacement_am

    @property
    def needs_replacement_pm(self):
        """Gets the needs_replacement_pm of this PositionScheduleCustomVariantRequest.  # noqa: E501

        If needs replacement for PM  # noqa: E501

        :return: The needs_replacement_pm of this PositionScheduleCustomVariantRequest.  # noqa: E501
        :rtype: bool
        """
        return self._needs_replacement_pm

    @needs_replacement_pm.setter
    def needs_replacement_pm(self, needs_replacement_pm):
        """Sets the needs_replacement_pm of this PositionScheduleCustomVariantRequest.

        If needs replacement for PM  # noqa: E501

        :param needs_replacement_pm: The needs_replacement_pm of this PositionScheduleCustomVariantRequest.  # noqa: E501
        :type: bool
        """

        self._needs_replacement_pm = needs_replacement_pm

    @property
    def work_day_schedule_variant_type(self):
        """Gets the work_day_schedule_variant_type of this PositionScheduleCustomVariantRequest.  # noqa: E501


        :return: The work_day_schedule_variant_type of this PositionScheduleCustomVariantRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._work_day_schedule_variant_type

    @work_day_schedule_variant_type.setter
    def work_day_schedule_variant_type(self, work_day_schedule_variant_type):
        """Sets the work_day_schedule_variant_type of this PositionScheduleCustomVariantRequest.


        :param work_day_schedule_variant_type: The work_day_schedule_variant_type of this PositionScheduleCustomVariantRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """

        self._work_day_schedule_variant_type = work_day_schedule_variant_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PositionScheduleCustomVariantRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PositionScheduleCustomVariantRequest):
            return True

        return self.to_dict() != other.to_dict()
