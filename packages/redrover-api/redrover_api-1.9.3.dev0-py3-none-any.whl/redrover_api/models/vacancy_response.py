# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class VacancyResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'position': 'Int32IdNameClass',
        'contract': 'Int32IdNameClass',
        'approval_status': 'ApprovalStatusEnum',
        'is_long_term': 'bool',
        'notes_to_replacement': 'str',
        'admin_only_notes': 'str',
        'administrator_comments': 'str',
        'allow_sub_to_accept_part': 'bool',
        'details': 'list[VacancyDetailResponse]',
        'hold_for_manual_fill_until_utc': 'datetime',
        'hold_for_auto_assign_until_utc': 'datetime',
        'fill_status': 'FillStatusEnum',
        'absence_id': 'int',
        'admin_edit_url': 'str',
        'id': 'int',
        'external_id': 'str'
    }

    attribute_map = {
        'position': 'position',
        'contract': 'contract',
        'approval_status': 'approvalStatus',
        'is_long_term': 'isLongTerm',
        'notes_to_replacement': 'notesToReplacement',
        'admin_only_notes': 'adminOnlyNotes',
        'administrator_comments': 'administratorComments',
        'allow_sub_to_accept_part': 'allowSubToAcceptPart',
        'details': 'details',
        'hold_for_manual_fill_until_utc': 'holdForManualFillUntilUtc',
        'hold_for_auto_assign_until_utc': 'holdForAutoAssignUntilUtc',
        'fill_status': 'fillStatus',
        'absence_id': 'absenceId',
        'admin_edit_url': 'adminEditUrl',
        'id': 'id',
        'external_id': 'externalId'
    }

    def __init__(self, position=None, contract=None, approval_status=None, is_long_term=None, notes_to_replacement=None, admin_only_notes=None, administrator_comments=None, allow_sub_to_accept_part=None, details=None, hold_for_manual_fill_until_utc=None, hold_for_auto_assign_until_utc=None, fill_status=None, absence_id=None, admin_edit_url=None, id=None, external_id=None, local_vars_configuration=None):  # noqa: E501
        """VacancyResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._position = None
        self._contract = None
        self._approval_status = None
        self._is_long_term = None
        self._notes_to_replacement = None
        self._admin_only_notes = None
        self._administrator_comments = None
        self._allow_sub_to_accept_part = None
        self._details = None
        self._hold_for_manual_fill_until_utc = None
        self._hold_for_auto_assign_until_utc = None
        self._fill_status = None
        self._absence_id = None
        self._admin_edit_url = None
        self._id = None
        self._external_id = None
        self.discriminator = None

        if position is not None:
            self.position = position
        if contract is not None:
            self.contract = contract
        if approval_status is not None:
            self.approval_status = approval_status
        if is_long_term is not None:
            self.is_long_term = is_long_term
        self.notes_to_replacement = notes_to_replacement
        self.admin_only_notes = admin_only_notes
        self.administrator_comments = administrator_comments
        self.allow_sub_to_accept_part = allow_sub_to_accept_part
        self.details = details
        self.hold_for_manual_fill_until_utc = hold_for_manual_fill_until_utc
        self.hold_for_auto_assign_until_utc = hold_for_auto_assign_until_utc
        if fill_status is not None:
            self.fill_status = fill_status
        self.absence_id = absence_id
        self.admin_edit_url = admin_edit_url
        if id is not None:
            self.id = id
        self.external_id = external_id

    @property
    def position(self):
        """Gets the position of this VacancyResponse.  # noqa: E501


        :return: The position of this VacancyResponse.  # noqa: E501
        :rtype: Int32IdNameClass
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this VacancyResponse.


        :param position: The position of this VacancyResponse.  # noqa: E501
        :type: Int32IdNameClass
        """

        self._position = position

    @property
    def contract(self):
        """Gets the contract of this VacancyResponse.  # noqa: E501


        :return: The contract of this VacancyResponse.  # noqa: E501
        :rtype: Int32IdNameClass
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """Sets the contract of this VacancyResponse.


        :param contract: The contract of this VacancyResponse.  # noqa: E501
        :type: Int32IdNameClass
        """

        self._contract = contract

    @property
    def approval_status(self):
        """Gets the approval_status of this VacancyResponse.  # noqa: E501


        :return: The approval_status of this VacancyResponse.  # noqa: E501
        :rtype: ApprovalStatusEnum
        """
        return self._approval_status

    @approval_status.setter
    def approval_status(self, approval_status):
        """Sets the approval_status of this VacancyResponse.


        :param approval_status: The approval_status of this VacancyResponse.  # noqa: E501
        :type: ApprovalStatusEnum
        """

        self._approval_status = approval_status

    @property
    def is_long_term(self):
        """Gets the is_long_term of this VacancyResponse.  # noqa: E501

        If the Vacancy is long term  # noqa: E501

        :return: The is_long_term of this VacancyResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_long_term

    @is_long_term.setter
    def is_long_term(self, is_long_term):
        """Sets the is_long_term of this VacancyResponse.

        If the Vacancy is long term  # noqa: E501

        :param is_long_term: The is_long_term of this VacancyResponse.  # noqa: E501
        :type: bool
        """

        self._is_long_term = is_long_term

    @property
    def notes_to_replacement(self):
        """Gets the notes_to_replacement of this VacancyResponse.  # noqa: E501

        Notes to the Substitute  # noqa: E501

        :return: The notes_to_replacement of this VacancyResponse.  # noqa: E501
        :rtype: str
        """
        return self._notes_to_replacement

    @notes_to_replacement.setter
    def notes_to_replacement(self, notes_to_replacement):
        """Sets the notes_to_replacement of this VacancyResponse.

        Notes to the Substitute  # noqa: E501

        :param notes_to_replacement: The notes_to_replacement of this VacancyResponse.  # noqa: E501
        :type: str
        """

        self._notes_to_replacement = notes_to_replacement

    @property
    def admin_only_notes(self):
        """Gets the admin_only_notes of this VacancyResponse.  # noqa: E501

        Notes for only Admins  # noqa: E501

        :return: The admin_only_notes of this VacancyResponse.  # noqa: E501
        :rtype: str
        """
        return self._admin_only_notes

    @admin_only_notes.setter
    def admin_only_notes(self, admin_only_notes):
        """Sets the admin_only_notes of this VacancyResponse.

        Notes for only Admins  # noqa: E501

        :param admin_only_notes: The admin_only_notes of this VacancyResponse.  # noqa: E501
        :type: str
        """

        self._admin_only_notes = admin_only_notes

    @property
    def administrator_comments(self):
        """Gets the administrator_comments of this VacancyResponse.  # noqa: E501

        Administrator comments  # noqa: E501

        :return: The administrator_comments of this VacancyResponse.  # noqa: E501
        :rtype: str
        """
        return self._administrator_comments

    @administrator_comments.setter
    def administrator_comments(self, administrator_comments):
        """Sets the administrator_comments of this VacancyResponse.

        Administrator comments  # noqa: E501

        :param administrator_comments: The administrator_comments of this VacancyResponse.  # noqa: E501
        :type: str
        """

        self._administrator_comments = administrator_comments

    @property
    def allow_sub_to_accept_part(self):
        """Gets the allow_sub_to_accept_part of this VacancyResponse.  # noqa: E501

        If the Vacancy can be accepted in parts  # noqa: E501

        :return: The allow_sub_to_accept_part of this VacancyResponse.  # noqa: E501
        :rtype: bool
        """
        return self._allow_sub_to_accept_part

    @allow_sub_to_accept_part.setter
    def allow_sub_to_accept_part(self, allow_sub_to_accept_part):
        """Sets the allow_sub_to_accept_part of this VacancyResponse.

        If the Vacancy can be accepted in parts  # noqa: E501

        :param allow_sub_to_accept_part: The allow_sub_to_accept_part of this VacancyResponse.  # noqa: E501
        :type: bool
        """

        self._allow_sub_to_accept_part = allow_sub_to_accept_part

    @property
    def details(self):
        """Gets the details of this VacancyResponse.  # noqa: E501

        The Vacancy's Details  # noqa: E501

        :return: The details of this VacancyResponse.  # noqa: E501
        :rtype: list[VacancyDetailResponse]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this VacancyResponse.

        The Vacancy's Details  # noqa: E501

        :param details: The details of this VacancyResponse.  # noqa: E501
        :type: list[VacancyDetailResponse]
        """

        self._details = details

    @property
    def hold_for_manual_fill_until_utc(self):
        """Gets the hold_for_manual_fill_until_utc of this VacancyResponse.  # noqa: E501

        When the Vacancy is held for manual fill  # noqa: E501

        :return: The hold_for_manual_fill_until_utc of this VacancyResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._hold_for_manual_fill_until_utc

    @hold_for_manual_fill_until_utc.setter
    def hold_for_manual_fill_until_utc(self, hold_for_manual_fill_until_utc):
        """Sets the hold_for_manual_fill_until_utc of this VacancyResponse.

        When the Vacancy is held for manual fill  # noqa: E501

        :param hold_for_manual_fill_until_utc: The hold_for_manual_fill_until_utc of this VacancyResponse.  # noqa: E501
        :type: datetime
        """

        self._hold_for_manual_fill_until_utc = hold_for_manual_fill_until_utc

    @property
    def hold_for_auto_assign_until_utc(self):
        """Gets the hold_for_auto_assign_until_utc of this VacancyResponse.  # noqa: E501

        When the Vacancy is held for auto assign  # noqa: E501

        :return: The hold_for_auto_assign_until_utc of this VacancyResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._hold_for_auto_assign_until_utc

    @hold_for_auto_assign_until_utc.setter
    def hold_for_auto_assign_until_utc(self, hold_for_auto_assign_until_utc):
        """Sets the hold_for_auto_assign_until_utc of this VacancyResponse.

        When the Vacancy is held for auto assign  # noqa: E501

        :param hold_for_auto_assign_until_utc: The hold_for_auto_assign_until_utc of this VacancyResponse.  # noqa: E501
        :type: datetime
        """

        self._hold_for_auto_assign_until_utc = hold_for_auto_assign_until_utc

    @property
    def fill_status(self):
        """Gets the fill_status of this VacancyResponse.  # noqa: E501


        :return: The fill_status of this VacancyResponse.  # noqa: E501
        :rtype: FillStatusEnum
        """
        return self._fill_status

    @fill_status.setter
    def fill_status(self, fill_status):
        """Sets the fill_status of this VacancyResponse.


        :param fill_status: The fill_status of this VacancyResponse.  # noqa: E501
        :type: FillStatusEnum
        """

        self._fill_status = fill_status

    @property
    def absence_id(self):
        """Gets the absence_id of this VacancyResponse.  # noqa: E501

        The Vacancy's AbsenceId if it is correlated to one  # noqa: E501

        :return: The absence_id of this VacancyResponse.  # noqa: E501
        :rtype: int
        """
        return self._absence_id

    @absence_id.setter
    def absence_id(self, absence_id):
        """Sets the absence_id of this VacancyResponse.

        The Vacancy's AbsenceId if it is correlated to one  # noqa: E501

        :param absence_id: The absence_id of this VacancyResponse.  # noqa: E501
        :type: int
        """

        self._absence_id = absence_id

    @property
    def admin_edit_url(self):
        """Gets the admin_edit_url of this VacancyResponse.  # noqa: E501

        The Url that the Admin can edit the Vacancy or Absence that it is associated with  # noqa: E501

        :return: The admin_edit_url of this VacancyResponse.  # noqa: E501
        :rtype: str
        """
        return self._admin_edit_url

    @admin_edit_url.setter
    def admin_edit_url(self, admin_edit_url):
        """Sets the admin_edit_url of this VacancyResponse.

        The Url that the Admin can edit the Vacancy or Absence that it is associated with  # noqa: E501

        :param admin_edit_url: The admin_edit_url of this VacancyResponse.  # noqa: E501
        :type: str
        """

        self._admin_edit_url = admin_edit_url

    @property
    def id(self):
        """Gets the id of this VacancyResponse.  # noqa: E501


        :return: The id of this VacancyResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VacancyResponse.


        :param id: The id of this VacancyResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def external_id(self):
        """Gets the external_id of this VacancyResponse.  # noqa: E501


        :return: The external_id of this VacancyResponse.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this VacancyResponse.


        :param external_id: The external_id of this VacancyResponse.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VacancyResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VacancyResponse):
            return True

        return self.to_dict() != other.to_dict()
