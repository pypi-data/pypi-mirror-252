# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class PositionScheduleItemRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'accounting_code_allocations': 'list[AccountingCodeAllocationRequest]',
        'location': 'Int32LocatorRequest',
        'job': 'Int32LocatorRequest',
        'bell_schedule': 'Int32LocatorRequest',
        'start_period': 'Int32LocatorRequest',
        'end_period': 'Int32LocatorRequest',
        'periods_not_needing_replacement': 'list[Int32LocatorRequest]',
        'standard_custom_schedule_variant': 'PositionScheduleCustomVariantRequest',
        'additional_custom_schedule_variants': 'list[PositionScheduleCustomVariantRequest]'
    }

    attribute_map = {
        'accounting_code_allocations': 'accountingCodeAllocations',
        'location': 'location',
        'job': 'job',
        'bell_schedule': 'bellSchedule',
        'start_period': 'startPeriod',
        'end_period': 'endPeriod',
        'periods_not_needing_replacement': 'periodsNotNeedingReplacement',
        'standard_custom_schedule_variant': 'standardCustomScheduleVariant',
        'additional_custom_schedule_variants': 'additionalCustomScheduleVariants'
    }

    def __init__(self, accounting_code_allocations=None, location=None, job=None, bell_schedule=None, start_period=None, end_period=None, periods_not_needing_replacement=None, standard_custom_schedule_variant=None, additional_custom_schedule_variants=None, local_vars_configuration=None):  # noqa: E501
        """PositionScheduleItemRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._accounting_code_allocations = None
        self._location = None
        self._job = None
        self._bell_schedule = None
        self._start_period = None
        self._end_period = None
        self._periods_not_needing_replacement = None
        self._standard_custom_schedule_variant = None
        self._additional_custom_schedule_variants = None
        self.discriminator = None

        self.accounting_code_allocations = accounting_code_allocations
        self.location = location
        if job is not None:
            self.job = job
        self.bell_schedule = bell_schedule
        if start_period is not None:
            self.start_period = start_period
        if end_period is not None:
            self.end_period = end_period
        self.periods_not_needing_replacement = periods_not_needing_replacement
        if standard_custom_schedule_variant is not None:
            self.standard_custom_schedule_variant = standard_custom_schedule_variant
        self.additional_custom_schedule_variants = additional_custom_schedule_variants

    @property
    def accounting_code_allocations(self):
        """Gets the accounting_code_allocations of this PositionScheduleItemRequest.  # noqa: E501

        Accounting Code allocations  # noqa: E501

        :return: The accounting_code_allocations of this PositionScheduleItemRequest.  # noqa: E501
        :rtype: list[AccountingCodeAllocationRequest]
        """
        return self._accounting_code_allocations

    @accounting_code_allocations.setter
    def accounting_code_allocations(self, accounting_code_allocations):
        """Sets the accounting_code_allocations of this PositionScheduleItemRequest.

        Accounting Code allocations  # noqa: E501

        :param accounting_code_allocations: The accounting_code_allocations of this PositionScheduleItemRequest.  # noqa: E501
        :type: list[AccountingCodeAllocationRequest]
        """

        self._accounting_code_allocations = accounting_code_allocations

    @property
    def location(self):
        """Gets the location of this PositionScheduleItemRequest.  # noqa: E501


        :return: The location of this PositionScheduleItemRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this PositionScheduleItemRequest.


        :param location: The location of this PositionScheduleItemRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """
        if self.local_vars_configuration.client_side_validation and location is None:  # noqa: E501
            raise ValueError("Invalid value for `location`, must not be `None`")  # noqa: E501

        self._location = location

    @property
    def job(self):
        """Gets the job of this PositionScheduleItemRequest.  # noqa: E501


        :return: The job of this PositionScheduleItemRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this PositionScheduleItemRequest.


        :param job: The job of this PositionScheduleItemRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """

        self._job = job

    @property
    def bell_schedule(self):
        """Gets the bell_schedule of this PositionScheduleItemRequest.  # noqa: E501


        :return: The bell_schedule of this PositionScheduleItemRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._bell_schedule

    @bell_schedule.setter
    def bell_schedule(self, bell_schedule):
        """Sets the bell_schedule of this PositionScheduleItemRequest.


        :param bell_schedule: The bell_schedule of this PositionScheduleItemRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """
        if self.local_vars_configuration.client_side_validation and bell_schedule is None:  # noqa: E501
            raise ValueError("Invalid value for `bell_schedule`, must not be `None`")  # noqa: E501

        self._bell_schedule = bell_schedule

    @property
    def start_period(self):
        """Gets the start_period of this PositionScheduleItemRequest.  # noqa: E501


        :return: The start_period of this PositionScheduleItemRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._start_period

    @start_period.setter
    def start_period(self, start_period):
        """Sets the start_period of this PositionScheduleItemRequest.


        :param start_period: The start_period of this PositionScheduleItemRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """

        self._start_period = start_period

    @property
    def end_period(self):
        """Gets the end_period of this PositionScheduleItemRequest.  # noqa: E501


        :return: The end_period of this PositionScheduleItemRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._end_period

    @end_period.setter
    def end_period(self, end_period):
        """Sets the end_period of this PositionScheduleItemRequest.


        :param end_period: The end_period of this PositionScheduleItemRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """

        self._end_period = end_period

    @property
    def periods_not_needing_replacement(self):
        """Gets the periods_not_needing_replacement of this PositionScheduleItemRequest.  # noqa: E501

        The Periods that do not need replacement  # noqa: E501

        :return: The periods_not_needing_replacement of this PositionScheduleItemRequest.  # noqa: E501
        :rtype: list[Int32LocatorRequest]
        """
        return self._periods_not_needing_replacement

    @periods_not_needing_replacement.setter
    def periods_not_needing_replacement(self, periods_not_needing_replacement):
        """Sets the periods_not_needing_replacement of this PositionScheduleItemRequest.

        The Periods that do not need replacement  # noqa: E501

        :param periods_not_needing_replacement: The periods_not_needing_replacement of this PositionScheduleItemRequest.  # noqa: E501
        :type: list[Int32LocatorRequest]
        """

        self._periods_not_needing_replacement = periods_not_needing_replacement

    @property
    def standard_custom_schedule_variant(self):
        """Gets the standard_custom_schedule_variant of this PositionScheduleItemRequest.  # noqa: E501


        :return: The standard_custom_schedule_variant of this PositionScheduleItemRequest.  # noqa: E501
        :rtype: PositionScheduleCustomVariantRequest
        """
        return self._standard_custom_schedule_variant

    @standard_custom_schedule_variant.setter
    def standard_custom_schedule_variant(self, standard_custom_schedule_variant):
        """Sets the standard_custom_schedule_variant of this PositionScheduleItemRequest.


        :param standard_custom_schedule_variant: The standard_custom_schedule_variant of this PositionScheduleItemRequest.  # noqa: E501
        :type: PositionScheduleCustomVariantRequest
        """

        self._standard_custom_schedule_variant = standard_custom_schedule_variant

    @property
    def additional_custom_schedule_variants(self):
        """Gets the additional_custom_schedule_variants of this PositionScheduleItemRequest.  # noqa: E501

        Additional custom schedule variant  # noqa: E501

        :return: The additional_custom_schedule_variants of this PositionScheduleItemRequest.  # noqa: E501
        :rtype: list[PositionScheduleCustomVariantRequest]
        """
        return self._additional_custom_schedule_variants

    @additional_custom_schedule_variants.setter
    def additional_custom_schedule_variants(self, additional_custom_schedule_variants):
        """Sets the additional_custom_schedule_variants of this PositionScheduleItemRequest.

        Additional custom schedule variant  # noqa: E501

        :param additional_custom_schedule_variants: The additional_custom_schedule_variants of this PositionScheduleItemRequest.  # noqa: E501
        :type: list[PositionScheduleCustomVariantRequest]
        """

        self._additional_custom_schedule_variants = additional_custom_schedule_variants

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PositionScheduleItemRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PositionScheduleItemRequest):
            return True

        return self.to_dict() != other.to_dict()
