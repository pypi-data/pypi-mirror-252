# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`).  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class FieldInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'declaring_type': 'Type',
        'reflected_type': 'Type',
        'module': 'Module',
        'custom_attributes': 'list[CustomAttributeData]',
        'is_collectible': 'bool',
        'metadata_token': 'int',
        'member_type': 'str',
        'attributes': 'str',
        'field_type': 'Type',
        'is_init_only': 'bool',
        'is_literal': 'bool',
        'is_not_serialized': 'bool',
        'is_pinvoke_impl': 'bool',
        'is_special_name': 'bool',
        'is_static': 'bool',
        'is_assembly': 'bool',
        'is_family': 'bool',
        'is_family_and_assembly': 'bool',
        'is_family_or_assembly': 'bool',
        'is_private': 'bool',
        'is_public': 'bool',
        'is_security_critical': 'bool',
        'is_security_safe_critical': 'bool',
        'is_security_transparent': 'bool',
        'field_handle': 'RuntimeFieldHandle'
    }

    attribute_map = {
        'name': 'name',
        'declaring_type': 'declaringType',
        'reflected_type': 'reflectedType',
        'module': 'module',
        'custom_attributes': 'customAttributes',
        'is_collectible': 'isCollectible',
        'metadata_token': 'metadataToken',
        'member_type': 'memberType',
        'attributes': 'attributes',
        'field_type': 'fieldType',
        'is_init_only': 'isInitOnly',
        'is_literal': 'isLiteral',
        'is_not_serialized': 'isNotSerialized',
        'is_pinvoke_impl': 'isPinvokeImpl',
        'is_special_name': 'isSpecialName',
        'is_static': 'isStatic',
        'is_assembly': 'isAssembly',
        'is_family': 'isFamily',
        'is_family_and_assembly': 'isFamilyAndAssembly',
        'is_family_or_assembly': 'isFamilyOrAssembly',
        'is_private': 'isPrivate',
        'is_public': 'isPublic',
        'is_security_critical': 'isSecurityCritical',
        'is_security_safe_critical': 'isSecuritySafeCritical',
        'is_security_transparent': 'isSecurityTransparent',
        'field_handle': 'fieldHandle'
    }

    def __init__(self, name=None, declaring_type=None, reflected_type=None, module=None, custom_attributes=None, is_collectible=None, metadata_token=None, member_type=None, attributes=None, field_type=None, is_init_only=None, is_literal=None, is_not_serialized=None, is_pinvoke_impl=None, is_special_name=None, is_static=None, is_assembly=None, is_family=None, is_family_and_assembly=None, is_family_or_assembly=None, is_private=None, is_public=None, is_security_critical=None, is_security_safe_critical=None, is_security_transparent=None, field_handle=None, local_vars_configuration=None):  # noqa: E501
        """FieldInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._declaring_type = None
        self._reflected_type = None
        self._module = None
        self._custom_attributes = None
        self._is_collectible = None
        self._metadata_token = None
        self._member_type = None
        self._attributes = None
        self._field_type = None
        self._is_init_only = None
        self._is_literal = None
        self._is_not_serialized = None
        self._is_pinvoke_impl = None
        self._is_special_name = None
        self._is_static = None
        self._is_assembly = None
        self._is_family = None
        self._is_family_and_assembly = None
        self._is_family_or_assembly = None
        self._is_private = None
        self._is_public = None
        self._is_security_critical = None
        self._is_security_safe_critical = None
        self._is_security_transparent = None
        self._field_handle = None
        self.discriminator = None

        self.name = name
        if declaring_type is not None:
            self.declaring_type = declaring_type
        if reflected_type is not None:
            self.reflected_type = reflected_type
        if module is not None:
            self.module = module
        self.custom_attributes = custom_attributes
        if is_collectible is not None:
            self.is_collectible = is_collectible
        if metadata_token is not None:
            self.metadata_token = metadata_token
        if member_type is not None:
            self.member_type = member_type
        if attributes is not None:
            self.attributes = attributes
        if field_type is not None:
            self.field_type = field_type
        if is_init_only is not None:
            self.is_init_only = is_init_only
        if is_literal is not None:
            self.is_literal = is_literal
        if is_not_serialized is not None:
            self.is_not_serialized = is_not_serialized
        if is_pinvoke_impl is not None:
            self.is_pinvoke_impl = is_pinvoke_impl
        if is_special_name is not None:
            self.is_special_name = is_special_name
        if is_static is not None:
            self.is_static = is_static
        if is_assembly is not None:
            self.is_assembly = is_assembly
        if is_family is not None:
            self.is_family = is_family
        if is_family_and_assembly is not None:
            self.is_family_and_assembly = is_family_and_assembly
        if is_family_or_assembly is not None:
            self.is_family_or_assembly = is_family_or_assembly
        if is_private is not None:
            self.is_private = is_private
        if is_public is not None:
            self.is_public = is_public
        if is_security_critical is not None:
            self.is_security_critical = is_security_critical
        if is_security_safe_critical is not None:
            self.is_security_safe_critical = is_security_safe_critical
        if is_security_transparent is not None:
            self.is_security_transparent = is_security_transparent
        if field_handle is not None:
            self.field_handle = field_handle

    @property
    def name(self):
        """Gets the name of this FieldInfo.  # noqa: E501


        :return: The name of this FieldInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FieldInfo.


        :param name: The name of this FieldInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def declaring_type(self):
        """Gets the declaring_type of this FieldInfo.  # noqa: E501


        :return: The declaring_type of this FieldInfo.  # noqa: E501
        :rtype: Type
        """
        return self._declaring_type

    @declaring_type.setter
    def declaring_type(self, declaring_type):
        """Sets the declaring_type of this FieldInfo.


        :param declaring_type: The declaring_type of this FieldInfo.  # noqa: E501
        :type: Type
        """

        self._declaring_type = declaring_type

    @property
    def reflected_type(self):
        """Gets the reflected_type of this FieldInfo.  # noqa: E501


        :return: The reflected_type of this FieldInfo.  # noqa: E501
        :rtype: Type
        """
        return self._reflected_type

    @reflected_type.setter
    def reflected_type(self, reflected_type):
        """Sets the reflected_type of this FieldInfo.


        :param reflected_type: The reflected_type of this FieldInfo.  # noqa: E501
        :type: Type
        """

        self._reflected_type = reflected_type

    @property
    def module(self):
        """Gets the module of this FieldInfo.  # noqa: E501


        :return: The module of this FieldInfo.  # noqa: E501
        :rtype: Module
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this FieldInfo.


        :param module: The module of this FieldInfo.  # noqa: E501
        :type: Module
        """

        self._module = module

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this FieldInfo.  # noqa: E501


        :return: The custom_attributes of this FieldInfo.  # noqa: E501
        :rtype: list[CustomAttributeData]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this FieldInfo.


        :param custom_attributes: The custom_attributes of this FieldInfo.  # noqa: E501
        :type: list[CustomAttributeData]
        """

        self._custom_attributes = custom_attributes

    @property
    def is_collectible(self):
        """Gets the is_collectible of this FieldInfo.  # noqa: E501


        :return: The is_collectible of this FieldInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_collectible

    @is_collectible.setter
    def is_collectible(self, is_collectible):
        """Sets the is_collectible of this FieldInfo.


        :param is_collectible: The is_collectible of this FieldInfo.  # noqa: E501
        :type: bool
        """

        self._is_collectible = is_collectible

    @property
    def metadata_token(self):
        """Gets the metadata_token of this FieldInfo.  # noqa: E501


        :return: The metadata_token of this FieldInfo.  # noqa: E501
        :rtype: int
        """
        return self._metadata_token

    @metadata_token.setter
    def metadata_token(self, metadata_token):
        """Sets the metadata_token of this FieldInfo.


        :param metadata_token: The metadata_token of this FieldInfo.  # noqa: E501
        :type: int
        """

        self._metadata_token = metadata_token

    @property
    def member_type(self):
        """Gets the member_type of this FieldInfo.  # noqa: E501


        :return: The member_type of this FieldInfo.  # noqa: E501
        :rtype: str
        """
        return self._member_type

    @member_type.setter
    def member_type(self, member_type):
        """Sets the member_type of this FieldInfo.


        :param member_type: The member_type of this FieldInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["Constructor", "Event", "Field", "Method", "Property", "TypeInfo", "Custom", "NestedType", "All"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and member_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `member_type` ({0}), must be one of {1}"  # noqa: E501
                .format(member_type, allowed_values)
            )

        self._member_type = member_type

    @property
    def attributes(self):
        """Gets the attributes of this FieldInfo.  # noqa: E501


        :return: The attributes of this FieldInfo.  # noqa: E501
        :rtype: str
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this FieldInfo.


        :param attributes: The attributes of this FieldInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["PrivateScope", "Private", "FamANDAssem", "Assembly", "Family", "FamORAssem", "Public", "FieldAccessMask", "Static", "InitOnly", "Literal", "NotSerialized", "HasFieldRVA", "SpecialName", "RTSpecialName", "HasFieldMarshal", "PinvokeImpl", "HasDefault", "ReservedMask"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and attributes not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `attributes` ({0}), must be one of {1}"  # noqa: E501
                .format(attributes, allowed_values)
            )

        self._attributes = attributes

    @property
    def field_type(self):
        """Gets the field_type of this FieldInfo.  # noqa: E501


        :return: The field_type of this FieldInfo.  # noqa: E501
        :rtype: Type
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this FieldInfo.


        :param field_type: The field_type of this FieldInfo.  # noqa: E501
        :type: Type
        """

        self._field_type = field_type

    @property
    def is_init_only(self):
        """Gets the is_init_only of this FieldInfo.  # noqa: E501


        :return: The is_init_only of this FieldInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_init_only

    @is_init_only.setter
    def is_init_only(self, is_init_only):
        """Sets the is_init_only of this FieldInfo.


        :param is_init_only: The is_init_only of this FieldInfo.  # noqa: E501
        :type: bool
        """

        self._is_init_only = is_init_only

    @property
    def is_literal(self):
        """Gets the is_literal of this FieldInfo.  # noqa: E501


        :return: The is_literal of this FieldInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_literal

    @is_literal.setter
    def is_literal(self, is_literal):
        """Sets the is_literal of this FieldInfo.


        :param is_literal: The is_literal of this FieldInfo.  # noqa: E501
        :type: bool
        """

        self._is_literal = is_literal

    @property
    def is_not_serialized(self):
        """Gets the is_not_serialized of this FieldInfo.  # noqa: E501


        :return: The is_not_serialized of this FieldInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_not_serialized

    @is_not_serialized.setter
    def is_not_serialized(self, is_not_serialized):
        """Sets the is_not_serialized of this FieldInfo.


        :param is_not_serialized: The is_not_serialized of this FieldInfo.  # noqa: E501
        :type: bool
        """

        self._is_not_serialized = is_not_serialized

    @property
    def is_pinvoke_impl(self):
        """Gets the is_pinvoke_impl of this FieldInfo.  # noqa: E501


        :return: The is_pinvoke_impl of this FieldInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_pinvoke_impl

    @is_pinvoke_impl.setter
    def is_pinvoke_impl(self, is_pinvoke_impl):
        """Sets the is_pinvoke_impl of this FieldInfo.


        :param is_pinvoke_impl: The is_pinvoke_impl of this FieldInfo.  # noqa: E501
        :type: bool
        """

        self._is_pinvoke_impl = is_pinvoke_impl

    @property
    def is_special_name(self):
        """Gets the is_special_name of this FieldInfo.  # noqa: E501


        :return: The is_special_name of this FieldInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_special_name

    @is_special_name.setter
    def is_special_name(self, is_special_name):
        """Sets the is_special_name of this FieldInfo.


        :param is_special_name: The is_special_name of this FieldInfo.  # noqa: E501
        :type: bool
        """

        self._is_special_name = is_special_name

    @property
    def is_static(self):
        """Gets the is_static of this FieldInfo.  # noqa: E501


        :return: The is_static of this FieldInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_static

    @is_static.setter
    def is_static(self, is_static):
        """Sets the is_static of this FieldInfo.


        :param is_static: The is_static of this FieldInfo.  # noqa: E501
        :type: bool
        """

        self._is_static = is_static

    @property
    def is_assembly(self):
        """Gets the is_assembly of this FieldInfo.  # noqa: E501


        :return: The is_assembly of this FieldInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_assembly

    @is_assembly.setter
    def is_assembly(self, is_assembly):
        """Sets the is_assembly of this FieldInfo.


        :param is_assembly: The is_assembly of this FieldInfo.  # noqa: E501
        :type: bool
        """

        self._is_assembly = is_assembly

    @property
    def is_family(self):
        """Gets the is_family of this FieldInfo.  # noqa: E501


        :return: The is_family of this FieldInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_family

    @is_family.setter
    def is_family(self, is_family):
        """Sets the is_family of this FieldInfo.


        :param is_family: The is_family of this FieldInfo.  # noqa: E501
        :type: bool
        """

        self._is_family = is_family

    @property
    def is_family_and_assembly(self):
        """Gets the is_family_and_assembly of this FieldInfo.  # noqa: E501


        :return: The is_family_and_assembly of this FieldInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_family_and_assembly

    @is_family_and_assembly.setter
    def is_family_and_assembly(self, is_family_and_assembly):
        """Sets the is_family_and_assembly of this FieldInfo.


        :param is_family_and_assembly: The is_family_and_assembly of this FieldInfo.  # noqa: E501
        :type: bool
        """

        self._is_family_and_assembly = is_family_and_assembly

    @property
    def is_family_or_assembly(self):
        """Gets the is_family_or_assembly of this FieldInfo.  # noqa: E501


        :return: The is_family_or_assembly of this FieldInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_family_or_assembly

    @is_family_or_assembly.setter
    def is_family_or_assembly(self, is_family_or_assembly):
        """Sets the is_family_or_assembly of this FieldInfo.


        :param is_family_or_assembly: The is_family_or_assembly of this FieldInfo.  # noqa: E501
        :type: bool
        """

        self._is_family_or_assembly = is_family_or_assembly

    @property
    def is_private(self):
        """Gets the is_private of this FieldInfo.  # noqa: E501


        :return: The is_private of this FieldInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this FieldInfo.


        :param is_private: The is_private of this FieldInfo.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    @property
    def is_public(self):
        """Gets the is_public of this FieldInfo.  # noqa: E501


        :return: The is_public of this FieldInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this FieldInfo.


        :param is_public: The is_public of this FieldInfo.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def is_security_critical(self):
        """Gets the is_security_critical of this FieldInfo.  # noqa: E501


        :return: The is_security_critical of this FieldInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_security_critical

    @is_security_critical.setter
    def is_security_critical(self, is_security_critical):
        """Sets the is_security_critical of this FieldInfo.


        :param is_security_critical: The is_security_critical of this FieldInfo.  # noqa: E501
        :type: bool
        """

        self._is_security_critical = is_security_critical

    @property
    def is_security_safe_critical(self):
        """Gets the is_security_safe_critical of this FieldInfo.  # noqa: E501


        :return: The is_security_safe_critical of this FieldInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_security_safe_critical

    @is_security_safe_critical.setter
    def is_security_safe_critical(self, is_security_safe_critical):
        """Sets the is_security_safe_critical of this FieldInfo.


        :param is_security_safe_critical: The is_security_safe_critical of this FieldInfo.  # noqa: E501
        :type: bool
        """

        self._is_security_safe_critical = is_security_safe_critical

    @property
    def is_security_transparent(self):
        """Gets the is_security_transparent of this FieldInfo.  # noqa: E501


        :return: The is_security_transparent of this FieldInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_security_transparent

    @is_security_transparent.setter
    def is_security_transparent(self, is_security_transparent):
        """Sets the is_security_transparent of this FieldInfo.


        :param is_security_transparent: The is_security_transparent of this FieldInfo.  # noqa: E501
        :type: bool
        """

        self._is_security_transparent = is_security_transparent

    @property
    def field_handle(self):
        """Gets the field_handle of this FieldInfo.  # noqa: E501


        :return: The field_handle of this FieldInfo.  # noqa: E501
        :rtype: RuntimeFieldHandle
        """
        return self._field_handle

    @field_handle.setter
    def field_handle(self, field_handle):
        """Sets the field_handle of this FieldInfo.


        :param field_handle: The field_handle of this FieldInfo.  # noqa: E501
        :type: RuntimeFieldHandle
        """

        self._field_handle = field_handle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FieldInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FieldInfo):
            return True

        return self.to_dict() != other.to_dict()
