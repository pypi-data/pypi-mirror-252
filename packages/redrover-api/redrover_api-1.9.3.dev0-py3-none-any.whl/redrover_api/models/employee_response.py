# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class EmployeeResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'positions': 'list[PositionResponse]',
        'id': 'int',
        'org_id': 'int',
        'created_utc': 'datetime',
        'changed_utc': 'datetime',
        'external_id': 'str',
        'first_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'notification_email': 'str',
        'login_email': 'str',
        'date_of_birth': 'datetime',
        'address1': 'str',
        'address2': 'str',
        'city': 'str',
        'state': 'StateEnum',
        'postal_code': 'str',
        'country': 'CountryEnum',
        'phone_number': 'str',
        'active': 'bool',
        'permission_set_id': 'int',
        'is_deleted': 'bool'
    }

    attribute_map = {
        'positions': 'positions',
        'id': 'id',
        'org_id': 'orgId',
        'created_utc': 'createdUtc',
        'changed_utc': 'changedUtc',
        'external_id': 'externalId',
        'first_name': 'firstName',
        'middle_name': 'middleName',
        'last_name': 'lastName',
        'email': 'email',
        'notification_email': 'notificationEmail',
        'login_email': 'loginEmail',
        'date_of_birth': 'dateOfBirth',
        'address1': 'address1',
        'address2': 'address2',
        'city': 'city',
        'state': 'state',
        'postal_code': 'postalCode',
        'country': 'country',
        'phone_number': 'phoneNumber',
        'active': 'active',
        'permission_set_id': 'permissionSetId',
        'is_deleted': 'isDeleted'
    }

    def __init__(self, positions=None, id=None, org_id=None, created_utc=None, changed_utc=None, external_id=None, first_name=None, middle_name=None, last_name=None, email=None, notification_email=None, login_email=None, date_of_birth=None, address1=None, address2=None, city=None, state=None, postal_code=None, country=None, phone_number=None, active=None, permission_set_id=None, is_deleted=None, local_vars_configuration=None):  # noqa: E501
        """EmployeeResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._positions = None
        self._id = None
        self._org_id = None
        self._created_utc = None
        self._changed_utc = None
        self._external_id = None
        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._email = None
        self._notification_email = None
        self._login_email = None
        self._date_of_birth = None
        self._address1 = None
        self._address2 = None
        self._city = None
        self._state = None
        self._postal_code = None
        self._country = None
        self._phone_number = None
        self._active = None
        self._permission_set_id = None
        self._is_deleted = None
        self.discriminator = None

        self.positions = positions
        if id is not None:
            self.id = id
        if org_id is not None:
            self.org_id = org_id
        if created_utc is not None:
            self.created_utc = created_utc
        if changed_utc is not None:
            self.changed_utc = changed_utc
        self.external_id = external_id
        self.first_name = first_name
        self.middle_name = middle_name
        self.last_name = last_name
        self.email = email
        self.notification_email = notification_email
        self.login_email = login_email
        self.date_of_birth = date_of_birth
        self.address1 = address1
        self.address2 = address2
        self.city = city
        if state is not None:
            self.state = state
        self.postal_code = postal_code
        if country is not None:
            self.country = country
        self.phone_number = phone_number
        if active is not None:
            self.active = active
        self.permission_set_id = permission_set_id
        if is_deleted is not None:
            self.is_deleted = is_deleted

    @property
    def positions(self):
        """Gets the positions of this EmployeeResponse.  # noqa: E501

        The Positions that belong to the employee  # noqa: E501

        :return: The positions of this EmployeeResponse.  # noqa: E501
        :rtype: list[PositionResponse]
        """
        return self._positions

    @positions.setter
    def positions(self, positions):
        """Sets the positions of this EmployeeResponse.

        The Positions that belong to the employee  # noqa: E501

        :param positions: The positions of this EmployeeResponse.  # noqa: E501
        :type: list[PositionResponse]
        """

        self._positions = positions

    @property
    def id(self):
        """Gets the id of this EmployeeResponse.  # noqa: E501

        The Red Rover internal Id of OrgUser (numeric)  # noqa: E501

        :return: The id of this EmployeeResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmployeeResponse.

        The Red Rover internal Id of OrgUser (numeric)  # noqa: E501

        :param id: The id of this EmployeeResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def org_id(self):
        """Gets the org_id of this EmployeeResponse.  # noqa: E501

        The Red Rover internal Id of Organization (numeric)  # noqa: E501

        :return: The org_id of this EmployeeResponse.  # noqa: E501
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this EmployeeResponse.

        The Red Rover internal Id of Organization (numeric)  # noqa: E501

        :param org_id: The org_id of this EmployeeResponse.  # noqa: E501
        :type: int
        """

        self._org_id = org_id

    @property
    def created_utc(self):
        """Gets the created_utc of this EmployeeResponse.  # noqa: E501

        When the User was created  # noqa: E501

        :return: The created_utc of this EmployeeResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_utc

    @created_utc.setter
    def created_utc(self, created_utc):
        """Sets the created_utc of this EmployeeResponse.

        When the User was created  # noqa: E501

        :param created_utc: The created_utc of this EmployeeResponse.  # noqa: E501
        :type: datetime
        """

        self._created_utc = created_utc

    @property
    def changed_utc(self):
        """Gets the changed_utc of this EmployeeResponse.  # noqa: E501

        When the User's record was last changed  # noqa: E501

        :return: The changed_utc of this EmployeeResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._changed_utc

    @changed_utc.setter
    def changed_utc(self, changed_utc):
        """Sets the changed_utc of this EmployeeResponse.

        When the User's record was last changed  # noqa: E501

        :param changed_utc: The changed_utc of this EmployeeResponse.  # noqa: E501
        :type: datetime
        """

        self._changed_utc = changed_utc

    @property
    def external_id(self):
        """Gets the external_id of this EmployeeResponse.  # noqa: E501

        The external Id of OrgUser (alpha-numeric)  # noqa: E501

        :return: The external_id of this EmployeeResponse.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this EmployeeResponse.

        The external Id of OrgUser (alpha-numeric)  # noqa: E501

        :param external_id: The external_id of this EmployeeResponse.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def first_name(self):
        """Gets the first_name of this EmployeeResponse.  # noqa: E501

        The User's first name  # noqa: E501

        :return: The first_name of this EmployeeResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this EmployeeResponse.

        The User's first name  # noqa: E501

        :param first_name: The first_name of this EmployeeResponse.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this EmployeeResponse.  # noqa: E501

        The User's middle name  # noqa: E501

        :return: The middle_name of this EmployeeResponse.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this EmployeeResponse.

        The User's middle name  # noqa: E501

        :param middle_name: The middle_name of this EmployeeResponse.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this EmployeeResponse.  # noqa: E501

        The User's last name  # noqa: E501

        :return: The last_name of this EmployeeResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this EmployeeResponse.

        The User's last name  # noqa: E501

        :param last_name: The last_name of this EmployeeResponse.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this EmployeeResponse.  # noqa: E501

        The User's email  # noqa: E501

        :return: The email of this EmployeeResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this EmployeeResponse.

        The User's email  # noqa: E501

        :param email: The email of this EmployeeResponse.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def notification_email(self):
        """Gets the notification_email of this EmployeeResponse.  # noqa: E501

        The User's notification email (for SSO organizations only)  # noqa: E501

        :return: The notification_email of this EmployeeResponse.  # noqa: E501
        :rtype: str
        """
        return self._notification_email

    @notification_email.setter
    def notification_email(self, notification_email):
        """Sets the notification_email of this EmployeeResponse.

        The User's notification email (for SSO organizations only)  # noqa: E501

        :param notification_email: The notification_email of this EmployeeResponse.  # noqa: E501
        :type: str
        """

        self._notification_email = notification_email

    @property
    def login_email(self):
        """Gets the login_email of this EmployeeResponse.  # noqa: E501

        The User's Login email (for SSO organizations only)  # noqa: E501

        :return: The login_email of this EmployeeResponse.  # noqa: E501
        :rtype: str
        """
        return self._login_email

    @login_email.setter
    def login_email(self, login_email):
        """Sets the login_email of this EmployeeResponse.

        The User's Login email (for SSO organizations only)  # noqa: E501

        :param login_email: The login_email of this EmployeeResponse.  # noqa: E501
        :type: str
        """

        self._login_email = login_email

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this EmployeeResponse.  # noqa: E501

        The User's date of birth  # noqa: E501

        :return: The date_of_birth of this EmployeeResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this EmployeeResponse.

        The User's date of birth  # noqa: E501

        :param date_of_birth: The date_of_birth of this EmployeeResponse.  # noqa: E501
        :type: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def address1(self):
        """Gets the address1 of this EmployeeResponse.  # noqa: E501

        The User's address  # noqa: E501

        :return: The address1 of this EmployeeResponse.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this EmployeeResponse.

        The User's address  # noqa: E501

        :param address1: The address1 of this EmployeeResponse.  # noqa: E501
        :type: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this EmployeeResponse.  # noqa: E501

        The User's address (continued)  # noqa: E501

        :return: The address2 of this EmployeeResponse.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this EmployeeResponse.

        The User's address (continued)  # noqa: E501

        :param address2: The address2 of this EmployeeResponse.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this EmployeeResponse.  # noqa: E501

        The User's city  # noqa: E501

        :return: The city of this EmployeeResponse.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this EmployeeResponse.

        The User's city  # noqa: E501

        :param city: The city of this EmployeeResponse.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this EmployeeResponse.  # noqa: E501


        :return: The state of this EmployeeResponse.  # noqa: E501
        :rtype: StateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this EmployeeResponse.


        :param state: The state of this EmployeeResponse.  # noqa: E501
        :type: StateEnum
        """

        self._state = state

    @property
    def postal_code(self):
        """Gets the postal_code of this EmployeeResponse.  # noqa: E501

        The User's postal code  # noqa: E501

        :return: The postal_code of this EmployeeResponse.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this EmployeeResponse.

        The User's postal code  # noqa: E501

        :param postal_code: The postal_code of this EmployeeResponse.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def country(self):
        """Gets the country of this EmployeeResponse.  # noqa: E501


        :return: The country of this EmployeeResponse.  # noqa: E501
        :rtype: CountryEnum
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this EmployeeResponse.


        :param country: The country of this EmployeeResponse.  # noqa: E501
        :type: CountryEnum
        """

        self._country = country

    @property
    def phone_number(self):
        """Gets the phone_number of this EmployeeResponse.  # noqa: E501

        The User's phone number  # noqa: E501

        :return: The phone_number of this EmployeeResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this EmployeeResponse.

        The User's phone number  # noqa: E501

        :param phone_number: The phone_number of this EmployeeResponse.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def active(self):
        """Gets the active of this EmployeeResponse.  # noqa: E501

        If the user is active  # noqa: E501

        :return: The active of this EmployeeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this EmployeeResponse.

        If the user is active  # noqa: E501

        :param active: The active of this EmployeeResponse.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def permission_set_id(self):
        """Gets the permission_set_id of this EmployeeResponse.  # noqa: E501

        The Red Rover internal Id of PermissionSet (numeric)  # noqa: E501

        :return: The permission_set_id of this EmployeeResponse.  # noqa: E501
        :rtype: int
        """
        return self._permission_set_id

    @permission_set_id.setter
    def permission_set_id(self, permission_set_id):
        """Sets the permission_set_id of this EmployeeResponse.

        The Red Rover internal Id of PermissionSet (numeric)  # noqa: E501

        :param permission_set_id: The permission_set_id of this EmployeeResponse.  # noqa: E501
        :type: int
        """

        self._permission_set_id = permission_set_id

    @property
    def is_deleted(self):
        """Gets the is_deleted of this EmployeeResponse.  # noqa: E501

        Is the User Deleted  # noqa: E501

        :return: The is_deleted of this EmployeeResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this EmployeeResponse.

        Is the User Deleted  # noqa: E501

        :param is_deleted: The is_deleted of this EmployeeResponse.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmployeeResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmployeeResponse):
            return True

        return self.to_dict() != other.to_dict()
