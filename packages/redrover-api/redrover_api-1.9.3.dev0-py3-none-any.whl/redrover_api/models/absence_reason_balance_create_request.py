# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class AbsenceReasonBalanceCreateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'school_year': 'Int32LocatorRequest',
        'absence_reason': 'Int32LocatorRequest',
        'absence_reason_category': 'Int32LocatorRequest',
        'initial_balance': 'float',
        'balance_as_of': 'datetime',
        'absence_reason_tracking_type': 'AbsenceReasonTrackingTypeEnum'
    }

    attribute_map = {
        'school_year': 'schoolYear',
        'absence_reason': 'absenceReason',
        'absence_reason_category': 'absenceReasonCategory',
        'initial_balance': 'initialBalance',
        'balance_as_of': 'balanceAsOf',
        'absence_reason_tracking_type': 'absenceReasonTrackingType'
    }

    def __init__(self, school_year=None, absence_reason=None, absence_reason_category=None, initial_balance=None, balance_as_of=None, absence_reason_tracking_type=None, local_vars_configuration=None):  # noqa: E501
        """AbsenceReasonBalanceCreateRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._school_year = None
        self._absence_reason = None
        self._absence_reason_category = None
        self._initial_balance = None
        self._balance_as_of = None
        self._absence_reason_tracking_type = None
        self.discriminator = None

        self.school_year = school_year
        self.absence_reason = absence_reason
        if absence_reason_category is not None:
            self.absence_reason_category = absence_reason_category
        self.initial_balance = initial_balance
        self.balance_as_of = balance_as_of
        if absence_reason_tracking_type is not None:
            self.absence_reason_tracking_type = absence_reason_tracking_type

    @property
    def school_year(self):
        """Gets the school_year of this AbsenceReasonBalanceCreateRequest.  # noqa: E501


        :return: The school_year of this AbsenceReasonBalanceCreateRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._school_year

    @school_year.setter
    def school_year(self, school_year):
        """Sets the school_year of this AbsenceReasonBalanceCreateRequest.


        :param school_year: The school_year of this AbsenceReasonBalanceCreateRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """
        if self.local_vars_configuration.client_side_validation and school_year is None:  # noqa: E501
            raise ValueError("Invalid value for `school_year`, must not be `None`")  # noqa: E501

        self._school_year = school_year

    @property
    def absence_reason(self):
        """Gets the absence_reason of this AbsenceReasonBalanceCreateRequest.  # noqa: E501


        :return: The absence_reason of this AbsenceReasonBalanceCreateRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._absence_reason

    @absence_reason.setter
    def absence_reason(self, absence_reason):
        """Sets the absence_reason of this AbsenceReasonBalanceCreateRequest.


        :param absence_reason: The absence_reason of this AbsenceReasonBalanceCreateRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """
        if self.local_vars_configuration.client_side_validation and absence_reason is None:  # noqa: E501
            raise ValueError("Invalid value for `absence_reason`, must not be `None`")  # noqa: E501

        self._absence_reason = absence_reason

    @property
    def absence_reason_category(self):
        """Gets the absence_reason_category of this AbsenceReasonBalanceCreateRequest.  # noqa: E501


        :return: The absence_reason_category of this AbsenceReasonBalanceCreateRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._absence_reason_category

    @absence_reason_category.setter
    def absence_reason_category(self, absence_reason_category):
        """Sets the absence_reason_category of this AbsenceReasonBalanceCreateRequest.


        :param absence_reason_category: The absence_reason_category of this AbsenceReasonBalanceCreateRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """

        self._absence_reason_category = absence_reason_category

    @property
    def initial_balance(self):
        """Gets the initial_balance of this AbsenceReasonBalanceCreateRequest.  # noqa: E501

        The starting balance for this Absence Reason  # noqa: E501

        :return: The initial_balance of this AbsenceReasonBalanceCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._initial_balance

    @initial_balance.setter
    def initial_balance(self, initial_balance):
        """Sets the initial_balance of this AbsenceReasonBalanceCreateRequest.

        The starting balance for this Absence Reason  # noqa: E501

        :param initial_balance: The initial_balance of this AbsenceReasonBalanceCreateRequest.  # noqa: E501
        :type: float
        """

        self._initial_balance = initial_balance

    @property
    def balance_as_of(self):
        """Gets the balance_as_of of this AbsenceReasonBalanceCreateRequest.  # noqa: E501

        The 'As of' date as to when this balance was last update  # noqa: E501

        :return: The balance_as_of of this AbsenceReasonBalanceCreateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._balance_as_of

    @balance_as_of.setter
    def balance_as_of(self, balance_as_of):
        """Sets the balance_as_of of this AbsenceReasonBalanceCreateRequest.

        The 'As of' date as to when this balance was last update  # noqa: E501

        :param balance_as_of: The balance_as_of of this AbsenceReasonBalanceCreateRequest.  # noqa: E501
        :type: datetime
        """

        self._balance_as_of = balance_as_of

    @property
    def absence_reason_tracking_type(self):
        """Gets the absence_reason_tracking_type of this AbsenceReasonBalanceCreateRequest.  # noqa: E501


        :return: The absence_reason_tracking_type of this AbsenceReasonBalanceCreateRequest.  # noqa: E501
        :rtype: AbsenceReasonTrackingTypeEnum
        """
        return self._absence_reason_tracking_type

    @absence_reason_tracking_type.setter
    def absence_reason_tracking_type(self, absence_reason_tracking_type):
        """Sets the absence_reason_tracking_type of this AbsenceReasonBalanceCreateRequest.


        :param absence_reason_tracking_type: The absence_reason_tracking_type of this AbsenceReasonBalanceCreateRequest.  # noqa: E501
        :type: AbsenceReasonTrackingTypeEnum
        """

        self._absence_reason_tracking_type = absence_reason_tracking_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbsenceReasonBalanceCreateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AbsenceReasonBalanceCreateRequest):
            return True

        return self.to_dict() != other.to_dict()
