# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class AccessControlRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'all_locations': 'bool',
        'all_position_types': 'bool',
        'locations': 'list[Int32LocatorRequest]',
        'location_groups': 'list[Int32LocatorRequest]',
        'position_types': 'list[Int32LocatorRequest]'
    }

    attribute_map = {
        'all_locations': 'allLocations',
        'all_position_types': 'allPositionTypes',
        'locations': 'locations',
        'location_groups': 'locationGroups',
        'position_types': 'positionTypes'
    }

    def __init__(self, all_locations=None, all_position_types=None, locations=None, location_groups=None, position_types=None, local_vars_configuration=None):  # noqa: E501
        """AccessControlRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._all_locations = None
        self._all_position_types = None
        self._locations = None
        self._location_groups = None
        self._position_types = None
        self.discriminator = None

        self.all_locations = all_locations
        self.all_position_types = all_position_types
        self.locations = locations
        self.location_groups = location_groups
        self.position_types = position_types

    @property
    def all_locations(self):
        """Gets the all_locations of this AccessControlRequest.  # noqa: E501

        If the Administrator can be granted access to all Locations  # noqa: E501

        :return: The all_locations of this AccessControlRequest.  # noqa: E501
        :rtype: bool
        """
        return self._all_locations

    @all_locations.setter
    def all_locations(self, all_locations):
        """Sets the all_locations of this AccessControlRequest.

        If the Administrator can be granted access to all Locations  # noqa: E501

        :param all_locations: The all_locations of this AccessControlRequest.  # noqa: E501
        :type: bool
        """

        self._all_locations = all_locations

    @property
    def all_position_types(self):
        """Gets the all_position_types of this AccessControlRequest.  # noqa: E501

        If the Administrator can be granted access to all Position Types  # noqa: E501

        :return: The all_position_types of this AccessControlRequest.  # noqa: E501
        :rtype: bool
        """
        return self._all_position_types

    @all_position_types.setter
    def all_position_types(self, all_position_types):
        """Sets the all_position_types of this AccessControlRequest.

        If the Administrator can be granted access to all Position Types  # noqa: E501

        :param all_position_types: The all_position_types of this AccessControlRequest.  # noqa: E501
        :type: bool
        """

        self._all_position_types = all_position_types

    @property
    def locations(self):
        """Gets the locations of this AccessControlRequest.  # noqa: E501

        The Locations that the Administrator is granted access to  # noqa: E501

        :return: The locations of this AccessControlRequest.  # noqa: E501
        :rtype: list[Int32LocatorRequest]
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this AccessControlRequest.

        The Locations that the Administrator is granted access to  # noqa: E501

        :param locations: The locations of this AccessControlRequest.  # noqa: E501
        :type: list[Int32LocatorRequest]
        """

        self._locations = locations

    @property
    def location_groups(self):
        """Gets the location_groups of this AccessControlRequest.  # noqa: E501

        The Location Groups that the Administrator is granted access to  # noqa: E501

        :return: The location_groups of this AccessControlRequest.  # noqa: E501
        :rtype: list[Int32LocatorRequest]
        """
        return self._location_groups

    @location_groups.setter
    def location_groups(self, location_groups):
        """Sets the location_groups of this AccessControlRequest.

        The Location Groups that the Administrator is granted access to  # noqa: E501

        :param location_groups: The location_groups of this AccessControlRequest.  # noqa: E501
        :type: list[Int32LocatorRequest]
        """

        self._location_groups = location_groups

    @property
    def position_types(self):
        """Gets the position_types of this AccessControlRequest.  # noqa: E501

        The Position Types that the Administrator is granted access to  # noqa: E501

        :return: The position_types of this AccessControlRequest.  # noqa: E501
        :rtype: list[Int32LocatorRequest]
        """
        return self._position_types

    @position_types.setter
    def position_types(self, position_types):
        """Sets the position_types of this AccessControlRequest.

        The Position Types that the Administrator is granted access to  # noqa: E501

        :param position_types: The position_types of this AccessControlRequest.  # noqa: E501
        :type: list[Int32LocatorRequest]
        """

        self._position_types = position_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccessControlRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccessControlRequest):
            return True

        return self.to_dict() != other.to_dict()
