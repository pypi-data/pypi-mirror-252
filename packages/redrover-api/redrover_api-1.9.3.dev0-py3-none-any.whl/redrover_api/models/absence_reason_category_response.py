# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class AbsenceReasonCategoryResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'external_id': 'str',
        'name': 'str',
        'description': 'str',
        'valid_until_utc': 'datetime',
        'allow_negative_balance': 'bool',
        'code': 'str',
        'balances_are_sensitive': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'external_id': 'externalId',
        'name': 'name',
        'description': 'description',
        'valid_until_utc': 'validUntilUtc',
        'allow_negative_balance': 'allowNegativeBalance',
        'code': 'code',
        'balances_are_sensitive': 'balancesAreSensitive'
    }

    def __init__(self, id=None, external_id=None, name=None, description=None, valid_until_utc=None, allow_negative_balance=None, code=None, balances_are_sensitive=None, local_vars_configuration=None):  # noqa: E501
        """AbsenceReasonCategoryResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._external_id = None
        self._name = None
        self._description = None
        self._valid_until_utc = None
        self._allow_negative_balance = None
        self._code = None
        self._balances_are_sensitive = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.external_id = external_id
        self.name = name
        self.description = description
        if valid_until_utc is not None:
            self.valid_until_utc = valid_until_utc
        if allow_negative_balance is not None:
            self.allow_negative_balance = allow_negative_balance
        self.code = code
        if balances_are_sensitive is not None:
            self.balances_are_sensitive = balances_are_sensitive

    @property
    def id(self):
        """Gets the id of this AbsenceReasonCategoryResponse.  # noqa: E501

        The Red Rover internal Id of AbsenceReasonCategory (numeric)  # noqa: E501

        :return: The id of this AbsenceReasonCategoryResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AbsenceReasonCategoryResponse.

        The Red Rover internal Id of AbsenceReasonCategory (numeric)  # noqa: E501

        :param id: The id of this AbsenceReasonCategoryResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def external_id(self):
        """Gets the external_id of this AbsenceReasonCategoryResponse.  # noqa: E501

        The external Id of AbsenceReason (alpha-numeric)  # noqa: E501

        :return: The external_id of this AbsenceReasonCategoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this AbsenceReasonCategoryResponse.

        The external Id of AbsenceReason (alpha-numeric)  # noqa: E501

        :param external_id: The external_id of this AbsenceReasonCategoryResponse.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def name(self):
        """Gets the name of this AbsenceReasonCategoryResponse.  # noqa: E501

        The Absence Reason Category's name  # noqa: E501

        :return: The name of this AbsenceReasonCategoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AbsenceReasonCategoryResponse.

        The Absence Reason Category's name  # noqa: E501

        :param name: The name of this AbsenceReasonCategoryResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AbsenceReasonCategoryResponse.  # noqa: E501

        A detailed description of the Absence Reason Category  # noqa: E501

        :return: The description of this AbsenceReasonCategoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AbsenceReasonCategoryResponse.

        A detailed description of the Absence Reason Category  # noqa: E501

        :param description: The description of this AbsenceReasonCategoryResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def valid_until_utc(self):
        """Gets the valid_until_utc of this AbsenceReasonCategoryResponse.  # noqa: E501

        When the Absence Reason Category expires  # noqa: E501

        :return: The valid_until_utc of this AbsenceReasonCategoryResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_until_utc

    @valid_until_utc.setter
    def valid_until_utc(self, valid_until_utc):
        """Sets the valid_until_utc of this AbsenceReasonCategoryResponse.

        When the Absence Reason Category expires  # noqa: E501

        :param valid_until_utc: The valid_until_utc of this AbsenceReasonCategoryResponse.  # noqa: E501
        :type: datetime
        """

        self._valid_until_utc = valid_until_utc

    @property
    def allow_negative_balance(self):
        """Gets the allow_negative_balance of this AbsenceReasonCategoryResponse.  # noqa: E501

        If negative balances are allowed for this Absence Reason Categroy  # noqa: E501

        :return: The allow_negative_balance of this AbsenceReasonCategoryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._allow_negative_balance

    @allow_negative_balance.setter
    def allow_negative_balance(self, allow_negative_balance):
        """Sets the allow_negative_balance of this AbsenceReasonCategoryResponse.

        If negative balances are allowed for this Absence Reason Categroy  # noqa: E501

        :param allow_negative_balance: The allow_negative_balance of this AbsenceReasonCategoryResponse.  # noqa: E501
        :type: bool
        """

        self._allow_negative_balance = allow_negative_balance

    @property
    def code(self):
        """Gets the code of this AbsenceReasonCategoryResponse.  # noqa: E501

        The 'Code' assigned to this Absence Reason Category. For external purposes  # noqa: E501

        :return: The code of this AbsenceReasonCategoryResponse.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AbsenceReasonCategoryResponse.

        The 'Code' assigned to this Absence Reason Category. For external purposes  # noqa: E501

        :param code: The code of this AbsenceReasonCategoryResponse.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def balances_are_sensitive(self):
        """Gets the balances_are_sensitive of this AbsenceReasonCategoryResponse.  # noqa: E501


        :return: The balances_are_sensitive of this AbsenceReasonCategoryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._balances_are_sensitive

    @balances_are_sensitive.setter
    def balances_are_sensitive(self, balances_are_sensitive):
        """Sets the balances_are_sensitive of this AbsenceReasonCategoryResponse.


        :param balances_are_sensitive: The balances_are_sensitive of this AbsenceReasonCategoryResponse.  # noqa: E501
        :type: bool
        """

        self._balances_are_sensitive = balances_are_sensitive

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbsenceReasonCategoryResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AbsenceReasonCategoryResponse):
            return True

        return self.to_dict() != other.to_dict()
