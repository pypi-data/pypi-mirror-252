# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class AbsenceVacancyRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'position': 'Int32LocatorRequest',
        'details': 'list[AbsenceVacancyDetailRequest]',
        'notes_to_replacement': 'str',
        'allow_sub_to_accept_part': 'bool',
        'external_id': 'str',
        'pay_code': 'Int32LocatorRequest',
        'hold_for_manual_fill': 'bool',
        'administrator_comments': 'str'
    }

    attribute_map = {
        'position': 'position',
        'details': 'details',
        'notes_to_replacement': 'notesToReplacement',
        'allow_sub_to_accept_part': 'allowSubToAcceptPart',
        'external_id': 'externalId',
        'pay_code': 'payCode',
        'hold_for_manual_fill': 'holdForManualFill',
        'administrator_comments': 'administratorComments'
    }

    def __init__(self, position=None, details=None, notes_to_replacement=None, allow_sub_to_accept_part=None, external_id=None, pay_code=None, hold_for_manual_fill=None, administrator_comments=None, local_vars_configuration=None):  # noqa: E501
        """AbsenceVacancyRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._position = None
        self._details = None
        self._notes_to_replacement = None
        self._allow_sub_to_accept_part = None
        self._external_id = None
        self._pay_code = None
        self._hold_for_manual_fill = None
        self._administrator_comments = None
        self.discriminator = None

        if position is not None:
            self.position = position
        if details is not None:
            self.details = details
        self.notes_to_replacement = notes_to_replacement
        self.allow_sub_to_accept_part = allow_sub_to_accept_part
        self.external_id = external_id
        if pay_code is not None:
            self.pay_code = pay_code
        if hold_for_manual_fill is not None:
            self.hold_for_manual_fill = hold_for_manual_fill
        self.administrator_comments = administrator_comments

    @property
    def position(self):
        """Gets the position of this AbsenceVacancyRequest.  # noqa: E501


        :return: The position of this AbsenceVacancyRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this AbsenceVacancyRequest.


        :param position: The position of this AbsenceVacancyRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """

        self._position = position

    @property
    def details(self):
        """Gets the details of this AbsenceVacancyRequest.  # noqa: E501

        The Details of the Vacancy  # noqa: E501

        :return: The details of this AbsenceVacancyRequest.  # noqa: E501
        :rtype: list[AbsenceVacancyDetailRequest]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this AbsenceVacancyRequest.

        The Details of the Vacancy  # noqa: E501

        :param details: The details of this AbsenceVacancyRequest.  # noqa: E501
        :type: list[AbsenceVacancyDetailRequest]
        """

        self._details = details

    @property
    def notes_to_replacement(self):
        """Gets the notes_to_replacement of this AbsenceVacancyRequest.  # noqa: E501

        Notes for the Replacement Substitute  # noqa: E501

        :return: The notes_to_replacement of this AbsenceVacancyRequest.  # noqa: E501
        :rtype: str
        """
        return self._notes_to_replacement

    @notes_to_replacement.setter
    def notes_to_replacement(self, notes_to_replacement):
        """Sets the notes_to_replacement of this AbsenceVacancyRequest.

        Notes for the Replacement Substitute  # noqa: E501

        :param notes_to_replacement: The notes_to_replacement of this AbsenceVacancyRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                notes_to_replacement is not None and len(notes_to_replacement) > 1500):
            raise ValueError("Invalid value for `notes_to_replacement`, length must be less than or equal to `1500`")  # noqa: E501

        self._notes_to_replacement = notes_to_replacement

    @property
    def allow_sub_to_accept_part(self):
        """Gets the allow_sub_to_accept_part of this AbsenceVacancyRequest.  # noqa: E501

        Allows the Sub to accept individual parts of a Vacancy  # noqa: E501

        :return: The allow_sub_to_accept_part of this AbsenceVacancyRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_sub_to_accept_part

    @allow_sub_to_accept_part.setter
    def allow_sub_to_accept_part(self, allow_sub_to_accept_part):
        """Sets the allow_sub_to_accept_part of this AbsenceVacancyRequest.

        Allows the Sub to accept individual parts of a Vacancy  # noqa: E501

        :param allow_sub_to_accept_part: The allow_sub_to_accept_part of this AbsenceVacancyRequest.  # noqa: E501
        :type: bool
        """

        self._allow_sub_to_accept_part = allow_sub_to_accept_part

    @property
    def external_id(self):
        """Gets the external_id of this AbsenceVacancyRequest.  # noqa: E501

        The External Id of the Vacancy  # noqa: E501

        :return: The external_id of this AbsenceVacancyRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this AbsenceVacancyRequest.

        The External Id of the Vacancy  # noqa: E501

        :param external_id: The external_id of this AbsenceVacancyRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                external_id is not None and len(external_id) > 50):
            raise ValueError("Invalid value for `external_id`, length must be less than or equal to `50`")  # noqa: E501

        self._external_id = external_id

    @property
    def pay_code(self):
        """Gets the pay_code of this AbsenceVacancyRequest.  # noqa: E501


        :return: The pay_code of this AbsenceVacancyRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._pay_code

    @pay_code.setter
    def pay_code(self, pay_code):
        """Sets the pay_code of this AbsenceVacancyRequest.


        :param pay_code: The pay_code of this AbsenceVacancyRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """

        self._pay_code = pay_code

    @property
    def hold_for_manual_fill(self):
        """Gets the hold_for_manual_fill of this AbsenceVacancyRequest.  # noqa: E501

        This will hold the Vacancy until it will be manually filled  # noqa: E501

        :return: The hold_for_manual_fill of this AbsenceVacancyRequest.  # noqa: E501
        :rtype: bool
        """
        return self._hold_for_manual_fill

    @hold_for_manual_fill.setter
    def hold_for_manual_fill(self, hold_for_manual_fill):
        """Sets the hold_for_manual_fill of this AbsenceVacancyRequest.

        This will hold the Vacancy until it will be manually filled  # noqa: E501

        :param hold_for_manual_fill: The hold_for_manual_fill of this AbsenceVacancyRequest.  # noqa: E501
        :type: bool
        """

        self._hold_for_manual_fill = hold_for_manual_fill

    @property
    def administrator_comments(self):
        """Gets the administrator_comments of this AbsenceVacancyRequest.  # noqa: E501

        Administrator comments  # noqa: E501

        :return: The administrator_comments of this AbsenceVacancyRequest.  # noqa: E501
        :rtype: str
        """
        return self._administrator_comments

    @administrator_comments.setter
    def administrator_comments(self, administrator_comments):
        """Sets the administrator_comments of this AbsenceVacancyRequest.

        Administrator comments  # noqa: E501

        :param administrator_comments: The administrator_comments of this AbsenceVacancyRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                administrator_comments is not None and len(administrator_comments) > 1500):
            raise ValueError("Invalid value for `administrator_comments`, length must be less than or equal to `1500`")  # noqa: E501

        self._administrator_comments = administrator_comments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbsenceVacancyRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AbsenceVacancyRequest):
            return True

        return self.to_dict() != other.to_dict()
