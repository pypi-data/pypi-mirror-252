# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class AbsenceReasonUsageCreateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'usage': 'str',
        'daily_amount': 'float',
        'hourly_amount': 'float',
        'id': 'int',
        'external_id': 'str'
    }

    attribute_map = {
        'usage': 'usage',
        'daily_amount': 'dailyAmount',
        'hourly_amount': 'hourlyAmount',
        'id': 'id',
        'external_id': 'externalId'
    }

    def __init__(self, usage=None, daily_amount=None, hourly_amount=None, id=None, external_id=None, local_vars_configuration=None):  # noqa: E501
        """AbsenceReasonUsageCreateRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._usage = None
        self._daily_amount = None
        self._hourly_amount = None
        self._id = None
        self._external_id = None
        self.discriminator = None

        self.usage = usage
        if daily_amount is not None:
            self.daily_amount = daily_amount
        if hourly_amount is not None:
            self.hourly_amount = hourly_amount
        if id is not None:
            self.id = id
        self.external_id = external_id

    @property
    def usage(self):
        """Gets the usage of this AbsenceReasonUsageCreateRequest.  # noqa: E501


        :return: The usage of this AbsenceReasonUsageCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this AbsenceReasonUsageCreateRequest.


        :param usage: The usage of this AbsenceReasonUsageCreateRequest.  # noqa: E501
        :type: str
        """

        self._usage = usage

    @property
    def daily_amount(self):
        """Gets the daily_amount of this AbsenceReasonUsageCreateRequest.  # noqa: E501

        What percentage (decimal value) of the Absence is used by this AbsenceReason. E.g. 0.5  # noqa: E501

        :return: The daily_amount of this AbsenceReasonUsageCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._daily_amount

    @daily_amount.setter
    def daily_amount(self, daily_amount):
        """Sets the daily_amount of this AbsenceReasonUsageCreateRequest.

        What percentage (decimal value) of the Absence is used by this AbsenceReason. E.g. 0.5  # noqa: E501

        :param daily_amount: The daily_amount of this AbsenceReasonUsageCreateRequest.  # noqa: E501
        :type: float
        """

        self._daily_amount = daily_amount

    @property
    def hourly_amount(self):
        """Gets the hourly_amount of this AbsenceReasonUsageCreateRequest.  # noqa: E501

        How many hours (decimal value) of the Absence is used by this AbsenceReason. E.g. 3.5  # noqa: E501

        :return: The hourly_amount of this AbsenceReasonUsageCreateRequest.  # noqa: E501
        :rtype: float
        """
        return self._hourly_amount

    @hourly_amount.setter
    def hourly_amount(self, hourly_amount):
        """Sets the hourly_amount of this AbsenceReasonUsageCreateRequest.

        How many hours (decimal value) of the Absence is used by this AbsenceReason. E.g. 3.5  # noqa: E501

        :param hourly_amount: The hourly_amount of this AbsenceReasonUsageCreateRequest.  # noqa: E501
        :type: float
        """

        self._hourly_amount = hourly_amount

    @property
    def id(self):
        """Gets the id of this AbsenceReasonUsageCreateRequest.  # noqa: E501

        The Red Rover Id (numeric)  # noqa: E501

        :return: The id of this AbsenceReasonUsageCreateRequest.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AbsenceReasonUsageCreateRequest.

        The Red Rover Id (numeric)  # noqa: E501

        :param id: The id of this AbsenceReasonUsageCreateRequest.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def external_id(self):
        """Gets the external_id of this AbsenceReasonUsageCreateRequest.  # noqa: E501

        The External Id (alpha-numeric)  # noqa: E501

        :return: The external_id of this AbsenceReasonUsageCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this AbsenceReasonUsageCreateRequest.

        The External Id (alpha-numeric)  # noqa: E501

        :param external_id: The external_id of this AbsenceReasonUsageCreateRequest.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbsenceReasonUsageCreateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AbsenceReasonUsageCreateRequest):
            return True

        return self.to_dict() != other.to_dict()
