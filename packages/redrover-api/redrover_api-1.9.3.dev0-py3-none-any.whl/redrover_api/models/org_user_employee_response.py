# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class OrgUserEmployeeResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'external_id': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'secondary_identifier': 'str'
    }

    attribute_map = {
        'id': 'id',
        'external_id': 'externalId',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'secondary_identifier': 'secondaryIdentifier'
    }

    def __init__(self, id=None, external_id=None, first_name=None, last_name=None, secondary_identifier=None, local_vars_configuration=None):  # noqa: E501
        """OrgUserEmployeeResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._external_id = None
        self._first_name = None
        self._last_name = None
        self._secondary_identifier = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.external_id = external_id
        self.first_name = first_name
        self.last_name = last_name
        self.secondary_identifier = secondary_identifier

    @property
    def id(self):
        """Gets the id of this OrgUserEmployeeResponse.  # noqa: E501

        The Red Rover internal Id of OrgUser (numeric)  # noqa: E501

        :return: The id of this OrgUserEmployeeResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrgUserEmployeeResponse.

        The Red Rover internal Id of OrgUser (numeric)  # noqa: E501

        :param id: The id of this OrgUserEmployeeResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def external_id(self):
        """Gets the external_id of this OrgUserEmployeeResponse.  # noqa: E501

        The external Id of OrgUser (alpha-numeric)  # noqa: E501

        :return: The external_id of this OrgUserEmployeeResponse.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this OrgUserEmployeeResponse.

        The external Id of OrgUser (alpha-numeric)  # noqa: E501

        :param external_id: The external_id of this OrgUserEmployeeResponse.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def first_name(self):
        """Gets the first_name of this OrgUserEmployeeResponse.  # noqa: E501

        User's first name  # noqa: E501

        :return: The first_name of this OrgUserEmployeeResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this OrgUserEmployeeResponse.

        User's first name  # noqa: E501

        :param first_name: The first_name of this OrgUserEmployeeResponse.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this OrgUserEmployeeResponse.  # noqa: E501

        User's last name  # noqa: E501

        :return: The last_name of this OrgUserEmployeeResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this OrgUserEmployeeResponse.

        User's last name  # noqa: E501

        :param last_name: The last_name of this OrgUserEmployeeResponse.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def secondary_identifier(self):
        """Gets the secondary_identifier of this OrgUserEmployeeResponse.  # noqa: E501

        Secondary Identifier of the user  # noqa: E501

        :return: The secondary_identifier of this OrgUserEmployeeResponse.  # noqa: E501
        :rtype: str
        """
        return self._secondary_identifier

    @secondary_identifier.setter
    def secondary_identifier(self, secondary_identifier):
        """Sets the secondary_identifier of this OrgUserEmployeeResponse.

        Secondary Identifier of the user  # noqa: E501

        :param secondary_identifier: The secondary_identifier of this OrgUserEmployeeResponse.  # noqa: E501
        :type: str
        """

        self._secondary_identifier = secondary_identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgUserEmployeeResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrgUserEmployeeResponse):
            return True

        return self.to_dict() != other.to_dict()
