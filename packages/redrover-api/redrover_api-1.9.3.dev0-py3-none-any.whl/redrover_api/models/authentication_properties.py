# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class AuthenticationProperties(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'items': 'dict(str, str)',
        'parameters': 'dict(str, object)',
        'is_persistent': 'bool',
        'redirect_uri': 'str',
        'issued_utc': 'datetime',
        'expires_utc': 'datetime',
        'allow_refresh': 'bool'
    }

    attribute_map = {
        'items': 'items',
        'parameters': 'parameters',
        'is_persistent': 'isPersistent',
        'redirect_uri': 'redirectUri',
        'issued_utc': 'issuedUtc',
        'expires_utc': 'expiresUtc',
        'allow_refresh': 'allowRefresh'
    }

    def __init__(self, items=None, parameters=None, is_persistent=None, redirect_uri=None, issued_utc=None, expires_utc=None, allow_refresh=None, local_vars_configuration=None):  # noqa: E501
        """AuthenticationProperties - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._items = None
        self._parameters = None
        self._is_persistent = None
        self._redirect_uri = None
        self._issued_utc = None
        self._expires_utc = None
        self._allow_refresh = None
        self.discriminator = None

        self.items = items
        self.parameters = parameters
        if is_persistent is not None:
            self.is_persistent = is_persistent
        self.redirect_uri = redirect_uri
        self.issued_utc = issued_utc
        self.expires_utc = expires_utc
        self.allow_refresh = allow_refresh

    @property
    def items(self):
        """Gets the items of this AuthenticationProperties.  # noqa: E501


        :return: The items of this AuthenticationProperties.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this AuthenticationProperties.


        :param items: The items of this AuthenticationProperties.  # noqa: E501
        :type: dict(str, str)
        """

        self._items = items

    @property
    def parameters(self):
        """Gets the parameters of this AuthenticationProperties.  # noqa: E501


        :return: The parameters of this AuthenticationProperties.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this AuthenticationProperties.


        :param parameters: The parameters of this AuthenticationProperties.  # noqa: E501
        :type: dict(str, object)
        """

        self._parameters = parameters

    @property
    def is_persistent(self):
        """Gets the is_persistent of this AuthenticationProperties.  # noqa: E501


        :return: The is_persistent of this AuthenticationProperties.  # noqa: E501
        :rtype: bool
        """
        return self._is_persistent

    @is_persistent.setter
    def is_persistent(self, is_persistent):
        """Sets the is_persistent of this AuthenticationProperties.


        :param is_persistent: The is_persistent of this AuthenticationProperties.  # noqa: E501
        :type: bool
        """

        self._is_persistent = is_persistent

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this AuthenticationProperties.  # noqa: E501


        :return: The redirect_uri of this AuthenticationProperties.  # noqa: E501
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this AuthenticationProperties.


        :param redirect_uri: The redirect_uri of this AuthenticationProperties.  # noqa: E501
        :type: str
        """

        self._redirect_uri = redirect_uri

    @property
    def issued_utc(self):
        """Gets the issued_utc of this AuthenticationProperties.  # noqa: E501


        :return: The issued_utc of this AuthenticationProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._issued_utc

    @issued_utc.setter
    def issued_utc(self, issued_utc):
        """Sets the issued_utc of this AuthenticationProperties.


        :param issued_utc: The issued_utc of this AuthenticationProperties.  # noqa: E501
        :type: datetime
        """

        self._issued_utc = issued_utc

    @property
    def expires_utc(self):
        """Gets the expires_utc of this AuthenticationProperties.  # noqa: E501


        :return: The expires_utc of this AuthenticationProperties.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_utc

    @expires_utc.setter
    def expires_utc(self, expires_utc):
        """Sets the expires_utc of this AuthenticationProperties.


        :param expires_utc: The expires_utc of this AuthenticationProperties.  # noqa: E501
        :type: datetime
        """

        self._expires_utc = expires_utc

    @property
    def allow_refresh(self):
        """Gets the allow_refresh of this AuthenticationProperties.  # noqa: E501


        :return: The allow_refresh of this AuthenticationProperties.  # noqa: E501
        :rtype: bool
        """
        return self._allow_refresh

    @allow_refresh.setter
    def allow_refresh(self, allow_refresh):
        """Sets the allow_refresh of this AuthenticationProperties.


        :param allow_refresh: The allow_refresh of this AuthenticationProperties.  # noqa: E501
        :type: bool
        """

        self._allow_refresh = allow_refresh

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthenticationProperties):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuthenticationProperties):
            return True

        return self.to_dict() != other.to_dict()
