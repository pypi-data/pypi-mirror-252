# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class AssignmentResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'employee': 'Int32IdNameClass',
        'position': 'Int32IdNameClass',
        'contract': 'Int32IdNameClass',
        'vacancy': 'VacancyResponse',
        'start_time_local': 'datetime',
        'end_time_local': 'datetime',
        'is_long_term': 'bool',
        'cancelled_at_utc': 'datetime',
        'id': 'int',
        'external_id': 'str'
    }

    attribute_map = {
        'employee': 'employee',
        'position': 'position',
        'contract': 'contract',
        'vacancy': 'vacancy',
        'start_time_local': 'startTimeLocal',
        'end_time_local': 'endTimeLocal',
        'is_long_term': 'isLongTerm',
        'cancelled_at_utc': 'cancelledAtUtc',
        'id': 'id',
        'external_id': 'externalId'
    }

    def __init__(self, employee=None, position=None, contract=None, vacancy=None, start_time_local=None, end_time_local=None, is_long_term=None, cancelled_at_utc=None, id=None, external_id=None, local_vars_configuration=None):  # noqa: E501
        """AssignmentResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._employee = None
        self._position = None
        self._contract = None
        self._vacancy = None
        self._start_time_local = None
        self._end_time_local = None
        self._is_long_term = None
        self._cancelled_at_utc = None
        self._id = None
        self._external_id = None
        self.discriminator = None

        if employee is not None:
            self.employee = employee
        if position is not None:
            self.position = position
        if contract is not None:
            self.contract = contract
        if vacancy is not None:
            self.vacancy = vacancy
        if start_time_local is not None:
            self.start_time_local = start_time_local
        if end_time_local is not None:
            self.end_time_local = end_time_local
        if is_long_term is not None:
            self.is_long_term = is_long_term
        self.cancelled_at_utc = cancelled_at_utc
        if id is not None:
            self.id = id
        self.external_id = external_id

    @property
    def employee(self):
        """Gets the employee of this AssignmentResponse.  # noqa: E501


        :return: The employee of this AssignmentResponse.  # noqa: E501
        :rtype: Int32IdNameClass
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """Sets the employee of this AssignmentResponse.


        :param employee: The employee of this AssignmentResponse.  # noqa: E501
        :type: Int32IdNameClass
        """

        self._employee = employee

    @property
    def position(self):
        """Gets the position of this AssignmentResponse.  # noqa: E501


        :return: The position of this AssignmentResponse.  # noqa: E501
        :rtype: Int32IdNameClass
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this AssignmentResponse.


        :param position: The position of this AssignmentResponse.  # noqa: E501
        :type: Int32IdNameClass
        """

        self._position = position

    @property
    def contract(self):
        """Gets the contract of this AssignmentResponse.  # noqa: E501


        :return: The contract of this AssignmentResponse.  # noqa: E501
        :rtype: Int32IdNameClass
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """Sets the contract of this AssignmentResponse.


        :param contract: The contract of this AssignmentResponse.  # noqa: E501
        :type: Int32IdNameClass
        """

        self._contract = contract

    @property
    def vacancy(self):
        """Gets the vacancy of this AssignmentResponse.  # noqa: E501


        :return: The vacancy of this AssignmentResponse.  # noqa: E501
        :rtype: VacancyResponse
        """
        return self._vacancy

    @vacancy.setter
    def vacancy(self, vacancy):
        """Sets the vacancy of this AssignmentResponse.


        :param vacancy: The vacancy of this AssignmentResponse.  # noqa: E501
        :type: VacancyResponse
        """

        self._vacancy = vacancy

    @property
    def start_time_local(self):
        """Gets the start_time_local of this AssignmentResponse.  # noqa: E501

        When the Assignment starts (local time)  # noqa: E501

        :return: The start_time_local of this AssignmentResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time_local

    @start_time_local.setter
    def start_time_local(self, start_time_local):
        """Sets the start_time_local of this AssignmentResponse.

        When the Assignment starts (local time)  # noqa: E501

        :param start_time_local: The start_time_local of this AssignmentResponse.  # noqa: E501
        :type: datetime
        """

        self._start_time_local = start_time_local

    @property
    def end_time_local(self):
        """Gets the end_time_local of this AssignmentResponse.  # noqa: E501

        When the Assignment ends (local time)  # noqa: E501

        :return: The end_time_local of this AssignmentResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time_local

    @end_time_local.setter
    def end_time_local(self, end_time_local):
        """Sets the end_time_local of this AssignmentResponse.

        When the Assignment ends (local time)  # noqa: E501

        :param end_time_local: The end_time_local of this AssignmentResponse.  # noqa: E501
        :type: datetime
        """

        self._end_time_local = end_time_local

    @property
    def is_long_term(self):
        """Gets the is_long_term of this AssignmentResponse.  # noqa: E501

        Is the Assignment classified as a long-term assignment  # noqa: E501

        :return: The is_long_term of this AssignmentResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_long_term

    @is_long_term.setter
    def is_long_term(self, is_long_term):
        """Sets the is_long_term of this AssignmentResponse.

        Is the Assignment classified as a long-term assignment  # noqa: E501

        :param is_long_term: The is_long_term of this AssignmentResponse.  # noqa: E501
        :type: bool
        """

        self._is_long_term = is_long_term

    @property
    def cancelled_at_utc(self):
        """Gets the cancelled_at_utc of this AssignmentResponse.  # noqa: E501

        When was the Assignment cancelled  # noqa: E501

        :return: The cancelled_at_utc of this AssignmentResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._cancelled_at_utc

    @cancelled_at_utc.setter
    def cancelled_at_utc(self, cancelled_at_utc):
        """Sets the cancelled_at_utc of this AssignmentResponse.

        When was the Assignment cancelled  # noqa: E501

        :param cancelled_at_utc: The cancelled_at_utc of this AssignmentResponse.  # noqa: E501
        :type: datetime
        """

        self._cancelled_at_utc = cancelled_at_utc

    @property
    def id(self):
        """Gets the id of this AssignmentResponse.  # noqa: E501


        :return: The id of this AssignmentResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssignmentResponse.


        :param id: The id of this AssignmentResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def external_id(self):
        """Gets the external_id of this AssignmentResponse.  # noqa: E501


        :return: The external_id of this AssignmentResponse.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this AssignmentResponse.


        :param external_id: The external_id of this AssignmentResponse.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssignmentResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AssignmentResponse):
            return True

        return self.to_dict() != other.to_dict()
