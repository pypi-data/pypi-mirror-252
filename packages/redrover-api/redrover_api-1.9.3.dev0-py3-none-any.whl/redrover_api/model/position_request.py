# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.  # Authentication The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.  This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.  Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.  # API Information ## Api Key Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.  You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.  ## Identifier Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from redrover_api import schemas  # noqa: F401


class PositionRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "positionType",
            "contract",
            "schedules",
        }
        
        class properties:
        
            @staticmethod
            def contract() -> typing.Type['Int32LocatorRequest']:
                return Int32LocatorRequest
        
            @staticmethod
            def positionType() -> typing.Type['Int32LocatorRequest']:
                return Int32LocatorRequest
            
            
            class schedules(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PositionScheduleRequest']:
                        return PositionScheduleRequest
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PositionScheduleRequest'], typing.List['PositionScheduleRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'schedules':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PositionScheduleRequest':
                    return super().__getitem__(i)
            
            
            class externalId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'externalId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def positionScheduleModeId() -> typing.Type['PositionScheduleModeEnum']:
                return PositionScheduleModeEnum
            
            
            class hoursPerFullWorkDay(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hoursPerFullWorkDay':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def needsReplacement() -> typing.Type['NeedsReplacementEnum']:
                return NeedsReplacementEnum
            
            
            class startDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'startDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class endDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'endDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class isStaffAugmentation(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isStaffAugmentation':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class fte(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fte':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class qualifiedForPto(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'qualifiedForPto':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class qualifiedForPaidHolidays(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'qualifiedForPaidHolidays':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class qualifiedForPtoAsOf(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'qualifiedForPtoAsOf':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class qualifiedForPaidHolidaysAsOf(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'qualifiedForPaidHolidaysAsOf':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class defaultJobPayOverride(
                schemas.Float64Base,
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'double'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'defaultJobPayOverride':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class code(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'code':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            replaceExistingPositionJobs = schemas.BoolSchema
            
            
            class allowedLocationIds(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Int32LocatorRequest']:
                        return Int32LocatorRequest
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allowedLocationIds':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class otherJobs(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PositionJobRequest']:
                        return PositionJobRequest
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'otherJobs':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def primaryJob() -> typing.Type['PositionJobRequest']:
                return PositionJobRequest
            __annotations__ = {
                "contract": contract,
                "positionType": positionType,
                "schedules": schedules,
                "externalId": externalId,
                "name": name,
                "positionScheduleModeId": positionScheduleModeId,
                "hoursPerFullWorkDay": hoursPerFullWorkDay,
                "needsReplacement": needsReplacement,
                "startDate": startDate,
                "endDate": endDate,
                "isStaffAugmentation": isStaffAugmentation,
                "fte": fte,
                "qualifiedForPto": qualifiedForPto,
                "qualifiedForPaidHolidays": qualifiedForPaidHolidays,
                "qualifiedForPtoAsOf": qualifiedForPtoAsOf,
                "qualifiedForPaidHolidaysAsOf": qualifiedForPaidHolidaysAsOf,
                "defaultJobPayOverride": defaultJobPayOverride,
                "code": code,
                "replaceExistingPositionJobs": replaceExistingPositionJobs,
                "allowedLocationIds": allowedLocationIds,
                "otherJobs": otherJobs,
                "primaryJob": primaryJob,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    positionType: 'Int32LocatorRequest'
    contract: 'Int32LocatorRequest'
    schedules: MetaOapg.properties.schedules
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["positionType"]) -> 'Int32LocatorRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contract"]) -> 'Int32LocatorRequest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schedules"]) -> MetaOapg.properties.schedules: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalId"]) -> MetaOapg.properties.externalId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["positionScheduleModeId"]) -> 'PositionScheduleModeEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hoursPerFullWorkDay"]) -> MetaOapg.properties.hoursPerFullWorkDay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["needsReplacement"]) -> 'NeedsReplacementEnum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isStaffAugmentation"]) -> MetaOapg.properties.isStaffAugmentation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fte"]) -> MetaOapg.properties.fte: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualifiedForPto"]) -> MetaOapg.properties.qualifiedForPto: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualifiedForPaidHolidays"]) -> MetaOapg.properties.qualifiedForPaidHolidays: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualifiedForPtoAsOf"]) -> MetaOapg.properties.qualifiedForPtoAsOf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualifiedForPaidHolidaysAsOf"]) -> MetaOapg.properties.qualifiedForPaidHolidaysAsOf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultJobPayOverride"]) -> MetaOapg.properties.defaultJobPayOverride: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replaceExistingPositionJobs"]) -> MetaOapg.properties.replaceExistingPositionJobs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowedLocationIds"]) -> MetaOapg.properties.allowedLocationIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherJobs"]) -> MetaOapg.properties.otherJobs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primaryJob"]) -> 'PositionJobRequest': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["positionType"], typing_extensions.Literal["contract"], typing_extensions.Literal["schedules"], typing_extensions.Literal["externalId"], typing_extensions.Literal["name"], typing_extensions.Literal["positionScheduleModeId"], typing_extensions.Literal["hoursPerFullWorkDay"], typing_extensions.Literal["needsReplacement"], typing_extensions.Literal["startDate"], typing_extensions.Literal["endDate"], typing_extensions.Literal["isStaffAugmentation"], typing_extensions.Literal["fte"], typing_extensions.Literal["qualifiedForPto"], typing_extensions.Literal["qualifiedForPaidHolidays"], typing_extensions.Literal["qualifiedForPtoAsOf"], typing_extensions.Literal["qualifiedForPaidHolidaysAsOf"], typing_extensions.Literal["defaultJobPayOverride"], typing_extensions.Literal["code"], typing_extensions.Literal["replaceExistingPositionJobs"], typing_extensions.Literal["allowedLocationIds"], typing_extensions.Literal["otherJobs"], typing_extensions.Literal["primaryJob"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["positionType"]) -> 'Int32LocatorRequest': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contract"]) -> 'Int32LocatorRequest': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schedules"]) -> MetaOapg.properties.schedules: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalId"]) -> typing.Union[MetaOapg.properties.externalId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["positionScheduleModeId"]) -> typing.Union['PositionScheduleModeEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hoursPerFullWorkDay"]) -> typing.Union[MetaOapg.properties.hoursPerFullWorkDay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["needsReplacement"]) -> typing.Union['NeedsReplacementEnum', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> typing.Union[MetaOapg.properties.startDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isStaffAugmentation"]) -> typing.Union[MetaOapg.properties.isStaffAugmentation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fte"]) -> typing.Union[MetaOapg.properties.fte, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualifiedForPto"]) -> typing.Union[MetaOapg.properties.qualifiedForPto, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualifiedForPaidHolidays"]) -> typing.Union[MetaOapg.properties.qualifiedForPaidHolidays, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualifiedForPtoAsOf"]) -> typing.Union[MetaOapg.properties.qualifiedForPtoAsOf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualifiedForPaidHolidaysAsOf"]) -> typing.Union[MetaOapg.properties.qualifiedForPaidHolidaysAsOf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultJobPayOverride"]) -> typing.Union[MetaOapg.properties.defaultJobPayOverride, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replaceExistingPositionJobs"]) -> typing.Union[MetaOapg.properties.replaceExistingPositionJobs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowedLocationIds"]) -> typing.Union[MetaOapg.properties.allowedLocationIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherJobs"]) -> typing.Union[MetaOapg.properties.otherJobs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primaryJob"]) -> typing.Union['PositionJobRequest', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["positionType"], typing_extensions.Literal["contract"], typing_extensions.Literal["schedules"], typing_extensions.Literal["externalId"], typing_extensions.Literal["name"], typing_extensions.Literal["positionScheduleModeId"], typing_extensions.Literal["hoursPerFullWorkDay"], typing_extensions.Literal["needsReplacement"], typing_extensions.Literal["startDate"], typing_extensions.Literal["endDate"], typing_extensions.Literal["isStaffAugmentation"], typing_extensions.Literal["fte"], typing_extensions.Literal["qualifiedForPto"], typing_extensions.Literal["qualifiedForPaidHolidays"], typing_extensions.Literal["qualifiedForPtoAsOf"], typing_extensions.Literal["qualifiedForPaidHolidaysAsOf"], typing_extensions.Literal["defaultJobPayOverride"], typing_extensions.Literal["code"], typing_extensions.Literal["replaceExistingPositionJobs"], typing_extensions.Literal["allowedLocationIds"], typing_extensions.Literal["otherJobs"], typing_extensions.Literal["primaryJob"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        positionType: 'Int32LocatorRequest',
        contract: 'Int32LocatorRequest',
        schedules: typing.Union[MetaOapg.properties.schedules, list, tuple, ],
        externalId: typing.Union[MetaOapg.properties.externalId, None, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, None, str, schemas.Unset] = schemas.unset,
        positionScheduleModeId: typing.Union['PositionScheduleModeEnum', schemas.Unset] = schemas.unset,
        hoursPerFullWorkDay: typing.Union[MetaOapg.properties.hoursPerFullWorkDay, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        needsReplacement: typing.Union['NeedsReplacementEnum', schemas.Unset] = schemas.unset,
        startDate: typing.Union[MetaOapg.properties.startDate, None, str, datetime, schemas.Unset] = schemas.unset,
        endDate: typing.Union[MetaOapg.properties.endDate, None, str, datetime, schemas.Unset] = schemas.unset,
        isStaffAugmentation: typing.Union[MetaOapg.properties.isStaffAugmentation, None, bool, schemas.Unset] = schemas.unset,
        fte: typing.Union[MetaOapg.properties.fte, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        qualifiedForPto: typing.Union[MetaOapg.properties.qualifiedForPto, None, bool, schemas.Unset] = schemas.unset,
        qualifiedForPaidHolidays: typing.Union[MetaOapg.properties.qualifiedForPaidHolidays, None, bool, schemas.Unset] = schemas.unset,
        qualifiedForPtoAsOf: typing.Union[MetaOapg.properties.qualifiedForPtoAsOf, None, str, datetime, schemas.Unset] = schemas.unset,
        qualifiedForPaidHolidaysAsOf: typing.Union[MetaOapg.properties.qualifiedForPaidHolidaysAsOf, None, str, datetime, schemas.Unset] = schemas.unset,
        defaultJobPayOverride: typing.Union[MetaOapg.properties.defaultJobPayOverride, None, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, None, str, schemas.Unset] = schemas.unset,
        replaceExistingPositionJobs: typing.Union[MetaOapg.properties.replaceExistingPositionJobs, bool, schemas.Unset] = schemas.unset,
        allowedLocationIds: typing.Union[MetaOapg.properties.allowedLocationIds, list, tuple, None, schemas.Unset] = schemas.unset,
        otherJobs: typing.Union[MetaOapg.properties.otherJobs, list, tuple, None, schemas.Unset] = schemas.unset,
        primaryJob: typing.Union['PositionJobRequest', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'PositionRequest':
        return super().__new__(
            cls,
            *_args,
            positionType=positionType,
            contract=contract,
            schedules=schedules,
            externalId=externalId,
            name=name,
            positionScheduleModeId=positionScheduleModeId,
            hoursPerFullWorkDay=hoursPerFullWorkDay,
            needsReplacement=needsReplacement,
            startDate=startDate,
            endDate=endDate,
            isStaffAugmentation=isStaffAugmentation,
            fte=fte,
            qualifiedForPto=qualifiedForPto,
            qualifiedForPaidHolidays=qualifiedForPaidHolidays,
            qualifiedForPtoAsOf=qualifiedForPtoAsOf,
            qualifiedForPaidHolidaysAsOf=qualifiedForPaidHolidaysAsOf,
            defaultJobPayOverride=defaultJobPayOverride,
            code=code,
            replaceExistingPositionJobs=replaceExistingPositionJobs,
            allowedLocationIds=allowedLocationIds,
            otherJobs=otherJobs,
            primaryJob=primaryJob,
            _configuration=_configuration,
        )

from redrover_api.model.int32_locator_request import Int32LocatorRequest
from redrover_api.model.needs_replacement_enum import NeedsReplacementEnum
from redrover_api.model.position_job_request import PositionJobRequest
from redrover_api.model.position_schedule_mode_enum import PositionScheduleModeEnum
from redrover_api.model.position_schedule_request import PositionScheduleRequest
