# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import redrover_api
from redrover_api.models.employee_request import EmployeeRequest  # noqa: E501
from redrover_api.rest import ApiException

class TestEmployeeRequest(unittest.TestCase):
    """EmployeeRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test EmployeeRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = redrover_api.models.employee_request.EmployeeRequest()  # noqa: E501
        if include_optional :
            return EmployeeRequest(
                positions = [
                    redrover_api.models.position_request.PositionRequest(
                        external_id = '0', 
                        name = '0', 
                        position_schedule_mode_id = 'Normal', 
                        contract = redrover_api.models.identifier.Identifier(
                            id = 56, 
                            external_id = '0', ), 
                        position_type = redrover_api.models.identifier.Identifier(
                            id = 56, 
                            external_id = '0', ), 
                        hours_per_full_work_day = 1.337, 
                        needs_replacement = 'No', 
                        start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        is_staff_augmentation = True, 
                        fte = 1.337, 
                        qualified_for_pto = True, 
                        qualified_for_paid_holidays = True, 
                        qualified_for_pto_as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        qualified_for_paid_holidays_as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        default_job_pay_override = 1.337, 
                        code = '0', 
                        schedules = [
                            redrover_api.models.position_schedule_request.PositionScheduleRequest(
                                items = [
                                    redrover_api.models.position_schedule_item_request.PositionScheduleItemRequest(
                                        accounting_code_allocations = [
                                            redrover_api.models.accounting_code_allocation_request.AccountingCodeAllocationRequest(
                                                accounting_code_id = 56, 
                                                allocation = 1.337, )
                                            ], 
                                        location = redrover_api.models.identifier.Identifier(
                                            id = 56, 
                                            external_id = '0', ), 
                                        job = redrover_api.models.identifier.Identifier(
                                            id = 56, 
                                            external_id = '0', ), 
                                        bell_schedule = redrover_api.models.identifier.Identifier(
                                            id = 56, 
                                            external_id = '0', ), 
                                        start_period = redrover_api.models.identifier.Identifier(
                                            id = 56, 
                                            external_id = '0', ), 
                                        end_period = redrover_api.models.identifier.Identifier(
                                            id = 56, 
                                            external_id = '0', ), 
                                        periods_not_needing_replacement = [
                                            redrover_api.models.identifier.Identifier(
                                                id = 56, 
                                                external_id = '0', )
                                            ], 
                                        standard_custom_schedule_variant = redrover_api.models.position_schedule_custom_variant_request.PositionScheduleCustomVariantRequest(
                                            start_time = '0', 
                                            half_day_morning_end_time = '0', 
                                            half_day_afternoon_start_time = '0', 
                                            end_time = '0', 
                                            next_start_time = '0', 
                                            is_work_time = True, 
                                            needs_replacement_am = True, 
                                            needs_replacement_pm = True, 
                                            work_day_schedule_variant_type = redrover_api.models.identifier.Identifier(
                                                id = 56, 
                                                external_id = '0', ), ), 
                                        additional_custom_schedule_variants = [
                                            redrover_api.models.position_schedule_custom_variant_request.PositionScheduleCustomVariantRequest(
                                                start_time = '0', 
                                                half_day_morning_end_time = '0', 
                                                half_day_afternoon_start_time = '0', 
                                                end_time = '0', 
                                                next_start_time = '0', 
                                                is_work_time = True, 
                                                needs_replacement_am = True, 
                                                needs_replacement_pm = True, )
                                            ], )
                                    ], 
                                days_of_the_week = [
                                    'Sunday'
                                    ], )
                            ], 
                        replace_existing_position_jobs = True, 
                        allowed_location_ids = [
                            redrover_api.models.identifier.Identifier(
                                id = 56, 
                                external_id = '0', )
                            ], 
                        other_jobs = [
                            redrover_api.models.position_job_request.PositionJobRequest(
                                pay_step = redrover_api.models.identifier.Identifier(
                                    id = 56, 
                                    external_id = '0', ), 
                                override_pay_rate = 1.337, 
                                visible = True, 
                                position_job_id = 56, 
                                effective_as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                accounting_codes = [
                                    redrover_api.models.accounting_code_allocation_request.AccountingCodeAllocationRequest(
                                        accounting_code_id = 56, 
                                        allocation = 1.337, )
                                    ], )
                            ], 
                        primary_job = redrover_api.models.position_job_request.PositionJobRequest(
                            override_pay_rate = 1.337, 
                            visible = True, 
                            position_job_id = 56, 
                            effective_as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), )
                    ], 
                substitute_preferences = redrover_api.models.substitute_preferences_request.SubstitutePreferencesRequest(
                    favorite_substitutes = [
                        redrover_api.models.identifier.Identifier(
                            id = 56, 
                            external_id = '0', )
                        ], 
                    blocked_substitutes = [
                        redrover_api.models.identifier.Identifier(
                            id = 56, 
                            external_id = '0', )
                        ], 
                    auto_assigned_substitutes = [
                        redrover_api.models.identifier.Identifier(
                            id = 56, 
                            external_id = '0', )
                        ], ), 
                replace_existing_substitute_preferences = True, 
                time_off_balances = [
                    redrover_api.models.time_off_balance_request.TimeOffBalanceRequest(
                        absence_reason = redrover_api.models.identifier.Identifier(
                            id = 56, 
                            external_id = '0', ), 
                        absence_reason_category = redrover_api.models.identifier.Identifier(
                            id = 56, 
                            external_id = '0', ), 
                        school_year = redrover_api.models.identifier.Identifier(
                            id = 56, 
                            external_id = '0', ), 
                        as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        absence_reason_tracking_type_id = 'Invalid', 
                        balance = 1.337, )
                    ], 
                replace_existing_time_off_balances = True, 
                comp_time_start_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                comp_time_end_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                id = 56, 
                secondary_identifier = '0', 
                external_id = '0', 
                first_name = '0', 
                middle_name = '0', 
                last_name = '0', 
                email = '0', 
                notification_email = '0', 
                date_of_birth = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                address1 = '0', 
                address2 = '0', 
                city = '0', 
                postal_code = '0', 
                badge_number = '0', 
                state = 'Invalid', 
                country = 'Invalid', 
                phone_number = '0', 
                active = True, 
                permission_set = redrover_api.models.identifier.Identifier(
                    id = 56, 
                    external_id = '0', ), 
                remove_future_assignments_on_inactivate = True, 
                invite_immediately = True
            )
        else :
            return EmployeeRequest(
        )

    def testEmployeeRequest(self):
        """Test EmployeeRequest"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
