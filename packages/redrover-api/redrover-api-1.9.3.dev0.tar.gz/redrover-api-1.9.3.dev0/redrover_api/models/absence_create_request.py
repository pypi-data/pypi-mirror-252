# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class AbsenceCreateRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'validate_only': 'bool',
        'external_id': 'str',
        'employee': 'Int32LocatorRequest',
        'notes_to_approver': 'str',
        'admin_only_notes': 'str',
        'details': 'list[AbsenceDetailCreateRequest]',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'vacancies': 'list[AbsenceVacancyRequest]'
    }

    attribute_map = {
        'validate_only': 'validateOnly',
        'external_id': 'externalId',
        'employee': 'employee',
        'notes_to_approver': 'notesToApprover',
        'admin_only_notes': 'adminOnlyNotes',
        'details': 'details',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'vacancies': 'vacancies'
    }

    def __init__(self, validate_only=False, external_id=None, employee=None, notes_to_approver=None, admin_only_notes=None, details=None, start_date=None, end_date=None, vacancies=None, local_vars_configuration=None):  # noqa: E501
        """AbsenceCreateRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._validate_only = None
        self._external_id = None
        self._employee = None
        self._notes_to_approver = None
        self._admin_only_notes = None
        self._details = None
        self._start_date = None
        self._end_date = None
        self._vacancies = None
        self.discriminator = None

        if validate_only is not None:
            self.validate_only = validate_only
        self.external_id = external_id
        if employee is not None:
            self.employee = employee
        self.notes_to_approver = notes_to_approver
        self.admin_only_notes = admin_only_notes
        if details is not None:
            self.details = details
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        self.vacancies = vacancies

    @property
    def validate_only(self):
        """Gets the validate_only of this AbsenceCreateRequest.  # noqa: E501

        When set, this will only validate the Absence and will not save it. (default: false)  # noqa: E501

        :return: The validate_only of this AbsenceCreateRequest.  # noqa: E501
        :rtype: bool
        """
        return self._validate_only

    @validate_only.setter
    def validate_only(self, validate_only):
        """Sets the validate_only of this AbsenceCreateRequest.

        When set, this will only validate the Absence and will not save it. (default: false)  # noqa: E501

        :param validate_only: The validate_only of this AbsenceCreateRequest.  # noqa: E501
        :type: bool
        """

        self._validate_only = validate_only

    @property
    def external_id(self):
        """Gets the external_id of this AbsenceCreateRequest.  # noqa: E501

        The external identifier to the Absence  # noqa: E501

        :return: The external_id of this AbsenceCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this AbsenceCreateRequest.

        The external identifier to the Absence  # noqa: E501

        :param external_id: The external_id of this AbsenceCreateRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                external_id is not None and len(external_id) > 50):
            raise ValueError("Invalid value for `external_id`, length must be less than or equal to `50`")  # noqa: E501

        self._external_id = external_id

    @property
    def employee(self):
        """Gets the employee of this AbsenceCreateRequest.  # noqa: E501


        :return: The employee of this AbsenceCreateRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """Sets the employee of this AbsenceCreateRequest.


        :param employee: The employee of this AbsenceCreateRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """

        self._employee = employee

    @property
    def notes_to_approver(self):
        """Gets the notes_to_approver of this AbsenceCreateRequest.  # noqa: E501

        Notes that will be shown to the individual who approves the Absence  # noqa: E501

        :return: The notes_to_approver of this AbsenceCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._notes_to_approver

    @notes_to_approver.setter
    def notes_to_approver(self, notes_to_approver):
        """Sets the notes_to_approver of this AbsenceCreateRequest.

        Notes that will be shown to the individual who approves the Absence  # noqa: E501

        :param notes_to_approver: The notes_to_approver of this AbsenceCreateRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                notes_to_approver is not None and len(notes_to_approver) > 1500):
            raise ValueError("Invalid value for `notes_to_approver`, length must be less than or equal to `1500`")  # noqa: E501

        self._notes_to_approver = notes_to_approver

    @property
    def admin_only_notes(self):
        """Gets the admin_only_notes of this AbsenceCreateRequest.  # noqa: E501

        Notes that will be only shown to Admins  # noqa: E501

        :return: The admin_only_notes of this AbsenceCreateRequest.  # noqa: E501
        :rtype: str
        """
        return self._admin_only_notes

    @admin_only_notes.setter
    def admin_only_notes(self, admin_only_notes):
        """Sets the admin_only_notes of this AbsenceCreateRequest.

        Notes that will be only shown to Admins  # noqa: E501

        :param admin_only_notes: The admin_only_notes of this AbsenceCreateRequest.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                admin_only_notes is not None and len(admin_only_notes) > 1500):
            raise ValueError("Invalid value for `admin_only_notes`, length must be less than or equal to `1500`")  # noqa: E501

        self._admin_only_notes = admin_only_notes

    @property
    def details(self):
        """Gets the details of this AbsenceCreateRequest.  # noqa: E501

        The specific details of the Absence  # noqa: E501

        :return: The details of this AbsenceCreateRequest.  # noqa: E501
        :rtype: list[AbsenceDetailCreateRequest]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this AbsenceCreateRequest.

        The specific details of the Absence  # noqa: E501

        :param details: The details of this AbsenceCreateRequest.  # noqa: E501
        :type: list[AbsenceDetailCreateRequest]
        """

        self._details = details

    @property
    def start_date(self):
        """Gets the start_date of this AbsenceCreateRequest.  # noqa: E501

        The date that the absence begins  # noqa: E501

        :return: The start_date of this AbsenceCreateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this AbsenceCreateRequest.

        The date that the absence begins  # noqa: E501

        :param start_date: The start_date of this AbsenceCreateRequest.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this AbsenceCreateRequest.  # noqa: E501

        The date that the absence ends  # noqa: E501

        :return: The end_date of this AbsenceCreateRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this AbsenceCreateRequest.

        The date that the absence ends  # noqa: E501

        :param end_date: The end_date of this AbsenceCreateRequest.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def vacancies(self):
        """Gets the vacancies of this AbsenceCreateRequest.  # noqa: E501

        Assign a substitute to the Absence  # noqa: E501

        :return: The vacancies of this AbsenceCreateRequest.  # noqa: E501
        :rtype: list[AbsenceVacancyRequest]
        """
        return self._vacancies

    @vacancies.setter
    def vacancies(self, vacancies):
        """Sets the vacancies of this AbsenceCreateRequest.

        Assign a substitute to the Absence  # noqa: E501

        :param vacancies: The vacancies of this AbsenceCreateRequest.  # noqa: E501
        :type: list[AbsenceVacancyRequest]
        """

        self._vacancies = vacancies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbsenceCreateRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AbsenceCreateRequest):
            return True

        return self.to_dict() != other.to_dict()
