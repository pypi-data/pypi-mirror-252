# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class SubstituteRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'replace_existing_related_orgs': 'bool',
        'related_orgs': 'list[SubstituteRelatedOrgRequest]',
        'replace_existing_attributes': 'bool',
        'attributes': 'list[SubstituteAttributeRequest]',
        'pay_code': 'Int32LocatorRequest',
        'related_org_ids': 'list[int]',
        'id': 'int',
        'secondary_identifier': 'str',
        'external_id': 'str',
        'first_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'notification_email': 'str',
        'date_of_birth': 'datetime',
        'address1': 'str',
        'address2': 'str',
        'city': 'str',
        'postal_code': 'str',
        'badge_number': 'str',
        'state': 'StateEnum',
        'country': 'CountryEnum',
        'phone_number': 'str',
        'active': 'bool',
        'permission_set': 'Int32LocatorRequest',
        'remove_future_assignments_on_inactivate': 'bool',
        'invite_immediately': 'bool'
    }

    attribute_map = {
        'replace_existing_related_orgs': 'replaceExistingRelatedOrgs',
        'related_orgs': 'relatedOrgs',
        'replace_existing_attributes': 'replaceExistingAttributes',
        'attributes': 'attributes',
        'pay_code': 'payCode',
        'related_org_ids': 'relatedOrgIds',
        'id': 'id',
        'secondary_identifier': 'secondaryIdentifier',
        'external_id': 'externalId',
        'first_name': 'firstName',
        'middle_name': 'middleName',
        'last_name': 'lastName',
        'email': 'email',
        'notification_email': 'notificationEmail',
        'date_of_birth': 'dateOfBirth',
        'address1': 'address1',
        'address2': 'address2',
        'city': 'city',
        'postal_code': 'postalCode',
        'badge_number': 'badgeNumber',
        'state': 'state',
        'country': 'country',
        'phone_number': 'phoneNumber',
        'active': 'active',
        'permission_set': 'permissionSet',
        'remove_future_assignments_on_inactivate': 'removeFutureAssignmentsOnInactivate',
        'invite_immediately': 'inviteImmediately'
    }

    def __init__(self, replace_existing_related_orgs=None, related_orgs=None, replace_existing_attributes=None, attributes=None, pay_code=None, related_org_ids=None, id=None, secondary_identifier=None, external_id=None, first_name=None, middle_name=None, last_name=None, email=None, notification_email=None, date_of_birth=None, address1=None, address2=None, city=None, postal_code=None, badge_number=None, state=None, country=None, phone_number=None, active=None, permission_set=None, remove_future_assignments_on_inactivate=None, invite_immediately=None, local_vars_configuration=None):  # noqa: E501
        """SubstituteRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._replace_existing_related_orgs = None
        self._related_orgs = None
        self._replace_existing_attributes = None
        self._attributes = None
        self._pay_code = None
        self._related_org_ids = None
        self._id = None
        self._secondary_identifier = None
        self._external_id = None
        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._email = None
        self._notification_email = None
        self._date_of_birth = None
        self._address1 = None
        self._address2 = None
        self._city = None
        self._postal_code = None
        self._badge_number = None
        self._state = None
        self._country = None
        self._phone_number = None
        self._active = None
        self._permission_set = None
        self._remove_future_assignments_on_inactivate = None
        self._invite_immediately = None
        self.discriminator = None

        if replace_existing_related_orgs is not None:
            self.replace_existing_related_orgs = replace_existing_related_orgs
        self.related_orgs = related_orgs
        if replace_existing_attributes is not None:
            self.replace_existing_attributes = replace_existing_attributes
        self.attributes = attributes
        if pay_code is not None:
            self.pay_code = pay_code
        self.related_org_ids = related_org_ids
        if id is not None:
            self.id = id
        self.secondary_identifier = secondary_identifier
        self.external_id = external_id
        self.first_name = first_name
        self.middle_name = middle_name
        self.last_name = last_name
        self.email = email
        self.notification_email = notification_email
        self.date_of_birth = date_of_birth
        self.address1 = address1
        self.address2 = address2
        self.city = city
        self.postal_code = postal_code
        self.badge_number = badge_number
        if state is not None:
            self.state = state
        if country is not None:
            self.country = country
        self.phone_number = phone_number
        self.active = active
        if permission_set is not None:
            self.permission_set = permission_set
        self.remove_future_assignments_on_inactivate = remove_future_assignments_on_inactivate
        self.invite_immediately = invite_immediately

    @property
    def replace_existing_related_orgs(self):
        """Gets the replace_existing_related_orgs of this SubstituteRequest.  # noqa: E501

        If related Organizations are to be replaced. (Default is true)  # noqa: E501

        :return: The replace_existing_related_orgs of this SubstituteRequest.  # noqa: E501
        :rtype: bool
        """
        return self._replace_existing_related_orgs

    @replace_existing_related_orgs.setter
    def replace_existing_related_orgs(self, replace_existing_related_orgs):
        """Sets the replace_existing_related_orgs of this SubstituteRequest.

        If related Organizations are to be replaced. (Default is true)  # noqa: E501

        :param replace_existing_related_orgs: The replace_existing_related_orgs of this SubstituteRequest.  # noqa: E501
        :type: bool
        """

        self._replace_existing_related_orgs = replace_existing_related_orgs

    @property
    def related_orgs(self):
        """Gets the related_orgs of this SubstituteRequest.  # noqa: E501

        Related Organizations  # noqa: E501

        :return: The related_orgs of this SubstituteRequest.  # noqa: E501
        :rtype: list[SubstituteRelatedOrgRequest]
        """
        return self._related_orgs

    @related_orgs.setter
    def related_orgs(self, related_orgs):
        """Sets the related_orgs of this SubstituteRequest.

        Related Organizations  # noqa: E501

        :param related_orgs: The related_orgs of this SubstituteRequest.  # noqa: E501
        :type: list[SubstituteRelatedOrgRequest]
        """

        self._related_orgs = related_orgs

    @property
    def replace_existing_attributes(self):
        """Gets the replace_existing_attributes of this SubstituteRequest.  # noqa: E501

        If related Attributes are to be replaced. (Default is true)  # noqa: E501

        :return: The replace_existing_attributes of this SubstituteRequest.  # noqa: E501
        :rtype: bool
        """
        return self._replace_existing_attributes

    @replace_existing_attributes.setter
    def replace_existing_attributes(self, replace_existing_attributes):
        """Sets the replace_existing_attributes of this SubstituteRequest.

        If related Attributes are to be replaced. (Default is true)  # noqa: E501

        :param replace_existing_attributes: The replace_existing_attributes of this SubstituteRequest.  # noqa: E501
        :type: bool
        """

        self._replace_existing_attributes = replace_existing_attributes

    @property
    def attributes(self):
        """Gets the attributes of this SubstituteRequest.  # noqa: E501

        Related Attributes  # noqa: E501

        :return: The attributes of this SubstituteRequest.  # noqa: E501
        :rtype: list[SubstituteAttributeRequest]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this SubstituteRequest.

        Related Attributes  # noqa: E501

        :param attributes: The attributes of this SubstituteRequest.  # noqa: E501
        :type: list[SubstituteAttributeRequest]
        """

        self._attributes = attributes

    @property
    def pay_code(self):
        """Gets the pay_code of this SubstituteRequest.  # noqa: E501


        :return: The pay_code of this SubstituteRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._pay_code

    @pay_code.setter
    def pay_code(self, pay_code):
        """Sets the pay_code of this SubstituteRequest.


        :param pay_code: The pay_code of this SubstituteRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """

        self._pay_code = pay_code

    @property
    def related_org_ids(self):
        """Gets the related_org_ids of this SubstituteRequest.  # noqa: E501

        Related Organization Ids  # noqa: E501

        :return: The related_org_ids of this SubstituteRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._related_org_ids

    @related_org_ids.setter
    def related_org_ids(self, related_org_ids):
        """Sets the related_org_ids of this SubstituteRequest.

        Related Organization Ids  # noqa: E501

        :param related_org_ids: The related_org_ids of this SubstituteRequest.  # noqa: E501
        :type: list[int]
        """

        self._related_org_ids = related_org_ids

    @property
    def id(self):
        """Gets the id of this SubstituteRequest.  # noqa: E501

        The Red Rover internal Id of OrgUser (numeric)  # noqa: E501

        :return: The id of this SubstituteRequest.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubstituteRequest.

        The Red Rover internal Id of OrgUser (numeric)  # noqa: E501

        :param id: The id of this SubstituteRequest.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def secondary_identifier(self):
        """Gets the secondary_identifier of this SubstituteRequest.  # noqa: E501

        The secondary identifier for the User  # noqa: E501

        :return: The secondary_identifier of this SubstituteRequest.  # noqa: E501
        :rtype: str
        """
        return self._secondary_identifier

    @secondary_identifier.setter
    def secondary_identifier(self, secondary_identifier):
        """Sets the secondary_identifier of this SubstituteRequest.

        The secondary identifier for the User  # noqa: E501

        :param secondary_identifier: The secondary_identifier of this SubstituteRequest.  # noqa: E501
        :type: str
        """

        self._secondary_identifier = secondary_identifier

    @property
    def external_id(self):
        """Gets the external_id of this SubstituteRequest.  # noqa: E501

        The external Id of OrgUser (alpha-numeric)  # noqa: E501

        :return: The external_id of this SubstituteRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this SubstituteRequest.

        The external Id of OrgUser (alpha-numeric)  # noqa: E501

        :param external_id: The external_id of this SubstituteRequest.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def first_name(self):
        """Gets the first_name of this SubstituteRequest.  # noqa: E501

        The User's first name  # noqa: E501

        :return: The first_name of this SubstituteRequest.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this SubstituteRequest.

        The User's first name  # noqa: E501

        :param first_name: The first_name of this SubstituteRequest.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this SubstituteRequest.  # noqa: E501

        The User's middle name  # noqa: E501

        :return: The middle_name of this SubstituteRequest.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this SubstituteRequest.

        The User's middle name  # noqa: E501

        :param middle_name: The middle_name of this SubstituteRequest.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this SubstituteRequest.  # noqa: E501

        The User's last name  # noqa: E501

        :return: The last_name of this SubstituteRequest.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this SubstituteRequest.

        The User's last name  # noqa: E501

        :param last_name: The last_name of this SubstituteRequest.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this SubstituteRequest.  # noqa: E501

        The User's email (authentication)  # noqa: E501

        :return: The email of this SubstituteRequest.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SubstituteRequest.

        The User's email (authentication)  # noqa: E501

        :param email: The email of this SubstituteRequest.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def notification_email(self):
        """Gets the notification_email of this SubstituteRequest.  # noqa: E501

        The User's email that will receive notifications. For SSO districts only. If empty, the Email field will be used. Field is optional  # noqa: E501

        :return: The notification_email of this SubstituteRequest.  # noqa: E501
        :rtype: str
        """
        return self._notification_email

    @notification_email.setter
    def notification_email(self, notification_email):
        """Sets the notification_email of this SubstituteRequest.

        The User's email that will receive notifications. For SSO districts only. If empty, the Email field will be used. Field is optional  # noqa: E501

        :param notification_email: The notification_email of this SubstituteRequest.  # noqa: E501
        :type: str
        """

        self._notification_email = notification_email

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this SubstituteRequest.  # noqa: E501

        The User's date of birth  # noqa: E501

        :return: The date_of_birth of this SubstituteRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this SubstituteRequest.

        The User's date of birth  # noqa: E501

        :param date_of_birth: The date_of_birth of this SubstituteRequest.  # noqa: E501
        :type: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def address1(self):
        """Gets the address1 of this SubstituteRequest.  # noqa: E501

        The User's address  # noqa: E501

        :return: The address1 of this SubstituteRequest.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this SubstituteRequest.

        The User's address  # noqa: E501

        :param address1: The address1 of this SubstituteRequest.  # noqa: E501
        :type: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this SubstituteRequest.  # noqa: E501

        The User's address (continued)  # noqa: E501

        :return: The address2 of this SubstituteRequest.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this SubstituteRequest.

        The User's address (continued)  # noqa: E501

        :param address2: The address2 of this SubstituteRequest.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this SubstituteRequest.  # noqa: E501

        The User's city  # noqa: E501

        :return: The city of this SubstituteRequest.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this SubstituteRequest.

        The User's city  # noqa: E501

        :param city: The city of this SubstituteRequest.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def postal_code(self):
        """Gets the postal_code of this SubstituteRequest.  # noqa: E501

        The User's postal code  # noqa: E501

        :return: The postal_code of this SubstituteRequest.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this SubstituteRequest.

        The User's postal code  # noqa: E501

        :param postal_code: The postal_code of this SubstituteRequest.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def badge_number(self):
        """Gets the badge_number of this SubstituteRequest.  # noqa: E501

        The User's badge number  # noqa: E501

        :return: The badge_number of this SubstituteRequest.  # noqa: E501
        :rtype: str
        """
        return self._badge_number

    @badge_number.setter
    def badge_number(self, badge_number):
        """Sets the badge_number of this SubstituteRequest.

        The User's badge number  # noqa: E501

        :param badge_number: The badge_number of this SubstituteRequest.  # noqa: E501
        :type: str
        """

        self._badge_number = badge_number

    @property
    def state(self):
        """Gets the state of this SubstituteRequest.  # noqa: E501


        :return: The state of this SubstituteRequest.  # noqa: E501
        :rtype: StateEnum
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SubstituteRequest.


        :param state: The state of this SubstituteRequest.  # noqa: E501
        :type: StateEnum
        """

        self._state = state

    @property
    def country(self):
        """Gets the country of this SubstituteRequest.  # noqa: E501


        :return: The country of this SubstituteRequest.  # noqa: E501
        :rtype: CountryEnum
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this SubstituteRequest.


        :param country: The country of this SubstituteRequest.  # noqa: E501
        :type: CountryEnum
        """

        self._country = country

    @property
    def phone_number(self):
        """Gets the phone_number of this SubstituteRequest.  # noqa: E501

        The User's phone number  # noqa: E501

        :return: The phone_number of this SubstituteRequest.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this SubstituteRequest.

        The User's phone number  # noqa: E501

        :param phone_number: The phone_number of this SubstituteRequest.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def active(self):
        """Gets the active of this SubstituteRequest.  # noqa: E501

        If the user is active. (Default is true for Create)  # noqa: E501

        :return: The active of this SubstituteRequest.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this SubstituteRequest.

        If the user is active. (Default is true for Create)  # noqa: E501

        :param active: The active of this SubstituteRequest.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def permission_set(self):
        """Gets the permission_set of this SubstituteRequest.  # noqa: E501


        :return: The permission_set of this SubstituteRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._permission_set

    @permission_set.setter
    def permission_set(self, permission_set):
        """Sets the permission_set of this SubstituteRequest.


        :param permission_set: The permission_set of this SubstituteRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """

        self._permission_set = permission_set

    @property
    def remove_future_assignments_on_inactivate(self):
        """Gets the remove_future_assignments_on_inactivate of this SubstituteRequest.  # noqa: E501

        If all assignments are to be removed if the user is inactivated at any time  # noqa: E501

        :return: The remove_future_assignments_on_inactivate of this SubstituteRequest.  # noqa: E501
        :rtype: bool
        """
        return self._remove_future_assignments_on_inactivate

    @remove_future_assignments_on_inactivate.setter
    def remove_future_assignments_on_inactivate(self, remove_future_assignments_on_inactivate):
        """Sets the remove_future_assignments_on_inactivate of this SubstituteRequest.

        If all assignments are to be removed if the user is inactivated at any time  # noqa: E501

        :param remove_future_assignments_on_inactivate: The remove_future_assignments_on_inactivate of this SubstituteRequest.  # noqa: E501
        :type: bool
        """

        self._remove_future_assignments_on_inactivate = remove_future_assignments_on_inactivate

    @property
    def invite_immediately(self):
        """Gets the invite_immediately of this SubstituteRequest.  # noqa: E501

        If the user is to receive an invitation email right away  # noqa: E501

        :return: The invite_immediately of this SubstituteRequest.  # noqa: E501
        :rtype: bool
        """
        return self._invite_immediately

    @invite_immediately.setter
    def invite_immediately(self, invite_immediately):
        """Sets the invite_immediately of this SubstituteRequest.

        If the user is to receive an invitation email right away  # noqa: E501

        :param invite_immediately: The invite_immediately of this SubstituteRequest.  # noqa: E501
        :type: bool
        """

        self._invite_immediately = invite_immediately

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubstituteRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubstituteRequest):
            return True

        return self.to_dict() != other.to_dict()
