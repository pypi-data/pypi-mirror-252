# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class AbsenceVacancyDetailRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'location': 'Int32LocatorRequest',
        'needs_replacement': 'bool',
        'date': 'datetime',
        'day_part_id': 'DayPartEnum',
        'start_time': 'str',
        'end_time': 'str',
        'accounting_code_allocations': 'list[VacancyAccountingCodeAllocationRequest]',
        'pay_code': 'Int32LocatorRequest',
        'replacement_employee': 'Int32LocatorRequest'
    }

    attribute_map = {
        'location': 'location',
        'needs_replacement': 'needsReplacement',
        'date': 'date',
        'day_part_id': 'dayPartId',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'accounting_code_allocations': 'accountingCodeAllocations',
        'pay_code': 'payCode',
        'replacement_employee': 'replacementEmployee'
    }

    def __init__(self, location=None, needs_replacement=None, date=None, day_part_id=None, start_time=None, end_time=None, accounting_code_allocations=None, pay_code=None, replacement_employee=None, local_vars_configuration=None):  # noqa: E501
        """AbsenceVacancyDetailRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._location = None
        self._needs_replacement = None
        self._date = None
        self._day_part_id = None
        self._start_time = None
        self._end_time = None
        self._accounting_code_allocations = None
        self._pay_code = None
        self._replacement_employee = None
        self.discriminator = None

        if location is not None:
            self.location = location
        if needs_replacement is not None:
            self.needs_replacement = needs_replacement
        if date is not None:
            self.date = date
        if day_part_id is not None:
            self.day_part_id = day_part_id
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        self.accounting_code_allocations = accounting_code_allocations
        if pay_code is not None:
            self.pay_code = pay_code
        if replacement_employee is not None:
            self.replacement_employee = replacement_employee

    @property
    def location(self):
        """Gets the location of this AbsenceVacancyDetailRequest.  # noqa: E501


        :return: The location of this AbsenceVacancyDetailRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AbsenceVacancyDetailRequest.


        :param location: The location of this AbsenceVacancyDetailRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """

        self._location = location

    @property
    def needs_replacement(self):
        """Gets the needs_replacement of this AbsenceVacancyDetailRequest.  # noqa: E501

        If this Vacancy needs to be open for a Substitute to fill  # noqa: E501

        :return: The needs_replacement of this AbsenceVacancyDetailRequest.  # noqa: E501
        :rtype: bool
        """
        return self._needs_replacement

    @needs_replacement.setter
    def needs_replacement(self, needs_replacement):
        """Sets the needs_replacement of this AbsenceVacancyDetailRequest.

        If this Vacancy needs to be open for a Substitute to fill  # noqa: E501

        :param needs_replacement: The needs_replacement of this AbsenceVacancyDetailRequest.  # noqa: E501
        :type: bool
        """

        self._needs_replacement = needs_replacement

    @property
    def date(self):
        """Gets the date of this AbsenceVacancyDetailRequest.  # noqa: E501

        The Date of this Detail  # noqa: E501

        :return: The date of this AbsenceVacancyDetailRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this AbsenceVacancyDetailRequest.

        The Date of this Detail  # noqa: E501

        :param date: The date of this AbsenceVacancyDetailRequest.  # noqa: E501
        :type: datetime
        """

        self._date = date

    @property
    def day_part_id(self):
        """Gets the day_part_id of this AbsenceVacancyDetailRequest.  # noqa: E501


        :return: The day_part_id of this AbsenceVacancyDetailRequest.  # noqa: E501
        :rtype: DayPartEnum
        """
        return self._day_part_id

    @day_part_id.setter
    def day_part_id(self, day_part_id):
        """Sets the day_part_id of this AbsenceVacancyDetailRequest.


        :param day_part_id: The day_part_id of this AbsenceVacancyDetailRequest.  # noqa: E501
        :type: DayPartEnum
        """

        self._day_part_id = day_part_id

    @property
    def start_time(self):
        """Gets the start_time of this AbsenceVacancyDetailRequest.  # noqa: E501

        The time of day this Vacancy Detail begins  # noqa: E501

        :return: The start_time of this AbsenceVacancyDetailRequest.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this AbsenceVacancyDetailRequest.

        The time of day this Vacancy Detail begins  # noqa: E501

        :param start_time: The start_time of this AbsenceVacancyDetailRequest.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this AbsenceVacancyDetailRequest.  # noqa: E501

        The time of day this Vacancy Detail ends  # noqa: E501

        :return: The end_time of this AbsenceVacancyDetailRequest.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this AbsenceVacancyDetailRequest.

        The time of day this Vacancy Detail ends  # noqa: E501

        :param end_time: The end_time of this AbsenceVacancyDetailRequest.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def accounting_code_allocations(self):
        """Gets the accounting_code_allocations of this AbsenceVacancyDetailRequest.  # noqa: E501

        Accounting code allocations  # noqa: E501

        :return: The accounting_code_allocations of this AbsenceVacancyDetailRequest.  # noqa: E501
        :rtype: list[VacancyAccountingCodeAllocationRequest]
        """
        return self._accounting_code_allocations

    @accounting_code_allocations.setter
    def accounting_code_allocations(self, accounting_code_allocations):
        """Sets the accounting_code_allocations of this AbsenceVacancyDetailRequest.

        Accounting code allocations  # noqa: E501

        :param accounting_code_allocations: The accounting_code_allocations of this AbsenceVacancyDetailRequest.  # noqa: E501
        :type: list[VacancyAccountingCodeAllocationRequest]
        """

        self._accounting_code_allocations = accounting_code_allocations

    @property
    def pay_code(self):
        """Gets the pay_code of this AbsenceVacancyDetailRequest.  # noqa: E501


        :return: The pay_code of this AbsenceVacancyDetailRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._pay_code

    @pay_code.setter
    def pay_code(self, pay_code):
        """Sets the pay_code of this AbsenceVacancyDetailRequest.


        :param pay_code: The pay_code of this AbsenceVacancyDetailRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """

        self._pay_code = pay_code

    @property
    def replacement_employee(self):
        """Gets the replacement_employee of this AbsenceVacancyDetailRequest.  # noqa: E501


        :return: The replacement_employee of this AbsenceVacancyDetailRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._replacement_employee

    @replacement_employee.setter
    def replacement_employee(self, replacement_employee):
        """Sets the replacement_employee of this AbsenceVacancyDetailRequest.


        :param replacement_employee: The replacement_employee of this AbsenceVacancyDetailRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """

        self._replacement_employee = replacement_employee

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbsenceVacancyDetailRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AbsenceVacancyDetailRequest):
            return True

        return self.to_dict() != other.to_dict()
