# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class VacancyDetailSearchResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'notes_to_admin': 'str',
        'absence_detail': 'SimpleAbsenceDetail',
        'vacancy_id': 'int',
        'is_deleted': 'bool',
        'position': 'SimplePosition',
        'created_utc': 'datetime',
        'id': 'int',
        'assignment_id': 'int',
        'substitute': 'SimplePerson',
        'external_assignment_number': 'str',
        'assignment_is_long_term': 'bool',
        'assignment_notes': 'str',
        'location': 'Int32IdNameClass',
        'start': 'datetime',
        'end': 'datetime',
        'actual_duration_minutes': 'int',
        'accounting_codes': 'list[AccountingCodeAllocationResponse]',
        'pay_duration': 'float',
        'pay_unit': 'str',
        'pay_code': 'PayCodeResponse',
        'vacancy_reason': 'Int32IdNameClass',
        'verified': 'bool',
        'verified_at_utc': 'datetime',
        'verify_comment': 'str',
        'verified_by': 'Int32IdNameClass',
        'approval_status': 'str',
        'approval_status_id': 'ApprovalStatusEnum'
    }

    attribute_map = {
        'notes_to_admin': 'notesToAdmin',
        'absence_detail': 'absenceDetail',
        'vacancy_id': 'vacancyId',
        'is_deleted': 'isDeleted',
        'position': 'position',
        'created_utc': 'createdUtc',
        'id': 'id',
        'assignment_id': 'assignmentId',
        'substitute': 'substitute',
        'external_assignment_number': 'externalAssignmentNumber',
        'assignment_is_long_term': 'assignmentIsLongTerm',
        'assignment_notes': 'assignmentNotes',
        'location': 'location',
        'start': 'start',
        'end': 'end',
        'actual_duration_minutes': 'actualDurationMinutes',
        'accounting_codes': 'accountingCodes',
        'pay_duration': 'payDuration',
        'pay_unit': 'payUnit',
        'pay_code': 'payCode',
        'vacancy_reason': 'vacancyReason',
        'verified': 'verified',
        'verified_at_utc': 'verifiedAtUtc',
        'verify_comment': 'verifyComment',
        'verified_by': 'verifiedBy',
        'approval_status': 'approvalStatus',
        'approval_status_id': 'approvalStatusId'
    }

    def __init__(self, notes_to_admin=None, absence_detail=None, vacancy_id=None, is_deleted=None, position=None, created_utc=None, id=None, assignment_id=None, substitute=None, external_assignment_number=None, assignment_is_long_term=None, assignment_notes=None, location=None, start=None, end=None, actual_duration_minutes=None, accounting_codes=None, pay_duration=None, pay_unit=None, pay_code=None, vacancy_reason=None, verified=None, verified_at_utc=None, verify_comment=None, verified_by=None, approval_status=None, approval_status_id=None, local_vars_configuration=None):  # noqa: E501
        """VacancyDetailSearchResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._notes_to_admin = None
        self._absence_detail = None
        self._vacancy_id = None
        self._is_deleted = None
        self._position = None
        self._created_utc = None
        self._id = None
        self._assignment_id = None
        self._substitute = None
        self._external_assignment_number = None
        self._assignment_is_long_term = None
        self._assignment_notes = None
        self._location = None
        self._start = None
        self._end = None
        self._actual_duration_minutes = None
        self._accounting_codes = None
        self._pay_duration = None
        self._pay_unit = None
        self._pay_code = None
        self._vacancy_reason = None
        self._verified = None
        self._verified_at_utc = None
        self._verify_comment = None
        self._verified_by = None
        self._approval_status = None
        self._approval_status_id = None
        self.discriminator = None

        self.notes_to_admin = notes_to_admin
        if absence_detail is not None:
            self.absence_detail = absence_detail
        if vacancy_id is not None:
            self.vacancy_id = vacancy_id
        if is_deleted is not None:
            self.is_deleted = is_deleted
        if position is not None:
            self.position = position
        if created_utc is not None:
            self.created_utc = created_utc
        if id is not None:
            self.id = id
        self.assignment_id = assignment_id
        if substitute is not None:
            self.substitute = substitute
        self.external_assignment_number = external_assignment_number
        self.assignment_is_long_term = assignment_is_long_term
        self.assignment_notes = assignment_notes
        if location is not None:
            self.location = location
        if start is not None:
            self.start = start
        if end is not None:
            self.end = end
        if actual_duration_minutes is not None:
            self.actual_duration_minutes = actual_duration_minutes
        self.accounting_codes = accounting_codes
        if pay_duration is not None:
            self.pay_duration = pay_duration
        self.pay_unit = pay_unit
        if pay_code is not None:
            self.pay_code = pay_code
        if vacancy_reason is not None:
            self.vacancy_reason = vacancy_reason
        if verified is not None:
            self.verified = verified
        self.verified_at_utc = verified_at_utc
        self.verify_comment = verify_comment
        if verified_by is not None:
            self.verified_by = verified_by
        self.approval_status = approval_status
        if approval_status_id is not None:
            self.approval_status_id = approval_status_id

    @property
    def notes_to_admin(self):
        """Gets the notes_to_admin of this VacancyDetailSearchResponse.  # noqa: E501

        Any notes to the admin  # noqa: E501

        :return: The notes_to_admin of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._notes_to_admin

    @notes_to_admin.setter
    def notes_to_admin(self, notes_to_admin):
        """Sets the notes_to_admin of this VacancyDetailSearchResponse.

        Any notes to the admin  # noqa: E501

        :param notes_to_admin: The notes_to_admin of this VacancyDetailSearchResponse.  # noqa: E501
        :type: str
        """

        self._notes_to_admin = notes_to_admin

    @property
    def absence_detail(self):
        """Gets the absence_detail of this VacancyDetailSearchResponse.  # noqa: E501


        :return: The absence_detail of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: SimpleAbsenceDetail
        """
        return self._absence_detail

    @absence_detail.setter
    def absence_detail(self, absence_detail):
        """Sets the absence_detail of this VacancyDetailSearchResponse.


        :param absence_detail: The absence_detail of this VacancyDetailSearchResponse.  # noqa: E501
        :type: SimpleAbsenceDetail
        """

        self._absence_detail = absence_detail

    @property
    def vacancy_id(self):
        """Gets the vacancy_id of this VacancyDetailSearchResponse.  # noqa: E501

        Id of the Vacancy  # noqa: E501

        :return: The vacancy_id of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: int
        """
        return self._vacancy_id

    @vacancy_id.setter
    def vacancy_id(self, vacancy_id):
        """Sets the vacancy_id of this VacancyDetailSearchResponse.

        Id of the Vacancy  # noqa: E501

        :param vacancy_id: The vacancy_id of this VacancyDetailSearchResponse.  # noqa: E501
        :type: int
        """

        self._vacancy_id = vacancy_id

    @property
    def is_deleted(self):
        """Gets the is_deleted of this VacancyDetailSearchResponse.  # noqa: E501

        If the vacancy was deleted  # noqa: E501

        :return: The is_deleted of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this VacancyDetailSearchResponse.

        If the vacancy was deleted  # noqa: E501

        :param is_deleted: The is_deleted of this VacancyDetailSearchResponse.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    @property
    def position(self):
        """Gets the position of this VacancyDetailSearchResponse.  # noqa: E501


        :return: The position of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: SimplePosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this VacancyDetailSearchResponse.


        :param position: The position of this VacancyDetailSearchResponse.  # noqa: E501
        :type: SimplePosition
        """

        self._position = position

    @property
    def created_utc(self):
        """Gets the created_utc of this VacancyDetailSearchResponse.  # noqa: E501

        When the Vacancy Detail was created  # noqa: E501

        :return: The created_utc of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_utc

    @created_utc.setter
    def created_utc(self, created_utc):
        """Sets the created_utc of this VacancyDetailSearchResponse.

        When the Vacancy Detail was created  # noqa: E501

        :param created_utc: The created_utc of this VacancyDetailSearchResponse.  # noqa: E501
        :type: datetime
        """

        self._created_utc = created_utc

    @property
    def id(self):
        """Gets the id of this VacancyDetailSearchResponse.  # noqa: E501

        Id of the Vacancy Detail  # noqa: E501

        :return: The id of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VacancyDetailSearchResponse.

        Id of the Vacancy Detail  # noqa: E501

        :param id: The id of this VacancyDetailSearchResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def assignment_id(self):
        """Gets the assignment_id of this VacancyDetailSearchResponse.  # noqa: E501

        Id of the Assignment  # noqa: E501

        :return: The assignment_id of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: int
        """
        return self._assignment_id

    @assignment_id.setter
    def assignment_id(self, assignment_id):
        """Sets the assignment_id of this VacancyDetailSearchResponse.

        Id of the Assignment  # noqa: E501

        :param assignment_id: The assignment_id of this VacancyDetailSearchResponse.  # noqa: E501
        :type: int
        """

        self._assignment_id = assignment_id

    @property
    def substitute(self):
        """Gets the substitute of this VacancyDetailSearchResponse.  # noqa: E501


        :return: The substitute of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: SimplePerson
        """
        return self._substitute

    @substitute.setter
    def substitute(self, substitute):
        """Sets the substitute of this VacancyDetailSearchResponse.


        :param substitute: The substitute of this VacancyDetailSearchResponse.  # noqa: E501
        :type: SimplePerson
        """

        self._substitute = substitute

    @property
    def external_assignment_number(self):
        """Gets the external_assignment_number of this VacancyDetailSearchResponse.  # noqa: E501

        Assignment number to match another system  # noqa: E501

        :return: The external_assignment_number of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._external_assignment_number

    @external_assignment_number.setter
    def external_assignment_number(self, external_assignment_number):
        """Sets the external_assignment_number of this VacancyDetailSearchResponse.

        Assignment number to match another system  # noqa: E501

        :param external_assignment_number: The external_assignment_number of this VacancyDetailSearchResponse.  # noqa: E501
        :type: str
        """

        self._external_assignment_number = external_assignment_number

    @property
    def assignment_is_long_term(self):
        """Gets the assignment_is_long_term of this VacancyDetailSearchResponse.  # noqa: E501

        Is this assignment considered long term?  # noqa: E501

        :return: The assignment_is_long_term of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: bool
        """
        return self._assignment_is_long_term

    @assignment_is_long_term.setter
    def assignment_is_long_term(self, assignment_is_long_term):
        """Sets the assignment_is_long_term of this VacancyDetailSearchResponse.

        Is this assignment considered long term?  # noqa: E501

        :param assignment_is_long_term: The assignment_is_long_term of this VacancyDetailSearchResponse.  # noqa: E501
        :type: bool
        """

        self._assignment_is_long_term = assignment_is_long_term

    @property
    def assignment_notes(self):
        """Gets the assignment_notes of this VacancyDetailSearchResponse.  # noqa: E501

        Notes about this assignment  # noqa: E501

        :return: The assignment_notes of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._assignment_notes

    @assignment_notes.setter
    def assignment_notes(self, assignment_notes):
        """Sets the assignment_notes of this VacancyDetailSearchResponse.

        Notes about this assignment  # noqa: E501

        :param assignment_notes: The assignment_notes of this VacancyDetailSearchResponse.  # noqa: E501
        :type: str
        """

        self._assignment_notes = assignment_notes

    @property
    def location(self):
        """Gets the location of this VacancyDetailSearchResponse.  # noqa: E501


        :return: The location of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: Int32IdNameClass
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this VacancyDetailSearchResponse.


        :param location: The location of this VacancyDetailSearchResponse.  # noqa: E501
        :type: Int32IdNameClass
        """

        self._location = location

    @property
    def start(self):
        """Gets the start of this VacancyDetailSearchResponse.  # noqa: E501

        When the Vacancy starts  # noqa: E501

        :return: The start of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this VacancyDetailSearchResponse.

        When the Vacancy starts  # noqa: E501

        :param start: The start of this VacancyDetailSearchResponse.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def end(self):
        """Gets the end of this VacancyDetailSearchResponse.  # noqa: E501

        When the Vacancy ends  # noqa: E501

        :return: The end of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """Sets the end of this VacancyDetailSearchResponse.

        When the Vacancy ends  # noqa: E501

        :param end: The end of this VacancyDetailSearchResponse.  # noqa: E501
        :type: datetime
        """

        self._end = end

    @property
    def actual_duration_minutes(self):
        """Gets the actual_duration_minutes of this VacancyDetailSearchResponse.  # noqa: E501

        How long the Vacancy Detail is scheduled (minutes)  # noqa: E501

        :return: The actual_duration_minutes of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: int
        """
        return self._actual_duration_minutes

    @actual_duration_minutes.setter
    def actual_duration_minutes(self, actual_duration_minutes):
        """Sets the actual_duration_minutes of this VacancyDetailSearchResponse.

        How long the Vacancy Detail is scheduled (minutes)  # noqa: E501

        :param actual_duration_minutes: The actual_duration_minutes of this VacancyDetailSearchResponse.  # noqa: E501
        :type: int
        """

        self._actual_duration_minutes = actual_duration_minutes

    @property
    def accounting_codes(self):
        """Gets the accounting_codes of this VacancyDetailSearchResponse.  # noqa: E501

        The Accounting codes associated with the Vacancy  # noqa: E501

        :return: The accounting_codes of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: list[AccountingCodeAllocationResponse]
        """
        return self._accounting_codes

    @accounting_codes.setter
    def accounting_codes(self, accounting_codes):
        """Sets the accounting_codes of this VacancyDetailSearchResponse.

        The Accounting codes associated with the Vacancy  # noqa: E501

        :param accounting_codes: The accounting_codes of this VacancyDetailSearchResponse.  # noqa: E501
        :type: list[AccountingCodeAllocationResponse]
        """

        self._accounting_codes = accounting_codes

    @property
    def pay_duration(self):
        """Gets the pay_duration of this VacancyDetailSearchResponse.  # noqa: E501

        The Calculated Effective Duration (Days or Minutes)  # noqa: E501

        :return: The pay_duration of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: float
        """
        return self._pay_duration

    @pay_duration.setter
    def pay_duration(self, pay_duration):
        """Sets the pay_duration of this VacancyDetailSearchResponse.

        The Calculated Effective Duration (Days or Minutes)  # noqa: E501

        :param pay_duration: The pay_duration of this VacancyDetailSearchResponse.  # noqa: E501
        :type: float
        """

        self._pay_duration = pay_duration

    @property
    def pay_unit(self):
        """Gets the pay_unit of this VacancyDetailSearchResponse.  # noqa: E501

        The pay unit. ('DAYS', 'MINUTES')  # noqa: E501

        :return: The pay_unit of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._pay_unit

    @pay_unit.setter
    def pay_unit(self, pay_unit):
        """Sets the pay_unit of this VacancyDetailSearchResponse.

        The pay unit. ('DAYS', 'MINUTES')  # noqa: E501

        :param pay_unit: The pay_unit of this VacancyDetailSearchResponse.  # noqa: E501
        :type: str
        """

        self._pay_unit = pay_unit

    @property
    def pay_code(self):
        """Gets the pay_code of this VacancyDetailSearchResponse.  # noqa: E501


        :return: The pay_code of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: PayCodeResponse
        """
        return self._pay_code

    @pay_code.setter
    def pay_code(self, pay_code):
        """Sets the pay_code of this VacancyDetailSearchResponse.


        :param pay_code: The pay_code of this VacancyDetailSearchResponse.  # noqa: E501
        :type: PayCodeResponse
        """

        self._pay_code = pay_code

    @property
    def vacancy_reason(self):
        """Gets the vacancy_reason of this VacancyDetailSearchResponse.  # noqa: E501


        :return: The vacancy_reason of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: Int32IdNameClass
        """
        return self._vacancy_reason

    @vacancy_reason.setter
    def vacancy_reason(self, vacancy_reason):
        """Sets the vacancy_reason of this VacancyDetailSearchResponse.


        :param vacancy_reason: The vacancy_reason of this VacancyDetailSearchResponse.  # noqa: E501
        :type: Int32IdNameClass
        """

        self._vacancy_reason = vacancy_reason

    @property
    def verified(self):
        """Gets the verified of this VacancyDetailSearchResponse.  # noqa: E501

        If the Vacancy has been verified  # noqa: E501

        :return: The verified of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this VacancyDetailSearchResponse.

        If the Vacancy has been verified  # noqa: E501

        :param verified: The verified of this VacancyDetailSearchResponse.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    @property
    def verified_at_utc(self):
        """Gets the verified_at_utc of this VacancyDetailSearchResponse.  # noqa: E501

        When the Vacancy was verified  # noqa: E501

        :return: The verified_at_utc of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._verified_at_utc

    @verified_at_utc.setter
    def verified_at_utc(self, verified_at_utc):
        """Sets the verified_at_utc of this VacancyDetailSearchResponse.

        When the Vacancy was verified  # noqa: E501

        :param verified_at_utc: The verified_at_utc of this VacancyDetailSearchResponse.  # noqa: E501
        :type: datetime
        """

        self._verified_at_utc = verified_at_utc

    @property
    def verify_comment(self):
        """Gets the verify_comment of this VacancyDetailSearchResponse.  # noqa: E501

        Comment made when the Vacancy was verified  # noqa: E501

        :return: The verify_comment of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._verify_comment

    @verify_comment.setter
    def verify_comment(self, verify_comment):
        """Sets the verify_comment of this VacancyDetailSearchResponse.

        Comment made when the Vacancy was verified  # noqa: E501

        :param verify_comment: The verify_comment of this VacancyDetailSearchResponse.  # noqa: E501
        :type: str
        """

        self._verify_comment = verify_comment

    @property
    def verified_by(self):
        """Gets the verified_by of this VacancyDetailSearchResponse.  # noqa: E501


        :return: The verified_by of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: Int32IdNameClass
        """
        return self._verified_by

    @verified_by.setter
    def verified_by(self, verified_by):
        """Sets the verified_by of this VacancyDetailSearchResponse.


        :param verified_by: The verified_by of this VacancyDetailSearchResponse.  # noqa: E501
        :type: Int32IdNameClass
        """

        self._verified_by = verified_by

    @property
    def approval_status(self):
        """Gets the approval_status of this VacancyDetailSearchResponse.  # noqa: E501

        The current approval status of the vacancy  # noqa: E501

        :return: The approval_status of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: str
        """
        return self._approval_status

    @approval_status.setter
    def approval_status(self, approval_status):
        """Sets the approval_status of this VacancyDetailSearchResponse.

        The current approval status of the vacancy  # noqa: E501

        :param approval_status: The approval_status of this VacancyDetailSearchResponse.  # noqa: E501
        :type: str
        """

        self._approval_status = approval_status

    @property
    def approval_status_id(self):
        """Gets the approval_status_id of this VacancyDetailSearchResponse.  # noqa: E501


        :return: The approval_status_id of this VacancyDetailSearchResponse.  # noqa: E501
        :rtype: ApprovalStatusEnum
        """
        return self._approval_status_id

    @approval_status_id.setter
    def approval_status_id(self, approval_status_id):
        """Sets the approval_status_id of this VacancyDetailSearchResponse.


        :param approval_status_id: The approval_status_id of this VacancyDetailSearchResponse.  # noqa: E501
        :type: ApprovalStatusEnum
        """

        self._approval_status_id = approval_status_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VacancyDetailSearchResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VacancyDetailSearchResponse):
            return True

        return self.to_dict() != other.to_dict()
