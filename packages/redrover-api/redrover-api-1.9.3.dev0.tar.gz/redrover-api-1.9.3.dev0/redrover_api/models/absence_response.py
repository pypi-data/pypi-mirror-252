# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class AbsenceResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'external_id': 'str',
        'org_id': 'int',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'number_of_days': 'int',
        'is_closed': 'bool',
        'is_deleted': 'bool',
        'approval_status': 'str',
        'notes_to_approver': 'str',
        'admin_only_notes': 'str',
        'total_duration': 'float',
        'total_day_portion': 'float',
        'employee': 'OrgUserEmployeeResponse',
        'absence_details': 'list[AbsenceDetailResponse]',
        'admin_edit_url': 'str',
        'employee_edit_url': 'str',
        'vacancies': 'list[VacancyResponse]'
    }

    attribute_map = {
        'id': 'id',
        'external_id': 'externalId',
        'org_id': 'orgId',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'number_of_days': 'numberOfDays',
        'is_closed': 'isClosed',
        'is_deleted': 'isDeleted',
        'approval_status': 'approvalStatus',
        'notes_to_approver': 'notesToApprover',
        'admin_only_notes': 'adminOnlyNotes',
        'total_duration': 'totalDuration',
        'total_day_portion': 'totalDayPortion',
        'employee': 'employee',
        'absence_details': 'absenceDetails',
        'admin_edit_url': 'adminEditUrl',
        'employee_edit_url': 'employeeEditUrl',
        'vacancies': 'vacancies'
    }

    def __init__(self, id=None, external_id=None, org_id=None, start_time=None, end_time=None, number_of_days=None, is_closed=None, is_deleted=None, approval_status=None, notes_to_approver=None, admin_only_notes=None, total_duration=None, total_day_portion=None, employee=None, absence_details=None, admin_edit_url=None, employee_edit_url=None, vacancies=None, local_vars_configuration=None):  # noqa: E501
        """AbsenceResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._external_id = None
        self._org_id = None
        self._start_time = None
        self._end_time = None
        self._number_of_days = None
        self._is_closed = None
        self._is_deleted = None
        self._approval_status = None
        self._notes_to_approver = None
        self._admin_only_notes = None
        self._total_duration = None
        self._total_day_portion = None
        self._employee = None
        self._absence_details = None
        self._admin_edit_url = None
        self._employee_edit_url = None
        self._vacancies = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.external_id = external_id
        if org_id is not None:
            self.org_id = org_id
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if number_of_days is not None:
            self.number_of_days = number_of_days
        if is_closed is not None:
            self.is_closed = is_closed
        if is_deleted is not None:
            self.is_deleted = is_deleted
        self.approval_status = approval_status
        self.notes_to_approver = notes_to_approver
        self.admin_only_notes = admin_only_notes
        if total_duration is not None:
            self.total_duration = total_duration
        if total_day_portion is not None:
            self.total_day_portion = total_day_portion
        if employee is not None:
            self.employee = employee
        self.absence_details = absence_details
        self.admin_edit_url = admin_edit_url
        self.employee_edit_url = employee_edit_url
        self.vacancies = vacancies

    @property
    def id(self):
        """Gets the id of this AbsenceResponse.  # noqa: E501

        The Red Rover internal Id of Absence (numeric)  # noqa: E501

        :return: The id of this AbsenceResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AbsenceResponse.

        The Red Rover internal Id of Absence (numeric)  # noqa: E501

        :param id: The id of this AbsenceResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def external_id(self):
        """Gets the external_id of this AbsenceResponse.  # noqa: E501

        The external Id of Absence (alpha-numeric)  # noqa: E501

        :return: The external_id of this AbsenceResponse.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this AbsenceResponse.

        The external Id of Absence (alpha-numeric)  # noqa: E501

        :param external_id: The external_id of this AbsenceResponse.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def org_id(self):
        """Gets the org_id of this AbsenceResponse.  # noqa: E501

        The Red Rover internal Id of Organization (numeric)  # noqa: E501

        :return: The org_id of this AbsenceResponse.  # noqa: E501
        :rtype: int
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this AbsenceResponse.

        The Red Rover internal Id of Organization (numeric)  # noqa: E501

        :param org_id: The org_id of this AbsenceResponse.  # noqa: E501
        :type: int
        """

        self._org_id = org_id

    @property
    def start_time(self):
        """Gets the start_time of this AbsenceResponse.  # noqa: E501

        The first date of the Absence  # noqa: E501

        :return: The start_time of this AbsenceResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this AbsenceResponse.

        The first date of the Absence  # noqa: E501

        :param start_time: The start_time of this AbsenceResponse.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this AbsenceResponse.  # noqa: E501

        The last date of the Absence  # noqa: E501

        :return: The end_time of this AbsenceResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this AbsenceResponse.

        The last date of the Absence  # noqa: E501

        :param end_time: The end_time of this AbsenceResponse.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def number_of_days(self):
        """Gets the number_of_days of this AbsenceResponse.  # noqa: E501

        How many days the Absence spans  # noqa: E501

        :return: The number_of_days of this AbsenceResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_days

    @number_of_days.setter
    def number_of_days(self, number_of_days):
        """Sets the number_of_days of this AbsenceResponse.

        How many days the Absence spans  # noqa: E501

        :param number_of_days: The number_of_days of this AbsenceResponse.  # noqa: E501
        :type: int
        """

        self._number_of_days = number_of_days

    @property
    def is_closed(self):
        """Gets the is_closed of this AbsenceResponse.  # noqa: E501

        If the Absence is closed  # noqa: E501

        :return: The is_closed of this AbsenceResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_closed

    @is_closed.setter
    def is_closed(self, is_closed):
        """Sets the is_closed of this AbsenceResponse.

        If the Absence is closed  # noqa: E501

        :param is_closed: The is_closed of this AbsenceResponse.  # noqa: E501
        :type: bool
        """

        self._is_closed = is_closed

    @property
    def is_deleted(self):
        """Gets the is_deleted of this AbsenceResponse.  # noqa: E501

        If the Absence is deleted  # noqa: E501

        :return: The is_deleted of this AbsenceResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this AbsenceResponse.

        If the Absence is deleted  # noqa: E501

        :param is_deleted: The is_deleted of this AbsenceResponse.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    @property
    def approval_status(self):
        """Gets the approval_status of this AbsenceResponse.  # noqa: E501

        The approval status of the Absence  # noqa: E501

        :return: The approval_status of this AbsenceResponse.  # noqa: E501
        :rtype: str
        """
        return self._approval_status

    @approval_status.setter
    def approval_status(self, approval_status):
        """Sets the approval_status of this AbsenceResponse.

        The approval status of the Absence  # noqa: E501

        :param approval_status: The approval_status of this AbsenceResponse.  # noqa: E501
        :type: str
        """

        self._approval_status = approval_status

    @property
    def notes_to_approver(self):
        """Gets the notes_to_approver of this AbsenceResponse.  # noqa: E501

        Any notes that are meant to go to the person who will approve this Absence  # noqa: E501

        :return: The notes_to_approver of this AbsenceResponse.  # noqa: E501
        :rtype: str
        """
        return self._notes_to_approver

    @notes_to_approver.setter
    def notes_to_approver(self, notes_to_approver):
        """Sets the notes_to_approver of this AbsenceResponse.

        Any notes that are meant to go to the person who will approve this Absence  # noqa: E501

        :param notes_to_approver: The notes_to_approver of this AbsenceResponse.  # noqa: E501
        :type: str
        """

        self._notes_to_approver = notes_to_approver

    @property
    def admin_only_notes(self):
        """Gets the admin_only_notes of this AbsenceResponse.  # noqa: E501

        Any notes that are entered by an admin for this Absence  # noqa: E501

        :return: The admin_only_notes of this AbsenceResponse.  # noqa: E501
        :rtype: str
        """
        return self._admin_only_notes

    @admin_only_notes.setter
    def admin_only_notes(self, admin_only_notes):
        """Sets the admin_only_notes of this AbsenceResponse.

        Any notes that are entered by an admin for this Absence  # noqa: E501

        :param admin_only_notes: The admin_only_notes of this AbsenceResponse.  # noqa: E501
        :type: str
        """

        self._admin_only_notes = admin_only_notes

    @property
    def total_duration(self):
        """Gets the total_duration of this AbsenceResponse.  # noqa: E501

        The total duration of this absence (minutes)  # noqa: E501

        :return: The total_duration of this AbsenceResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_duration

    @total_duration.setter
    def total_duration(self, total_duration):
        """Sets the total_duration of this AbsenceResponse.

        The total duration of this absence (minutes)  # noqa: E501

        :param total_duration: The total_duration of this AbsenceResponse.  # noqa: E501
        :type: float
        """

        self._total_duration = total_duration

    @property
    def total_day_portion(self):
        """Gets the total_day_portion of this AbsenceResponse.  # noqa: E501

        The total duration of this absence (days)  # noqa: E501

        :return: The total_day_portion of this AbsenceResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_day_portion

    @total_day_portion.setter
    def total_day_portion(self, total_day_portion):
        """Sets the total_day_portion of this AbsenceResponse.

        The total duration of this absence (days)  # noqa: E501

        :param total_day_portion: The total_day_portion of this AbsenceResponse.  # noqa: E501
        :type: float
        """

        self._total_day_portion = total_day_portion

    @property
    def employee(self):
        """Gets the employee of this AbsenceResponse.  # noqa: E501


        :return: The employee of this AbsenceResponse.  # noqa: E501
        :rtype: OrgUserEmployeeResponse
        """
        return self._employee

    @employee.setter
    def employee(self, employee):
        """Sets the employee of this AbsenceResponse.


        :param employee: The employee of this AbsenceResponse.  # noqa: E501
        :type: OrgUserEmployeeResponse
        """

        self._employee = employee

    @property
    def absence_details(self):
        """Gets the absence_details of this AbsenceResponse.  # noqa: E501

        The details of the Absence  # noqa: E501

        :return: The absence_details of this AbsenceResponse.  # noqa: E501
        :rtype: list[AbsenceDetailResponse]
        """
        return self._absence_details

    @absence_details.setter
    def absence_details(self, absence_details):
        """Sets the absence_details of this AbsenceResponse.

        The details of the Absence  # noqa: E501

        :param absence_details: The absence_details of this AbsenceResponse.  # noqa: E501
        :type: list[AbsenceDetailResponse]
        """

        self._absence_details = absence_details

    @property
    def admin_edit_url(self):
        """Gets the admin_edit_url of this AbsenceResponse.  # noqa: E501

        The Url that the Admin can edit the Absence  # noqa: E501

        :return: The admin_edit_url of this AbsenceResponse.  # noqa: E501
        :rtype: str
        """
        return self._admin_edit_url

    @admin_edit_url.setter
    def admin_edit_url(self, admin_edit_url):
        """Sets the admin_edit_url of this AbsenceResponse.

        The Url that the Admin can edit the Absence  # noqa: E501

        :param admin_edit_url: The admin_edit_url of this AbsenceResponse.  # noqa: E501
        :type: str
        """

        self._admin_edit_url = admin_edit_url

    @property
    def employee_edit_url(self):
        """Gets the employee_edit_url of this AbsenceResponse.  # noqa: E501

        The Url that the Employee can edit the Absence  # noqa: E501

        :return: The employee_edit_url of this AbsenceResponse.  # noqa: E501
        :rtype: str
        """
        return self._employee_edit_url

    @employee_edit_url.setter
    def employee_edit_url(self, employee_edit_url):
        """Sets the employee_edit_url of this AbsenceResponse.

        The Url that the Employee can edit the Absence  # noqa: E501

        :param employee_edit_url: The employee_edit_url of this AbsenceResponse.  # noqa: E501
        :type: str
        """

        self._employee_edit_url = employee_edit_url

    @property
    def vacancies(self):
        """Gets the vacancies of this AbsenceResponse.  # noqa: E501

        The Vacancies associated with this Absence  # noqa: E501

        :return: The vacancies of this AbsenceResponse.  # noqa: E501
        :rtype: list[VacancyResponse]
        """
        return self._vacancies

    @vacancies.setter
    def vacancies(self, vacancies):
        """Sets the vacancies of this AbsenceResponse.

        The Vacancies associated with this Absence  # noqa: E501

        :param vacancies: The vacancies of this AbsenceResponse.  # noqa: E501
        :type: list[VacancyResponse]
        """

        self._vacancies = vacancies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbsenceResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AbsenceResponse):
            return True

        return self.to_dict() != other.to_dict()
