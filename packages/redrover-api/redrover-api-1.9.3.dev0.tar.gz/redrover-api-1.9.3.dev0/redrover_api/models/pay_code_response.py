# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class PayCodeResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'code': 'str',
        'hourly_rate': 'float',
        'unit_rate': 'float',
        'half_day_rate': 'float',
        'full_day_rate': 'float',
        'valid_until_utc': 'datetime',
        'name': 'str',
        'id': 'int',
        'external_id': 'str'
    }

    attribute_map = {
        'code': 'code',
        'hourly_rate': 'hourlyRate',
        'unit_rate': 'unitRate',
        'half_day_rate': 'halfDayRate',
        'full_day_rate': 'fullDayRate',
        'valid_until_utc': 'validUntilUtc',
        'name': 'name',
        'id': 'id',
        'external_id': 'externalId'
    }

    def __init__(self, code=None, hourly_rate=None, unit_rate=None, half_day_rate=None, full_day_rate=None, valid_until_utc=None, name=None, id=None, external_id=None, local_vars_configuration=None):  # noqa: E501
        """PayCodeResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._code = None
        self._hourly_rate = None
        self._unit_rate = None
        self._half_day_rate = None
        self._full_day_rate = None
        self._valid_until_utc = None
        self._name = None
        self._id = None
        self._external_id = None
        self.discriminator = None

        self.code = code
        self.hourly_rate = hourly_rate
        self.unit_rate = unit_rate
        self.half_day_rate = half_day_rate
        self.full_day_rate = full_day_rate
        if valid_until_utc is not None:
            self.valid_until_utc = valid_until_utc
        self.name = name
        if id is not None:
            self.id = id
        self.external_id = external_id

    @property
    def code(self):
        """Gets the code of this PayCodeResponse.  # noqa: E501

        The Code used  # noqa: E501

        :return: The code of this PayCodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PayCodeResponse.

        The Code used  # noqa: E501

        :param code: The code of this PayCodeResponse.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def hourly_rate(self):
        """Gets the hourly_rate of this PayCodeResponse.  # noqa: E501

        Hourly rate (decimal 7,2)  # noqa: E501

        :return: The hourly_rate of this PayCodeResponse.  # noqa: E501
        :rtype: float
        """
        return self._hourly_rate

    @hourly_rate.setter
    def hourly_rate(self, hourly_rate):
        """Sets the hourly_rate of this PayCodeResponse.

        Hourly rate (decimal 7,2)  # noqa: E501

        :param hourly_rate: The hourly_rate of this PayCodeResponse.  # noqa: E501
        :type: float
        """

        self._hourly_rate = hourly_rate

    @property
    def unit_rate(self):
        """Gets the unit_rate of this PayCodeResponse.  # noqa: E501

        Unit rate (decimal 7,2)  # noqa: E501

        :return: The unit_rate of this PayCodeResponse.  # noqa: E501
        :rtype: float
        """
        return self._unit_rate

    @unit_rate.setter
    def unit_rate(self, unit_rate):
        """Sets the unit_rate of this PayCodeResponse.

        Unit rate (decimal 7,2)  # noqa: E501

        :param unit_rate: The unit_rate of this PayCodeResponse.  # noqa: E501
        :type: float
        """

        self._unit_rate = unit_rate

    @property
    def half_day_rate(self):
        """Gets the half_day_rate of this PayCodeResponse.  # noqa: E501

        Half day rate (decimal 7,2)  # noqa: E501

        :return: The half_day_rate of this PayCodeResponse.  # noqa: E501
        :rtype: float
        """
        return self._half_day_rate

    @half_day_rate.setter
    def half_day_rate(self, half_day_rate):
        """Sets the half_day_rate of this PayCodeResponse.

        Half day rate (decimal 7,2)  # noqa: E501

        :param half_day_rate: The half_day_rate of this PayCodeResponse.  # noqa: E501
        :type: float
        """

        self._half_day_rate = half_day_rate

    @property
    def full_day_rate(self):
        """Gets the full_day_rate of this PayCodeResponse.  # noqa: E501

        Full day rate (decimal 7,2)  # noqa: E501

        :return: The full_day_rate of this PayCodeResponse.  # noqa: E501
        :rtype: float
        """
        return self._full_day_rate

    @full_day_rate.setter
    def full_day_rate(self, full_day_rate):
        """Sets the full_day_rate of this PayCodeResponse.

        Full day rate (decimal 7,2)  # noqa: E501

        :param full_day_rate: The full_day_rate of this PayCodeResponse.  # noqa: E501
        :type: float
        """

        self._full_day_rate = full_day_rate

    @property
    def valid_until_utc(self):
        """Gets the valid_until_utc of this PayCodeResponse.  # noqa: E501

        When the pay code is valid until  # noqa: E501

        :return: The valid_until_utc of this PayCodeResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_until_utc

    @valid_until_utc.setter
    def valid_until_utc(self, valid_until_utc):
        """Sets the valid_until_utc of this PayCodeResponse.

        When the pay code is valid until  # noqa: E501

        :param valid_until_utc: The valid_until_utc of this PayCodeResponse.  # noqa: E501
        :type: datetime
        """

        self._valid_until_utc = valid_until_utc

    @property
    def name(self):
        """Gets the name of this PayCodeResponse.  # noqa: E501


        :return: The name of this PayCodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PayCodeResponse.


        :param name: The name of this PayCodeResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def id(self):
        """Gets the id of this PayCodeResponse.  # noqa: E501


        :return: The id of this PayCodeResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PayCodeResponse.


        :param id: The id of this PayCodeResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def external_id(self):
        """Gets the external_id of this PayCodeResponse.  # noqa: E501


        :return: The external_id of this PayCodeResponse.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this PayCodeResponse.


        :param external_id: The external_id of this PayCodeResponse.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PayCodeResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PayCodeResponse):
            return True

        return self.to_dict() != other.to_dict()
