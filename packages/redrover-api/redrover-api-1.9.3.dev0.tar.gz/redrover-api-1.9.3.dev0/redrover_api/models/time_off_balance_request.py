# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class TimeOffBalanceRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'absence_reason': 'Int32LocatorRequest',
        'absence_reason_category': 'Int32LocatorRequest',
        'school_year': 'Int32LocatorRequest',
        'as_of': 'datetime',
        'absence_reason_tracking_type_id': 'AbsenceReasonTrackingTypeEnum',
        'balance': 'float'
    }

    attribute_map = {
        'absence_reason': 'absenceReason',
        'absence_reason_category': 'absenceReasonCategory',
        'school_year': 'schoolYear',
        'as_of': 'asOf',
        'absence_reason_tracking_type_id': 'absenceReasonTrackingTypeId',
        'balance': 'balance'
    }

    def __init__(self, absence_reason=None, absence_reason_category=None, school_year=None, as_of=None, absence_reason_tracking_type_id=None, balance=None, local_vars_configuration=None):  # noqa: E501
        """TimeOffBalanceRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._absence_reason = None
        self._absence_reason_category = None
        self._school_year = None
        self._as_of = None
        self._absence_reason_tracking_type_id = None
        self._balance = None
        self.discriminator = None

        if absence_reason is not None:
            self.absence_reason = absence_reason
        if absence_reason_category is not None:
            self.absence_reason_category = absence_reason_category
        if school_year is not None:
            self.school_year = school_year
        self.as_of = as_of
        if absence_reason_tracking_type_id is not None:
            self.absence_reason_tracking_type_id = absence_reason_tracking_type_id
        self.balance = balance

    @property
    def absence_reason(self):
        """Gets the absence_reason of this TimeOffBalanceRequest.  # noqa: E501


        :return: The absence_reason of this TimeOffBalanceRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._absence_reason

    @absence_reason.setter
    def absence_reason(self, absence_reason):
        """Sets the absence_reason of this TimeOffBalanceRequest.


        :param absence_reason: The absence_reason of this TimeOffBalanceRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """

        self._absence_reason = absence_reason

    @property
    def absence_reason_category(self):
        """Gets the absence_reason_category of this TimeOffBalanceRequest.  # noqa: E501


        :return: The absence_reason_category of this TimeOffBalanceRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._absence_reason_category

    @absence_reason_category.setter
    def absence_reason_category(self, absence_reason_category):
        """Sets the absence_reason_category of this TimeOffBalanceRequest.


        :param absence_reason_category: The absence_reason_category of this TimeOffBalanceRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """

        self._absence_reason_category = absence_reason_category

    @property
    def school_year(self):
        """Gets the school_year of this TimeOffBalanceRequest.  # noqa: E501


        :return: The school_year of this TimeOffBalanceRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._school_year

    @school_year.setter
    def school_year(self, school_year):
        """Sets the school_year of this TimeOffBalanceRequest.


        :param school_year: The school_year of this TimeOffBalanceRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """

        self._school_year = school_year

    @property
    def as_of(self):
        """Gets the as_of of this TimeOffBalanceRequest.  # noqa: E501

        The 'AsOf' date  # noqa: E501

        :return: The as_of of this TimeOffBalanceRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._as_of

    @as_of.setter
    def as_of(self, as_of):
        """Sets the as_of of this TimeOffBalanceRequest.

        The 'AsOf' date  # noqa: E501

        :param as_of: The as_of of this TimeOffBalanceRequest.  # noqa: E501
        :type: datetime
        """

        self._as_of = as_of

    @property
    def absence_reason_tracking_type_id(self):
        """Gets the absence_reason_tracking_type_id of this TimeOffBalanceRequest.  # noqa: E501


        :return: The absence_reason_tracking_type_id of this TimeOffBalanceRequest.  # noqa: E501
        :rtype: AbsenceReasonTrackingTypeEnum
        """
        return self._absence_reason_tracking_type_id

    @absence_reason_tracking_type_id.setter
    def absence_reason_tracking_type_id(self, absence_reason_tracking_type_id):
        """Sets the absence_reason_tracking_type_id of this TimeOffBalanceRequest.


        :param absence_reason_tracking_type_id: The absence_reason_tracking_type_id of this TimeOffBalanceRequest.  # noqa: E501
        :type: AbsenceReasonTrackingTypeEnum
        """

        self._absence_reason_tracking_type_id = absence_reason_tracking_type_id

    @property
    def balance(self):
        """Gets the balance of this TimeOffBalanceRequest.  # noqa: E501

        The balance for this time off balance request  # noqa: E501

        :return: The balance of this TimeOffBalanceRequest.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this TimeOffBalanceRequest.

        The balance for this time off balance request  # noqa: E501

        :param balance: The balance of this TimeOffBalanceRequest.  # noqa: E501
        :type: float
        """

        self._balance = balance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeOffBalanceRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeOffBalanceRequest):
            return True

        return self.to_dict() != other.to_dict()
