# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class AbsenceReasonResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'external_id': 'str',
        'allow_negative_balance': 'bool',
        'name': 'str',
        'description': 'str',
        'category': 'AbsenceReasonCategoryResponse',
        'requires_notes_to_admin': 'bool',
        'requires_approval': 'bool',
        'code': 'str',
        'position_type_ids': 'list[int]',
        'contract_ids': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'external_id': 'externalId',
        'allow_negative_balance': 'allowNegativeBalance',
        'name': 'name',
        'description': 'description',
        'category': 'category',
        'requires_notes_to_admin': 'requiresNotesToAdmin',
        'requires_approval': 'requiresApproval',
        'code': 'code',
        'position_type_ids': 'positionTypeIds',
        'contract_ids': 'contractIds'
    }

    def __init__(self, id=None, external_id=None, allow_negative_balance=None, name=None, description=None, category=None, requires_notes_to_admin=None, requires_approval=None, code=None, position_type_ids=None, contract_ids=None, local_vars_configuration=None):  # noqa: E501
        """AbsenceReasonResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._external_id = None
        self._allow_negative_balance = None
        self._name = None
        self._description = None
        self._category = None
        self._requires_notes_to_admin = None
        self._requires_approval = None
        self._code = None
        self._position_type_ids = None
        self._contract_ids = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.external_id = external_id
        if allow_negative_balance is not None:
            self.allow_negative_balance = allow_negative_balance
        self.name = name
        self.description = description
        if category is not None:
            self.category = category
        self.requires_notes_to_admin = requires_notes_to_admin
        if requires_approval is not None:
            self.requires_approval = requires_approval
        self.code = code
        self.position_type_ids = position_type_ids
        self.contract_ids = contract_ids

    @property
    def id(self):
        """Gets the id of this AbsenceReasonResponse.  # noqa: E501

        The Red Rover internal Id of AbsenceReason (numeric)  # noqa: E501

        :return: The id of this AbsenceReasonResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AbsenceReasonResponse.

        The Red Rover internal Id of AbsenceReason (numeric)  # noqa: E501

        :param id: The id of this AbsenceReasonResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def external_id(self):
        """Gets the external_id of this AbsenceReasonResponse.  # noqa: E501

        The external Id of AbsenceReason (alpha-numeric)  # noqa: E501

        :return: The external_id of this AbsenceReasonResponse.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this AbsenceReasonResponse.

        The external Id of AbsenceReason (alpha-numeric)  # noqa: E501

        :param external_id: The external_id of this AbsenceReasonResponse.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def allow_negative_balance(self):
        """Gets the allow_negative_balance of this AbsenceReasonResponse.  # noqa: E501

        If negative balances are allowed for this Absence Reason  # noqa: E501

        :return: The allow_negative_balance of this AbsenceReasonResponse.  # noqa: E501
        :rtype: bool
        """
        return self._allow_negative_balance

    @allow_negative_balance.setter
    def allow_negative_balance(self, allow_negative_balance):
        """Sets the allow_negative_balance of this AbsenceReasonResponse.

        If negative balances are allowed for this Absence Reason  # noqa: E501

        :param allow_negative_balance: The allow_negative_balance of this AbsenceReasonResponse.  # noqa: E501
        :type: bool
        """

        self._allow_negative_balance = allow_negative_balance

    @property
    def name(self):
        """Gets the name of this AbsenceReasonResponse.  # noqa: E501

        The Absence Reason's name  # noqa: E501

        :return: The name of this AbsenceReasonResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AbsenceReasonResponse.

        The Absence Reason's name  # noqa: E501

        :param name: The name of this AbsenceReasonResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AbsenceReasonResponse.  # noqa: E501

        A detailed description of the Absence Reason  # noqa: E501

        :return: The description of this AbsenceReasonResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AbsenceReasonResponse.

        A detailed description of the Absence Reason  # noqa: E501

        :param description: The description of this AbsenceReasonResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def category(self):
        """Gets the category of this AbsenceReasonResponse.  # noqa: E501


        :return: The category of this AbsenceReasonResponse.  # noqa: E501
        :rtype: AbsenceReasonCategoryResponse
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AbsenceReasonResponse.


        :param category: The category of this AbsenceReasonResponse.  # noqa: E501
        :type: AbsenceReasonCategoryResponse
        """

        self._category = category

    @property
    def requires_notes_to_admin(self):
        """Gets the requires_notes_to_admin of this AbsenceReasonResponse.  # noqa: E501

        If this Absence Reason requires a note to the Administrator  # noqa: E501

        :return: The requires_notes_to_admin of this AbsenceReasonResponse.  # noqa: E501
        :rtype: bool
        """
        return self._requires_notes_to_admin

    @requires_notes_to_admin.setter
    def requires_notes_to_admin(self, requires_notes_to_admin):
        """Sets the requires_notes_to_admin of this AbsenceReasonResponse.

        If this Absence Reason requires a note to the Administrator  # noqa: E501

        :param requires_notes_to_admin: The requires_notes_to_admin of this AbsenceReasonResponse.  # noqa: E501
        :type: bool
        """

        self._requires_notes_to_admin = requires_notes_to_admin

    @property
    def requires_approval(self):
        """Gets the requires_approval of this AbsenceReasonResponse.  # noqa: E501

        If this Absence Reason requires an approval  # noqa: E501

        :return: The requires_approval of this AbsenceReasonResponse.  # noqa: E501
        :rtype: bool
        """
        return self._requires_approval

    @requires_approval.setter
    def requires_approval(self, requires_approval):
        """Sets the requires_approval of this AbsenceReasonResponse.

        If this Absence Reason requires an approval  # noqa: E501

        :param requires_approval: The requires_approval of this AbsenceReasonResponse.  # noqa: E501
        :type: bool
        """

        self._requires_approval = requires_approval

    @property
    def code(self):
        """Gets the code of this AbsenceReasonResponse.  # noqa: E501

        The 'Code' assigned to this Absence Reason. For external purposes  # noqa: E501

        :return: The code of this AbsenceReasonResponse.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this AbsenceReasonResponse.

        The 'Code' assigned to this Absence Reason. For external purposes  # noqa: E501

        :param code: The code of this AbsenceReasonResponse.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def position_type_ids(self):
        """Gets the position_type_ids of this AbsenceReasonResponse.  # noqa: E501

        Position Type Ids that are associated with this Absence Reason  # noqa: E501

        :return: The position_type_ids of this AbsenceReasonResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._position_type_ids

    @position_type_ids.setter
    def position_type_ids(self, position_type_ids):
        """Sets the position_type_ids of this AbsenceReasonResponse.

        Position Type Ids that are associated with this Absence Reason  # noqa: E501

        :param position_type_ids: The position_type_ids of this AbsenceReasonResponse.  # noqa: E501
        :type: list[int]
        """

        self._position_type_ids = position_type_ids

    @property
    def contract_ids(self):
        """Gets the contract_ids of this AbsenceReasonResponse.  # noqa: E501

        Contract Ids that are associated with this Absence Reason  # noqa: E501

        :return: The contract_ids of this AbsenceReasonResponse.  # noqa: E501
        :rtype: list[int]
        """
        return self._contract_ids

    @contract_ids.setter
    def contract_ids(self, contract_ids):
        """Sets the contract_ids of this AbsenceReasonResponse.

        Contract Ids that are associated with this Absence Reason  # noqa: E501

        :param contract_ids: The contract_ids of this AbsenceReasonResponse.  # noqa: E501
        :type: list[int]
        """

        self._contract_ids = contract_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbsenceReasonResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AbsenceReasonResponse):
            return True

        return self.to_dict() != other.to_dict()
