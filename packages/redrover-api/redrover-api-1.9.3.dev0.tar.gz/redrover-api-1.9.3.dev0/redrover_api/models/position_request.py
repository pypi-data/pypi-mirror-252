# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class PositionRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'external_id': 'str',
        'name': 'str',
        'position_schedule_mode_id': 'PositionScheduleModeEnum',
        'contract': 'Int32LocatorRequest',
        'position_type': 'Int32LocatorRequest',
        'hours_per_full_work_day': 'float',
        'needs_replacement': 'NeedsReplacementEnum',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'is_staff_augmentation': 'bool',
        'fte': 'float',
        'qualified_for_pto': 'bool',
        'qualified_for_paid_holidays': 'bool',
        'qualified_for_pto_as_of': 'datetime',
        'qualified_for_paid_holidays_as_of': 'datetime',
        'default_job_pay_override': 'float',
        'code': 'str',
        'schedules': 'list[PositionScheduleRequest]',
        'replace_existing_position_jobs': 'bool',
        'allowed_location_ids': 'list[Int32LocatorRequest]',
        'other_jobs': 'list[PositionJobRequest]',
        'primary_job': 'PositionJobRequest'
    }

    attribute_map = {
        'external_id': 'externalId',
        'name': 'name',
        'position_schedule_mode_id': 'positionScheduleModeId',
        'contract': 'contract',
        'position_type': 'positionType',
        'hours_per_full_work_day': 'hoursPerFullWorkDay',
        'needs_replacement': 'needsReplacement',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'is_staff_augmentation': 'isStaffAugmentation',
        'fte': 'fte',
        'qualified_for_pto': 'qualifiedForPto',
        'qualified_for_paid_holidays': 'qualifiedForPaidHolidays',
        'qualified_for_pto_as_of': 'qualifiedForPtoAsOf',
        'qualified_for_paid_holidays_as_of': 'qualifiedForPaidHolidaysAsOf',
        'default_job_pay_override': 'defaultJobPayOverride',
        'code': 'code',
        'schedules': 'schedules',
        'replace_existing_position_jobs': 'replaceExistingPositionJobs',
        'allowed_location_ids': 'allowedLocationIds',
        'other_jobs': 'otherJobs',
        'primary_job': 'primaryJob'
    }

    def __init__(self, external_id=None, name=None, position_schedule_mode_id=None, contract=None, position_type=None, hours_per_full_work_day=None, needs_replacement=None, start_date=None, end_date=None, is_staff_augmentation=None, fte=None, qualified_for_pto=None, qualified_for_paid_holidays=None, qualified_for_pto_as_of=None, qualified_for_paid_holidays_as_of=None, default_job_pay_override=None, code=None, schedules=None, replace_existing_position_jobs=None, allowed_location_ids=None, other_jobs=None, primary_job=None, local_vars_configuration=None):  # noqa: E501
        """PositionRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._external_id = None
        self._name = None
        self._position_schedule_mode_id = None
        self._contract = None
        self._position_type = None
        self._hours_per_full_work_day = None
        self._needs_replacement = None
        self._start_date = None
        self._end_date = None
        self._is_staff_augmentation = None
        self._fte = None
        self._qualified_for_pto = None
        self._qualified_for_paid_holidays = None
        self._qualified_for_pto_as_of = None
        self._qualified_for_paid_holidays_as_of = None
        self._default_job_pay_override = None
        self._code = None
        self._schedules = None
        self._replace_existing_position_jobs = None
        self._allowed_location_ids = None
        self._other_jobs = None
        self._primary_job = None
        self.discriminator = None

        self.external_id = external_id
        self.name = name
        if position_schedule_mode_id is not None:
            self.position_schedule_mode_id = position_schedule_mode_id
        self.contract = contract
        self.position_type = position_type
        self.hours_per_full_work_day = hours_per_full_work_day
        if needs_replacement is not None:
            self.needs_replacement = needs_replacement
        self.start_date = start_date
        self.end_date = end_date
        self.is_staff_augmentation = is_staff_augmentation
        self.fte = fte
        self.qualified_for_pto = qualified_for_pto
        self.qualified_for_paid_holidays = qualified_for_paid_holidays
        self.qualified_for_pto_as_of = qualified_for_pto_as_of
        self.qualified_for_paid_holidays_as_of = qualified_for_paid_holidays_as_of
        self.default_job_pay_override = default_job_pay_override
        self.code = code
        self.schedules = schedules
        if replace_existing_position_jobs is not None:
            self.replace_existing_position_jobs = replace_existing_position_jobs
        self.allowed_location_ids = allowed_location_ids
        self.other_jobs = other_jobs
        if primary_job is not None:
            self.primary_job = primary_job

    @property
    def external_id(self):
        """Gets the external_id of this PositionRequest.  # noqa: E501

        The external Id of SchoolYear (alpha-numeric)  # noqa: E501

        :return: The external_id of this PositionRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this PositionRequest.

        The external Id of SchoolYear (alpha-numeric)  # noqa: E501

        :param external_id: The external_id of this PositionRequest.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def name(self):
        """Gets the name of this PositionRequest.  # noqa: E501

        The Position's name  # noqa: E501

        :return: The name of this PositionRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PositionRequest.

        The Position's name  # noqa: E501

        :param name: The name of this PositionRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def position_schedule_mode_id(self):
        """Gets the position_schedule_mode_id of this PositionRequest.  # noqa: E501


        :return: The position_schedule_mode_id of this PositionRequest.  # noqa: E501
        :rtype: PositionScheduleModeEnum
        """
        return self._position_schedule_mode_id

    @position_schedule_mode_id.setter
    def position_schedule_mode_id(self, position_schedule_mode_id):
        """Sets the position_schedule_mode_id of this PositionRequest.


        :param position_schedule_mode_id: The position_schedule_mode_id of this PositionRequest.  # noqa: E501
        :type: PositionScheduleModeEnum
        """

        self._position_schedule_mode_id = position_schedule_mode_id

    @property
    def contract(self):
        """Gets the contract of this PositionRequest.  # noqa: E501


        :return: The contract of this PositionRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """Sets the contract of this PositionRequest.


        :param contract: The contract of this PositionRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """
        if self.local_vars_configuration.client_side_validation and contract is None:  # noqa: E501
            raise ValueError("Invalid value for `contract`, must not be `None`")  # noqa: E501

        self._contract = contract

    @property
    def position_type(self):
        """Gets the position_type of this PositionRequest.  # noqa: E501


        :return: The position_type of this PositionRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._position_type

    @position_type.setter
    def position_type(self, position_type):
        """Sets the position_type of this PositionRequest.


        :param position_type: The position_type of this PositionRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """
        if self.local_vars_configuration.client_side_validation and position_type is None:  # noqa: E501
            raise ValueError("Invalid value for `position_type`, must not be `None`")  # noqa: E501

        self._position_type = position_type

    @property
    def hours_per_full_work_day(self):
        """Gets the hours_per_full_work_day of this PositionRequest.  # noqa: E501

        Amount of hours per a full workday (hours)  # noqa: E501

        :return: The hours_per_full_work_day of this PositionRequest.  # noqa: E501
        :rtype: float
        """
        return self._hours_per_full_work_day

    @hours_per_full_work_day.setter
    def hours_per_full_work_day(self, hours_per_full_work_day):
        """Sets the hours_per_full_work_day of this PositionRequest.

        Amount of hours per a full workday (hours)  # noqa: E501

        :param hours_per_full_work_day: The hours_per_full_work_day of this PositionRequest.  # noqa: E501
        :type: float
        """

        self._hours_per_full_work_day = hours_per_full_work_day

    @property
    def needs_replacement(self):
        """Gets the needs_replacement of this PositionRequest.  # noqa: E501


        :return: The needs_replacement of this PositionRequest.  # noqa: E501
        :rtype: NeedsReplacementEnum
        """
        return self._needs_replacement

    @needs_replacement.setter
    def needs_replacement(self, needs_replacement):
        """Sets the needs_replacement of this PositionRequest.


        :param needs_replacement: The needs_replacement of this PositionRequest.  # noqa: E501
        :type: NeedsReplacementEnum
        """

        self._needs_replacement = needs_replacement

    @property
    def start_date(self):
        """Gets the start_date of this PositionRequest.  # noqa: E501

        The StartDate of the Position  # noqa: E501

        :return: The start_date of this PositionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this PositionRequest.

        The StartDate of the Position  # noqa: E501

        :param start_date: The start_date of this PositionRequest.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this PositionRequest.  # noqa: E501

        The EndDate of the Position  # noqa: E501

        :return: The end_date of this PositionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this PositionRequest.

        The EndDate of the Position  # noqa: E501

        :param end_date: The end_date of this PositionRequest.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def is_staff_augmentation(self):
        """Gets the is_staff_augmentation of this PositionRequest.  # noqa: E501

        Is the Position for staff augmentation  # noqa: E501

        :return: The is_staff_augmentation of this PositionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_staff_augmentation

    @is_staff_augmentation.setter
    def is_staff_augmentation(self, is_staff_augmentation):
        """Sets the is_staff_augmentation of this PositionRequest.

        Is the Position for staff augmentation  # noqa: E501

        :param is_staff_augmentation: The is_staff_augmentation of this PositionRequest.  # noqa: E501
        :type: bool
        """

        self._is_staff_augmentation = is_staff_augmentation

    @property
    def fte(self):
        """Gets the fte of this PositionRequest.  # noqa: E501


        :return: The fte of this PositionRequest.  # noqa: E501
        :rtype: float
        """
        return self._fte

    @fte.setter
    def fte(self, fte):
        """Sets the fte of this PositionRequest.


        :param fte: The fte of this PositionRequest.  # noqa: E501
        :type: float
        """

        self._fte = fte

    @property
    def qualified_for_pto(self):
        """Gets the qualified_for_pto of this PositionRequest.  # noqa: E501

        Is the Position qualified for paid time off  # noqa: E501

        :return: The qualified_for_pto of this PositionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._qualified_for_pto

    @qualified_for_pto.setter
    def qualified_for_pto(self, qualified_for_pto):
        """Sets the qualified_for_pto of this PositionRequest.

        Is the Position qualified for paid time off  # noqa: E501

        :param qualified_for_pto: The qualified_for_pto of this PositionRequest.  # noqa: E501
        :type: bool
        """

        self._qualified_for_pto = qualified_for_pto

    @property
    def qualified_for_paid_holidays(self):
        """Gets the qualified_for_paid_holidays of this PositionRequest.  # noqa: E501

        Is the Position qualified for holidays  # noqa: E501

        :return: The qualified_for_paid_holidays of this PositionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._qualified_for_paid_holidays

    @qualified_for_paid_holidays.setter
    def qualified_for_paid_holidays(self, qualified_for_paid_holidays):
        """Sets the qualified_for_paid_holidays of this PositionRequest.

        Is the Position qualified for holidays  # noqa: E501

        :param qualified_for_paid_holidays: The qualified_for_paid_holidays of this PositionRequest.  # noqa: E501
        :type: bool
        """

        self._qualified_for_paid_holidays = qualified_for_paid_holidays

    @property
    def qualified_for_pto_as_of(self):
        """Gets the qualified_for_pto_as_of of this PositionRequest.  # noqa: E501

        The effective date that the Position qualifies for paid time off (If not included, the default is that it is always qualified)  # noqa: E501

        :return: The qualified_for_pto_as_of of this PositionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._qualified_for_pto_as_of

    @qualified_for_pto_as_of.setter
    def qualified_for_pto_as_of(self, qualified_for_pto_as_of):
        """Sets the qualified_for_pto_as_of of this PositionRequest.

        The effective date that the Position qualifies for paid time off (If not included, the default is that it is always qualified)  # noqa: E501

        :param qualified_for_pto_as_of: The qualified_for_pto_as_of of this PositionRequest.  # noqa: E501
        :type: datetime
        """

        self._qualified_for_pto_as_of = qualified_for_pto_as_of

    @property
    def qualified_for_paid_holidays_as_of(self):
        """Gets the qualified_for_paid_holidays_as_of of this PositionRequest.  # noqa: E501

        The effective date that the Position qualifies for holidays (If not included, the default is that it is always qualified)  # noqa: E501

        :return: The qualified_for_paid_holidays_as_of of this PositionRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._qualified_for_paid_holidays_as_of

    @qualified_for_paid_holidays_as_of.setter
    def qualified_for_paid_holidays_as_of(self, qualified_for_paid_holidays_as_of):
        """Sets the qualified_for_paid_holidays_as_of of this PositionRequest.

        The effective date that the Position qualifies for holidays (If not included, the default is that it is always qualified)  # noqa: E501

        :param qualified_for_paid_holidays_as_of: The qualified_for_paid_holidays_as_of of this PositionRequest.  # noqa: E501
        :type: datetime
        """

        self._qualified_for_paid_holidays_as_of = qualified_for_paid_holidays_as_of

    @property
    def default_job_pay_override(self):
        """Gets the default_job_pay_override of this PositionRequest.  # noqa: E501


        :return: The default_job_pay_override of this PositionRequest.  # noqa: E501
        :rtype: float
        """
        return self._default_job_pay_override

    @default_job_pay_override.setter
    def default_job_pay_override(self, default_job_pay_override):
        """Sets the default_job_pay_override of this PositionRequest.


        :param default_job_pay_override: The default_job_pay_override of this PositionRequest.  # noqa: E501
        :type: float
        """

        self._default_job_pay_override = default_job_pay_override

    @property
    def code(self):
        """Gets the code of this PositionRequest.  # noqa: E501

        The 'Code' for the Position.  # noqa: E501

        :return: The code of this PositionRequest.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PositionRequest.

        The 'Code' for the Position.  # noqa: E501

        :param code: The code of this PositionRequest.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def schedules(self):
        """Gets the schedules of this PositionRequest.  # noqa: E501

        The Schedules for the Position  # noqa: E501

        :return: The schedules of this PositionRequest.  # noqa: E501
        :rtype: list[PositionScheduleRequest]
        """
        return self._schedules

    @schedules.setter
    def schedules(self, schedules):
        """Sets the schedules of this PositionRequest.

        The Schedules for the Position  # noqa: E501

        :param schedules: The schedules of this PositionRequest.  # noqa: E501
        :type: list[PositionScheduleRequest]
        """
        if self.local_vars_configuration.client_side_validation and schedules is None:  # noqa: E501
            raise ValueError("Invalid value for `schedules`, must not be `None`")  # noqa: E501

        self._schedules = schedules

    @property
    def replace_existing_position_jobs(self):
        """Gets the replace_existing_position_jobs of this PositionRequest.  # noqa: E501

        If existing Position Jobs are to be replaced. (Default is true)  # noqa: E501

        :return: The replace_existing_position_jobs of this PositionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._replace_existing_position_jobs

    @replace_existing_position_jobs.setter
    def replace_existing_position_jobs(self, replace_existing_position_jobs):
        """Sets the replace_existing_position_jobs of this PositionRequest.

        If existing Position Jobs are to be replaced. (Default is true)  # noqa: E501

        :param replace_existing_position_jobs: The replace_existing_position_jobs of this PositionRequest.  # noqa: E501
        :type: bool
        """

        self._replace_existing_position_jobs = replace_existing_position_jobs

    @property
    def allowed_location_ids(self):
        """Gets the allowed_location_ids of this PositionRequest.  # noqa: E501

        Locations the Position is granted  # noqa: E501

        :return: The allowed_location_ids of this PositionRequest.  # noqa: E501
        :rtype: list[Int32LocatorRequest]
        """
        return self._allowed_location_ids

    @allowed_location_ids.setter
    def allowed_location_ids(self, allowed_location_ids):
        """Sets the allowed_location_ids of this PositionRequest.

        Locations the Position is granted  # noqa: E501

        :param allowed_location_ids: The allowed_location_ids of this PositionRequest.  # noqa: E501
        :type: list[Int32LocatorRequest]
        """

        self._allowed_location_ids = allowed_location_ids

    @property
    def other_jobs(self):
        """Gets the other_jobs of this PositionRequest.  # noqa: E501

        Other Jobs  # noqa: E501

        :return: The other_jobs of this PositionRequest.  # noqa: E501
        :rtype: list[PositionJobRequest]
        """
        return self._other_jobs

    @other_jobs.setter
    def other_jobs(self, other_jobs):
        """Sets the other_jobs of this PositionRequest.

        Other Jobs  # noqa: E501

        :param other_jobs: The other_jobs of this PositionRequest.  # noqa: E501
        :type: list[PositionJobRequest]
        """

        self._other_jobs = other_jobs

    @property
    def primary_job(self):
        """Gets the primary_job of this PositionRequest.  # noqa: E501


        :return: The primary_job of this PositionRequest.  # noqa: E501
        :rtype: PositionJobRequest
        """
        return self._primary_job

    @primary_job.setter
    def primary_job(self, primary_job):
        """Sets the primary_job of this PositionRequest.


        :param primary_job: The primary_job of this PositionRequest.  # noqa: E501
        :type: PositionJobRequest
        """

        self._primary_job = primary_job

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PositionRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PositionRequest):
            return True

        return self.to_dict() != other.to_dict()
