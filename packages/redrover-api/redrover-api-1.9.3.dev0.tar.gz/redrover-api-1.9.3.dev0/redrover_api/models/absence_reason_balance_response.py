# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class AbsenceReasonBalanceResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'employee_id': 'int',
        'school_year_id': 'int',
        'absence_reason_id': 'int',
        'absence_reason_category_id': 'int',
        'balance_as_of': 'datetime',
        'initial_balance': 'float',
        'used_balance': 'float',
        'unused_balance': 'float',
        'earned_balance': 'float',
        'net_balance': 'float',
        'used_balance_calculated_at_utc': 'datetime',
        'absence_reason_tracking_type': 'AbsenceReasonTrackingTypeEnum'
    }

    attribute_map = {
        'id': 'id',
        'employee_id': 'employeeId',
        'school_year_id': 'schoolYearId',
        'absence_reason_id': 'absenceReasonId',
        'absence_reason_category_id': 'absenceReasonCategoryId',
        'balance_as_of': 'balanceAsOf',
        'initial_balance': 'initialBalance',
        'used_balance': 'usedBalance',
        'unused_balance': 'unusedBalance',
        'earned_balance': 'earnedBalance',
        'net_balance': 'netBalance',
        'used_balance_calculated_at_utc': 'usedBalanceCalculatedAtUtc',
        'absence_reason_tracking_type': 'absenceReasonTrackingType'
    }

    def __init__(self, id=None, employee_id=None, school_year_id=None, absence_reason_id=None, absence_reason_category_id=None, balance_as_of=None, initial_balance=None, used_balance=None, unused_balance=None, earned_balance=None, net_balance=None, used_balance_calculated_at_utc=None, absence_reason_tracking_type=None, local_vars_configuration=None):  # noqa: E501
        """AbsenceReasonBalanceResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._employee_id = None
        self._school_year_id = None
        self._absence_reason_id = None
        self._absence_reason_category_id = None
        self._balance_as_of = None
        self._initial_balance = None
        self._used_balance = None
        self._unused_balance = None
        self._earned_balance = None
        self._net_balance = None
        self._used_balance_calculated_at_utc = None
        self._absence_reason_tracking_type = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if employee_id is not None:
            self.employee_id = employee_id
        if school_year_id is not None:
            self.school_year_id = school_year_id
        self.absence_reason_id = absence_reason_id
        self.absence_reason_category_id = absence_reason_category_id
        if balance_as_of is not None:
            self.balance_as_of = balance_as_of
        if initial_balance is not None:
            self.initial_balance = initial_balance
        if used_balance is not None:
            self.used_balance = used_balance
        if unused_balance is not None:
            self.unused_balance = unused_balance
        if earned_balance is not None:
            self.earned_balance = earned_balance
        if net_balance is not None:
            self.net_balance = net_balance
        if used_balance_calculated_at_utc is not None:
            self.used_balance_calculated_at_utc = used_balance_calculated_at_utc
        if absence_reason_tracking_type is not None:
            self.absence_reason_tracking_type = absence_reason_tracking_type

    @property
    def id(self):
        """Gets the id of this AbsenceReasonBalanceResponse.  # noqa: E501

        The Red Rover internal Id of AbsenceReasonBalance (numeric)  # noqa: E501

        :return: The id of this AbsenceReasonBalanceResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AbsenceReasonBalanceResponse.

        The Red Rover internal Id of AbsenceReasonBalance (numeric)  # noqa: E501

        :param id: The id of this AbsenceReasonBalanceResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def employee_id(self):
        """Gets the employee_id of this AbsenceReasonBalanceResponse.  # noqa: E501

        The Red Rover internal Id of Employee (numeric)  # noqa: E501

        :return: The employee_id of this AbsenceReasonBalanceResponse.  # noqa: E501
        :rtype: int
        """
        return self._employee_id

    @employee_id.setter
    def employee_id(self, employee_id):
        """Sets the employee_id of this AbsenceReasonBalanceResponse.

        The Red Rover internal Id of Employee (numeric)  # noqa: E501

        :param employee_id: The employee_id of this AbsenceReasonBalanceResponse.  # noqa: E501
        :type: int
        """

        self._employee_id = employee_id

    @property
    def school_year_id(self):
        """Gets the school_year_id of this AbsenceReasonBalanceResponse.  # noqa: E501

        The Red Rover internal Id of SchoolYear (numeric)  # noqa: E501

        :return: The school_year_id of this AbsenceReasonBalanceResponse.  # noqa: E501
        :rtype: int
        """
        return self._school_year_id

    @school_year_id.setter
    def school_year_id(self, school_year_id):
        """Sets the school_year_id of this AbsenceReasonBalanceResponse.

        The Red Rover internal Id of SchoolYear (numeric)  # noqa: E501

        :param school_year_id: The school_year_id of this AbsenceReasonBalanceResponse.  # noqa: E501
        :type: int
        """

        self._school_year_id = school_year_id

    @property
    def absence_reason_id(self):
        """Gets the absence_reason_id of this AbsenceReasonBalanceResponse.  # noqa: E501

        The Red Rover internal Id of AbsenceReason (numeric)  # noqa: E501

        :return: The absence_reason_id of this AbsenceReasonBalanceResponse.  # noqa: E501
        :rtype: int
        """
        return self._absence_reason_id

    @absence_reason_id.setter
    def absence_reason_id(self, absence_reason_id):
        """Sets the absence_reason_id of this AbsenceReasonBalanceResponse.

        The Red Rover internal Id of AbsenceReason (numeric)  # noqa: E501

        :param absence_reason_id: The absence_reason_id of this AbsenceReasonBalanceResponse.  # noqa: E501
        :type: int
        """

        self._absence_reason_id = absence_reason_id

    @property
    def absence_reason_category_id(self):
        """Gets the absence_reason_category_id of this AbsenceReasonBalanceResponse.  # noqa: E501

        The Red Rover internal Id of AbsenceReasonCategory (numeric)  # noqa: E501

        :return: The absence_reason_category_id of this AbsenceReasonBalanceResponse.  # noqa: E501
        :rtype: int
        """
        return self._absence_reason_category_id

    @absence_reason_category_id.setter
    def absence_reason_category_id(self, absence_reason_category_id):
        """Sets the absence_reason_category_id of this AbsenceReasonBalanceResponse.

        The Red Rover internal Id of AbsenceReasonCategory (numeric)  # noqa: E501

        :param absence_reason_category_id: The absence_reason_category_id of this AbsenceReasonBalanceResponse.  # noqa: E501
        :type: int
        """

        self._absence_reason_category_id = absence_reason_category_id

    @property
    def balance_as_of(self):
        """Gets the balance_as_of of this AbsenceReasonBalanceResponse.  # noqa: E501

        The 'As of' date as to when this balance was last update  # noqa: E501

        :return: The balance_as_of of this AbsenceReasonBalanceResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._balance_as_of

    @balance_as_of.setter
    def balance_as_of(self, balance_as_of):
        """Sets the balance_as_of of this AbsenceReasonBalanceResponse.

        The 'As of' date as to when this balance was last update  # noqa: E501

        :param balance_as_of: The balance_as_of of this AbsenceReasonBalanceResponse.  # noqa: E501
        :type: datetime
        """

        self._balance_as_of = balance_as_of

    @property
    def initial_balance(self):
        """Gets the initial_balance of this AbsenceReasonBalanceResponse.  # noqa: E501

        How much the employee initially had  # noqa: E501

        :return: The initial_balance of this AbsenceReasonBalanceResponse.  # noqa: E501
        :rtype: float
        """
        return self._initial_balance

    @initial_balance.setter
    def initial_balance(self, initial_balance):
        """Sets the initial_balance of this AbsenceReasonBalanceResponse.

        How much the employee initially had  # noqa: E501

        :param initial_balance: The initial_balance of this AbsenceReasonBalanceResponse.  # noqa: E501
        :type: float
        """

        self._initial_balance = initial_balance

    @property
    def used_balance(self):
        """Gets the used_balance of this AbsenceReasonBalanceResponse.  # noqa: E501

        How much has been used  # noqa: E501

        :return: The used_balance of this AbsenceReasonBalanceResponse.  # noqa: E501
        :rtype: float
        """
        return self._used_balance

    @used_balance.setter
    def used_balance(self, used_balance):
        """Sets the used_balance of this AbsenceReasonBalanceResponse.

        How much has been used  # noqa: E501

        :param used_balance: The used_balance of this AbsenceReasonBalanceResponse.  # noqa: E501
        :type: float
        """

        self._used_balance = used_balance

    @property
    def unused_balance(self):
        """Gets the unused_balance of this AbsenceReasonBalanceResponse.  # noqa: E501

        How much has not been used  # noqa: E501

        :return: The unused_balance of this AbsenceReasonBalanceResponse.  # noqa: E501
        :rtype: float
        """
        return self._unused_balance

    @unused_balance.setter
    def unused_balance(self, unused_balance):
        """Sets the unused_balance of this AbsenceReasonBalanceResponse.

        How much has not been used  # noqa: E501

        :param unused_balance: The unused_balance of this AbsenceReasonBalanceResponse.  # noqa: E501
        :type: float
        """

        self._unused_balance = unused_balance

    @property
    def earned_balance(self):
        """Gets the earned_balance of this AbsenceReasonBalanceResponse.  # noqa: E501

        The amount of balance that was earned  # noqa: E501

        :return: The earned_balance of this AbsenceReasonBalanceResponse.  # noqa: E501
        :rtype: float
        """
        return self._earned_balance

    @earned_balance.setter
    def earned_balance(self, earned_balance):
        """Sets the earned_balance of this AbsenceReasonBalanceResponse.

        The amount of balance that was earned  # noqa: E501

        :param earned_balance: The earned_balance of this AbsenceReasonBalanceResponse.  # noqa: E501
        :type: float
        """

        self._earned_balance = earned_balance

    @property
    def net_balance(self):
        """Gets the net_balance of this AbsenceReasonBalanceResponse.  # noqa: E501

        The net balance  # noqa: E501

        :return: The net_balance of this AbsenceReasonBalanceResponse.  # noqa: E501
        :rtype: float
        """
        return self._net_balance

    @net_balance.setter
    def net_balance(self, net_balance):
        """Sets the net_balance of this AbsenceReasonBalanceResponse.

        The net balance  # noqa: E501

        :param net_balance: The net_balance of this AbsenceReasonBalanceResponse.  # noqa: E501
        :type: float
        """

        self._net_balance = net_balance

    @property
    def used_balance_calculated_at_utc(self):
        """Gets the used_balance_calculated_at_utc of this AbsenceReasonBalanceResponse.  # noqa: E501

        When the last time that the 'used' balance was calculated  # noqa: E501

        :return: The used_balance_calculated_at_utc of this AbsenceReasonBalanceResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._used_balance_calculated_at_utc

    @used_balance_calculated_at_utc.setter
    def used_balance_calculated_at_utc(self, used_balance_calculated_at_utc):
        """Sets the used_balance_calculated_at_utc of this AbsenceReasonBalanceResponse.

        When the last time that the 'used' balance was calculated  # noqa: E501

        :param used_balance_calculated_at_utc: The used_balance_calculated_at_utc of this AbsenceReasonBalanceResponse.  # noqa: E501
        :type: datetime
        """

        self._used_balance_calculated_at_utc = used_balance_calculated_at_utc

    @property
    def absence_reason_tracking_type(self):
        """Gets the absence_reason_tracking_type of this AbsenceReasonBalanceResponse.  # noqa: E501


        :return: The absence_reason_tracking_type of this AbsenceReasonBalanceResponse.  # noqa: E501
        :rtype: AbsenceReasonTrackingTypeEnum
        """
        return self._absence_reason_tracking_type

    @absence_reason_tracking_type.setter
    def absence_reason_tracking_type(self, absence_reason_tracking_type):
        """Sets the absence_reason_tracking_type of this AbsenceReasonBalanceResponse.


        :param absence_reason_tracking_type: The absence_reason_tracking_type of this AbsenceReasonBalanceResponse.  # noqa: E501
        :type: AbsenceReasonTrackingTypeEnum
        """

        self._absence_reason_tracking_type = absence_reason_tracking_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbsenceReasonBalanceResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AbsenceReasonBalanceResponse):
            return True

        return self.to_dict() != other.to_dict()
