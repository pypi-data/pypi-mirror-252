# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class PositionResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'code': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'default_accounting_codes_from_schedule': 'bool',
        'needs_replacement': 'NeedsReplacementEnum',
        'contract': 'ContractResponse',
        'position_schedule_mode': 'PositionScheduleModeEnum',
        'hours_per_full_work_day': 'float',
        'fte': 'float',
        'qualified_for_pto_as_of': 'datetime',
        'qualified_for_paid_holidays_as_of': 'datetime'
    }

    attribute_map = {
        'code': 'code',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'default_accounting_codes_from_schedule': 'defaultAccountingCodesFromSchedule',
        'needs_replacement': 'needsReplacement',
        'contract': 'contract',
        'position_schedule_mode': 'positionScheduleMode',
        'hours_per_full_work_day': 'hoursPerFullWorkDay',
        'fte': 'fte',
        'qualified_for_pto_as_of': 'qualifiedForPtoAsOf',
        'qualified_for_paid_holidays_as_of': 'qualifiedForPaidHolidaysAsOf'
    }

    def __init__(self, code=None, start_date=None, end_date=None, default_accounting_codes_from_schedule=None, needs_replacement=None, contract=None, position_schedule_mode=None, hours_per_full_work_day=None, fte=None, qualified_for_pto_as_of=None, qualified_for_paid_holidays_as_of=None, local_vars_configuration=None):  # noqa: E501
        """PositionResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._code = None
        self._start_date = None
        self._end_date = None
        self._default_accounting_codes_from_schedule = None
        self._needs_replacement = None
        self._contract = None
        self._position_schedule_mode = None
        self._hours_per_full_work_day = None
        self._fte = None
        self._qualified_for_pto_as_of = None
        self._qualified_for_paid_holidays_as_of = None
        self.discriminator = None

        self.code = code
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if default_accounting_codes_from_schedule is not None:
            self.default_accounting_codes_from_schedule = default_accounting_codes_from_schedule
        if needs_replacement is not None:
            self.needs_replacement = needs_replacement
        if contract is not None:
            self.contract = contract
        if position_schedule_mode is not None:
            self.position_schedule_mode = position_schedule_mode
        self.hours_per_full_work_day = hours_per_full_work_day
        self.fte = fte
        if qualified_for_pto_as_of is not None:
            self.qualified_for_pto_as_of = qualified_for_pto_as_of
        if qualified_for_paid_holidays_as_of is not None:
            self.qualified_for_paid_holidays_as_of = qualified_for_paid_holidays_as_of

    @property
    def code(self):
        """Gets the code of this PositionResponse.  # noqa: E501


        :return: The code of this PositionResponse.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PositionResponse.


        :param code: The code of this PositionResponse.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def start_date(self):
        """Gets the start_date of this PositionResponse.  # noqa: E501


        :return: The start_date of this PositionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this PositionResponse.


        :param start_date: The start_date of this PositionResponse.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this PositionResponse.  # noqa: E501


        :return: The end_date of this PositionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this PositionResponse.


        :param end_date: The end_date of this PositionResponse.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def default_accounting_codes_from_schedule(self):
        """Gets the default_accounting_codes_from_schedule of this PositionResponse.  # noqa: E501


        :return: The default_accounting_codes_from_schedule of this PositionResponse.  # noqa: E501
        :rtype: bool
        """
        return self._default_accounting_codes_from_schedule

    @default_accounting_codes_from_schedule.setter
    def default_accounting_codes_from_schedule(self, default_accounting_codes_from_schedule):
        """Sets the default_accounting_codes_from_schedule of this PositionResponse.


        :param default_accounting_codes_from_schedule: The default_accounting_codes_from_schedule of this PositionResponse.  # noqa: E501
        :type: bool
        """

        self._default_accounting_codes_from_schedule = default_accounting_codes_from_schedule

    @property
    def needs_replacement(self):
        """Gets the needs_replacement of this PositionResponse.  # noqa: E501


        :return: The needs_replacement of this PositionResponse.  # noqa: E501
        :rtype: NeedsReplacementEnum
        """
        return self._needs_replacement

    @needs_replacement.setter
    def needs_replacement(self, needs_replacement):
        """Sets the needs_replacement of this PositionResponse.


        :param needs_replacement: The needs_replacement of this PositionResponse.  # noqa: E501
        :type: NeedsReplacementEnum
        """

        self._needs_replacement = needs_replacement

    @property
    def contract(self):
        """Gets the contract of this PositionResponse.  # noqa: E501


        :return: The contract of this PositionResponse.  # noqa: E501
        :rtype: ContractResponse
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """Sets the contract of this PositionResponse.


        :param contract: The contract of this PositionResponse.  # noqa: E501
        :type: ContractResponse
        """

        self._contract = contract

    @property
    def position_schedule_mode(self):
        """Gets the position_schedule_mode of this PositionResponse.  # noqa: E501


        :return: The position_schedule_mode of this PositionResponse.  # noqa: E501
        :rtype: PositionScheduleModeEnum
        """
        return self._position_schedule_mode

    @position_schedule_mode.setter
    def position_schedule_mode(self, position_schedule_mode):
        """Sets the position_schedule_mode of this PositionResponse.


        :param position_schedule_mode: The position_schedule_mode of this PositionResponse.  # noqa: E501
        :type: PositionScheduleModeEnum
        """

        self._position_schedule_mode = position_schedule_mode

    @property
    def hours_per_full_work_day(self):
        """Gets the hours_per_full_work_day of this PositionResponse.  # noqa: E501


        :return: The hours_per_full_work_day of this PositionResponse.  # noqa: E501
        :rtype: float
        """
        return self._hours_per_full_work_day

    @hours_per_full_work_day.setter
    def hours_per_full_work_day(self, hours_per_full_work_day):
        """Sets the hours_per_full_work_day of this PositionResponse.


        :param hours_per_full_work_day: The hours_per_full_work_day of this PositionResponse.  # noqa: E501
        :type: float
        """

        self._hours_per_full_work_day = hours_per_full_work_day

    @property
    def fte(self):
        """Gets the fte of this PositionResponse.  # noqa: E501


        :return: The fte of this PositionResponse.  # noqa: E501
        :rtype: float
        """
        return self._fte

    @fte.setter
    def fte(self, fte):
        """Sets the fte of this PositionResponse.


        :param fte: The fte of this PositionResponse.  # noqa: E501
        :type: float
        """

        self._fte = fte

    @property
    def qualified_for_pto_as_of(self):
        """Gets the qualified_for_pto_as_of of this PositionResponse.  # noqa: E501


        :return: The qualified_for_pto_as_of of this PositionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._qualified_for_pto_as_of

    @qualified_for_pto_as_of.setter
    def qualified_for_pto_as_of(self, qualified_for_pto_as_of):
        """Sets the qualified_for_pto_as_of of this PositionResponse.


        :param qualified_for_pto_as_of: The qualified_for_pto_as_of of this PositionResponse.  # noqa: E501
        :type: datetime
        """

        self._qualified_for_pto_as_of = qualified_for_pto_as_of

    @property
    def qualified_for_paid_holidays_as_of(self):
        """Gets the qualified_for_paid_holidays_as_of of this PositionResponse.  # noqa: E501


        :return: The qualified_for_paid_holidays_as_of of this PositionResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._qualified_for_paid_holidays_as_of

    @qualified_for_paid_holidays_as_of.setter
    def qualified_for_paid_holidays_as_of(self, qualified_for_paid_holidays_as_of):
        """Sets the qualified_for_paid_holidays_as_of of this PositionResponse.


        :param qualified_for_paid_holidays_as_of: The qualified_for_paid_holidays_as_of of this PositionResponse.  # noqa: E501
        :type: datetime
        """

        self._qualified_for_paid_holidays_as_of = qualified_for_paid_holidays_as_of

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PositionResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PositionResponse):
            return True

        return self.to_dict() != other.to_dict()
