# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class AbsenceDetailResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'date_part': 'DayPartEnum',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'absence_reason_usage': 'list[AbsenceReasonUsageResponse]'
    }

    attribute_map = {
        'date_part': 'datePart',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'absence_reason_usage': 'absenceReasonUsage'
    }

    def __init__(self, date_part=None, start_time=None, end_time=None, absence_reason_usage=None, local_vars_configuration=None):  # noqa: E501
        """AbsenceDetailResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._date_part = None
        self._start_time = None
        self._end_time = None
        self._absence_reason_usage = None
        self.discriminator = None

        if date_part is not None:
            self.date_part = date_part
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        self.absence_reason_usage = absence_reason_usage

    @property
    def date_part(self):
        """Gets the date_part of this AbsenceDetailResponse.  # noqa: E501


        :return: The date_part of this AbsenceDetailResponse.  # noqa: E501
        :rtype: DayPartEnum
        """
        return self._date_part

    @date_part.setter
    def date_part(self, date_part):
        """Sets the date_part of this AbsenceDetailResponse.


        :param date_part: The date_part of this AbsenceDetailResponse.  # noqa: E501
        :type: DayPartEnum
        """

        self._date_part = date_part

    @property
    def start_time(self):
        """Gets the start_time of this AbsenceDetailResponse.  # noqa: E501

        The start time of the Absence for this day  # noqa: E501

        :return: The start_time of this AbsenceDetailResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this AbsenceDetailResponse.

        The start time of the Absence for this day  # noqa: E501

        :param start_time: The start_time of this AbsenceDetailResponse.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this AbsenceDetailResponse.  # noqa: E501

        The end time of the Absence for this day  # noqa: E501

        :return: The end_time of this AbsenceDetailResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this AbsenceDetailResponse.

        The end time of the Absence for this day  # noqa: E501

        :param end_time: The end_time of this AbsenceDetailResponse.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def absence_reason_usage(self):
        """Gets the absence_reason_usage of this AbsenceDetailResponse.  # noqa: E501

        The usage of Absence Reasons for this day  # noqa: E501

        :return: The absence_reason_usage of this AbsenceDetailResponse.  # noqa: E501
        :rtype: list[AbsenceReasonUsageResponse]
        """
        return self._absence_reason_usage

    @absence_reason_usage.setter
    def absence_reason_usage(self, absence_reason_usage):
        """Sets the absence_reason_usage of this AbsenceDetailResponse.

        The usage of Absence Reasons for this day  # noqa: E501

        :param absence_reason_usage: The absence_reason_usage of this AbsenceDetailResponse.  # noqa: E501
        :type: list[AbsenceReasonUsageResponse]
        """

        self._absence_reason_usage = absence_reason_usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AbsenceDetailResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AbsenceDetailResponse):
            return True

        return self.to_dict() != other.to_dict()
