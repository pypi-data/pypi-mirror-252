# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from redrover_api.configuration import Configuration


class PositionJobRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'job': 'Int32LocatorRequest',
        'pay_step': 'Int32LocatorRequest',
        'override_pay_rate': 'float',
        'visible': 'bool',
        'position_job_id': 'int',
        'effective_as_of': 'datetime',
        'accounting_codes': 'list[AccountingCodeAllocationRequest]'
    }

    attribute_map = {
        'job': 'job',
        'pay_step': 'payStep',
        'override_pay_rate': 'overridePayRate',
        'visible': 'visible',
        'position_job_id': 'positionJobId',
        'effective_as_of': 'effectiveAsOf',
        'accounting_codes': 'accountingCodes'
    }

    def __init__(self, job=None, pay_step=None, override_pay_rate=None, visible=None, position_job_id=None, effective_as_of=None, accounting_codes=None, local_vars_configuration=None):  # noqa: E501
        """PositionJobRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._job = None
        self._pay_step = None
        self._override_pay_rate = None
        self._visible = None
        self._position_job_id = None
        self._effective_as_of = None
        self._accounting_codes = None
        self.discriminator = None

        if job is not None:
            self.job = job
        if pay_step is not None:
            self.pay_step = pay_step
        self.override_pay_rate = override_pay_rate
        if visible is not None:
            self.visible = visible
        self.position_job_id = position_job_id
        self.effective_as_of = effective_as_of
        self.accounting_codes = accounting_codes

    @property
    def job(self):
        """Gets the job of this PositionJobRequest.  # noqa: E501


        :return: The job of this PositionJobRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this PositionJobRequest.


        :param job: The job of this PositionJobRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """

        self._job = job

    @property
    def pay_step(self):
        """Gets the pay_step of this PositionJobRequest.  # noqa: E501


        :return: The pay_step of this PositionJobRequest.  # noqa: E501
        :rtype: Int32LocatorRequest
        """
        return self._pay_step

    @pay_step.setter
    def pay_step(self, pay_step):
        """Sets the pay_step of this PositionJobRequest.


        :param pay_step: The pay_step of this PositionJobRequest.  # noqa: E501
        :type: Int32LocatorRequest
        """

        self._pay_step = pay_step

    @property
    def override_pay_rate(self):
        """Gets the override_pay_rate of this PositionJobRequest.  # noqa: E501

        The pay rate override  # noqa: E501

        :return: The override_pay_rate of this PositionJobRequest.  # noqa: E501
        :rtype: float
        """
        return self._override_pay_rate

    @override_pay_rate.setter
    def override_pay_rate(self, override_pay_rate):
        """Sets the override_pay_rate of this PositionJobRequest.

        The pay rate override  # noqa: E501

        :param override_pay_rate: The override_pay_rate of this PositionJobRequest.  # noqa: E501
        :type: float
        """

        self._override_pay_rate = override_pay_rate

    @property
    def visible(self):
        """Gets the visible of this PositionJobRequest.  # noqa: E501

        If the Job is visible. (Default is true)  # noqa: E501

        :return: The visible of this PositionJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this PositionJobRequest.

        If the Job is visible. (Default is true)  # noqa: E501

        :param visible: The visible of this PositionJobRequest.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def position_job_id(self):
        """Gets the position_job_id of this PositionJobRequest.  # noqa: E501

        The Position Job Id  # noqa: E501

        :return: The position_job_id of this PositionJobRequest.  # noqa: E501
        :rtype: int
        """
        return self._position_job_id

    @position_job_id.setter
    def position_job_id(self, position_job_id):
        """Sets the position_job_id of this PositionJobRequest.

        The Position Job Id  # noqa: E501

        :param position_job_id: The position_job_id of this PositionJobRequest.  # noqa: E501
        :type: int
        """

        self._position_job_id = position_job_id

    @property
    def effective_as_of(self):
        """Gets the effective_as_of of this PositionJobRequest.  # noqa: E501

        The effective date of ths Job  # noqa: E501

        :return: The effective_as_of of this PositionJobRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._effective_as_of

    @effective_as_of.setter
    def effective_as_of(self, effective_as_of):
        """Sets the effective_as_of of this PositionJobRequest.

        The effective date of ths Job  # noqa: E501

        :param effective_as_of: The effective_as_of of this PositionJobRequest.  # noqa: E501
        :type: datetime
        """

        self._effective_as_of = effective_as_of

    @property
    def accounting_codes(self):
        """Gets the accounting_codes of this PositionJobRequest.  # noqa: E501

        Accounting code allocations  # noqa: E501

        :return: The accounting_codes of this PositionJobRequest.  # noqa: E501
        :rtype: list[AccountingCodeAllocationRequest]
        """
        return self._accounting_codes

    @accounting_codes.setter
    def accounting_codes(self, accounting_codes):
        """Sets the accounting_codes of this PositionJobRequest.

        Accounting code allocations  # noqa: E501

        :param accounting_codes: The accounting_codes of this PositionJobRequest.  # noqa: E501
        :type: list[AccountingCodeAllocationRequest]
        """

        self._accounting_codes = accounting_codes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PositionJobRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PositionJobRequest):
            return True

        return self.to_dict() != other.to_dict()
