# coding: utf-8

"""
    Red Rover API

    Access Red Rover data via this REST API for Organizations that have granted you access.    # Authentication  The API is protected by HTTP Basic Authentication.   Each application that connects to the API has a unique username and password that it must supply with every request.    This value needs to be supplied as an HTTP Header: `Authorization=BASIC [hash]`. The value of [hash] is the string username:password base64 encoded.    Endpoints marked for Basic Auth can be used with the Basic Auth username and password that you have been assigned.    # API Information  ## Api Key  Each Red Rover organization that has authorized your application has a unique API Key for your application.  To retrieve the API Key, you can use the Organization endpoint (`api/v1/organization`) which returns an ApiKey uniquely used for each Organization.    You must supply this as an HTTP Header when accessing that organization: `apiKey=[apiKey]`. The domains that require this `ApiKey` header are labeled as 'Requires an ApiKey'.    ## Identifier  Where an `Identifier` can be specified in the route, you may either supply the Red Rover Id of the object (numeric) or the External Id (alpha-numeric). When specifying an External Id, you will need to prepend the External Id with the pike character`|` (e.g. `|ABC123`). Please note that this is only the case when the External Id is within the route. If the External Id is contained within the body of the request, do not append the pike character.  # noqa: E501

    The version of the OpenAPI document: v1
    Contact: dev@redroverk12.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from redrover_api.api_client import ApiClient
from redrover_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class AbsenceReasonBalanceApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_absence_reason_balance(self, org_id, employee_identifier, **kwargs):  # noqa: E501
        """Create Absence Reason Balance  # noqa: E501

        Create new Absence Reason Balance for an Employee  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_absence_reason_balance(org_id, employee_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int org_id: The Red Rover Id of the Organization (required)
        :param str employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`) (required)
        :param AbsenceReasonBalanceCreateRequest absence_reason_balance_create_request:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AbsenceReasonBalanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.create_absence_reason_balance_with_http_info(org_id, employee_identifier, **kwargs)  # noqa: E501

    def create_absence_reason_balance_with_http_info(self, org_id, employee_identifier, **kwargs):  # noqa: E501
        """Create Absence Reason Balance  # noqa: E501

        Create new Absence Reason Balance for an Employee  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_absence_reason_balance_with_http_info(org_id, employee_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int org_id: The Red Rover Id of the Organization (required)
        :param str employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`) (required)
        :param AbsenceReasonBalanceCreateRequest absence_reason_balance_create_request:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AbsenceReasonBalanceResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'org_id',
            'employee_identifier',
            'absence_reason_balance_create_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_absence_reason_balance" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'org_id' is set
        if self.api_client.client_side_validation and ('org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `org_id` when calling `create_absence_reason_balance`")  # noqa: E501
        # verify the required parameter 'employee_identifier' is set
        if self.api_client.client_side_validation and ('employee_identifier' not in local_var_params or  # noqa: E501
                                                        local_var_params['employee_identifier'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `employee_identifier` when calling `create_absence_reason_balance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_id' in local_var_params:
            path_params['orgId'] = local_var_params['org_id']  # noqa: E501
        if 'employee_identifier' in local_var_params:
            path_params['employeeIdentifier'] = local_var_params['employee_identifier']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'absence_reason_balance_create_request' in local_var_params:
            body_params = local_var_params['absence_reason_balance_create_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/{orgId}/Employee/{employeeIdentifier}/absenceReasonBalances', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AbsenceReasonBalanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_absence_reason_balance(self, org_id, employee_identifier, id, **kwargs):  # noqa: E501
        """Delete Absence Reason Balance  # noqa: E501

        Delete an Absence Reason Balance for an Employee by its Red Rover Id (numeric)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_absence_reason_balance(org_id, employee_identifier, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int org_id: The Red Rover Id of the Organization (required)
        :param str employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`) (required)
        :param int id: The id of the AbsenceReasonBalance (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: OkObjectResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_absence_reason_balance_with_http_info(org_id, employee_identifier, id, **kwargs)  # noqa: E501

    def delete_absence_reason_balance_with_http_info(self, org_id, employee_identifier, id, **kwargs):  # noqa: E501
        """Delete Absence Reason Balance  # noqa: E501

        Delete an Absence Reason Balance for an Employee by its Red Rover Id (numeric)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_absence_reason_balance_with_http_info(org_id, employee_identifier, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int org_id: The Red Rover Id of the Organization (required)
        :param str employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`) (required)
        :param int id: The id of the AbsenceReasonBalance (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(OkObjectResult, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'org_id',
            'employee_identifier',
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_absence_reason_balance" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'org_id' is set
        if self.api_client.client_side_validation and ('org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `org_id` when calling `delete_absence_reason_balance`")  # noqa: E501
        # verify the required parameter 'employee_identifier' is set
        if self.api_client.client_side_validation and ('employee_identifier' not in local_var_params or  # noqa: E501
                                                        local_var_params['employee_identifier'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `employee_identifier` when calling `delete_absence_reason_balance`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `delete_absence_reason_balance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_id' in local_var_params:
            path_params['orgId'] = local_var_params['org_id']  # noqa: E501
        if 'employee_identifier' in local_var_params:
            path_params['employeeIdentifier'] = local_var_params['employee_identifier']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/{orgId}/Employee/{employeeIdentifier}/absenceReasonBalances/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OkObjectResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_absence_reason_balance(self, org_id, employee_identifier, id, **kwargs):  # noqa: E501
        """Get Absence Reason Balance  # noqa: E501

        Gets a specific Absence Reason Balance by its Red Rover Id  (numeric)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_absence_reason_balance(org_id, employee_identifier, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int org_id: The Red Rover Id of the Organization (required)
        :param str employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`) (required)
        :param int id: The id of the AbsenceReasonBalance (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AbsenceReasonBalanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_absence_reason_balance_with_http_info(org_id, employee_identifier, id, **kwargs)  # noqa: E501

    def get_absence_reason_balance_with_http_info(self, org_id, employee_identifier, id, **kwargs):  # noqa: E501
        """Get Absence Reason Balance  # noqa: E501

        Gets a specific Absence Reason Balance by its Red Rover Id  (numeric)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_absence_reason_balance_with_http_info(org_id, employee_identifier, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int org_id: The Red Rover Id of the Organization (required)
        :param str employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`) (required)
        :param int id: The id of the AbsenceReasonBalance (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AbsenceReasonBalanceResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'org_id',
            'employee_identifier',
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_absence_reason_balance" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'org_id' is set
        if self.api_client.client_side_validation and ('org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `org_id` when calling `get_absence_reason_balance`")  # noqa: E501
        # verify the required parameter 'employee_identifier' is set
        if self.api_client.client_side_validation and ('employee_identifier' not in local_var_params or  # noqa: E501
                                                        local_var_params['employee_identifier'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `employee_identifier` when calling `get_absence_reason_balance`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_absence_reason_balance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_id' in local_var_params:
            path_params['orgId'] = local_var_params['org_id']  # noqa: E501
        if 'employee_identifier' in local_var_params:
            path_params['employeeIdentifier'] = local_var_params['employee_identifier']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/{orgId}/Employee/{employeeIdentifier}/absenceReasonBalances/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AbsenceReasonBalanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_absence_reason_balances(self, org_id, employee_identifier, **kwargs):  # noqa: E501
        """Get Absence Reason Balances  # noqa: E501

        Get Absence Reason Balance for an employee  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_absence_reason_balances(org_id, employee_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int org_id: The Red Rover Id of the Organization (required)
        :param str employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`) (required)
        :param int school_year_id: Filter by school year (optional)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[AbsenceReasonBalanceResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_absence_reason_balances_with_http_info(org_id, employee_identifier, **kwargs)  # noqa: E501

    def get_absence_reason_balances_with_http_info(self, org_id, employee_identifier, **kwargs):  # noqa: E501
        """Get Absence Reason Balances  # noqa: E501

        Get Absence Reason Balance for an employee  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_absence_reason_balances_with_http_info(org_id, employee_identifier, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int org_id: The Red Rover Id of the Organization (required)
        :param str employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`) (required)
        :param int school_year_id: Filter by school year (optional)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[AbsenceReasonBalanceResponse], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'org_id',
            'employee_identifier',
            'school_year_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_absence_reason_balances" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'org_id' is set
        if self.api_client.client_side_validation and ('org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `org_id` when calling `get_absence_reason_balances`")  # noqa: E501
        # verify the required parameter 'employee_identifier' is set
        if self.api_client.client_side_validation and ('employee_identifier' not in local_var_params or  # noqa: E501
                                                        local_var_params['employee_identifier'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `employee_identifier` when calling `get_absence_reason_balances`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_id' in local_var_params:
            path_params['orgId'] = local_var_params['org_id']  # noqa: E501
        if 'employee_identifier' in local_var_params:
            path_params['employeeIdentifier'] = local_var_params['employee_identifier']  # noqa: E501

        query_params = []
        if 'school_year_id' in local_var_params and local_var_params['school_year_id'] is not None:  # noqa: E501
            query_params.append(('schoolYearId', local_var_params['school_year_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/{orgId}/Employee/{employeeIdentifier}/absenceReasonBalances', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AbsenceReasonBalanceResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_absence_reason_balance(self, org_id, employee_identifier, id, **kwargs):  # noqa: E501
        """Update Absence Reason Balance  # noqa: E501

        Update an Absence Reason Balance for an Employee by its Red Rover Id (numeric)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_absence_reason_balance(org_id, employee_identifier, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int org_id: The Red Rover Id of the Organization (required)
        :param str employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`) (required)
        :param int id: The id of the AbsenceReasonBalance (required)
        :param AbsenceReasonBalanceUpdateRequest absence_reason_balance_update_request:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: AbsenceReasonBalanceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.update_absence_reason_balance_with_http_info(org_id, employee_identifier, id, **kwargs)  # noqa: E501

    def update_absence_reason_balance_with_http_info(self, org_id, employee_identifier, id, **kwargs):  # noqa: E501
        """Update Absence Reason Balance  # noqa: E501

        Update an Absence Reason Balance for an Employee by its Red Rover Id (numeric)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_absence_reason_balance_with_http_info(org_id, employee_identifier, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int org_id: The Red Rover Id of the Organization (required)
        :param str employee_identifier: The identifier of the Employee. If this is an External Id, prepend the value with the pike character `|` (e.g. `|ABC123`) (required)
        :param int id: The id of the AbsenceReasonBalance (required)
        :param AbsenceReasonBalanceUpdateRequest absence_reason_balance_update_request:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(AbsenceReasonBalanceResponse, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'org_id',
            'employee_identifier',
            'id',
            'absence_reason_balance_update_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_absence_reason_balance" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'org_id' is set
        if self.api_client.client_side_validation and ('org_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['org_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `org_id` when calling `update_absence_reason_balance`")  # noqa: E501
        # verify the required parameter 'employee_identifier' is set
        if self.api_client.client_side_validation and ('employee_identifier' not in local_var_params or  # noqa: E501
                                                        local_var_params['employee_identifier'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `employee_identifier` when calling `update_absence_reason_balance`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `update_absence_reason_balance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'org_id' in local_var_params:
            path_params['orgId'] = local_var_params['org_id']  # noqa: E501
        if 'employee_identifier' in local_var_params:
            path_params['employeeIdentifier'] = local_var_params['employee_identifier']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'absence_reason_balance_update_request' in local_var_params:
            body_params = local_var_params['absence_reason_balance_update_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/{orgId}/Employee/{employeeIdentifier}/absenceReasonBalances/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AbsenceReasonBalanceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
