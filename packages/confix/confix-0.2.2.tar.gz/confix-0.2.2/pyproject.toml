[tool.ruff]
# https://beta.ruff.rs/docs/settings/
target-version = "py37"
line-length = 79
select = [
    # To get a list of all values: `python3 -m ruff linter`.
    "ALL",
    "D200",  # [*] One-line docstring should fit on one line
    "D204",  # [*] 1 blank line required after class docstring
    "D209",  # [*] Multi-line docstring closing quotes should be on a separate line
    "D212",  # [*] Multi-line docstring summary should start at the first line
    "D301",  # Use `r"""` if any backslashes in a docstring
    "D403",  # [*] First word of the first line should be capitalized
    "PERF102",  # [*] When using only the keys of a dict use the `keys()` method
    "RET507",  # Unnecessary `elif` after `continue` statement
    "S113",  # Probable use of requests call without timeout
    "S602",  # `subprocess` call with `shell=True` identified, security issue
]
ignore = [
    "A",  # flake8-builtins (shadowing of builtins like all, any, ...)
    "ANN",  # flake8-annotations
    "ARG001",  # unused-function-argument
    "ARG002",  # unused-method-argument
    "B007",  # Loop control variable `x` not used within loop body
    "B904",  # Within an `except` clause, raise exceptions with `raise ... from err` (PYTHON2.7 COMPAT)
    "C4",  # flake8-comprehensions (PYTHON2.7 COMPAT)
    "C90",  # mccabe (function `X` is too complex)
    "COM812",  # Trailing comma missing
    "D",  # pydocstyle
    "DTZ",  # flake8-datetimez
    "EM101",  # Exception must not use a string literal, assign to variable first
    "EM102",  # Exception must not use an f-string literal, assign to variable first
    "ERA001",  # Found commented-out code
    "FBT",  # flake8-boolean-trap (makes zero sense)
    "FIX",  # Line contains TODO / XXX / ..., consider resolving the issue
    "FLY",  # flynt (PYTHON2.7 COMPAT)
    "INP",  # flake8-no-pep420
    "ISC001",
    "ISC002",  # Implicitly concatenated string literals over multiple lines
    "N801",  # Class name `async_chat` should use CapWords convention (ASYNCORE COMPAT)
    "N802",  # Function name X should be lowercase.
    "N806",  # Variable X in function should be lowercase.
    "N818",  # Exception name `FooBar` should be named with an Error suffix
    "PERF",  # Perflint
    "PGH004",  # Use specific rule codes when using `noqa`
    "PLR0911",  # Too many return statements (8 > 6)
    "PLR0912",  # Too many branches (x > y)
    "PLR0913",  # Too many arguments in function definition (x > y)
    "PLR0915",  # Too many statements (92 > 50)
    "PLR2004",  # Magic value used in comparison, consider replacing X with a constant variable
    "PLR5501",  # Use `elif` instead of `else` then `if`, to reduce indentation
    "PLW0603",  # Using the global statement to update `lineno` is discouraged
    "PLW2901",  # `for` loop variable `x` overwritten by assignment target
    "PT",  # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "PYI",  # flake8-pyi (python types stuff)
    "Q000",  # Single quotes found but double quotes preferred
    "RET",  # flake8-return
    "RUF",  # Ruff-specific rules
    "S",  # flake8-bandit
    "SIM102",  # Use a single `if` statement instead of nested `if` statements
    "SIM105",  # Use `contextlib.suppress(OSError)` instead of `try`-`except`-`pass`
    "SIM115",  # Use context handler for opening files
    "SIM117",  # Use a single `with` statement with multiple contexts instead of nested `with` statements
    "SLF",  # flake8-self
    "TD",  # all TODOs, XXXs, etc.
    "TRY003",  # Avoid specifying long messages outside the exception class
    "TRY200",  # Use `raise from` to specify exception cause (PYTHON2.7 COMPAT)
    "TRY300",  # Consider moving this statement to an `else` block
    "TRY301",  # Abstract `raise` to an inner function
    "UP009",  # [*] UTF-8 encoding declaration is unnecessary (PYTHON2.7 COMPAT)
    "UP010",  # [*] Unnecessary `__future__` import `print_function` for target Python version (PYTHON2.7 COMPAT)
    "UP024",  # [*] Replace aliased errors with `OSError` (PYTHON2.7 COMPAT)
    "UP028",  # [*] Replace `yield` over `for` loop with `yield from` (PYTHON2.7 COMPAT)
    "UP031",  # [*] Use format specifiers instead of percent format
    "UP032",  # [*] Use f-string instead of `format` call (PYTHON2.7 COMPAT)
]

[tool.ruff.per-file-ignores]
"setup.py" = ["T201", "T203"]

[tool.ruff.isort]
# https://beta.ruff.rs/docs/settings/#isort
force-single-line = true  # one import per line
lines-after-imports = 2
