[tool.poetry]
name = "py-linq-sql"
version = "1.11.0.1"
description = "A Python module used for interacting with sql database using LINQ syntax."
license = "EUPL v1.2"
authors = ["CHOSSON Ulysse <ulysse.chosson@obspm.fr>"]
maintainers = [
    "CHOSSON Ulysse <ulysse.chosson@obspm.fr>",
    "MARTIN Pierre-Yves <pierre-yves.martin@obspm.fr>",
]
readme = "README.md"
repository = "https://gitlab.obspm.fr/exoplanet/py-linq-sql"
documentation = "https://py-linq-sql.readthedocs.io/en/latest/"
homepage = "https://gitlab.obspm.fr/exoplanet/py-linq-sql"
keywords = ["linq", "py-linq", "sql", "database", "requests"]


[tool.poetry.dependencies]
python = ">=3.10 <4.0.0"
rich = ">=12.6.0"
py-linq = "=1.3.0"
dotmap = "^1.3.30"
psycopg = "^3.1.4"
toml = "^0.10.2"
pyyaml = "^6.0"
types-toml = "^0.10.8"
types-pyyaml = "^6.0.12.1"
six = "^1.16.0"
strenum = "^0.4.8"


[tool.poetry.group.dev.dependencies]
pytest = "^7.0.2"
pytest-sugar = "^0.9.6"
pytest-pudb = "^0.7.0"
assertpy = "^1.1"
pytest-postgresql = "^4.1.1"
tmp-connection-psql = "^1.2.0"
psycopg-pool = "3.1.4"
mpmath = "^1.2.1"
numpy = "^1.23.4"
xdoctest = "^1.1.0"
isort = "^5.10.1"
black = "^22.10.0"
pytest-cov = "^4.0.0"
mdx-truly-sane-lists = "^1.3"
mkdocs-autorefs = "0.4.1"
mkdocs = "1.4.0"
mkdocstrings = { version = "0.19.0", extras = ["python-legacy"] }
sniffio = "1.2.0"
pre-commit = "^2.20.0"
codespell = "^2.2.2"
dlint = "^0.13.0"
bandit = "^1.7.4"
mypy = "^0.991"
sqlfluff = "^1.4.1"
pygments = "2.12.0"
import-linter = "^1.4.0"
ruff = "^0.0.227"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.pytest.ini_options]
addopts = "--xdoctest -xl"

[tool.isort]
profile = "black"
known_pytest = ["pytest", "pytest_postgresql"]
sections = [
    "FUTURE",
    "PYTEST",
    "STDLIB",
    "THIRDPARTY",
    "FIRSTPARTY",
    "LOCALFOLDER",
]
import_heading_future = "Future imports"
import_heading_pytest = "Pytest imports"
import_heading_stdlib = "Standard imports"
import_heading_thirdparty = "Third party imports"
import_heading_firstparty = "First party imports"
import_heading_localfolder = "Local imports"

[tool.importlinter]
root_package = "py_linq_sql"

[tools.importlinter.contracts]
name = "Py-linq-sql layers contract"
type = "layers"
layers = ["sql_enumerable", "build_request", "utils", "exception"]
containers = ["py_linq_sql"]

[tool.bandit]
targets = ["py_linq_sql/"]
skips = ["B608", "B101", "B404"]

# [tool.pydocstyle]
# match = '((?!test_).)*\.py'

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

# mypy per-module options:

[[tool.mypy.overrides]]
module = ["dotmap", "py_linq", "strenum"]
ignore_missing_imports = true

[tool.sqlfluff.core]
dialect = "postgres"

# [tool.pylint.message_control]
# output-format = "colorized"
# msg-template = "'{msg_id}: in the file: {path}, at line: {line:}, at column: {column}, in objects: {obj} -> {msg}' py_linq_sql/"

# [tool.pylint.miscellaneous]
# notes = ["FIXME","XXX"]

[tool.ruff]
line-length = 88

select = [
    "F",      # Pyflakes: generic
    "E",      # pycodestyle: generic
    "I",      # isort and flake8-tidy-imports: import order and correctness
    "D",      # pydocstyle: docstrings convention
    "UP",     # pyupgrade: python changes due to python version upgrade
    "N",      # pep8-naming: naming convention
    "ERA",    # eradicate: commented-out code
    "C",      # flake8-comprehensions: comprehension error/issues
    "T100",   # flake8-debugger: debuging issues
    "B",      # flake8-bugbear: common bugs and design problems
    "A",      # flake8-builtins: builtins shadowing
    "ANN",    # flake8-annotations: annotation problems
    "YTT",    # flake8-2020: checks for misuse of sys.version or sys.version_info
    "BLE",    # flake8-blind-except: no blind except
    "C901",   # mccabe: code complexity
    "PGH",    # pygrep-hooks: no eval allowed
    "RUF",    # Ruff-specific rules
    "RUF100", # Meta rules
    "PLC",    # Pylint
    "PLE",    # Pylint
    "PLR",    # Pylint
    "PLW",    # Pylint
]
ignore = [
    "I001",
    "D212", # Doc not on the same line ass tripl quotes
    # pydocstyle: Google style convention
    "D203",
    "D204",
    "D213",
    "D215",
    "D400",
    "D404",
    "D406",
    "D407",
    "D408",
    "D409",
    "D413",
    "S101",   # assert in code --> needed for pytest
    "E999",   # syntax error -> does not support pattern matching yet https://github.com/charliermarsh/ruff/issues/282
    "ANN101", # Conflict with mypy
]


# Exclude a variety of commonly ignored directories.
exclude = [
    "tests",
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]
per-file-ignores = {}

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.11.
target-version = "py311"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.flake8-annotations]
suppress-none-returning = true

[tool.pylinqsql]
whitelist = [
    "toto",
    "objects",
    "satellite",
    "relational_objects",
    "relational_satellite",
    "relational_one_column_objects",
    "relational_array_column_objects",
    "mixed_objects",
    "rel_objects",
    "test_sc",
    "test",
    "test_rel",
]
