# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import authenticationPush_pb2 as authenticationPush__pb2


class AuthenticationPushStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendRequest = channel.unary_unary(
            "/AuthenticationPush/SendRequest",
            request_serializer=authenticationPush__pb2.AuthenticationRequest.SerializeToString,
            response_deserializer=authenticationPush__pb2.AuthenticationResponse.FromString,
        )
        self.CheckStatus = channel.unary_stream(
            "/AuthenticationPush/CheckStatus",
            request_serializer=authenticationPush__pb2.AuthenticationCheckRequest.SerializeToString,
            response_deserializer=authenticationPush__pb2.AuthenticationResponse.FromString,
        )


class AuthenticationPushServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CheckStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AuthenticationPushServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "SendRequest": grpc.unary_unary_rpc_method_handler(
            servicer.SendRequest,
            request_deserializer=authenticationPush__pb2.AuthenticationRequest.FromString,
            response_serializer=authenticationPush__pb2.AuthenticationResponse.SerializeToString,
        ),
        "CheckStatus": grpc.unary_stream_rpc_method_handler(
            servicer.CheckStatus,
            request_deserializer=authenticationPush__pb2.AuthenticationCheckRequest.FromString,
            response_serializer=authenticationPush__pb2.AuthenticationResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler("AuthenticationPush", rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class AuthenticationPush(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendRequest(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/AuthenticationPush/SendRequest",
            authenticationPush__pb2.AuthenticationRequest.SerializeToString,
            authenticationPush__pb2.AuthenticationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CheckStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/AuthenticationPush/CheckStatus",
            authenticationPush__pb2.AuthenticationCheckRequest.SerializeToString,
            authenticationPush__pb2.AuthenticationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
