# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ai_network_envoy_pb2 as ai__network__envoy__pb2


class AINetworkMerkleDAGStub(object):
    """python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. ai_network_envoy.proto
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.add = channel.unary_unary(
                '/ain.AINetworkMerkleDAG/add',
                request_serializer=ai__network__envoy__pb2.Content.SerializeToString,
                response_deserializer=ai__network__envoy__pb2.ContentResponse.FromString,
                )
        self.get = channel.unary_unary(
                '/ain.AINetworkMerkleDAG/get',
                request_serializer=ai__network__envoy__pb2.ContentRequest.SerializeToString,
                response_deserializer=ai__network__envoy__pb2.Content.FromString,
                )
        self.publish = channel.unary_unary(
                '/ain.AINetworkMerkleDAG/publish',
                request_serializer=ai__network__envoy__pb2.Publication.SerializeToString,
                response_deserializer=ai__network__envoy__pb2.PublicationResponse.FromString,
                )
        self.subscribe = channel.unary_unary(
                '/ain.AINetworkMerkleDAG/subscribe',
                request_serializer=ai__network__envoy__pb2.Subscription.SerializeToString,
                response_deserializer=ai__network__envoy__pb2.SubscriptionResponse.FromString,
                )


class AINetworkMerkleDAGServicer(object):
    """python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. ai_network_envoy.proto
    """

    def add(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AINetworkMerkleDAGServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'add': grpc.unary_unary_rpc_method_handler(
                    servicer.add,
                    request_deserializer=ai__network__envoy__pb2.Content.FromString,
                    response_serializer=ai__network__envoy__pb2.ContentResponse.SerializeToString,
            ),
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=ai__network__envoy__pb2.ContentRequest.FromString,
                    response_serializer=ai__network__envoy__pb2.Content.SerializeToString,
            ),
            'publish': grpc.unary_unary_rpc_method_handler(
                    servicer.publish,
                    request_deserializer=ai__network__envoy__pb2.Publication.FromString,
                    response_serializer=ai__network__envoy__pb2.PublicationResponse.SerializeToString,
            ),
            'subscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.subscribe,
                    request_deserializer=ai__network__envoy__pb2.Subscription.FromString,
                    response_serializer=ai__network__envoy__pb2.SubscriptionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ain.AINetworkMerkleDAG', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AINetworkMerkleDAG(object):
    """python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. ai_network_envoy.proto
    """

    @staticmethod
    def add(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ain.AINetworkMerkleDAG/add',
            ai__network__envoy__pb2.Content.SerializeToString,
            ai__network__envoy__pb2.ContentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ain.AINetworkMerkleDAG/get',
            ai__network__envoy__pb2.ContentRequest.SerializeToString,
            ai__network__envoy__pb2.Content.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ain.AINetworkMerkleDAG/publish',
            ai__network__envoy__pb2.Publication.SerializeToString,
            ai__network__envoy__pb2.PublicationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ain.AINetworkMerkleDAG/subscribe',
            ai__network__envoy__pb2.Subscription.SerializeToString,
            ai__network__envoy__pb2.SubscriptionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
