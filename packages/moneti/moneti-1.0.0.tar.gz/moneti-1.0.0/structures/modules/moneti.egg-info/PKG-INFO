Metadata-Version: 2.1
Name: moneti
Version: 1.0.0
Summary: The dreams that found there way to a canvas.
License: GPL 3.0 + MongoDB SSPL
Keywords: offline signing,offline auth,authentication,elliptic curves,shared responsibilities,patriotism,syllabus
Description-Content-Type: text/markdown
Requires-Dist: clique
Requires-Dist: homeostasis
Requires-Dist: shares
Requires-Dist: botanist
Requires-Dist: click
Requires-Dist: ecdsa
Requires-Dist: flask
Requires-Dist: websockets
Requires-Dist: pycryptodome
Requires-Dist: qrcode




******

Bravo!  You have received a Medical Diploma in Earring from   
the Orbital Convergence University International Air and Water Embassy of the Tangerine Planet.  

You are now officially certified to include "moneti" in your practice.

******



# moneti

---

## description
This is an implementation of possibly one of the most  
secure authentication mechanisms, an Edwards_curve_DSA_448 elliptic curve.   

---

## installation
`[ZSH] pip install moneti`

---

## key generation
```
import moneti.modules.Edwards_curve_DSA_448.private_key.creator as Edwards_curve_DSA_448_private_key_creator
import moneti.modules.Edwards_curve_DSA_448.public_key.creator as Edwards_curve_DSA_448_public_key_creator

import pathlib
from os.path import dirname, join, normpath
import os

seed = "4986888b11358bf3d541b41eea5daece1c6eff64130a45fc8b9ca48f3e0e02463c99c5aedc8a847686d669b7d547c18fe448fc5111ca88f4e8"
format = "PEM"

private_key_path = normpath (join (pathlib.Path (__file__).parent.resolve (), "Edwards_curve_DSA_448_private_key")) + "." + format
public_key_path = normpath (join (pathlib.Path (__file__).parent.resolve (), "Edwards_curve_DSA_448_public_key")) + "." + format

private_key = Edwards_curve_DSA_448_private_key_creator.create (seed, format, private_key_path)
private_key_instance = private_key ["instance"]
private_key_string = private_key ["string"]

public_key = Edwards_curve_DSA_448_public_key_creator.create (
	private_key_path = private_key_path,
	public_key_path = public_key_path,
	public_key_format = format
)
public_key_instance = public_key ["instance"]
public_key_string = public_key ["string"]
```

---

## signatures and verification

### signatures
```
import moneti.modules.Edwards_curve_DSA_448.sign as sign

unsigned_bytes = b"{}"
signed = sign.start (
	private_key_path = "",
	unsigned_bytes = unsigned_bytes
)

signed_bytes = signed.bytes
```


### verification
```
import moneti.modules.Edwards_curve_DSA_448.verify as verify

unsigned_bytes = b"{}"
signed_bytes = signed.bytes	
	
#
#	returns a boolean 
#
verification_status = verify.start (
	public_key_path = "",
	
	signed_bytes = signed_bytes,
	unsigned_bytes = unsigned_bytes
)
assert (verification_status == True), verification_status

```
