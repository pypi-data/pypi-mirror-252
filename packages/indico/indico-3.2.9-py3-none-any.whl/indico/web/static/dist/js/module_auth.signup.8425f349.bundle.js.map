{"version":3,"file":"js/module_auth.signup.8425f349.bundle.js","mappings":"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","sources":["webpack:///indico/modules/auth/client/js/signup.jsx"],"sourcesContent":["// This file is part of Indico.\n// Copyright (C) 2002 - 2023 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Field, Form as FinalForm} from 'react-final-form';\nimport {Button, Form, Message} from 'semantic-ui-react';\n\nimport {\n  SyncedFinalAffiliationDropdown,\n  SyncedFinalDropdown,\n  SyncedFinalInput,\n  SyncedFinalTextArea,\n} from 'indico/react/components/syncedInputs';\nimport {\n  FinalInput,\n  FinalSubmitButton,\n  handleSubmitError,\n  getValuesForFields,\n} from 'indico/react/forms';\nimport {Fieldset, FinalTextArea} from 'indico/react/forms/fields';\nimport {Translate} from 'indico/react/i18n';\nimport {indicoAxios} from 'indico/utils/axios';\n\nfunction Signup({\n  cancelURL,\n  moderated,\n  initialValues,\n  hasPredefinedAffiliations,\n  showAccountForm,\n  syncedValues,\n  emails,\n  affiliationMeta,\n  hasPendingUser,\n  mandatoryFields,\n  lockedFields,\n  lockedFieldMessage,\n}) {\n  const handleSubmit = async (data, form) => {\n    const values = getValuesForFields(data, form);\n    delete values.password_confirm;\n    if (!hasPredefinedAffiliations) {\n      // value.affiliation is already there and used\n      delete values.affiliation_data;\n    } else if (values.affiliation_data) {\n      values.affiliation = values.affiliation_data.text.trim();\n      values.affiliation_id = values.affiliation_data.id;\n      delete values.affiliation_data;\n    }\n    let resp;\n    try {\n      resp = await indicoAxios.post(location.href, values);\n    } catch (e) {\n      return handleSubmitError(\n        e,\n        hasPredefinedAffiliations ? {affiliation: 'affiliation_data'} : {}\n      );\n    }\n    location.href = resp.data.redirect;\n    // never finish submitting to avoid fields being re-enabled\n    await new Promise(() => {});\n  };\n\n  return (\n    <FinalForm\n      onSubmit={handleSubmit}\n      initialValues={initialValues}\n      initialValuesEqual={_.isEqual}\n      subscription={{submitting: true}}\n      validate={values => {\n        const errors = {};\n        if (\n          values.password &&\n          values.password_confirm &&\n          values.password_confirm !== values.password\n        ) {\n          errors.password_confirm = Translate.string('Passwords must match');\n        }\n        return errors;\n      }}\n    >\n      {fprops => (\n        <Form onSubmit={fprops.handleSubmit}>\n          {!showAccountForm && (\n            <Field name=\"synced_fields\" isEqual={_.isEqual} render={() => null} />\n          )}\n          {hasPendingUser && (\n            <Message info>\n              <Translate>\n                There is already some information in Indico that concerns you. We are going to link\n                it automatically.\n              </Translate>\n            </Message>\n          )}\n          <Fieldset\n            legend={Translate.string('User information')}\n            active={showAccountForm || moderated}\n          >\n            {emails.length > 1 ? (\n              <SyncedFinalDropdown\n                name=\"email\"\n                label={Translate.string('Email address')}\n                options={emails.map(e => ({\n                  key: e,\n                  value: e,\n                  text: e,\n                }))}\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n                required\n              />\n            ) : (\n              <SyncedFinalInput\n                name=\"email\"\n                label={Translate.string('Email address')}\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n                readOnly\n              />\n            )}\n            <Form.Group widths=\"equal\">\n              <SyncedFinalInput\n                name=\"first_name\"\n                label={Translate.string('First name')}\n                required\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n              />\n              <SyncedFinalInput\n                name=\"last_name\"\n                label={Translate.string('Last name')}\n                required\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n              />\n            </Form.Group>\n            {hasPredefinedAffiliations ? (\n              <SyncedFinalAffiliationDropdown\n                name=\"affiliation_data\"\n                required={moderated && mandatoryFields.includes('affiliation')}\n                syncName=\"affiliation\"\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n                currentAffiliation={affiliationMeta}\n              />\n            ) : (\n              <SyncedFinalInput\n                name=\"affiliation\"\n                label={Translate.string('Affiliation')}\n                required={moderated && mandatoryFields.includes('affiliation')}\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n              />\n            )}\n            {'address' in syncedValues && (\n              <SyncedFinalTextArea\n                name=\"address\"\n                label={Translate.string('Address')}\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n              />\n            )}\n            {'phone' in syncedValues && (\n              <SyncedFinalInput\n                name=\"phone\"\n                label={Translate.string('Phone number')}\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n              />\n            )}\n          </Fieldset>\n          {showAccountForm && (\n            <Fieldset legend={Translate.string('Login details')}>\n              <FinalInput name=\"username\" label={Translate.string('Username')} required />\n              <Form.Group widths=\"equal\">\n                <FinalInput\n                  name=\"password\"\n                  type=\"password\"\n                  label={Translate.string('Password')}\n                  autoComplete=\"new-password\"\n                  required\n                />\n                <FinalInput\n                  name=\"password_confirm\"\n                  type=\"password\"\n                  label={Translate.string('Confirm password')}\n                  autoComplete=\"new-password\"\n                  required\n                />\n              </Form.Group>\n            </Fieldset>\n          )}\n          {moderated && (\n            <Fieldset legend={Translate.string('Account moderation')}>\n              <Message info>\n                <Translate>\n                  Each new account needs to be approved by an administrator. We will send you an\n                  email as soon as your request has been approved.\n                </Translate>\n              </Message>\n              <FinalTextArea\n                required={mandatoryFields.includes('comment')}\n                name=\"comment\"\n                initialValue=\"\"\n                label={Translate.string('Comment')}\n                description={Translate.string(\n                  'You can provide additional information or a comment for the administrators who will review your registration.'\n                )}\n              />\n            </Fieldset>\n          )}\n          <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n            <FinalSubmitButton\n              disabledUntilChange={false}\n              label={\n                moderated\n                  ? Translate.string('Submit registration request')\n                  : Translate.string('Create my Indico profile')\n              }\n              className=\"submit-button\"\n            />\n            <Form.Field disabled={fprops.submitting}>\n              <Button as=\"a\" href={cancelURL} disabled={fprops.submitting}>\n                <Translate>Cancel</Translate>\n              </Button>\n            </Form.Field>\n          </div>\n        </Form>\n      )}\n    </FinalForm>\n  );\n}\n\nSignup.propTypes = {\n  cancelURL: PropTypes.string.isRequired,\n  moderated: PropTypes.bool.isRequired,\n  initialValues: PropTypes.object.isRequired,\n  hasPredefinedAffiliations: PropTypes.bool.isRequired,\n  showAccountForm: PropTypes.bool.isRequired,\n  syncedValues: PropTypes.object.isRequired,\n  emails: PropTypes.arrayOf(PropTypes.string).isRequired,\n  affiliationMeta: PropTypes.object,\n  hasPendingUser: PropTypes.bool,\n  mandatoryFields: PropTypes.arrayOf(PropTypes.string).isRequired,\n  lockedFields: PropTypes.arrayOf(PropTypes.string),\n  lockedFieldMessage: PropTypes.string,\n};\n\nSignup.defaultProps = {\n  affiliationMeta: null,\n  hasPendingUser: false,\n  lockedFields: [],\n  lockedFieldMessage: '',\n};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const container = document.querySelector('#signup-container');\n  if (!container) {\n    return;\n  }\n\n  const config = JSON.parse(container.dataset.config);\n  ReactDOM.render(<Signup {...config} />, container);\n});\n"],"names":["Signup","_ref","cancelURL","moderated","initialValues","hasPredefinedAffiliations","showAccountForm","syncedValues","emails","affiliationMeta","hasPendingUser","mandatoryFields","lockedFields","lockedFieldMessage","React","FinalForm","onSubmit","async","data","form","values","getValuesForFields","resp","password_confirm","affiliation_data","affiliation","text","trim","affiliation_id","id","indicoAxios","location","href","e","handleSubmitError","redirect","Promise","initialValuesEqual","_isEqual","subscription","submitting","validate","errors","password","Translate","fprops","Form","handleSubmit","Field","name","isEqual","render","Message","info","Fieldset","legend","active","length","SyncedFinalDropdown","label","options","map","key","value","required","SyncedFinalInput","readOnly","widths","SyncedFinalAffiliationDropdown","includes","syncName","currentAffiliation","SyncedFinalTextArea","FinalInput","type","autoComplete","FinalTextArea","initialValue","description","style","display","justifyContent","FinalSubmitButton","disabledUntilChange","className","disabled","Button","as","propTypes","PropTypes","isRequired","defaultProps","document","addEventListener","container","querySelector","config","JSON","parse","dataset","ReactDOM"],"sourceRoot":""}