{"version":3,"file":"js/module_users.personal_data.b464634a.bundle.js","mappings":"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","sources":["webpack:///indico/modules/users/client/js/PersonalDataForm.jsx"],"sourcesContent":["// This file is part of Indico.\n// Copyright (C) 2002 - 2023 CERN\n//\n// Indico is free software; you can redistribute it and/or\n// modify it under the terms of the MIT License; see the\n// LICENSE file for more details.\n\nimport emailsURL from 'indico-url:users.user_emails';\nimport saveURL from 'indico-url:users.user_profile_update';\n\nimport _ from 'lodash';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Field, Form as FinalForm} from 'react-final-form';\nimport {Form} from 'semantic-ui-react';\n\nimport {\n  SyncedFinalAffiliationDropdown,\n  SyncedFinalInput,\n  SyncedFinalTextArea,\n} from 'indico/react/components/syncedInputs';\nimport {\n  FinalDropdown,\n  FinalSubmitButton,\n  getChangedValues,\n  handleSubmitError,\n  parsers as p,\n} from 'indico/react/forms';\nimport {Translate, Param} from 'indico/react/i18n';\nimport {indicoAxios} from 'indico/utils/axios';\n\nfunction PersonalDataForm({\n  userId,\n  userValues,\n  currentAffiliation,\n  titles,\n  syncedValues,\n  lockedFields,\n  lockedFieldMessage,\n  hasPredefinedAffiliations,\n}) {\n  const userIdArgs = userId !== null ? {user_id: userId} : {};\n\n  const handleSubmit = async (data, form) => {\n    const changedValues = getChangedValues(data, form);\n    if (!hasPredefinedAffiliations) {\n      // value.affiliation is already there and used\n      delete changedValues.affiliation_data;\n    } else if (changedValues.affiliation_data) {\n      changedValues.affiliation = changedValues.affiliation_data.text.trim();\n      changedValues.affiliation_id = changedValues.affiliation_data.id;\n      delete changedValues.affiliation_data;\n    }\n    try {\n      await indicoAxios.patch(saveURL(userIdArgs), changedValues);\n    } catch (e) {\n      return handleSubmitError(e);\n    }\n    location.reload();\n    // never finish submitting to avoid fields being re-enabled\n    await new Promise(() => {});\n  };\n\n  const titleOptions = titles.map(t => ({key: t.name, value: t.name, text: t.title}));\n\n  return (\n    <div>\n      <FinalForm\n        onSubmit={handleSubmit}\n        initialValues={userValues}\n        initialValuesEqual={_.isEqual}\n        subscription={{}}\n      >\n        {fprops => (\n          <Form onSubmit={fprops.handleSubmit}>\n            <Field name=\"synced_fields\" isEqual={_.isEqual} render={() => null} />\n            <FinalDropdown\n              name=\"title\"\n              options={titleOptions}\n              selection\n              parse={p.nullIfEmpty}\n              label={Translate.string('Title')}\n              placeholder={Translate.string('None')}\n            />\n            <Form.Group widths=\"equal\">\n              <SyncedFinalInput\n                name=\"first_name\"\n                label={Translate.string('First name')}\n                required\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n              />\n              <SyncedFinalInput\n                name=\"last_name\"\n                label={Translate.string('Last name')}\n                required\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n              />\n            </Form.Group>\n            {hasPredefinedAffiliations ? (\n              <SyncedFinalAffiliationDropdown\n                name=\"affiliation_data\"\n                syncName=\"affiliation\"\n                currentAffiliation={currentAffiliation}\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n              />\n            ) : (\n              <SyncedFinalInput\n                name=\"affiliation\"\n                label={Translate.string('Affiliation')}\n                syncedValues={syncedValues}\n                lockedFields={lockedFields}\n                lockedFieldMessage={lockedFieldMessage}\n              />\n            )}\n            <SyncedFinalTextArea\n              name=\"address\"\n              label={Translate.string('Address')}\n              syncedValues={syncedValues}\n              lockedFields={lockedFields}\n              lockedFieldMessage={lockedFieldMessage}\n            />\n            <SyncedFinalInput\n              name=\"phone\"\n              label={Translate.string('Phone number')}\n              syncedValues={syncedValues}\n              lockedFields={lockedFields}\n              lockedFieldMessage={lockedFieldMessage}\n            />\n            <SyncedFinalInput\n              name=\"email\"\n              label={Translate.string('Email address')}\n              syncedValues={syncedValues}\n              lockedFields={lockedFields}\n              lockedFieldMessage={lockedFieldMessage}\n              readOnly\n            >\n              <Translate>\n                You can manage your email addresses{' '}\n                <Param name=\"link\" wrapper={<a href={emailsURL(userIdArgs)} />}>\n                  here\n                </Param>\n                .\n              </Translate>\n            </SyncedFinalInput>\n            <FinalSubmitButton label={Translate.string('Save changes')} className=\"submit-button\" />\n          </Form>\n        )}\n      </FinalForm>\n    </div>\n  );\n}\n\nPersonalDataForm.propTypes = {\n  userId: PropTypes.number,\n  userValues: PropTypes.object.isRequired,\n  currentAffiliation: PropTypes.object,\n  titles: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  syncedValues: PropTypes.objectOf(PropTypes.string).isRequired,\n  lockedFields: PropTypes.arrayOf(PropTypes.string).isRequired,\n  lockedFieldMessage: PropTypes.string.isRequired,\n  hasPredefinedAffiliations: PropTypes.bool.isRequired,\n};\n\nPersonalDataForm.defaultProps = {\n  userId: null,\n  currentAffiliation: null,\n};\n\nwindow.setupPersonalDataForm = function setupPersonalDataForm(\n  userId,\n  userValues,\n  currentAffiliation,\n  titles,\n  syncedValues,\n  lockedFields,\n  lockedFieldMessage,\n  hasPredefinedAffiliations\n) {\n  document.addEventListener('DOMContentLoaded', () => {\n    ReactDOM.render(\n      <PersonalDataForm\n        userId={userId}\n        userValues={userValues}\n        currentAffiliation={currentAffiliation}\n        titles={titles}\n        syncedValues={syncedValues}\n        lockedFields={lockedFields}\n        lockedFieldMessage={lockedFieldMessage}\n        hasPredefinedAffiliations={hasPredefinedAffiliations}\n      />,\n      document.querySelector('#personal-details-form-container')\n    );\n  });\n};\n"],"names":["emailsURL","_buildFlaskURL","endpoint","rules","args","converters","user_id","defaults","trace","data","isDynamic","saveURL","PersonalDataForm","_ref","userId","userValues","currentAffiliation","titles","syncedValues","lockedFields","lockedFieldMessage","hasPredefinedAffiliations","userIdArgs","titleOptions","map","t","key","name","value","text","title","React","FinalForm","onSubmit","async","form","changedValues","getChangedValues","affiliation_data","affiliation","trim","affiliation_id","id","indicoAxios","e","handleSubmitError","location","reload","Promise","initialValues","initialValuesEqual","_isEqual","subscription","fprops","Form","handleSubmit","Field","isEqual","render","FinalDropdown","options","selection","parse","p","label","Translate","placeholder","widths","SyncedFinalInput","required","SyncedFinalAffiliationDropdown","syncName","SyncedFinalTextArea","readOnly","Param","wrapper","href","FinalSubmitButton","className","propTypes","PropTypes","isRequired","defaultProps","window","setupPersonalDataForm","document","addEventListener","ReactDOM","querySelector"],"sourceRoot":""}