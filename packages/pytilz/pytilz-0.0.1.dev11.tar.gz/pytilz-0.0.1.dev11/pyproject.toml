[tool.poetry]
name = "pytilz"
version = "0.0.1.dev11"
description = ""
authors = ["Ilya Nekhay <nekhayiv@gmail.com>"]
readme = "README.md"
packages = [{include = "pytilz", from = "src"}]


[tool.poetry.dependencies]
python = "^3.10"
# TODO: remove dependency, use respx only when already installed
respx = "*"


[tool.poetry.group.dev.dependencies]
# Code management
pre-commit = "*"
commitizen = "*"

# Testing
pytest = "*"
pytest-cov = "*"
mypy = "*"


[build-system]
requires = ["poetry-core", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"


[tool.pytest.ini_options]
addopts = "--cov=src --cov-report html --cov-report xml --cov-config=.coveragerc"
pythonpath = ["src"]
testpaths = ["tests"]


[tool.isort]
profile = "black"


[tool.poetry.plugins."pytest11"]
"pytilz" = "pytilz.fixtures"


[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_type = "pep440"
version_provider = "poetry"
update_changelog_on_bump = true
major_version_zero = true


[tool.poetry-dynamic-versioning]
enable = false
# TODO: extract version from `cz bump` so that when there's a MINOR/MAJOR change coming, the dev version corresponds
#  to the next MINOR/MAJOR version
format-jinja = """
    {%- if distance == 0 -%}
        {{ serialize_pep440(base, stage, revision) }}
    {%- elif revision is not none -%}
        {{ serialize_pep440(base, stage, revision + 1, dev=distance) }}
    {%- else -%}
        {{ serialize_pep440(bump_version(base), stage, revision, dev=distance) }}
    {%- endif -%}
"""
