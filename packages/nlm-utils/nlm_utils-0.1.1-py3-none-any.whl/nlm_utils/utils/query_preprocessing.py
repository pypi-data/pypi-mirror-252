import re
import string
from typing import Set

from nltk.corpus import stopwords

NLTK_STOP_WORDS = set(stopwords.words("english"))
STOP_WORDS = {
    "a",
    "again",
    "about",
    "after",
    "afterwards",
    "almost",
    "along",
    "already",
    "also",
    "although",
    "always",
    "am",
    "among",
    "amongst",
    "amoungst",
    "amount",
    "an",
    "and",
    "another",
    "any",
    "anyhow",
    "anyone",
    "anything",
    "anyway",
    "anywhere",
    "are",
    "around",
    "as",
    "at",
    "back",
    "be",
    "became",
    "because",
    "become",
    "becomes",
    "becoming",
    "been",
    "before",
    "beforehand",
    "behind",
    "being",
    "below",
    "beside",
    "besides",
    "between",
    "beyond",
    "bill",
    "both",
    "but",
    "by",
    "call",
    "can",
    "cannot",
    "cant",
    "co",
    "con",
    "could",
    "couldnt",
    "cry",
    "de",
    "describe",
    "detail",
    "did",
    "don't",
    "don'",
    "do",
    "done",
    "down",
    "due",
    "during",
    "each",
    "eg",
    "e.g.",
    "ex",
    "eight",
    "either",
    "eleven",
    "else",
    "elsewhere",
    "empty",
    "enough",
    "etc",
    "even",
    "ever",
    "every",
    "everyone",
    "everything",
    "everywhere",
    "except",
    "few",
    "fifteen",
    "fify",
    "fill",
    "find",
    "fire",
    "first",
    "five",
    "for",
    "former",
    "formerly",
    "forty",
    "found",
    "four",
    "from",
    "front",
    "full",
    "further",
    "get",
    "give",
    "go",
    "had",
    "has",
    "hasnt",
    "have",
    "he",
    "hence",
    "her",
    "here",
    "hereafter",
    "hereby",
    "herein",
    "hereupon",
    "hers",
    "herself",
    "him",
    "himself",
    "his",
    "how",
    "however",
    "hundred",
    "i",
    "ie",
    "if",
    "in",
    "inc",
    "indeed",
    "interest",
    "into",
    "is",
    "it",
    "its",
    "itself",
    "just",
    "keep",
    "last",
    "latter",
    "latterly",
    "least",
    "less",
    "ltd",
    "made",
    "many",
    "may",
    "me",
    "meanwhile",
    "might",
    "mill",
    "mine",
    "more",
    "moreover",
    "most",
    "mostly",
    "move",
    "much",
    "must",
    "my",
    "myself",
    "name",
    "namely",
    "neither",
    "never",
    "nevertheless",
    "next",
    "nine",
    "no",
    "nobody",
    "none",
    "noone",
    "nor",
    "not",
    "nothing",
    "now",
    "nowhere",
    "of",
    "off",
    "often",
    "on",
    "once",
    "one",
    "only",
    "onto",
    "or",
    "other",
    "others",
    "otherwise",
    "our",
    "ours",
    "ourselves",
    "out",
    "over",
    "own",
    "part",
    "per",
    "perhaps",
    "please",
    "put",
    "rather",
    "re",
    "s",
    "same",
    "see",
    "seem",
    "seemed",
    "seeming",
    "seems",
    "serious",
    "several",
    "she",
    "should",
    "show",
    "side",
    "since",
    "sincere",
    "six",
    "sixty",
    "so",
    "some",
    "somehow",
    "someone",
    "something",
    "sometime",
    "sometimes",
    "somewhere",
    "still",
    "such",
    "system",
    "take",
    "ten",
    "than",
    "that",
    "the",
    "their",
    "them",
    "themselves",
    "then",
    "thence",
    "there",
    "thereafter",
    "thereby",
    "therefore",
    "therein",
    "thereupon",
    "these",
    "they",
    "thick",
    "thin",
    "third",
    "this",
    "those",
    "though",
    "three",
    "through",
    "throughout",
    "thru",
    "thus",
    "to",
    "together",
    "too",
    "top",
    "toward",
    "towards",
    "twelve",
    "twenty",
    "two",
    "un",
    "under",
    "until",
    "up",
    "upon",
    "us",
    "very",
    "via",
    "was",
    "we",
    "well",
    "were",
    "what",
    "whatever",
    "when",
    "whence",
    "whenever",
    "where",
    "whereafter",
    "whereas",
    "whereby",
    "wherein",
    "whereupon",
    "wherever",
    "whether",
    "which",
    "whoever",
    "yet",
    "you",
    "your",
    "yours",
    "yourself",
    "yourselves",
    "the",
}

QUESTION_WORDS = {
    "who",
    "what",
    "when",
    "where",
    "why",
    "how",
    "which",
    "whose",
    "whom",
}

BOOL_QUESTION_WORDS = {
    "is",
    "isn't",
    "was",
    "were",
    "do",
    "does",
    "will",
    "can",
    "are",
    "has",
    "have",
    "had",
    "did",
    "should",
    "would",
    "could",
    "need",
    "must",
    "shall",
}

NLM_STOP_WORDS = {
    "a",
    "an",
    "and",
    "as",
    "at",
    "be",
    "but",
    "by",
    "for",
    "if",
    "in",
    "it",
    "of",
    "on",
    "or",
    "such",
    "that",
    "the",
    "then",
    "there",
    "these",
    "they",
    "this",
    "to",
    "with",
}

CROSS_REFERENCE_STOP_WORDS = {
    "a",
    "about",
    "after",
    "afterwards",
    "again",
    "almost",
    "along",
    "already",
    "also",
    "although",
    "always",
    "am",
    "among",
    "amongst",
    "amoungst",
    "an",
    "and",
    "another",
    "any",
    "anyhow",
    "anyone",
    "anything",
    "anyway",
    "anywhere",
    "are",
    "around",
    "as",
    "at",
    "back",
    "be",
    "became",
    "because",
    "become",
    "becomes",
    "becoming",
    "been",
    "before",
    "beforehand",
    "behind",
    "being",
    "below",
    "beside",
    "besides",
    "between",
    "beyond",
    "both",
    "but",
    "by",
    "can",
    "cannot",
    "cant",
    "co",
    "con",
    "could",
    "couldnt",
    "de",
    "did",
    "do",
    "does",
    "don'",
    "don't",
    "done",
    "during",
    "e.g.",
    "each",
    "eg",
    "either",
    "else",
    "elsewhere",
    "enough",
    "etc",
    "ever",
    "every",
    "everything",
    "everywhere",
    "ex",
    "except",
    "few",
    "fify",
    "for",
    "from",
    "further",
    "had",
    "has",
    "hasnt",
    "have",
    "hence",
    "hereafter",
    "hereby",
    "herein",
    "hereof",
    "hereunder",
    "hereupon",
    "herself",
    "himself",
    "how",
    "however",
    "ie",
    "if",
    "in" "include",
    "includes",
    "including",
    "into",
    "is",
    "isn't",
    "it",
    "its",
    "itself",
    "just",
    "latterly",
    "least",
    "less",
    "made",
    "many",
    "may",
    "meanwhile",
    "might",
    "mine",
    "more",
    "moreover",
    "most",
    "mostly",
    "move",
    "much",
    "must",
    "namely",
    "need",
    "neither",
    "never",
    "nevertheless",
    "next",
    "no",
    "noone",
    "nor",
    "not",
    "nothing",
    "nowhere",
    "of",
    "off",
    "often",
    "on",
    "only",
    "onto",
    "or",
    "other",
    "otherwise",
    "ourselves",
    "out",
    "over",
    "own",
    "part",
    "per",
    "perhaps",
    "please",
    "put",
    "rather",
    "re",
    "s",
    "same",
    "see",
    "seem",
    "seemed",
    "seeming",
    "seems",
    "shall",
    "should",
    "show",
    "side",
    "since",
    "sincere",
    "so",
    "some",
    "somehow",
    "sometimes",
    "still",
    "such",
    "take",
    "than",
    "that",
    "the",
    "then",
    "thence",
    "there",
    "thereafter",
    "thereby",
    "therefore",
    "therein",
    "thereupon",
    "these",
    "this",
    "those",
    "though",
    "through",
    "throughout",
    "thru",
    "thus",
    "to",
    "together",
    "too",
    "top",
    "toward",
    "towards",
    "un",
    "under",
    "until",
    "up",
    "upon",
    "very",
    "via",
    "was",
    "were",
    "what",
    "whatever",
    "when",
    "whence",
    "whenever",
    "where",
    "whereafter",
    "whereas",
    "whereby",
    "wherein",
    "whereupon",
    "wherever",
    "whether",
    "which",
    "who",
    "whoever",
    "whom",
    "whose",
    "why",
    "will",
    "with",
    "would",
    "yet",
    "yourself",
    "yourselves",
}

REPORTING_PHRASES = {
    "along with",
    "based on",
    "by the warranty provisions of",
    "conform to",
    "conform with",
    "confirmation from",
    "in conformance with",
    "comply with",
    "in compliance with",
    "covered in",
    "covered by",
    "contained in",
    "determined by",
    "define by",
    "define as",
    "define in",
    "definition from",
    "definition of",
    "directed by",
    "described in",
    "fitting to",
    "found in",
    "find in",
    "found by",
    "according to",
    "in accordance with",
    "in accordance to",
    "given in",
    "in conjunction with",
    "itemized in",
    "included in",
    "indicated in",
    "indicated on",
    "meeting",
    "identified in",
    "identify",
    "mention",
    "mentioned by",
    "mentioned for",
    "map to",
    "noted in",
    "provided in",
    "provided by",
    "permitted within",
    "permitted by",
    "required by",
    "refer to",
    "refers to",
    "standing of",
    "stated in",
    "specified in",
    "see",
    "satisfy",
    "maintain through",
    "supplemented by",
    "set by",
    "with the requirements of",
    "proclaim",
    "state",
    "pointed out",
    "point to",
    "comment",
    "observe",
    "reported by",
    "express",
    "consider",
    "explored",
    "illustrated",
    "emphasized",
    "proposed by",
    "acknowledge",
    "admit",
    "concede",
    "remark",
    "conclude",
    "confirmed by",
    "discovers",
    "established by",
    "admits",
    "recognize",
    "declares",
    "reflect",
    "realize",
    "requests",
    "imply",
    "estimate",
    "investigate",
    "inform",
    "list in",
    "outlined in",
    "reveal",
    "restate",
    "presented in",
    "uses",
    "studied by",
    "hypothesize",
    "theorizes",
    "contradict",
    "approved by",
    "assert",
    "recommended by",
    "suggested by",
    "view",
    "demonstrate with",
    "calculate",
    "suppose",
    "stipulate",
    "take into consideration",
    "investigate",
    "contrast",
    "compare",
    "develop",
    "infer",
    "recognize",
    "elaborate",
    "contribute",
    "address",
}
REPORTING_PHRASE_PATTERN = r"""(?:{reporting_phrase_prefix}){remaining_str}""".format(
    remaining_str=r'\s+(?:[^\s]+\s+){0,2}["“‘’\'](?P<text>(?!\D\s)(?!\d+)(.*?))[,;:]?[”"‘’\']',
    reporting_phrase_prefix="|".join(i for i in REPORTING_PHRASES),
)
REPORTING_PHRASE_PATTERN_RE = re.compile(REPORTING_PHRASE_PATTERN)

PUNCT_TABLE = str.maketrans(dict.fromkeys(string.punctuation))


def is_question(sent: str):
    tokens = sent.lower().split()
    return len(tokens) > 1 and (
        tokens[0] in QUESTION_WORDS or tokens[0] in BOOL_QUESTION_WORDS
    )


def is_bool_question(sent: str):
    tokens = sent.lower().split()
    return len(tokens) > 1 and tokens[0] in BOOL_QUESTION_WORDS


def make_question(sent: str):
    if not sent.endswith("?"):
        return sent + "?"
    else:
        return sent


def remove_question_mark(sent: str):
    if sent.endswith("?"):
        return sent[:-1].strip()
    else:
        return sent


def remove_punctuation(sent: str):
    new_s = sent.translate(PUNCT_TABLE)
    return new_s


def get_words(sent: str):
    sent = remove_punctuation(sent)
    return sent.lower().split()


def filter_keywords(keywords: list, additional_words: Set[str] = {}):
    tokens = [
        token
        for token in keywords
        if (
            token not in QUESTION_WORDS
            and token not in BOOL_QUESTION_WORDS
            and token not in additional_words
        )
    ]
    return tokens


def identify_non_reporting_expression(keyword: string, contexts: list):
    if not keyword or not contexts:
        return []
    ret_contexts = []
    for context in contexts:
        keyword_list = []
        for match in REPORTING_PHRASE_PATTERN_RE.finditer(context["text"]):
            for key, value in match.groupdict().items():
                if value == keyword:
                    keyword_list.append(value)
        if context["text"].count(keyword) != len(keyword_list):
            ret_contexts.append(context)
    return ret_contexts
