"""Generated by Sideko (sideko.dev)"""
import io
import typing
import enum
from pydantic import (
    BaseModel as _PydanticBaseModel,
    Field as _PydanticField,
    ConfigDict as _PydanticConfigDict,
)

ModelFiles = typing.List[
    typing.Tuple[str, typing.Union[typing.BinaryIO, io.BufferedReader]]
]


class BinaryResponse:
    content: bytes
    headers: dict[str, str]

    def __init__(self, content: bytes, headers: dict[str, str]) -> None:
        self.content = content
        self.headers = headers


class GetPublicationsDirectionEnum(str, enum.Enum):
    ASC = "asc"
    DESC = "desc"

    def __str__(self) -> str:
        return self.value


class GetPublicationsExpandItemEnum(str, enum.Enum):
    STATS = "stats"

    def __str__(self) -> str:
        return self.value


class GetPublicationsOrderByEnum(str, enum.Enum):
    CREATED = "created"
    NAME = "name"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdExpandItemEnum(str, enum.Enum):
    STATS = "stats"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdEmailBlastsDirectionEnum(str, enum.Enum):
    ASC = "asc"
    DESC = "desc"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdEmailBlastsExpandItemEnum(str, enum.Enum):
    STATS = "stats"
    FREE_EMAIL_CONTENT = "free_email_content"
    PREMIUM_EMAIL_CONTENT = "premium_email_content"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdEmailBlastsOrderByEnum(str, enum.Enum):
    CREATED = "created"
    LAST_SENT = "last_sent"

    def __str__(self) -> str:
        return self.value


class EmailBlastStatusEnum(str, enum.Enum):
    ACTIVE = "active"
    INACTIVE = "inactive"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdEmailBlastsEmailBlastIdExpandItemEnum(str, enum.Enum):
    STATS = "stats"
    FREE_EMAIL_CONTENT = "free_email_content"
    PREMIUM_EMAIL_CONTENT = "premium_email_content"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdPostsAudienceEnum(str, enum.Enum):
    FREE = "free"
    PREMIUM = "premium"
    ALL = "all"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdPostsDirectionEnum(str, enum.Enum):
    ASC = "asc"
    DESC = "desc"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdPostsExpandItemEnum(str, enum.Enum):
    STATS = "stats"
    FREE_WEB_CONTENT = "free_web_content"
    FREE_EMAIL_CONTENT = "free_email_content"
    FREE_RSS_CONTENT = "free_rss_content"
    PREMIUM_WEB_CONTENT = "premium_web_content"
    PREMIUM_EMAIL_CONTENT = "premium_email_content"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdPostsOrderByEnum(str, enum.Enum):
    CREATED = "created"
    PUBLISH_DATE = "publish_date"
    DISPLAYED_DATE = "displayed_date"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdPostsPlatformEnum(str, enum.Enum):
    WEB = "web"
    EMAIL = "email"
    BOTH = "both"
    ALL = "all"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdPostsStatusEnum(str, enum.Enum):
    DRAFT = "draft"
    CONFIRMED = "confirmed"
    ARCHIVED = "archived"
    ALL = "all"

    def __str__(self) -> str:
        return self.value


class PostAudienceEnum(str, enum.Enum):
    FREE = "free"
    PREMIUM = "premium"
    BOTH = "both"

    def __str__(self) -> str:
        return self.value


class PostPlatformEnum(str, enum.Enum):
    WEB = "web"
    EMAIL = "email"
    BOTH = "both"

    def __str__(self) -> str:
        return self.value


class PostStatusEnum(str, enum.Enum):
    DRAFT = "draft"
    CONFIRMED = "confirmed"
    ARCHIVED = "archived"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdPostsPostIdExpandItemEnum(str, enum.Enum):
    STATS = "stats"
    FREE_WEB_CONTENT = "free_web_content"
    FREE_EMAIL_CONTENT = "free_email_content"
    FREE_RSS_CONTENT = "free_rss_content"
    PREMIUM_WEB_CONTENT = "premium_web_content"
    PREMIUM_EMAIL_CONTENT = "premium_email_content"

    def __str__(self) -> str:
        return self.value


class MilestoneRewardTypeEnum(str, enum.Enum):
    PHYSICAL = "physical"
    PROMO_CODE = "promo_code"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdSegmentsDirectionEnum(str, enum.Enum):
    ASC = "asc"
    DESC = "desc"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdSegmentsOrderByEnum(str, enum.Enum):
    CREATED = "created"
    LAST_CALCULATED = "last_calculated"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdSegmentsStatusEnum(str, enum.Enum):
    PENDING = "pending"
    PROCESSING = "processing"
    COMPLETED = "completed"
    FAILED = "failed"
    ALL = "all"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdSegmentsTypeEnum(str, enum.Enum):
    DYNAMIC = "dynamic"
    STATIC = "static"
    MANUAL = "manual"
    ALL = "all"

    def __str__(self) -> str:
        return self.value


class SegmentStatusEnum(str, enum.Enum):
    PENDING = "pending"
    PROCESSING = "processing"
    COMPLETED = "completed"
    FAILED = "failed"

    def __str__(self) -> str:
        return self.value


class SegmentTypeEnum(str, enum.Enum):
    DYNAMIC = "dynamic"
    STATIC = "static"
    MANUAL = "manual"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdSubscriptionsDirectionEnum(str, enum.Enum):
    ASC = "asc"
    DESC = "desc"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdSubscriptionsExpandItemEnum(str, enum.Enum):
    STATS = "stats"
    CUSTOM_FIELDS = "custom_fields"
    REFERRALS = "referrals"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdSubscriptionsOrderByEnum(str, enum.Enum):
    CREATED = "created"
    EMAIL = "email"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdSubscriptionsStatusEnum(str, enum.Enum):
    VALIDATING = "validating"
    INVALID = "invalid"
    PENDING = "pending"
    ACTIVE = "active"
    INACTIVE = "inactive"
    ALL = "all"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdSubscriptionsTierEnum(str, enum.Enum):
    FREE = "free"
    PREMIUM = "premium"
    ALL = "all"

    def __str__(self) -> str:
        return self.value


class SubscriptionExpandedStatusEnum(str, enum.Enum):
    VALIDATING = "validating"
    INVALID = "invalid"
    PENDING = "pending"
    ACTIVE = "active"
    INACTIVE = "inactive"
    NEEDS_ATTENTION = "needs_attention"

    def __str__(self) -> str:
        return self.value


class SubscriptionExpandedSubscriptionTierEnum(str, enum.Enum):
    FREE = "free"
    PREMIUM = "premium"

    def __str__(self) -> str:
        return self.value


class SubscriptionExpandedUtmChannelEnum(str, enum.Enum):
    X = ""
    WEBSITE = "website"
    IMPORT = "import"
    EMBED = "embed"
    API = "api"
    REFERRAL = "referral"
    RECOMMENDATION = "recommendation"
    MAGIC_LINK = "magic_link"
    BOOST = "boost"
    BOOST_SEND = "boost_send"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdSubscriptionsByEmailEmailExpandItemEnum(
    str, enum.Enum
):
    STATS = "stats"
    CUSTOM_FIELDS = "custom_fields"
    REFERRALS = "referrals"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdSubscriptionsBySubscriberIdSubscriberIdExpandItemEnum(
    str, enum.Enum
):
    STATS = "stats"
    CUSTOM_FIELDS = "custom_fields"
    REFERRALS = "referrals"

    def __str__(self) -> str:
        return self.value


class GetPublicationsPublicationIdSubscriptionsSubscriptionIdExpandItemEnum(
    str, enum.Enum
):
    STATS = "stats"
    CUSTOM_FIELDS = "custom_fields"
    REFERRALS = "referrals"

    def __str__(self) -> str:
        return self.value


class PatchPublicationsPublicationIdSubscriptionsSubscriptionIdBodyTierEnum(
    str, enum.Enum
):
    FREE = "free"
    PREMIUM = "premium"

    def __str__(self) -> str:
        return self.value


class SubscriptionStatusEnum(str, enum.Enum):
    VALIDATING = "validating"
    INVALID = "invalid"
    PENDING = "pending"
    ACTIVE = "active"
    INACTIVE = "inactive"
    NEEDS_ATTENTION = "needs_attention"

    def __str__(self) -> str:
        return self.value


class SubscriptionSubscriptionTierEnum(str, enum.Enum):
    FREE = "free"
    PREMIUM = "premium"

    def __str__(self) -> str:
        return self.value


class SubscriptionUtmChannelEnum(str, enum.Enum):
    X = ""
    WEBSITE = "website"
    IMPORT = "import"
    EMBED = "embed"
    API = "api"
    REFERRAL = "referral"
    RECOMMENDATION = "recommendation"
    MAGIC_LINK = "magic_link"
    BOOST = "boost"
    BOOST_SEND = "boost_send"

    def __str__(self) -> str:
        return self.value


class PostPublicationsPublicationIdSubscriptionsBodyTierEnum(str, enum.Enum):
    FREE = "free"
    PREMIUM = "premium"

    def __str__(self) -> str:
        return self.value


class PutPublicationsPublicationIdSubscriptionsSubscriptionIdBodyTierEnum(
    str, enum.Enum
):
    FREE = "free"
    PREMIUM = "premium"

    def __str__(self) -> str:
        return self.value


class DeletePublicationsPublicationIdCustomFieldsIdResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    message: typing.Optional[str] = _PydanticField(alias="message", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class ErrorErrorsItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    code: str = _PydanticField(alias="code")
    message: str = _PydanticField(alias="message")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PublicationStats(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    active_free_subscriptions: typing.Optional[int] = _PydanticField(
        alias="active_free_subscriptions", default=None
    )
    active_premium_subscriptions: typing.Optional[int] = _PydanticField(
        alias="active_premium_subscriptions", default=None
    )
    active_subscriptions: typing.Optional[int] = _PydanticField(
        alias="active_subscriptions", default=None
    )
    average_click_rate: typing.Optional[float] = _PydanticField(
        alias="average_click_rate", default=None
    )
    average_open_rate: typing.Optional[float] = _PydanticField(
        alias="average_open_rate", default=None
    )
    total_clicked: typing.Optional[int] = _PydanticField(
        alias="total_clicked", default=None
    )
    total_sent: typing.Optional[int] = _PydanticField(alias="total_sent", default=None)
    total_unique_opened: typing.Optional[int] = _PydanticField(
        alias="total_unique_opened", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsPublicationIdBulkSubscriptionUpdatesResponseDataItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    completed: typing.Optional[int] = _PydanticField(alias="completed", default=None)
    created: typing.Optional[int] = _PydanticField(alias="created", default=None)
    error_log: typing.Optional[typing.List[str]] = _PydanticField(
        alias="error_log", default=None
    )
    failure_reason: typing.Optional[str] = _PydanticField(
        alias="failure_reason", default=None
    )
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    params: typing.Optional[str] = _PydanticField(alias="params", default=None)
    publication_id: typing.Optional[str] = _PydanticField(
        alias="publication_id", default=None
    )
    status: typing.Optional[typing.Any] = _PydanticField(alias="status", default=None)
    type: typing.Optional[typing.Any] = _PydanticField(alias="type", default=None)
    updated: typing.Optional[int] = _PydanticField(alias="updated", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsPublicationIdBulkSubscriptionUpdatesIdResponseData(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    completed: typing.Optional[int] = _PydanticField(alias="completed", default=None)
    created: typing.Optional[int] = _PydanticField(alias="created", default=None)
    error_log: typing.Optional[typing.List[str]] = _PydanticField(
        alias="error_log", default=None
    )
    failure_reason: typing.Optional[str] = _PydanticField(
        alias="failure_reason", default=None
    )
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    params: typing.Optional[str] = _PydanticField(alias="params", default=None)
    publication_id: typing.Optional[str] = _PydanticField(
        alias="publication_id", default=None
    )
    status: typing.Optional[typing.Any] = _PydanticField(alias="status", default=None)
    type: typing.Optional[typing.Any] = _PydanticField(alias="type", default=None)
    updated: typing.Optional[int] = _PydanticField(alias="updated", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsPublicationIdCustomFieldsResponseDataItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    created: typing.Optional[int] = _PydanticField(alias="created", default=None)
    display: typing.Optional[str] = _PydanticField(alias="display", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    kind: typing.Optional[typing.Any] = _PydanticField(alias="kind", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsPublicationIdCustomFieldsIdResponseData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    created: typing.Optional[int] = _PydanticField(alias="created", default=None)
    display: typing.Optional[str] = _PydanticField(alias="display", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    kind: typing.Optional[typing.Any] = _PydanticField(alias="kind", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class EmailBlastContentEmail(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    free: typing.Optional[str] = _PydanticField(alias="free", default=None)
    premium: typing.Optional[str] = _PydanticField(alias="premium", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class EmailBlastStatsClicksItem(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    total_click_through_rate: typing.Optional[float] = _PydanticField(
        alias="total_click_through_rate", default=None
    )
    total_clicks: typing.Optional[int] = _PydanticField(
        alias="total_clicks", default=None
    )
    total_unique_clicks: typing.Optional[int] = _PydanticField(
        alias="total_unique_clicks", default=None
    )
    url: typing.Optional[str] = _PydanticField(alias="url", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class EmailBlastStatsEmail(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    click_rate: typing.Optional[float] = _PydanticField(
        alias="click_rate", default=None
    )
    clicks: typing.Optional[int] = _PydanticField(alias="clicks", default=None)
    open_rate: typing.Optional[float] = _PydanticField(alias="open_rate", default=None)
    opens: typing.Optional[int] = _PydanticField(alias="opens", default=None)
    recipients: typing.Optional[int] = _PydanticField(alias="recipients", default=None)
    spam_reports: typing.Optional[int] = _PydanticField(
        alias="spam_reports", default=None
    )
    unique_clicks: typing.Optional[int] = _PydanticField(
        alias="unique_clicks", default=None
    )
    unique_opens: typing.Optional[int] = _PydanticField(
        alias="unique_opens", default=None
    )
    unsubscribes: typing.Optional[int] = _PydanticField(
        alias="unsubscribes", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostContentFree(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    email: typing.Optional[str] = _PydanticField(alias="email", default=None)
    rss: typing.Optional[str] = _PydanticField(alias="rss", default=None)
    web: typing.Optional[str] = _PydanticField(alias="web", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostContentPremium(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    email: typing.Optional[str] = _PydanticField(alias="email", default=None)
    web: typing.Optional[str] = _PydanticField(alias="web", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostClickStatsEmail(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    click_through_rate: typing.Optional[float] = _PydanticField(
        alias="click_through_rate", default=None
    )
    clicks: typing.Optional[int] = _PydanticField(alias="clicks", default=None)
    unique_clicks: typing.Optional[int] = _PydanticField(
        alias="unique_clicks", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostClickStatsWeb(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    click_through_rate: typing.Optional[float] = _PydanticField(
        alias="click_through_rate", default=None
    )
    clicks: typing.Optional[int] = _PydanticField(alias="clicks", default=None)
    unique_clicks: typing.Optional[int] = _PydanticField(
        alias="unique_clicks", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostStatsEmail(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    click_rate: typing.Optional[float] = _PydanticField(
        alias="click_rate", default=None
    )
    clicks: typing.Optional[int] = _PydanticField(alias="clicks", default=None)
    open_rate: typing.Optional[float] = _PydanticField(alias="open_rate", default=None)
    opens: typing.Optional[int] = _PydanticField(alias="opens", default=None)
    recipients: typing.Optional[int] = _PydanticField(alias="recipients", default=None)
    spam_reports: typing.Optional[int] = _PydanticField(
        alias="spam_reports", default=None
    )
    unique_clicks: typing.Optional[int] = _PydanticField(
        alias="unique_clicks", default=None
    )
    unique_opens: typing.Optional[int] = _PydanticField(
        alias="unique_opens", default=None
    )
    unsubscribes: typing.Optional[int] = _PydanticField(
        alias="unsubscribes", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostStatsWeb(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    clicks: typing.Optional[int] = _PydanticField(alias="clicks", default=None)
    views: typing.Optional[int] = _PydanticField(alias="views", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class MilestoneReward(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    description: str = _PydanticField(alias="description")
    id: str = _PydanticField(alias="id")
    image_url: str = _PydanticField(alias="image_url")
    name: str = _PydanticField(alias="name")
    type: MilestoneRewardTypeEnum = _PydanticField(alias="type")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class Segment(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    active: bool = _PydanticField(alias="active")
    id: str = _PydanticField(alias="id")
    last_calculated: typing.Optional[int] = _PydanticField(
        alias="last_calculated", default=None
    )
    name: str = _PydanticField(alias="name")
    status: SegmentStatusEnum = _PydanticField(alias="status")
    total_results: int = _PydanticField(alias="total_results")
    type: SegmentTypeEnum = _PydanticField(alias="type")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsPublicationIdSegmentsSegmentIdResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: Segment = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsPublicationIdSegmentsSegmentIdResultsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[str] = _PydanticField(alias="data")
    limit: int = _PydanticField(alias="limit")
    page: int = _PydanticField(alias="page")
    total_pages: int = _PydanticField(alias="total_pages")
    total_results: int = _PydanticField(alias="total_results")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class SubscriptionExpanded(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    created: int = _PydanticField(alias="created")
    email: str = _PydanticField(alias="email")
    id: str = _PydanticField(alias="id")
    referral_code: str = _PydanticField(alias="referral_code")
    referring_site: str = _PydanticField(alias="referring_site")
    stats: typing.Optional[typing.Dict[str, typing.Any]] = _PydanticField(
        alias="stats", default=None
    )
    status: SubscriptionExpandedStatusEnum = _PydanticField(alias="status")
    subscription_tier: SubscriptionExpandedSubscriptionTierEnum = _PydanticField(
        alias="subscription_tier"
    )
    utm_campaign: str = _PydanticField(alias="utm_campaign")
    utm_channel: SubscriptionExpandedUtmChannelEnum = _PydanticField(
        alias="utm_channel"
    )
    utm_medium: str = _PydanticField(alias="utm_medium")
    utm_source: str = _PydanticField(alias="utm_source")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsPublicationIdSubscriptionsByEmailEmailResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: SubscriptionExpanded = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsPublicationIdSubscriptionsBySubscriberIdSubscriberIdResponse(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: SubscriptionExpanded = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsPublicationIdSubscriptionsSubscriptionIdResponse(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: SubscriptionExpanded = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PatchPublicationsPublicationIdCustomFieldsIdBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    display: typing.Optional[str] = _PydanticField(alias="display", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PatchPublicationsPublicationIdCustomFieldsIdResponseData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    created: typing.Optional[int] = _PydanticField(alias="created", default=None)
    display: typing.Optional[str] = _PydanticField(alias="display", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    kind: typing.Optional[typing.Any] = _PydanticField(alias="kind", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PatchPublicationsPublicationIdSubscriptionsBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    new_status: typing.Any = _PydanticField(alias="new_status")
    subscription_ids: typing.List[str] = _PydanticField(alias="subscription_ids")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PatchPublicationsPublicationIdSubscriptionsResponseData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    subscription_update_id: str = _PydanticField(alias="subscription_update_id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PatchPublicationsPublicationIdSubscriptionsBulkActionsBodySubscriptionsItemCustomFieldsItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    delete: typing.Optional[bool] = _PydanticField(alias="delete", default=None)
    display: typing.Optional[str] = _PydanticField(alias="display", default=None)
    value: typing.Optional[str] = _PydanticField(alias="value", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PatchPublicationsPublicationIdSubscriptionsBulkActionsResponseData(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    subscription_update_id: typing.Optional[str] = _PydanticField(
        alias="subscription_update_id", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PatchPublicationsPublicationIdSubscriptionsSubscriptionIdBodyCustomFieldsItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    delete: typing.Optional[bool] = _PydanticField(alias="delete", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    value: typing.Optional[str] = _PydanticField(alias="value", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class Subscription(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    created: int = _PydanticField(alias="created")
    email: str = _PydanticField(alias="email")
    id: str = _PydanticField(alias="id")
    referral_code: str = _PydanticField(alias="referral_code")
    referring_site: str = _PydanticField(alias="referring_site")
    status: SubscriptionStatusEnum = _PydanticField(alias="status")
    stripe_customer_id: typing.Optional[str] = _PydanticField(
        alias="stripe_customer_id", default=None
    )
    subscription_tier: SubscriptionSubscriptionTierEnum = _PydanticField(
        alias="subscription_tier"
    )
    utm_campaign: str = _PydanticField(alias="utm_campaign")
    utm_channel: SubscriptionUtmChannelEnum = _PydanticField(alias="utm_channel")
    utm_medium: str = _PydanticField(alias="utm_medium")
    utm_source: str = _PydanticField(alias="utm_source")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostPublicationsPublicationIdCustomFieldsBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    display: str = _PydanticField(alias="display")
    kind: typing.Any = _PydanticField(alias="kind")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostPublicationsPublicationIdCustomFieldsResponseData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    created: int = _PydanticField(alias="created")
    display: str = _PydanticField(alias="display")
    id: str = _PydanticField(alias="id")
    kind: typing.Any = _PydanticField(alias="kind")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostPublicationsPublicationIdSubscriptionsBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    custom_fields: typing.Optional[
        typing.List[typing.Dict[str, typing.Any]]
    ] = _PydanticField(alias="custom_fields", default=None)
    double_opt_override: typing.Optional[typing.Any] = _PydanticField(
        alias="double_opt_override", default=None
    )
    email: str = _PydanticField(alias="email")
    reactivate_existing: typing.Optional[bool] = _PydanticField(
        alias="reactivate_existing", default=None
    )
    referral_code: typing.Optional[str] = _PydanticField(
        alias="referral_code", default=None
    )
    referring_site: typing.Optional[str] = _PydanticField(
        alias="referring_site", default=None
    )
    send_welcome_email: typing.Optional[bool] = _PydanticField(
        alias="send_welcome_email", default=None
    )
    stripe_customer_id: typing.Optional[str] = _PydanticField(
        alias="stripe_customer_id", default=None
    )
    tier: typing.Optional[
        PostPublicationsPublicationIdSubscriptionsBodyTierEnum
    ] = _PydanticField(alias="tier", default=None)
    utm_campaign: typing.Optional[str] = _PydanticField(
        alias="utm_campaign", default=None
    )
    utm_medium: typing.Optional[str] = _PydanticField(alias="utm_medium", default=None)
    utm_source: typing.Optional[str] = _PydanticField(alias="utm_source", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostPublicationsPublicationIdSubscriptionsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: Subscription = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PutPublicationsPublicationIdCustomFieldsIdBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    display: typing.Optional[str] = _PydanticField(alias="display", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PutPublicationsPublicationIdCustomFieldsIdResponseData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    created: typing.Optional[int] = _PydanticField(alias="created", default=None)
    display: typing.Optional[str] = _PydanticField(alias="display", default=None)
    id: typing.Optional[str] = _PydanticField(alias="id", default=None)
    kind: typing.Optional[typing.Any] = _PydanticField(alias="kind", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PutPublicationsPublicationIdSubscriptionsBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    new_status: typing.Any = _PydanticField(alias="new_status")
    subscription_ids: typing.List[str] = _PydanticField(alias="subscription_ids")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PutPublicationsPublicationIdSubscriptionsResponseData(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    subscription_update_id: str = _PydanticField(alias="subscription_update_id")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PutPublicationsPublicationIdSubscriptionsBulkActionsBodySubscriptionsItemCustomFieldsItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    delete: typing.Optional[bool] = _PydanticField(alias="delete", default=None)
    display: typing.Optional[str] = _PydanticField(alias="display", default=None)
    value: typing.Optional[str] = _PydanticField(alias="value", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PutPublicationsPublicationIdSubscriptionsBulkActionsResponseData(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    subscription_update_id: typing.Optional[str] = _PydanticField(
        alias="subscription_update_id", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PutPublicationsPublicationIdSubscriptionsSubscriptionIdBodyCustomFieldsItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    delete: typing.Optional[bool] = _PydanticField(alias="delete", default=None)
    name: typing.Optional[str] = _PydanticField(alias="name", default=None)
    value: typing.Optional[str] = _PydanticField(alias="value", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PutPublicationsPublicationIdSubscriptionsSubscriptionIdResponse(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: Subscription = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class Error(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    errors: typing.List[ErrorErrorsItem] = _PydanticField(alias="errors")
    status: str = _PydanticField(alias="status")
    status_text: str = _PydanticField(alias="statusText")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class Publication(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    created: float = _PydanticField(alias="created")
    id: str = _PydanticField(alias="id")
    name: str = _PydanticField(alias="name")
    referral_program_enabled: bool = _PydanticField(alias="referral_program_enabled")
    stats: typing.Optional[PublicationStats] = _PydanticField(
        alias="stats", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsPublicationIdResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: Publication = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsPublicationIdBulkSubscriptionUpdatesResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[GetPublicationsPublicationIdBulkSubscriptionUpdatesResponseDataItem]
    ] = _PydanticField(alias="data", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsPublicationIdBulkSubscriptionUpdatesIdResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[
        GetPublicationsPublicationIdBulkSubscriptionUpdatesIdResponseData
    ] = _PydanticField(alias="data", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsPublicationIdCustomFieldsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[
        typing.List[GetPublicationsPublicationIdCustomFieldsResponseDataItem]
    ] = _PydanticField(alias="data", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsPublicationIdCustomFieldsIdResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[
        GetPublicationsPublicationIdCustomFieldsIdResponseData
    ] = _PydanticField(alias="data", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class EmailBlastContent(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    email: typing.Optional[EmailBlastContentEmail] = _PydanticField(
        alias="email", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class EmailBlastStats(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    clicks: typing.Optional[typing.List[EmailBlastStatsClicksItem]] = _PydanticField(
        alias="clicks", default=None
    )
    email: typing.Optional[EmailBlastStatsEmail] = _PydanticField(
        alias="email", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostContent(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    free: typing.Optional[PostContentFree] = _PydanticField(alias="free", default=None)
    premium: typing.Optional[PostContentPremium] = _PydanticField(
        alias="premium", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostClickStats(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    email: typing.Optional[PostClickStatsEmail] = _PydanticField(
        alias="email", default=None
    )
    total_click_through_rate: typing.Optional[float] = _PydanticField(
        alias="total_click_through_rate", default=None
    )
    total_clicks: typing.Optional[int] = _PydanticField(
        alias="total_clicks", default=None
    )
    total_unique_clicks: typing.Optional[int] = _PydanticField(
        alias="total_unique_clicks", default=None
    )
    url: typing.Optional[str] = _PydanticField(alias="url", default=None)
    web: typing.Optional[PostClickStatsWeb] = _PydanticField(alias="web", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class Milestone(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    auto_fulfill: bool = _PydanticField(alias="auto_fulfill")
    id: str = _PydanticField(alias="id")
    num_referrals: int = _PydanticField(alias="num_referrals")
    reward: MilestoneReward = _PydanticField(alias="reward")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsPublicationIdSegmentsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[Segment] = _PydanticField(alias="data")
    limit: int = _PydanticField(alias="limit")
    page: int = _PydanticField(alias="page")
    total_pages: int = _PydanticField(alias="total_pages")
    total_results: int = _PydanticField(alias="total_results")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsPublicationIdSubscriptionsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[SubscriptionExpanded] = _PydanticField(alias="data")
    limit: int = _PydanticField(alias="limit")
    page: int = _PydanticField(alias="page")
    total_pages: int = _PydanticField(alias="total_pages")
    total_results: int = _PydanticField(alias="total_results")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PatchPublicationsPublicationIdCustomFieldsIdResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[
        PatchPublicationsPublicationIdCustomFieldsIdResponseData
    ] = _PydanticField(alias="data", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PatchPublicationsPublicationIdSubscriptionsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: PatchPublicationsPublicationIdSubscriptionsResponseData = _PydanticField(
        alias="data"
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PatchPublicationsPublicationIdSubscriptionsBulkActionsBodySubscriptionsItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    custom_fields: typing.Optional[
        typing.List[
            PatchPublicationsPublicationIdSubscriptionsBulkActionsBodySubscriptionsItemCustomFieldsItem
        ]
    ] = _PydanticField(alias="custom_fields", default=None)
    stripe_customer_id: typing.Optional[str] = _PydanticField(
        alias="stripe_customer_id", default=None
    )
    subscription_id: str = _PydanticField(alias="subscription_id")
    tier: typing.Optional[typing.Any] = _PydanticField(alias="tier", default=None)
    unsubscribe: typing.Optional[bool] = _PydanticField(
        alias="unsubscribe", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PatchPublicationsPublicationIdSubscriptionsBulkActionsResponse(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: PatchPublicationsPublicationIdSubscriptionsBulkActionsResponseData = (
        _PydanticField(alias="data")
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PatchPublicationsPublicationIdSubscriptionsSubscriptionIdBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    custom_fields: typing.Optional[
        typing.List[
            PatchPublicationsPublicationIdSubscriptionsSubscriptionIdBodyCustomFieldsItem
        ]
    ] = _PydanticField(alias="custom_fields", default=None)
    stripe_customer_id: typing.Optional[str] = _PydanticField(
        alias="stripe_customer_id", default=None
    )
    tier: typing.Optional[
        PatchPublicationsPublicationIdSubscriptionsSubscriptionIdBodyTierEnum
    ] = _PydanticField(alias="tier", default=None)
    unsubscribe: typing.Optional[bool] = _PydanticField(
        alias="unsubscribe", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PatchPublicationsPublicationIdSubscriptionsSubscriptionIdResponse(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: Subscription = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostPublicationsPublicationIdCustomFieldsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[
        PostPublicationsPublicationIdCustomFieldsResponseData
    ] = _PydanticField(alias="data", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PutPublicationsPublicationIdCustomFieldsIdResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.Optional[
        PutPublicationsPublicationIdCustomFieldsIdResponseData
    ] = _PydanticField(alias="data", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PutPublicationsPublicationIdSubscriptionsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: PutPublicationsPublicationIdSubscriptionsResponseData = _PydanticField(
        alias="data"
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PutPublicationsPublicationIdSubscriptionsBulkActionsBodySubscriptionsItem(
    _PydanticBaseModel
):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    custom_fields: typing.Optional[
        typing.List[
            PutPublicationsPublicationIdSubscriptionsBulkActionsBodySubscriptionsItemCustomFieldsItem
        ]
    ] = _PydanticField(alias="custom_fields", default=None)
    stripe_customer_id: typing.Optional[str] = _PydanticField(
        alias="stripe_customer_id", default=None
    )
    subscription_id: str = _PydanticField(alias="subscription_id")
    tier: typing.Optional[typing.Any] = _PydanticField(alias="tier", default=None)
    unsubscribe: typing.Optional[bool] = _PydanticField(
        alias="unsubscribe", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PutPublicationsPublicationIdSubscriptionsBulkActionsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: PutPublicationsPublicationIdSubscriptionsBulkActionsResponseData = (
        _PydanticField(alias="data")
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PutPublicationsPublicationIdSubscriptionsSubscriptionIdBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    custom_fields: typing.Optional[
        typing.List[
            PutPublicationsPublicationIdSubscriptionsSubscriptionIdBodyCustomFieldsItem
        ]
    ] = _PydanticField(alias="custom_fields", default=None)
    stripe_customer_id: typing.Optional[str] = _PydanticField(
        alias="stripe_customer_id", default=None
    )
    tier: typing.Optional[
        PutPublicationsPublicationIdSubscriptionsSubscriptionIdBodyTierEnum
    ] = _PydanticField(alias="tier", default=None)
    unsubscribe: typing.Optional[bool] = _PydanticField(
        alias="unsubscribe", default=None
    )

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[Publication] = _PydanticField(alias="data")
    limit: int = _PydanticField(alias="limit")
    page: int = _PydanticField(alias="page")
    total_pages: int = _PydanticField(alias="total_pages")
    total_results: int = _PydanticField(alias="total_results")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class EmailBlast(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    content: typing.Optional[EmailBlastContent] = _PydanticField(
        alias="content", default=None
    )
    created: int = _PydanticField(alias="created")
    id: str = _PydanticField(alias="id")
    last_sent: int = _PydanticField(alias="last_sent")
    preview_text: str = _PydanticField(alias="preview_text")
    stats: typing.Optional[EmailBlastStats] = _PydanticField(
        alias="stats", default=None
    )
    status: EmailBlastStatusEnum = _PydanticField(alias="status")
    subject_line: str = _PydanticField(alias="subject_line")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsPublicationIdEmailBlastsEmailBlastIdResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: EmailBlast = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PostStats(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    clicks: typing.Optional[typing.List[PostClickStats]] = _PydanticField(
        alias="clicks", default=None
    )
    email: typing.Optional[PostStatsEmail] = _PydanticField(alias="email", default=None)
    web: typing.Optional[PostStatsWeb] = _PydanticField(alias="web", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsPublicationIdReferralProgramResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[Milestone] = _PydanticField(alias="data")
    limit: int = _PydanticField(alias="limit")
    page: int = _PydanticField(alias="page")
    total_pages: int = _PydanticField(alias="total_pages")
    total_results: int = _PydanticField(alias="total_results")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PatchPublicationsPublicationIdSubscriptionsBulkActionsBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    subscriptions: typing.Optional[
        typing.List[
            PatchPublicationsPublicationIdSubscriptionsBulkActionsBodySubscriptionsItem
        ]
    ] = _PydanticField(alias="subscriptions", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class PutPublicationsPublicationIdSubscriptionsBulkActionsBody(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    subscriptions: typing.Optional[
        typing.List[
            PutPublicationsPublicationIdSubscriptionsBulkActionsBodySubscriptionsItem
        ]
    ] = _PydanticField(alias="subscriptions", default=None)

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsPublicationIdEmailBlastsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[EmailBlast] = _PydanticField(alias="data")
    limit: int = _PydanticField(alias="limit")
    page: int = _PydanticField(alias="page")
    total_pages: int = _PydanticField(alias="total_pages")
    total_results: int = _PydanticField(alias="total_results")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class Post(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    audience: PostAudienceEnum = _PydanticField(alias="audience")
    authors: typing.List[str] = _PydanticField(alias="authors")
    content: typing.Optional[PostContent] = _PydanticField(
        alias="content", default=None
    )
    content_tags: typing.List[str] = _PydanticField(alias="content_tags")
    created: int = _PydanticField(alias="created")
    displayed_date: typing.Optional[int] = _PydanticField(
        alias="displayed_date", default=None
    )
    id: str = _PydanticField(alias="id")
    platform: PostPlatformEnum = _PydanticField(alias="platform")
    preview_text: str = _PydanticField(alias="preview_text")
    publish_date: typing.Optional[int] = _PydanticField(
        alias="publish_date", default=None
    )
    slug: str = _PydanticField(alias="slug")
    split_tested: bool = _PydanticField(alias="split_tested")
    stats: typing.Optional[PostStats] = _PydanticField(alias="stats", default=None)
    status: PostStatusEnum = _PydanticField(alias="status")
    subject_line: str = _PydanticField(alias="subject_line")
    subtitle: str = _PydanticField(alias="subtitle")
    thumbnail_url: str = _PydanticField(alias="thumbnail_url")
    title: str = _PydanticField(alias="title")
    web_url: str = _PydanticField(alias="web_url")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsPublicationIdPostsPostIdResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: Post = _PydanticField(alias="data")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)


class GetPublicationsPublicationIdPostsResponse(_PydanticBaseModel):
    model_config = _PydanticConfigDict(
        arbitrary_types_allowed=True,
        populate_by_name=True,
    )

    data: typing.List[Post] = _PydanticField(alias="data")
    limit: int = _PydanticField(alias="limit")
    page: int = _PydanticField(alias="page")
    total_pages: int = _PydanticField(alias="total_pages")
    total_results: int = _PydanticField(alias="total_results")

    def model_api_dump(self) -> typing.Dict[str, typing.Any]:
        exclude: typing.Set[str] = set()  # exclude binary fields if present

        return self.model_dump(by_alias=True, exclude_unset=True, exclude=exclude)
