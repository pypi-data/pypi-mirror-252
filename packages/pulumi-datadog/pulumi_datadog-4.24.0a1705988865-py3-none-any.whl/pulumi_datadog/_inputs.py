# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ChildOrganizationApiKeyArgs',
    'ChildOrganizationApplicationKeyArgs',
    'ChildOrganizationSettingArgs',
    'ChildOrganizationSettingSamlArgs',
    'ChildOrganizationSettingSamlAutocreateUsersDomainArgs',
    'ChildOrganizationSettingSamlIdpInitiatedLoginArgs',
    'ChildOrganizationSettingSamlStrictModeArgs',
    'ChildOrganizationUserArgs',
    'CloudConfigurationRuleFilterArgs',
    'DashboardListDashItemArgs',
    'DashboardTemplateVariableArgs',
    'DashboardTemplateVariablePresetArgs',
    'DashboardTemplateVariablePresetTemplateVariableArgs',
    'DashboardWidgetArgs',
    'DashboardWidgetAlertGraphDefinitionArgs',
    'DashboardWidgetAlertValueDefinitionArgs',
    'DashboardWidgetChangeDefinitionArgs',
    'DashboardWidgetChangeDefinitionCustomLinkArgs',
    'DashboardWidgetChangeDefinitionRequestArgs',
    'DashboardWidgetChangeDefinitionRequestApmQueryArgs',
    'DashboardWidgetChangeDefinitionRequestApmQueryComputeQueryArgs',
    'DashboardWidgetChangeDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetChangeDefinitionRequestApmQueryGroupBySortQueryArgs',
    'DashboardWidgetChangeDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetChangeDefinitionRequestFormulaArgs',
    'DashboardWidgetChangeDefinitionRequestFormulaConditionalFormatArgs',
    'DashboardWidgetChangeDefinitionRequestFormulaLimitArgs',
    'DashboardWidgetChangeDefinitionRequestFormulaStyleArgs',
    'DashboardWidgetChangeDefinitionRequestLogQueryArgs',
    'DashboardWidgetChangeDefinitionRequestLogQueryComputeQueryArgs',
    'DashboardWidgetChangeDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetChangeDefinitionRequestLogQueryGroupBySortQueryArgs',
    'DashboardWidgetChangeDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetChangeDefinitionRequestProcessQueryArgs',
    'DashboardWidgetChangeDefinitionRequestQueryArgs',
    'DashboardWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryArgs',
    'DashboardWidgetChangeDefinitionRequestQueryApmResourceStatsQueryArgs',
    'DashboardWidgetChangeDefinitionRequestQueryEventQueryArgs',
    'DashboardWidgetChangeDefinitionRequestQueryEventQueryComputeArgs',
    'DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupByArgs',
    'DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupBySortArgs',
    'DashboardWidgetChangeDefinitionRequestQueryEventQuerySearchArgs',
    'DashboardWidgetChangeDefinitionRequestQueryMetricQueryArgs',
    'DashboardWidgetChangeDefinitionRequestQueryProcessQueryArgs',
    'DashboardWidgetChangeDefinitionRequestQuerySloQueryArgs',
    'DashboardWidgetChangeDefinitionRequestRumQueryArgs',
    'DashboardWidgetChangeDefinitionRequestRumQueryComputeQueryArgs',
    'DashboardWidgetChangeDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetChangeDefinitionRequestRumQueryGroupBySortQueryArgs',
    'DashboardWidgetChangeDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetChangeDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetChangeDefinitionRequestSecurityQueryComputeQueryArgs',
    'DashboardWidgetChangeDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetCheckStatusDefinitionArgs',
    'DashboardWidgetDistributionDefinitionArgs',
    'DashboardWidgetDistributionDefinitionRequestArgs',
    'DashboardWidgetDistributionDefinitionRequestApmQueryArgs',
    'DashboardWidgetDistributionDefinitionRequestApmQueryComputeQueryArgs',
    'DashboardWidgetDistributionDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryArgs',
    'DashboardWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetDistributionDefinitionRequestApmStatsQueryArgs',
    'DashboardWidgetDistributionDefinitionRequestApmStatsQueryColumnArgs',
    'DashboardWidgetDistributionDefinitionRequestLogQueryArgs',
    'DashboardWidgetDistributionDefinitionRequestLogQueryComputeQueryArgs',
    'DashboardWidgetDistributionDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryArgs',
    'DashboardWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetDistributionDefinitionRequestProcessQueryArgs',
    'DashboardWidgetDistributionDefinitionRequestRumQueryArgs',
    'DashboardWidgetDistributionDefinitionRequestRumQueryComputeQueryArgs',
    'DashboardWidgetDistributionDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryArgs',
    'DashboardWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetDistributionDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetDistributionDefinitionRequestSecurityQueryComputeQueryArgs',
    'DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetDistributionDefinitionRequestStyleArgs',
    'DashboardWidgetEventStreamDefinitionArgs',
    'DashboardWidgetEventTimelineDefinitionArgs',
    'DashboardWidgetFreeTextDefinitionArgs',
    'DashboardWidgetGeomapDefinitionArgs',
    'DashboardWidgetGeomapDefinitionCustomLinkArgs',
    'DashboardWidgetGeomapDefinitionRequestArgs',
    'DashboardWidgetGeomapDefinitionRequestFormulaArgs',
    'DashboardWidgetGeomapDefinitionRequestFormulaConditionalFormatArgs',
    'DashboardWidgetGeomapDefinitionRequestFormulaLimitArgs',
    'DashboardWidgetGeomapDefinitionRequestFormulaStyleArgs',
    'DashboardWidgetGeomapDefinitionRequestLogQueryArgs',
    'DashboardWidgetGeomapDefinitionRequestLogQueryComputeQueryArgs',
    'DashboardWidgetGeomapDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryArgs',
    'DashboardWidgetGeomapDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetGeomapDefinitionRequestQueryArgs',
    'DashboardWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryArgs',
    'DashboardWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryArgs',
    'DashboardWidgetGeomapDefinitionRequestQueryEventQueryArgs',
    'DashboardWidgetGeomapDefinitionRequestQueryEventQueryComputeArgs',
    'DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupByArgs',
    'DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortArgs',
    'DashboardWidgetGeomapDefinitionRequestQueryEventQuerySearchArgs',
    'DashboardWidgetGeomapDefinitionRequestQueryMetricQueryArgs',
    'DashboardWidgetGeomapDefinitionRequestQueryProcessQueryArgs',
    'DashboardWidgetGeomapDefinitionRequestQuerySloQueryArgs',
    'DashboardWidgetGeomapDefinitionRequestRumQueryArgs',
    'DashboardWidgetGeomapDefinitionRequestRumQueryComputeQueryArgs',
    'DashboardWidgetGeomapDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryArgs',
    'DashboardWidgetGeomapDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetGeomapDefinitionStyleArgs',
    'DashboardWidgetGeomapDefinitionViewArgs',
    'DashboardWidgetGroupDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetArgs',
    'DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetAlertValueDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaConditionalFormatArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimitArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaStyleArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQuerySloQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmStatsQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmStatsQueryColumnArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyleArgs',
    'DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetFreeTextDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaConditionalFormatArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimitArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaStyleArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQuerySloQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyleArgs',
    'DashboardWidgetGroupDefinitionWidgetGeomapDefinitionViewArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEventArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyleArgs',
    'DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxisArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyleArgs',
    'DashboardWidgetGroupDefinitionWidgetIframeDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetImageDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetListStreamDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestColumnArgs',
    'DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestQuerySortArgs',
    'DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSortArgs',
    'DashboardWidgetGroupDefinitionWidgetManageStatusDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetNoteDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormatArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaConditionalFormatArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimitArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaStyleArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQuerySloQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormatArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimitArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaStyleArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQuerySloQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeseriesBackgroundArgs',
    'DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeseriesBackgroundYaxisArgs',
    'DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionInputArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableFormulaArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQuerySloQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxisArgs',
    'DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxisArgs',
    'DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetServicemapDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetSloListDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequestQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequestQuerySortArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendInlineArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendTableArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaConditionalFormatArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimitArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaStyleArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQuerySloQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestStyleArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEventArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarkerArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaConditionalFormatArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimitArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaStyleArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadataArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQuerySloQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyleArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxisArgs',
    'DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxisArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormatArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaConditionalFormatArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimitArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaStyleArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQuerySloQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyleArgs',
    'DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionCustomLinkArgs',
    'DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionRequestQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetTreemapDefinitionArgs',
    'DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestArgs',
    'DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaArgs',
    'DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaConditionalFormatArgs',
    'DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaLimitArgs',
    'DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaStyleArgs',
    'DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryApmDependencyStatsQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryApmResourceStatsQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryComputeArgs',
    'DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryGroupByArgs',
    'DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryGroupBySortArgs',
    'DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQuerySearchArgs',
    'DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryMetricQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryProcessQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQuerySloQueryArgs',
    'DashboardWidgetGroupDefinitionWidgetWidgetLayoutArgs',
    'DashboardWidgetHeatmapDefinitionArgs',
    'DashboardWidgetHeatmapDefinitionCustomLinkArgs',
    'DashboardWidgetHeatmapDefinitionEventArgs',
    'DashboardWidgetHeatmapDefinitionRequestArgs',
    'DashboardWidgetHeatmapDefinitionRequestApmQueryArgs',
    'DashboardWidgetHeatmapDefinitionRequestApmQueryComputeQueryArgs',
    'DashboardWidgetHeatmapDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryArgs',
    'DashboardWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetHeatmapDefinitionRequestLogQueryArgs',
    'DashboardWidgetHeatmapDefinitionRequestLogQueryComputeQueryArgs',
    'DashboardWidgetHeatmapDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryArgs',
    'DashboardWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetHeatmapDefinitionRequestProcessQueryArgs',
    'DashboardWidgetHeatmapDefinitionRequestRumQueryArgs',
    'DashboardWidgetHeatmapDefinitionRequestRumQueryComputeQueryArgs',
    'DashboardWidgetHeatmapDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryArgs',
    'DashboardWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetHeatmapDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryArgs',
    'DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetHeatmapDefinitionRequestStyleArgs',
    'DashboardWidgetHeatmapDefinitionYaxisArgs',
    'DashboardWidgetHostmapDefinitionArgs',
    'DashboardWidgetHostmapDefinitionCustomLinkArgs',
    'DashboardWidgetHostmapDefinitionRequestArgs',
    'DashboardWidgetHostmapDefinitionRequestFillArgs',
    'DashboardWidgetHostmapDefinitionRequestFillApmQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestFillApmQueryComputeQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs',
    'DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestFillLogQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestFillLogQueryComputeQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs',
    'DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestFillProcessQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestFillRumQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestFillRumQueryComputeQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs',
    'DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestFillSecurityQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs',
    'DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeApmQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeLogQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeProcessQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeRumQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs',
    'DashboardWidgetHostmapDefinitionStyleArgs',
    'DashboardWidgetIframeDefinitionArgs',
    'DashboardWidgetImageDefinitionArgs',
    'DashboardWidgetListStreamDefinitionArgs',
    'DashboardWidgetListStreamDefinitionRequestArgs',
    'DashboardWidgetListStreamDefinitionRequestColumnArgs',
    'DashboardWidgetListStreamDefinitionRequestQueryArgs',
    'DashboardWidgetListStreamDefinitionRequestQuerySortArgs',
    'DashboardWidgetLogStreamDefinitionArgs',
    'DashboardWidgetLogStreamDefinitionSortArgs',
    'DashboardWidgetManageStatusDefinitionArgs',
    'DashboardWidgetNoteDefinitionArgs',
    'DashboardWidgetQueryTableDefinitionArgs',
    'DashboardWidgetQueryTableDefinitionCustomLinkArgs',
    'DashboardWidgetQueryTableDefinitionRequestArgs',
    'DashboardWidgetQueryTableDefinitionRequestApmQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestApmQueryComputeQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetQueryTableDefinitionRequestApmStatsQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs',
    'DashboardWidgetQueryTableDefinitionRequestConditionalFormatArgs',
    'DashboardWidgetQueryTableDefinitionRequestFormulaArgs',
    'DashboardWidgetQueryTableDefinitionRequestFormulaConditionalFormatArgs',
    'DashboardWidgetQueryTableDefinitionRequestFormulaLimitArgs',
    'DashboardWidgetQueryTableDefinitionRequestFormulaStyleArgs',
    'DashboardWidgetQueryTableDefinitionRequestLogQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestLogQueryComputeQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetQueryTableDefinitionRequestProcessQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestQueryEventQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestQueryEventQueryComputeArgs',
    'DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupByArgs',
    'DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortArgs',
    'DashboardWidgetQueryTableDefinitionRequestQueryEventQuerySearchArgs',
    'DashboardWidgetQueryTableDefinitionRequestQueryMetricQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestQueryProcessQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestQuerySloQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestRumQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestRumQueryComputeQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetQueryTableDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetQueryValueDefinitionArgs',
    'DashboardWidgetQueryValueDefinitionCustomLinkArgs',
    'DashboardWidgetQueryValueDefinitionRequestArgs',
    'DashboardWidgetQueryValueDefinitionRequestApmQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestApmQueryComputeQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetQueryValueDefinitionRequestAuditQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestAuditQueryComputeQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupByArgs',
    'DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestAuditQueryMultiComputeArgs',
    'DashboardWidgetQueryValueDefinitionRequestConditionalFormatArgs',
    'DashboardWidgetQueryValueDefinitionRequestFormulaArgs',
    'DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs',
    'DashboardWidgetQueryValueDefinitionRequestFormulaLimitArgs',
    'DashboardWidgetQueryValueDefinitionRequestFormulaStyleArgs',
    'DashboardWidgetQueryValueDefinitionRequestLogQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestLogQueryComputeQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetQueryValueDefinitionRequestProcessQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestQueryEventQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestQueryEventQueryComputeArgs',
    'DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupByArgs',
    'DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortArgs',
    'DashboardWidgetQueryValueDefinitionRequestQueryEventQuerySearchArgs',
    'DashboardWidgetQueryValueDefinitionRequestQueryMetricQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestQueryProcessQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestQuerySloQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestRumQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestRumQueryComputeQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetQueryValueDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetQueryValueDefinitionTimeseriesBackgroundArgs',
    'DashboardWidgetQueryValueDefinitionTimeseriesBackgroundYaxisArgs',
    'DashboardWidgetRunWorkflowDefinitionArgs',
    'DashboardWidgetRunWorkflowDefinitionCustomLinkArgs',
    'DashboardWidgetRunWorkflowDefinitionInputArgs',
    'DashboardWidgetScatterplotDefinitionArgs',
    'DashboardWidgetScatterplotDefinitionCustomLinkArgs',
    'DashboardWidgetScatterplotDefinitionRequestArgs',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableArgs',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableFormulaArgs',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupByArgs',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortArgs',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchArgs',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestScatterplotTableQuerySloQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestXArgs',
    'DashboardWidgetScatterplotDefinitionRequestXApmQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestXApmQueryComputeQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs',
    'DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestXLogQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestXLogQueryComputeQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs',
    'DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestXProcessQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestXRumQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestXRumQueryComputeQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs',
    'DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestXSecurityQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs',
    'DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestYArgs',
    'DashboardWidgetScatterplotDefinitionRequestYApmQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestYApmQueryComputeQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs',
    'DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestYLogQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestYLogQueryComputeQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs',
    'DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestYProcessQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestYRumQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestYRumQueryComputeQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs',
    'DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs',
    'DashboardWidgetScatterplotDefinitionRequestYSecurityQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs',
    'DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs',
    'DashboardWidgetScatterplotDefinitionXaxisArgs',
    'DashboardWidgetScatterplotDefinitionYaxisArgs',
    'DashboardWidgetServiceLevelObjectiveDefinitionArgs',
    'DashboardWidgetServicemapDefinitionArgs',
    'DashboardWidgetServicemapDefinitionCustomLinkArgs',
    'DashboardWidgetSloListDefinitionArgs',
    'DashboardWidgetSloListDefinitionRequestArgs',
    'DashboardWidgetSloListDefinitionRequestQueryArgs',
    'DashboardWidgetSloListDefinitionRequestQuerySortArgs',
    'DashboardWidgetSunburstDefinitionArgs',
    'DashboardWidgetSunburstDefinitionCustomLinkArgs',
    'DashboardWidgetSunburstDefinitionLegendInlineArgs',
    'DashboardWidgetSunburstDefinitionLegendTableArgs',
    'DashboardWidgetSunburstDefinitionRequestArgs',
    'DashboardWidgetSunburstDefinitionRequestApmQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestApmQueryComputeQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetSunburstDefinitionRequestAuditQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestAuditQueryComputeQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestAuditQueryGroupByArgs',
    'DashboardWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestAuditQueryMultiComputeArgs',
    'DashboardWidgetSunburstDefinitionRequestFormulaArgs',
    'DashboardWidgetSunburstDefinitionRequestFormulaConditionalFormatArgs',
    'DashboardWidgetSunburstDefinitionRequestFormulaLimitArgs',
    'DashboardWidgetSunburstDefinitionRequestFormulaStyleArgs',
    'DashboardWidgetSunburstDefinitionRequestLogQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestLogQueryComputeQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetSunburstDefinitionRequestNetworkQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestNetworkQueryComputeQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupByArgs',
    'DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestNetworkQueryMultiComputeArgs',
    'DashboardWidgetSunburstDefinitionRequestProcessQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestQueryEventQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestQueryEventQueryComputeArgs',
    'DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupByArgs',
    'DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortArgs',
    'DashboardWidgetSunburstDefinitionRequestQueryEventQuerySearchArgs',
    'DashboardWidgetSunburstDefinitionRequestQueryMetricQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestQueryProcessQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestQuerySloQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestRumQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestRumQueryComputeQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetSunburstDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestSecurityQueryComputeQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetSunburstDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetSunburstDefinitionRequestStyleArgs',
    'DashboardWidgetTimeseriesDefinitionArgs',
    'DashboardWidgetTimeseriesDefinitionCustomLinkArgs',
    'DashboardWidgetTimeseriesDefinitionEventArgs',
    'DashboardWidgetTimeseriesDefinitionMarkerArgs',
    'DashboardWidgetTimeseriesDefinitionRequestArgs',
    'DashboardWidgetTimeseriesDefinitionRequestApmQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestApmQueryComputeQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetTimeseriesDefinitionRequestAuditQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupByArgs',
    'DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestAuditQueryMultiComputeArgs',
    'DashboardWidgetTimeseriesDefinitionRequestFormulaArgs',
    'DashboardWidgetTimeseriesDefinitionRequestFormulaConditionalFormatArgs',
    'DashboardWidgetTimeseriesDefinitionRequestFormulaLimitArgs',
    'DashboardWidgetTimeseriesDefinitionRequestFormulaStyleArgs',
    'DashboardWidgetTimeseriesDefinitionRequestLogQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestLogQueryComputeQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetTimeseriesDefinitionRequestMetadataArgs',
    'DashboardWidgetTimeseriesDefinitionRequestNetworkQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs',
    'DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs',
    'DashboardWidgetTimeseriesDefinitionRequestProcessQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryComputeArgs',
    'DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupByArgs',
    'DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortArgs',
    'DashboardWidgetTimeseriesDefinitionRequestQueryEventQuerySearchArgs',
    'DashboardWidgetTimeseriesDefinitionRequestQueryMetricQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestQueryProcessQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestQuerySloQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestRumQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestRumQueryComputeQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetTimeseriesDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetTimeseriesDefinitionRequestStyleArgs',
    'DashboardWidgetTimeseriesDefinitionRightYaxisArgs',
    'DashboardWidgetTimeseriesDefinitionYaxisArgs',
    'DashboardWidgetToplistDefinitionArgs',
    'DashboardWidgetToplistDefinitionCustomLinkArgs',
    'DashboardWidgetToplistDefinitionRequestArgs',
    'DashboardWidgetToplistDefinitionRequestApmQueryArgs',
    'DashboardWidgetToplistDefinitionRequestApmQueryComputeQueryArgs',
    'DashboardWidgetToplistDefinitionRequestApmQueryGroupByArgs',
    'DashboardWidgetToplistDefinitionRequestApmQueryGroupBySortQueryArgs',
    'DashboardWidgetToplistDefinitionRequestApmQueryMultiComputeArgs',
    'DashboardWidgetToplistDefinitionRequestAuditQueryArgs',
    'DashboardWidgetToplistDefinitionRequestAuditQueryComputeQueryArgs',
    'DashboardWidgetToplistDefinitionRequestAuditQueryGroupByArgs',
    'DashboardWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryArgs',
    'DashboardWidgetToplistDefinitionRequestAuditQueryMultiComputeArgs',
    'DashboardWidgetToplistDefinitionRequestConditionalFormatArgs',
    'DashboardWidgetToplistDefinitionRequestFormulaArgs',
    'DashboardWidgetToplistDefinitionRequestFormulaConditionalFormatArgs',
    'DashboardWidgetToplistDefinitionRequestFormulaLimitArgs',
    'DashboardWidgetToplistDefinitionRequestFormulaStyleArgs',
    'DashboardWidgetToplistDefinitionRequestLogQueryArgs',
    'DashboardWidgetToplistDefinitionRequestLogQueryComputeQueryArgs',
    'DashboardWidgetToplistDefinitionRequestLogQueryGroupByArgs',
    'DashboardWidgetToplistDefinitionRequestLogQueryGroupBySortQueryArgs',
    'DashboardWidgetToplistDefinitionRequestLogQueryMultiComputeArgs',
    'DashboardWidgetToplistDefinitionRequestProcessQueryArgs',
    'DashboardWidgetToplistDefinitionRequestQueryArgs',
    'DashboardWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryArgs',
    'DashboardWidgetToplistDefinitionRequestQueryApmResourceStatsQueryArgs',
    'DashboardWidgetToplistDefinitionRequestQueryEventQueryArgs',
    'DashboardWidgetToplistDefinitionRequestQueryEventQueryComputeArgs',
    'DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupByArgs',
    'DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBySortArgs',
    'DashboardWidgetToplistDefinitionRequestQueryEventQuerySearchArgs',
    'DashboardWidgetToplistDefinitionRequestQueryMetricQueryArgs',
    'DashboardWidgetToplistDefinitionRequestQueryProcessQueryArgs',
    'DashboardWidgetToplistDefinitionRequestQuerySloQueryArgs',
    'DashboardWidgetToplistDefinitionRequestRumQueryArgs',
    'DashboardWidgetToplistDefinitionRequestRumQueryComputeQueryArgs',
    'DashboardWidgetToplistDefinitionRequestRumQueryGroupByArgs',
    'DashboardWidgetToplistDefinitionRequestRumQueryGroupBySortQueryArgs',
    'DashboardWidgetToplistDefinitionRequestRumQueryMultiComputeArgs',
    'DashboardWidgetToplistDefinitionRequestSecurityQueryArgs',
    'DashboardWidgetToplistDefinitionRequestSecurityQueryComputeQueryArgs',
    'DashboardWidgetToplistDefinitionRequestSecurityQueryGroupByArgs',
    'DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryArgs',
    'DashboardWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs',
    'DashboardWidgetToplistDefinitionRequestStyleArgs',
    'DashboardWidgetTopologyMapDefinitionArgs',
    'DashboardWidgetTopologyMapDefinitionCustomLinkArgs',
    'DashboardWidgetTopologyMapDefinitionRequestArgs',
    'DashboardWidgetTopologyMapDefinitionRequestQueryArgs',
    'DashboardWidgetTraceServiceDefinitionArgs',
    'DashboardWidgetTreemapDefinitionArgs',
    'DashboardWidgetTreemapDefinitionRequestArgs',
    'DashboardWidgetTreemapDefinitionRequestFormulaArgs',
    'DashboardWidgetTreemapDefinitionRequestFormulaConditionalFormatArgs',
    'DashboardWidgetTreemapDefinitionRequestFormulaLimitArgs',
    'DashboardWidgetTreemapDefinitionRequestFormulaStyleArgs',
    'DashboardWidgetTreemapDefinitionRequestQueryArgs',
    'DashboardWidgetTreemapDefinitionRequestQueryApmDependencyStatsQueryArgs',
    'DashboardWidgetTreemapDefinitionRequestQueryApmResourceStatsQueryArgs',
    'DashboardWidgetTreemapDefinitionRequestQueryEventQueryArgs',
    'DashboardWidgetTreemapDefinitionRequestQueryEventQueryComputeArgs',
    'DashboardWidgetTreemapDefinitionRequestQueryEventQueryGroupByArgs',
    'DashboardWidgetTreemapDefinitionRequestQueryEventQueryGroupBySortArgs',
    'DashboardWidgetTreemapDefinitionRequestQueryEventQuerySearchArgs',
    'DashboardWidgetTreemapDefinitionRequestQueryMetricQueryArgs',
    'DashboardWidgetTreemapDefinitionRequestQueryProcessQueryArgs',
    'DashboardWidgetTreemapDefinitionRequestQuerySloQueryArgs',
    'DashboardWidgetWidgetLayoutArgs',
    'DowntimeRecurrenceArgs',
    'DowntimeScheduleMonitorIdentifierArgs',
    'DowntimeScheduleOneTimeScheduleArgs',
    'DowntimeScheduleRecurringScheduleArgs',
    'DowntimeScheduleRecurringScheduleRecurrenceArgs',
    'IpAllowlistEntryArgs',
    'LogsArchiveAzureArchiveArgs',
    'LogsArchiveGcsArchiveArgs',
    'LogsArchiveS3ArchiveArgs',
    'LogsCustomPipelineFilterArgs',
    'LogsCustomPipelineProcessorArgs',
    'LogsCustomPipelineProcessorArithmeticProcessorArgs',
    'LogsCustomPipelineProcessorAttributeRemapperArgs',
    'LogsCustomPipelineProcessorCategoryProcessorArgs',
    'LogsCustomPipelineProcessorCategoryProcessorCategoryArgs',
    'LogsCustomPipelineProcessorCategoryProcessorCategoryFilterArgs',
    'LogsCustomPipelineProcessorDateRemapperArgs',
    'LogsCustomPipelineProcessorGeoIpParserArgs',
    'LogsCustomPipelineProcessorGrokParserArgs',
    'LogsCustomPipelineProcessorGrokParserGrokArgs',
    'LogsCustomPipelineProcessorLookupProcessorArgs',
    'LogsCustomPipelineProcessorMessageRemapperArgs',
    'LogsCustomPipelineProcessorPipelineArgs',
    'LogsCustomPipelineProcessorPipelineFilterArgs',
    'LogsCustomPipelineProcessorPipelineProcessorArgs',
    'LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessorArgs',
    'LogsCustomPipelineProcessorPipelineProcessorAttributeRemapperArgs',
    'LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorArgs',
    'LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryArgs',
    'LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilterArgs',
    'LogsCustomPipelineProcessorPipelineProcessorDateRemapperArgs',
    'LogsCustomPipelineProcessorPipelineProcessorGeoIpParserArgs',
    'LogsCustomPipelineProcessorPipelineProcessorGrokParserArgs',
    'LogsCustomPipelineProcessorPipelineProcessorGrokParserGrokArgs',
    'LogsCustomPipelineProcessorPipelineProcessorLookupProcessorArgs',
    'LogsCustomPipelineProcessorPipelineProcessorMessageRemapperArgs',
    'LogsCustomPipelineProcessorPipelineProcessorReferenceTableLookupProcessorArgs',
    'LogsCustomPipelineProcessorPipelineProcessorServiceRemapperArgs',
    'LogsCustomPipelineProcessorPipelineProcessorStatusRemapperArgs',
    'LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessorArgs',
    'LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapperArgs',
    'LogsCustomPipelineProcessorPipelineProcessorUrlParserArgs',
    'LogsCustomPipelineProcessorPipelineProcessorUserAgentParserArgs',
    'LogsCustomPipelineProcessorReferenceTableLookupProcessorArgs',
    'LogsCustomPipelineProcessorServiceRemapperArgs',
    'LogsCustomPipelineProcessorStatusRemapperArgs',
    'LogsCustomPipelineProcessorStringBuilderProcessorArgs',
    'LogsCustomPipelineProcessorTraceIdRemapperArgs',
    'LogsCustomPipelineProcessorUrlParserArgs',
    'LogsCustomPipelineProcessorUserAgentParserArgs',
    'LogsIndexExclusionFilterArgs',
    'LogsIndexExclusionFilterFilterArgs',
    'LogsIndexFilterArgs',
    'LogsMetricComputeArgs',
    'LogsMetricFilterArgs',
    'LogsMetricGroupByArgs',
    'MetricTagConfigurationAggregationArgs',
    'MonitorConfigPolicyTagPolicyArgs',
    'MonitorMonitorThresholdWindowsArgs',
    'MonitorMonitorThresholdsArgs',
    'MonitorSchedulingOptionArgs',
    'MonitorSchedulingOptionEvaluationWindowArgs',
    'MonitorVariablesArgs',
    'MonitorVariablesEventQueryArgs',
    'MonitorVariablesEventQueryComputeArgs',
    'MonitorVariablesEventQueryGroupByArgs',
    'MonitorVariablesEventQueryGroupBySortArgs',
    'MonitorVariablesEventQuerySearchArgs',
    'OrganizationSettingsSettingsArgs',
    'OrganizationSettingsSettingsSamlArgs',
    'OrganizationSettingsSettingsSamlAutocreateUsersDomainsArgs',
    'OrganizationSettingsSettingsSamlIdpInitiatedLoginArgs',
    'OrganizationSettingsSettingsSamlStrictModeArgs',
    'RestrictionPolicyBindingArgs',
    'RolePermissionArgs',
    'SecurityMonitoringDefaultRuleCaseArgs',
    'SecurityMonitoringDefaultRuleFilterArgs',
    'SecurityMonitoringDefaultRuleOptionsArgs',
    'SecurityMonitoringFilterExclusionFilterArgs',
    'SecurityMonitoringRuleCaseArgs',
    'SecurityMonitoringRuleFilterArgs',
    'SecurityMonitoringRuleOptionsArgs',
    'SecurityMonitoringRuleOptionsImpossibleTravelOptionsArgs',
    'SecurityMonitoringRuleOptionsNewValueOptionsArgs',
    'SecurityMonitoringRuleQueryArgs',
    'SecurityMonitoringRuleQueryAgentRuleArgs',
    'SecurityMonitoringRuleSignalQueryArgs',
    'SensitiveDataScannerGroupFilterArgs',
    'SensitiveDataScannerRuleTextReplacementArgs',
    'ServiceLevelObjectiveQueryArgs',
    'ServiceLevelObjectiveThresholdArgs',
    'SpansMetricComputeArgs',
    'SpansMetricFilterArgs',
    'SpansMetricGroupByArgs',
    'SyntheticsGlobalVariableOptionsArgs',
    'SyntheticsGlobalVariableOptionsTotpParametersArgs',
    'SyntheticsGlobalVariableParseTestOptionsArgs',
    'SyntheticsGlobalVariableParseTestOptionsParserArgs',
    'SyntheticsPrivateLocationMetadataArgs',
    'SyntheticsTestApiStepArgs',
    'SyntheticsTestApiStepAssertionArgs',
    'SyntheticsTestApiStepAssertionTargetjsonpathArgs',
    'SyntheticsTestApiStepAssertionTargetxpathArgs',
    'SyntheticsTestApiStepExtractedValueArgs',
    'SyntheticsTestApiStepExtractedValueParserArgs',
    'SyntheticsTestApiStepRequestBasicauthArgs',
    'SyntheticsTestApiStepRequestClientCertificateArgs',
    'SyntheticsTestApiStepRequestClientCertificateCertArgs',
    'SyntheticsTestApiStepRequestClientCertificateKeyArgs',
    'SyntheticsTestApiStepRequestDefinitionArgs',
    'SyntheticsTestApiStepRequestProxyArgs',
    'SyntheticsTestApiStepRetryArgs',
    'SyntheticsTestAssertionArgs',
    'SyntheticsTestAssertionTargetjsonpathArgs',
    'SyntheticsTestAssertionTargetxpathArgs',
    'SyntheticsTestBrowserStepArgs',
    'SyntheticsTestBrowserStepParamsArgs',
    'SyntheticsTestBrowserStepParamsElementUserLocatorArgs',
    'SyntheticsTestBrowserStepParamsElementUserLocatorValueArgs',
    'SyntheticsTestBrowserStepParamsVariableArgs',
    'SyntheticsTestBrowserVariableArgs',
    'SyntheticsTestConfigVariableArgs',
    'SyntheticsTestOptionsListArgs',
    'SyntheticsTestOptionsListCiArgs',
    'SyntheticsTestOptionsListMonitorOptionsArgs',
    'SyntheticsTestOptionsListRetryArgs',
    'SyntheticsTestOptionsListRumSettingsArgs',
    'SyntheticsTestOptionsListSchedulingArgs',
    'SyntheticsTestOptionsListSchedulingTimeframeArgs',
    'SyntheticsTestRequestBasicauthArgs',
    'SyntheticsTestRequestClientCertificateArgs',
    'SyntheticsTestRequestClientCertificateCertArgs',
    'SyntheticsTestRequestClientCertificateKeyArgs',
    'SyntheticsTestRequestDefinitionArgs',
    'SyntheticsTestRequestProxyArgs',
]

@pulumi.input_type
class ChildOrganizationApiKeyArgs:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ChildOrganizationApplicationKeyArgs:
    def __init__(__self__, *,
                 hash: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 owner: Optional[pulumi.Input[str]] = None):
        if hash is not None:
            pulumi.set(__self__, "hash", hash)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)

    @property
    @pulumi.getter
    def hash(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hash")

    @hash.setter
    def hash(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def owner(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "owner")

    @owner.setter
    def owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "owner", value)


@pulumi.input_type
class ChildOrganizationSettingArgs:
    def __init__(__self__, *,
                 private_widget_share: Optional[pulumi.Input[bool]] = None,
                 saml_autocreate_access_role: Optional[pulumi.Input[str]] = None,
                 saml_autocreate_users_domains: Optional[pulumi.Input[Sequence[pulumi.Input['ChildOrganizationSettingSamlAutocreateUsersDomainArgs']]]] = None,
                 saml_can_be_enabled: Optional[pulumi.Input[bool]] = None,
                 saml_idp_endpoint: Optional[pulumi.Input[str]] = None,
                 saml_idp_initiated_logins: Optional[pulumi.Input[Sequence[pulumi.Input['ChildOrganizationSettingSamlIdpInitiatedLoginArgs']]]] = None,
                 saml_idp_metadata_uploaded: Optional[pulumi.Input[bool]] = None,
                 saml_login_url: Optional[pulumi.Input[str]] = None,
                 saml_strict_modes: Optional[pulumi.Input[Sequence[pulumi.Input['ChildOrganizationSettingSamlStrictModeArgs']]]] = None,
                 samls: Optional[pulumi.Input[Sequence[pulumi.Input['ChildOrganizationSettingSamlArgs']]]] = None):
        if private_widget_share is not None:
            pulumi.set(__self__, "private_widget_share", private_widget_share)
        if saml_autocreate_access_role is not None:
            pulumi.set(__self__, "saml_autocreate_access_role", saml_autocreate_access_role)
        if saml_autocreate_users_domains is not None:
            pulumi.set(__self__, "saml_autocreate_users_domains", saml_autocreate_users_domains)
        if saml_can_be_enabled is not None:
            pulumi.set(__self__, "saml_can_be_enabled", saml_can_be_enabled)
        if saml_idp_endpoint is not None:
            pulumi.set(__self__, "saml_idp_endpoint", saml_idp_endpoint)
        if saml_idp_initiated_logins is not None:
            pulumi.set(__self__, "saml_idp_initiated_logins", saml_idp_initiated_logins)
        if saml_idp_metadata_uploaded is not None:
            pulumi.set(__self__, "saml_idp_metadata_uploaded", saml_idp_metadata_uploaded)
        if saml_login_url is not None:
            pulumi.set(__self__, "saml_login_url", saml_login_url)
        if saml_strict_modes is not None:
            pulumi.set(__self__, "saml_strict_modes", saml_strict_modes)
        if samls is not None:
            pulumi.set(__self__, "samls", samls)

    @property
    @pulumi.getter(name="privateWidgetShare")
    def private_widget_share(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "private_widget_share")

    @private_widget_share.setter
    def private_widget_share(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_widget_share", value)

    @property
    @pulumi.getter(name="samlAutocreateAccessRole")
    def saml_autocreate_access_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "saml_autocreate_access_role")

    @saml_autocreate_access_role.setter
    def saml_autocreate_access_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_autocreate_access_role", value)

    @property
    @pulumi.getter(name="samlAutocreateUsersDomains")
    def saml_autocreate_users_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ChildOrganizationSettingSamlAutocreateUsersDomainArgs']]]]:
        return pulumi.get(self, "saml_autocreate_users_domains")

    @saml_autocreate_users_domains.setter
    def saml_autocreate_users_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ChildOrganizationSettingSamlAutocreateUsersDomainArgs']]]]):
        pulumi.set(self, "saml_autocreate_users_domains", value)

    @property
    @pulumi.getter(name="samlCanBeEnabled")
    def saml_can_be_enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "saml_can_be_enabled")

    @saml_can_be_enabled.setter
    def saml_can_be_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "saml_can_be_enabled", value)

    @property
    @pulumi.getter(name="samlIdpEndpoint")
    def saml_idp_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "saml_idp_endpoint")

    @saml_idp_endpoint.setter
    def saml_idp_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_idp_endpoint", value)

    @property
    @pulumi.getter(name="samlIdpInitiatedLogins")
    def saml_idp_initiated_logins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ChildOrganizationSettingSamlIdpInitiatedLoginArgs']]]]:
        return pulumi.get(self, "saml_idp_initiated_logins")

    @saml_idp_initiated_logins.setter
    def saml_idp_initiated_logins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ChildOrganizationSettingSamlIdpInitiatedLoginArgs']]]]):
        pulumi.set(self, "saml_idp_initiated_logins", value)

    @property
    @pulumi.getter(name="samlIdpMetadataUploaded")
    def saml_idp_metadata_uploaded(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "saml_idp_metadata_uploaded")

    @saml_idp_metadata_uploaded.setter
    def saml_idp_metadata_uploaded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "saml_idp_metadata_uploaded", value)

    @property
    @pulumi.getter(name="samlLoginUrl")
    def saml_login_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "saml_login_url")

    @saml_login_url.setter
    def saml_login_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_login_url", value)

    @property
    @pulumi.getter(name="samlStrictModes")
    def saml_strict_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ChildOrganizationSettingSamlStrictModeArgs']]]]:
        return pulumi.get(self, "saml_strict_modes")

    @saml_strict_modes.setter
    def saml_strict_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ChildOrganizationSettingSamlStrictModeArgs']]]]):
        pulumi.set(self, "saml_strict_modes", value)

    @property
    @pulumi.getter
    def samls(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ChildOrganizationSettingSamlArgs']]]]:
        return pulumi.get(self, "samls")

    @samls.setter
    def samls(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ChildOrganizationSettingSamlArgs']]]]):
        pulumi.set(self, "samls", value)


@pulumi.input_type
class ChildOrganizationSettingSamlArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ChildOrganizationSettingSamlAutocreateUsersDomainArgs:
    def __init__(__self__, *,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ChildOrganizationSettingSamlIdpInitiatedLoginArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ChildOrganizationSettingSamlStrictModeArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ChildOrganizationUserArgs:
    def __init__(__self__, *,
                 access_role: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        if access_role is not None:
            pulumi.set(__self__, "access_role", access_role)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="accessRole")
    def access_role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_role")

    @access_role.setter
    def access_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_role", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class CloudConfigurationRuleFilterArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] action: The type of filtering action. Valid values are `require`, `suppress`.
        :param pulumi.Input[str] query: Query for selecting logs to apply the filtering action.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        The type of filtering action. Valid values are `require`, `suppress`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for selecting logs to apply the filtering action.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardListDashItemArgs:
    def __init__(__self__, *,
                 dash_id: pulumi.Input[str],
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] dash_id: The ID of the dashboard to add
        :param pulumi.Input[str] type: The type of this dashboard. Valid values are `custom_timeboard`, `custom_screenboard`, `integration_screenboard`, `integration_timeboard`, `host_timeboard`.
        """
        pulumi.set(__self__, "dash_id", dash_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="dashId")
    def dash_id(self) -> pulumi.Input[str]:
        """
        The ID of the dashboard to add
        """
        return pulumi.get(self, "dash_id")

    @dash_id.setter
    def dash_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "dash_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of this dashboard. Valid values are `custom_timeboard`, `custom_screenboard`, `integration_screenboard`, `integration_timeboard`, `host_timeboard`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DashboardTemplateVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 available_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 default: Optional[pulumi.Input[str]] = None,
                 defaults: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 prefix: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] available_values: The list of values that the template variable drop-down is be limited to
        :param pulumi.Input[str] default: The default value for the template variable on dashboard load. Cannot be used in conjunction with `defaults`. **Deprecated.** Use `defaults` instead.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] defaults: One or many default values for template variables on load. If more than one default is specified, they will be unioned together with `OR`. Cannot be used in conjunction with `default`.
        :param pulumi.Input[str] prefix: The tag prefix associated with the variable. Only tags with this prefix appear in the variable dropdown.
        """
        pulumi.set(__self__, "name", name)
        if available_values is not None:
            pulumi.set(__self__, "available_values", available_values)
        if default is not None:
            warnings.warn("""Use `defaults` instead.""", DeprecationWarning)
            pulumi.log.warn("""default is deprecated: Use `defaults` instead.""")
        if default is not None:
            pulumi.set(__self__, "default", default)
        if defaults is not None:
            pulumi.set(__self__, "defaults", defaults)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="availableValues")
    def available_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of values that the template variable drop-down is be limited to
        """
        return pulumi.get(self, "available_values")

    @available_values.setter
    def available_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "available_values", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[str]]:
        """
        The default value for the template variable on dashboard load. Cannot be used in conjunction with `defaults`. **Deprecated.** Use `defaults` instead.
        """
        warnings.warn("""Use `defaults` instead.""", DeprecationWarning)
        pulumi.log.warn("""default is deprecated: Use `defaults` instead.""")

        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def defaults(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        One or many default values for template variables on load. If more than one default is specified, they will be unioned together with `OR`. Cannot be used in conjunction with `default`.
        """
        return pulumi.get(self, "defaults")

    @defaults.setter
    def defaults(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "defaults", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The tag prefix associated with the variable. Only tags with this prefix appear in the variable dropdown.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)


@pulumi.input_type
class DashboardTemplateVariablePresetArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 template_variables: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTemplateVariablePresetTemplateVariableArgs']]]] = None):
        """
        :param pulumi.Input[str] name: The name of the preset.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardTemplateVariablePresetTemplateVariableArgs']]] template_variables: The template variable names and assumed values under the given preset
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if template_variables is not None:
            pulumi.set(__self__, "template_variables", template_variables)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the preset.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="templateVariables")
    def template_variables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTemplateVariablePresetTemplateVariableArgs']]]]:
        """
        The template variable names and assumed values under the given preset
        """
        return pulumi.get(self, "template_variables")

    @template_variables.setter
    def template_variables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardTemplateVariablePresetTemplateVariableArgs']]]]):
        pulumi.set(self, "template_variables", value)


@pulumi.input_type
class DashboardTemplateVariablePresetTemplateVariableArgs:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: One or many template variable values within the saved view, which will be unioned together using `OR` if more than one is specified. Cannot be used in conjunction with `value`.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if value is not None:
            warnings.warn("""Use `values` instead.""", DeprecationWarning)
            pulumi.log.warn("""value is deprecated: Use `values` instead.""")
        if value is not None:
            pulumi.set(__self__, "value", value)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        warnings.warn("""Use `values` instead.""", DeprecationWarning)
        pulumi.log.warn("""value is deprecated: Use `values` instead.""")

        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        One or many template variable values within the saved view, which will be unioned together using `OR` if more than one is specified. Cannot be used in conjunction with `value`.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class DashboardWidgetArgs:
    def __init__(__self__, *,
                 alert_graph_definition: Optional[pulumi.Input['DashboardWidgetAlertGraphDefinitionArgs']] = None,
                 alert_value_definition: Optional[pulumi.Input['DashboardWidgetAlertValueDefinitionArgs']] = None,
                 change_definition: Optional[pulumi.Input['DashboardWidgetChangeDefinitionArgs']] = None,
                 check_status_definition: Optional[pulumi.Input['DashboardWidgetCheckStatusDefinitionArgs']] = None,
                 distribution_definition: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionArgs']] = None,
                 event_stream_definition: Optional[pulumi.Input['DashboardWidgetEventStreamDefinitionArgs']] = None,
                 event_timeline_definition: Optional[pulumi.Input['DashboardWidgetEventTimelineDefinitionArgs']] = None,
                 free_text_definition: Optional[pulumi.Input['DashboardWidgetFreeTextDefinitionArgs']] = None,
                 geomap_definition: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionArgs']] = None,
                 group_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionArgs']] = None,
                 heatmap_definition: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionArgs']] = None,
                 hostmap_definition: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionArgs']] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 iframe_definition: Optional[pulumi.Input['DashboardWidgetIframeDefinitionArgs']] = None,
                 image_definition: Optional[pulumi.Input['DashboardWidgetImageDefinitionArgs']] = None,
                 list_stream_definition: Optional[pulumi.Input['DashboardWidgetListStreamDefinitionArgs']] = None,
                 log_stream_definition: Optional[pulumi.Input['DashboardWidgetLogStreamDefinitionArgs']] = None,
                 manage_status_definition: Optional[pulumi.Input['DashboardWidgetManageStatusDefinitionArgs']] = None,
                 note_definition: Optional[pulumi.Input['DashboardWidgetNoteDefinitionArgs']] = None,
                 query_table_definition: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionArgs']] = None,
                 query_value_definition: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionArgs']] = None,
                 run_workflow_definition: Optional[pulumi.Input['DashboardWidgetRunWorkflowDefinitionArgs']] = None,
                 scatterplot_definition: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionArgs']] = None,
                 service_level_objective_definition: Optional[pulumi.Input['DashboardWidgetServiceLevelObjectiveDefinitionArgs']] = None,
                 servicemap_definition: Optional[pulumi.Input['DashboardWidgetServicemapDefinitionArgs']] = None,
                 slo_list_definition: Optional[pulumi.Input['DashboardWidgetSloListDefinitionArgs']] = None,
                 sunburst_definition: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionArgs']] = None,
                 timeseries_definition: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionArgs']] = None,
                 toplist_definition: Optional[pulumi.Input['DashboardWidgetToplistDefinitionArgs']] = None,
                 topology_map_definition: Optional[pulumi.Input['DashboardWidgetTopologyMapDefinitionArgs']] = None,
                 trace_service_definition: Optional[pulumi.Input['DashboardWidgetTraceServiceDefinitionArgs']] = None,
                 treemap_definition: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionArgs']] = None,
                 widget_layout: Optional[pulumi.Input['DashboardWidgetWidgetLayoutArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetAlertGraphDefinitionArgs'] alert_graph_definition: The definition for a Alert Graph widget.
        :param pulumi.Input['DashboardWidgetAlertValueDefinitionArgs'] alert_value_definition: The definition for a Alert Value widget.
        :param pulumi.Input['DashboardWidgetChangeDefinitionArgs'] change_definition: The definition for a Change widget.
        :param pulumi.Input['DashboardWidgetCheckStatusDefinitionArgs'] check_status_definition: The definition for a Check Status widget.
        :param pulumi.Input['DashboardWidgetDistributionDefinitionArgs'] distribution_definition: The definition for a Distribution widget.
        :param pulumi.Input['DashboardWidgetEventStreamDefinitionArgs'] event_stream_definition: The definition for a Event Stream widget.
        :param pulumi.Input['DashboardWidgetEventTimelineDefinitionArgs'] event_timeline_definition: The definition for a Event Timeline widget.
        :param pulumi.Input['DashboardWidgetFreeTextDefinitionArgs'] free_text_definition: The definition for a Free Text widget.
        :param pulumi.Input['DashboardWidgetGeomapDefinitionArgs'] geomap_definition: The definition for a Geomap widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionArgs'] group_definition: The definition for a Group widget.
        :param pulumi.Input['DashboardWidgetHeatmapDefinitionArgs'] heatmap_definition: The definition for a Heatmap widget.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionArgs'] hostmap_definition: The definition for a Hostmap widget.
        :param pulumi.Input[int] id: The ID of the widget.
        :param pulumi.Input['DashboardWidgetIframeDefinitionArgs'] iframe_definition: The definition for an Iframe widget.
        :param pulumi.Input['DashboardWidgetImageDefinitionArgs'] image_definition: The definition for an Image widget
        :param pulumi.Input['DashboardWidgetListStreamDefinitionArgs'] list_stream_definition: The definition for a List Stream widget.
        :param pulumi.Input['DashboardWidgetLogStreamDefinitionArgs'] log_stream_definition: The definition for an Log Stream widget.
        :param pulumi.Input['DashboardWidgetManageStatusDefinitionArgs'] manage_status_definition: The definition for an Manage Status widget.
        :param pulumi.Input['DashboardWidgetNoteDefinitionArgs'] note_definition: The definition for a Note widget.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionArgs'] query_table_definition: The definition for a Query Table widget.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionArgs'] query_value_definition: The definition for a Query Value widget.
        :param pulumi.Input['DashboardWidgetRunWorkflowDefinitionArgs'] run_workflow_definition: The definition for a Run Workflow widget.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionArgs'] scatterplot_definition: The definition for a Scatterplot widget.
        :param pulumi.Input['DashboardWidgetServiceLevelObjectiveDefinitionArgs'] service_level_objective_definition: The definition for a Service Level Objective widget.
        :param pulumi.Input['DashboardWidgetServicemapDefinitionArgs'] servicemap_definition: The definition for a Service Map widget.
        :param pulumi.Input['DashboardWidgetSloListDefinitionArgs'] slo_list_definition: The definition for an SLO (Service Level Objective) List widget.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionArgs'] sunburst_definition: The definition for a Sunburst widget.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionArgs'] timeseries_definition: The definition for a Timeseries widget.
        :param pulumi.Input['DashboardWidgetToplistDefinitionArgs'] toplist_definition: The definition for a Toplist widget.
        :param pulumi.Input['DashboardWidgetTopologyMapDefinitionArgs'] topology_map_definition: The definition for a Topology Map widget.
        :param pulumi.Input['DashboardWidgetTraceServiceDefinitionArgs'] trace_service_definition: The definition for a Trace Service widget.
        :param pulumi.Input['DashboardWidgetTreemapDefinitionArgs'] treemap_definition: The definition for a Treemap widget.
        :param pulumi.Input['DashboardWidgetWidgetLayoutArgs'] widget_layout: The layout of the widget on a 'free' dashboard.
        """
        if alert_graph_definition is not None:
            pulumi.set(__self__, "alert_graph_definition", alert_graph_definition)
        if alert_value_definition is not None:
            pulumi.set(__self__, "alert_value_definition", alert_value_definition)
        if change_definition is not None:
            pulumi.set(__self__, "change_definition", change_definition)
        if check_status_definition is not None:
            pulumi.set(__self__, "check_status_definition", check_status_definition)
        if distribution_definition is not None:
            pulumi.set(__self__, "distribution_definition", distribution_definition)
        if event_stream_definition is not None:
            pulumi.set(__self__, "event_stream_definition", event_stream_definition)
        if event_timeline_definition is not None:
            pulumi.set(__self__, "event_timeline_definition", event_timeline_definition)
        if free_text_definition is not None:
            pulumi.set(__self__, "free_text_definition", free_text_definition)
        if geomap_definition is not None:
            pulumi.set(__self__, "geomap_definition", geomap_definition)
        if group_definition is not None:
            pulumi.set(__self__, "group_definition", group_definition)
        if heatmap_definition is not None:
            pulumi.set(__self__, "heatmap_definition", heatmap_definition)
        if hostmap_definition is not None:
            pulumi.set(__self__, "hostmap_definition", hostmap_definition)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if iframe_definition is not None:
            pulumi.set(__self__, "iframe_definition", iframe_definition)
        if image_definition is not None:
            pulumi.set(__self__, "image_definition", image_definition)
        if list_stream_definition is not None:
            pulumi.set(__self__, "list_stream_definition", list_stream_definition)
        if log_stream_definition is not None:
            pulumi.set(__self__, "log_stream_definition", log_stream_definition)
        if manage_status_definition is not None:
            pulumi.set(__self__, "manage_status_definition", manage_status_definition)
        if note_definition is not None:
            pulumi.set(__self__, "note_definition", note_definition)
        if query_table_definition is not None:
            pulumi.set(__self__, "query_table_definition", query_table_definition)
        if query_value_definition is not None:
            pulumi.set(__self__, "query_value_definition", query_value_definition)
        if run_workflow_definition is not None:
            pulumi.set(__self__, "run_workflow_definition", run_workflow_definition)
        if scatterplot_definition is not None:
            pulumi.set(__self__, "scatterplot_definition", scatterplot_definition)
        if service_level_objective_definition is not None:
            pulumi.set(__self__, "service_level_objective_definition", service_level_objective_definition)
        if servicemap_definition is not None:
            pulumi.set(__self__, "servicemap_definition", servicemap_definition)
        if slo_list_definition is not None:
            pulumi.set(__self__, "slo_list_definition", slo_list_definition)
        if sunburst_definition is not None:
            pulumi.set(__self__, "sunburst_definition", sunburst_definition)
        if timeseries_definition is not None:
            pulumi.set(__self__, "timeseries_definition", timeseries_definition)
        if toplist_definition is not None:
            pulumi.set(__self__, "toplist_definition", toplist_definition)
        if topology_map_definition is not None:
            pulumi.set(__self__, "topology_map_definition", topology_map_definition)
        if trace_service_definition is not None:
            pulumi.set(__self__, "trace_service_definition", trace_service_definition)
        if treemap_definition is not None:
            pulumi.set(__self__, "treemap_definition", treemap_definition)
        if widget_layout is not None:
            pulumi.set(__self__, "widget_layout", widget_layout)

    @property
    @pulumi.getter(name="alertGraphDefinition")
    def alert_graph_definition(self) -> Optional[pulumi.Input['DashboardWidgetAlertGraphDefinitionArgs']]:
        """
        The definition for a Alert Graph widget.
        """
        return pulumi.get(self, "alert_graph_definition")

    @alert_graph_definition.setter
    def alert_graph_definition(self, value: Optional[pulumi.Input['DashboardWidgetAlertGraphDefinitionArgs']]):
        pulumi.set(self, "alert_graph_definition", value)

    @property
    @pulumi.getter(name="alertValueDefinition")
    def alert_value_definition(self) -> Optional[pulumi.Input['DashboardWidgetAlertValueDefinitionArgs']]:
        """
        The definition for a Alert Value widget.
        """
        return pulumi.get(self, "alert_value_definition")

    @alert_value_definition.setter
    def alert_value_definition(self, value: Optional[pulumi.Input['DashboardWidgetAlertValueDefinitionArgs']]):
        pulumi.set(self, "alert_value_definition", value)

    @property
    @pulumi.getter(name="changeDefinition")
    def change_definition(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionArgs']]:
        """
        The definition for a Change widget.
        """
        return pulumi.get(self, "change_definition")

    @change_definition.setter
    def change_definition(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionArgs']]):
        pulumi.set(self, "change_definition", value)

    @property
    @pulumi.getter(name="checkStatusDefinition")
    def check_status_definition(self) -> Optional[pulumi.Input['DashboardWidgetCheckStatusDefinitionArgs']]:
        """
        The definition for a Check Status widget.
        """
        return pulumi.get(self, "check_status_definition")

    @check_status_definition.setter
    def check_status_definition(self, value: Optional[pulumi.Input['DashboardWidgetCheckStatusDefinitionArgs']]):
        pulumi.set(self, "check_status_definition", value)

    @property
    @pulumi.getter(name="distributionDefinition")
    def distribution_definition(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionArgs']]:
        """
        The definition for a Distribution widget.
        """
        return pulumi.get(self, "distribution_definition")

    @distribution_definition.setter
    def distribution_definition(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionArgs']]):
        pulumi.set(self, "distribution_definition", value)

    @property
    @pulumi.getter(name="eventStreamDefinition")
    def event_stream_definition(self) -> Optional[pulumi.Input['DashboardWidgetEventStreamDefinitionArgs']]:
        """
        The definition for a Event Stream widget.
        """
        return pulumi.get(self, "event_stream_definition")

    @event_stream_definition.setter
    def event_stream_definition(self, value: Optional[pulumi.Input['DashboardWidgetEventStreamDefinitionArgs']]):
        pulumi.set(self, "event_stream_definition", value)

    @property
    @pulumi.getter(name="eventTimelineDefinition")
    def event_timeline_definition(self) -> Optional[pulumi.Input['DashboardWidgetEventTimelineDefinitionArgs']]:
        """
        The definition for a Event Timeline widget.
        """
        return pulumi.get(self, "event_timeline_definition")

    @event_timeline_definition.setter
    def event_timeline_definition(self, value: Optional[pulumi.Input['DashboardWidgetEventTimelineDefinitionArgs']]):
        pulumi.set(self, "event_timeline_definition", value)

    @property
    @pulumi.getter(name="freeTextDefinition")
    def free_text_definition(self) -> Optional[pulumi.Input['DashboardWidgetFreeTextDefinitionArgs']]:
        """
        The definition for a Free Text widget.
        """
        return pulumi.get(self, "free_text_definition")

    @free_text_definition.setter
    def free_text_definition(self, value: Optional[pulumi.Input['DashboardWidgetFreeTextDefinitionArgs']]):
        pulumi.set(self, "free_text_definition", value)

    @property
    @pulumi.getter(name="geomapDefinition")
    def geomap_definition(self) -> Optional[pulumi.Input['DashboardWidgetGeomapDefinitionArgs']]:
        """
        The definition for a Geomap widget.
        """
        return pulumi.get(self, "geomap_definition")

    @geomap_definition.setter
    def geomap_definition(self, value: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionArgs']]):
        pulumi.set(self, "geomap_definition", value)

    @property
    @pulumi.getter(name="groupDefinition")
    def group_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionArgs']]:
        """
        The definition for a Group widget.
        """
        return pulumi.get(self, "group_definition")

    @group_definition.setter
    def group_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionArgs']]):
        pulumi.set(self, "group_definition", value)

    @property
    @pulumi.getter(name="heatmapDefinition")
    def heatmap_definition(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionArgs']]:
        """
        The definition for a Heatmap widget.
        """
        return pulumi.get(self, "heatmap_definition")

    @heatmap_definition.setter
    def heatmap_definition(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionArgs']]):
        pulumi.set(self, "heatmap_definition", value)

    @property
    @pulumi.getter(name="hostmapDefinition")
    def hostmap_definition(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionArgs']]:
        """
        The definition for a Hostmap widget.
        """
        return pulumi.get(self, "hostmap_definition")

    @hostmap_definition.setter
    def hostmap_definition(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionArgs']]):
        pulumi.set(self, "hostmap_definition", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the widget.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="iframeDefinition")
    def iframe_definition(self) -> Optional[pulumi.Input['DashboardWidgetIframeDefinitionArgs']]:
        """
        The definition for an Iframe widget.
        """
        return pulumi.get(self, "iframe_definition")

    @iframe_definition.setter
    def iframe_definition(self, value: Optional[pulumi.Input['DashboardWidgetIframeDefinitionArgs']]):
        pulumi.set(self, "iframe_definition", value)

    @property
    @pulumi.getter(name="imageDefinition")
    def image_definition(self) -> Optional[pulumi.Input['DashboardWidgetImageDefinitionArgs']]:
        """
        The definition for an Image widget
        """
        return pulumi.get(self, "image_definition")

    @image_definition.setter
    def image_definition(self, value: Optional[pulumi.Input['DashboardWidgetImageDefinitionArgs']]):
        pulumi.set(self, "image_definition", value)

    @property
    @pulumi.getter(name="listStreamDefinition")
    def list_stream_definition(self) -> Optional[pulumi.Input['DashboardWidgetListStreamDefinitionArgs']]:
        """
        The definition for a List Stream widget.
        """
        return pulumi.get(self, "list_stream_definition")

    @list_stream_definition.setter
    def list_stream_definition(self, value: Optional[pulumi.Input['DashboardWidgetListStreamDefinitionArgs']]):
        pulumi.set(self, "list_stream_definition", value)

    @property
    @pulumi.getter(name="logStreamDefinition")
    def log_stream_definition(self) -> Optional[pulumi.Input['DashboardWidgetLogStreamDefinitionArgs']]:
        """
        The definition for an Log Stream widget.
        """
        return pulumi.get(self, "log_stream_definition")

    @log_stream_definition.setter
    def log_stream_definition(self, value: Optional[pulumi.Input['DashboardWidgetLogStreamDefinitionArgs']]):
        pulumi.set(self, "log_stream_definition", value)

    @property
    @pulumi.getter(name="manageStatusDefinition")
    def manage_status_definition(self) -> Optional[pulumi.Input['DashboardWidgetManageStatusDefinitionArgs']]:
        """
        The definition for an Manage Status widget.
        """
        return pulumi.get(self, "manage_status_definition")

    @manage_status_definition.setter
    def manage_status_definition(self, value: Optional[pulumi.Input['DashboardWidgetManageStatusDefinitionArgs']]):
        pulumi.set(self, "manage_status_definition", value)

    @property
    @pulumi.getter(name="noteDefinition")
    def note_definition(self) -> Optional[pulumi.Input['DashboardWidgetNoteDefinitionArgs']]:
        """
        The definition for a Note widget.
        """
        return pulumi.get(self, "note_definition")

    @note_definition.setter
    def note_definition(self, value: Optional[pulumi.Input['DashboardWidgetNoteDefinitionArgs']]):
        pulumi.set(self, "note_definition", value)

    @property
    @pulumi.getter(name="queryTableDefinition")
    def query_table_definition(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionArgs']]:
        """
        The definition for a Query Table widget.
        """
        return pulumi.get(self, "query_table_definition")

    @query_table_definition.setter
    def query_table_definition(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionArgs']]):
        pulumi.set(self, "query_table_definition", value)

    @property
    @pulumi.getter(name="queryValueDefinition")
    def query_value_definition(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionArgs']]:
        """
        The definition for a Query Value widget.
        """
        return pulumi.get(self, "query_value_definition")

    @query_value_definition.setter
    def query_value_definition(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionArgs']]):
        pulumi.set(self, "query_value_definition", value)

    @property
    @pulumi.getter(name="runWorkflowDefinition")
    def run_workflow_definition(self) -> Optional[pulumi.Input['DashboardWidgetRunWorkflowDefinitionArgs']]:
        """
        The definition for a Run Workflow widget.
        """
        return pulumi.get(self, "run_workflow_definition")

    @run_workflow_definition.setter
    def run_workflow_definition(self, value: Optional[pulumi.Input['DashboardWidgetRunWorkflowDefinitionArgs']]):
        pulumi.set(self, "run_workflow_definition", value)

    @property
    @pulumi.getter(name="scatterplotDefinition")
    def scatterplot_definition(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionArgs']]:
        """
        The definition for a Scatterplot widget.
        """
        return pulumi.get(self, "scatterplot_definition")

    @scatterplot_definition.setter
    def scatterplot_definition(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionArgs']]):
        pulumi.set(self, "scatterplot_definition", value)

    @property
    @pulumi.getter(name="serviceLevelObjectiveDefinition")
    def service_level_objective_definition(self) -> Optional[pulumi.Input['DashboardWidgetServiceLevelObjectiveDefinitionArgs']]:
        """
        The definition for a Service Level Objective widget.
        """
        return pulumi.get(self, "service_level_objective_definition")

    @service_level_objective_definition.setter
    def service_level_objective_definition(self, value: Optional[pulumi.Input['DashboardWidgetServiceLevelObjectiveDefinitionArgs']]):
        pulumi.set(self, "service_level_objective_definition", value)

    @property
    @pulumi.getter(name="servicemapDefinition")
    def servicemap_definition(self) -> Optional[pulumi.Input['DashboardWidgetServicemapDefinitionArgs']]:
        """
        The definition for a Service Map widget.
        """
        return pulumi.get(self, "servicemap_definition")

    @servicemap_definition.setter
    def servicemap_definition(self, value: Optional[pulumi.Input['DashboardWidgetServicemapDefinitionArgs']]):
        pulumi.set(self, "servicemap_definition", value)

    @property
    @pulumi.getter(name="sloListDefinition")
    def slo_list_definition(self) -> Optional[pulumi.Input['DashboardWidgetSloListDefinitionArgs']]:
        """
        The definition for an SLO (Service Level Objective) List widget.
        """
        return pulumi.get(self, "slo_list_definition")

    @slo_list_definition.setter
    def slo_list_definition(self, value: Optional[pulumi.Input['DashboardWidgetSloListDefinitionArgs']]):
        pulumi.set(self, "slo_list_definition", value)

    @property
    @pulumi.getter(name="sunburstDefinition")
    def sunburst_definition(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionArgs']]:
        """
        The definition for a Sunburst widget.
        """
        return pulumi.get(self, "sunburst_definition")

    @sunburst_definition.setter
    def sunburst_definition(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionArgs']]):
        pulumi.set(self, "sunburst_definition", value)

    @property
    @pulumi.getter(name="timeseriesDefinition")
    def timeseries_definition(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionArgs']]:
        """
        The definition for a Timeseries widget.
        """
        return pulumi.get(self, "timeseries_definition")

    @timeseries_definition.setter
    def timeseries_definition(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionArgs']]):
        pulumi.set(self, "timeseries_definition", value)

    @property
    @pulumi.getter(name="toplistDefinition")
    def toplist_definition(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionArgs']]:
        """
        The definition for a Toplist widget.
        """
        return pulumi.get(self, "toplist_definition")

    @toplist_definition.setter
    def toplist_definition(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionArgs']]):
        pulumi.set(self, "toplist_definition", value)

    @property
    @pulumi.getter(name="topologyMapDefinition")
    def topology_map_definition(self) -> Optional[pulumi.Input['DashboardWidgetTopologyMapDefinitionArgs']]:
        """
        The definition for a Topology Map widget.
        """
        return pulumi.get(self, "topology_map_definition")

    @topology_map_definition.setter
    def topology_map_definition(self, value: Optional[pulumi.Input['DashboardWidgetTopologyMapDefinitionArgs']]):
        pulumi.set(self, "topology_map_definition", value)

    @property
    @pulumi.getter(name="traceServiceDefinition")
    def trace_service_definition(self) -> Optional[pulumi.Input['DashboardWidgetTraceServiceDefinitionArgs']]:
        """
        The definition for a Trace Service widget.
        """
        return pulumi.get(self, "trace_service_definition")

    @trace_service_definition.setter
    def trace_service_definition(self, value: Optional[pulumi.Input['DashboardWidgetTraceServiceDefinitionArgs']]):
        pulumi.set(self, "trace_service_definition", value)

    @property
    @pulumi.getter(name="treemapDefinition")
    def treemap_definition(self) -> Optional[pulumi.Input['DashboardWidgetTreemapDefinitionArgs']]:
        """
        The definition for a Treemap widget.
        """
        return pulumi.get(self, "treemap_definition")

    @treemap_definition.setter
    def treemap_definition(self, value: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionArgs']]):
        pulumi.set(self, "treemap_definition", value)

    @property
    @pulumi.getter(name="widgetLayout")
    def widget_layout(self) -> Optional[pulumi.Input['DashboardWidgetWidgetLayoutArgs']]:
        """
        The layout of the widget on a 'free' dashboard.
        """
        return pulumi.get(self, "widget_layout")

    @widget_layout.setter
    def widget_layout(self, value: Optional[pulumi.Input['DashboardWidgetWidgetLayoutArgs']]):
        pulumi.set(self, "widget_layout", value)


@pulumi.input_type
class DashboardWidgetAlertGraphDefinitionArgs:
    def __init__(__self__, *,
                 alert_id: pulumi.Input[str],
                 viz_type: pulumi.Input[str],
                 live_span: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] alert_id: The ID of the monitor used by the widget.
        :param pulumi.Input[str] viz_type: Type of visualization to use when displaying the widget. Valid values are `timeseries`, `toplist`.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "alert_id", alert_id)
        pulumi.set(__self__, "viz_type", viz_type)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> pulumi.Input[str]:
        """
        The ID of the monitor used by the widget.
        """
        return pulumi.get(self, "alert_id")

    @alert_id.setter
    def alert_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "alert_id", value)

    @property
    @pulumi.getter(name="vizType")
    def viz_type(self) -> pulumi.Input[str]:
        """
        Type of visualization to use when displaying the widget. Valid values are `timeseries`, `toplist`.
        """
        return pulumi.get(self, "viz_type")

    @viz_type.setter
    def viz_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "viz_type", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetAlertValueDefinitionArgs:
    def __init__(__self__, *,
                 alert_id: pulumi.Input[str],
                 precision: Optional[pulumi.Input[int]] = None,
                 text_align: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] alert_id: The ID of the monitor used by the widget.
        :param pulumi.Input[int] precision: The precision to use when displaying the value. Use `*` for maximum precision.
        :param pulumi.Input[str] text_align: The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        :param pulumi.Input[str] unit: The unit for the value displayed in the widget.
        """
        pulumi.set(__self__, "alert_id", alert_id)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> pulumi.Input[str]:
        """
        The ID of the monitor used by the widget.
        """
        return pulumi.get(self, "alert_id")

    @alert_id.setter
    def alert_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "alert_id", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        """
        The precision to use when displaying the value. Use `*` for maximum precision.
        """
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "text_align")

    @text_align.setter
    def text_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_align", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        The unit for the value displayed in the widget.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionCustomLinkArgs']]]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryArgs']] = None,
                 change_type: Optional[pulumi.Input[str]] = None,
                 compare_to: Optional[pulumi.Input[str]] = None,
                 formulas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestFormulaArgs']]]] = None,
                 increase_good: Optional[pulumi.Input[bool]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryArgs']] = None,
                 order_by: Optional[pulumi.Input[str]] = None,
                 order_dir: Optional[pulumi.Input[str]] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryArgs']]]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryArgs']] = None,
                 show_present: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input[str] change_type: Whether to show absolute or relative change. Valid values are `absolute`, `relative`.
        :param pulumi.Input[str] compare_to: Choose from when to compare current data to. Valid values are `hour_before`, `day_before`, `week_before`, `month_before`.
        :param pulumi.Input[bool] increase_good: A Boolean indicating whether an increase in the value is good (displayed in green) or not (displayed in red).
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input[str] order_by: What to order by. Valid values are `change`, `name`, `present`, `past`.
        :param pulumi.Input[str] order_dir: Widget sorting method. Valid values are `asc`, `desc`.
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryArgs'] security_query: The query to use for this widget.
        :param pulumi.Input[bool] show_present: If set to `true`, displays the current value.
        """
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if change_type is not None:
            pulumi.set(__self__, "change_type", change_type)
        if compare_to is not None:
            pulumi.set(__self__, "compare_to", compare_to)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if increase_good is not None:
            pulumi.set(__self__, "increase_good", increase_good)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if order_by is not None:
            pulumi.set(__self__, "order_by", order_by)
        if order_dir is not None:
            pulumi.set(__self__, "order_dir", order_dir)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if show_present is not None:
            pulumi.set(__self__, "show_present", show_present)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="changeType")
    def change_type(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to show absolute or relative change. Valid values are `absolute`, `relative`.
        """
        return pulumi.get(self, "change_type")

    @change_type.setter
    def change_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "change_type", value)

    @property
    @pulumi.getter(name="compareTo")
    def compare_to(self) -> Optional[pulumi.Input[str]]:
        """
        Choose from when to compare current data to. Valid values are `hour_before`, `day_before`, `week_before`, `month_before`.
        """
        return pulumi.get(self, "compare_to")

    @compare_to.setter
    def compare_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compare_to", value)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestFormulaArgs']]]]:
        return pulumi.get(self, "formulas")

    @formulas.setter
    def formulas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestFormulaArgs']]]]):
        pulumi.set(self, "formulas", value)

    @property
    @pulumi.getter(name="increaseGood")
    def increase_good(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean indicating whether an increase in the value is good (displayed in green) or not (displayed in red).
        """
        return pulumi.get(self, "increase_good")

    @increase_good.setter
    def increase_good(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "increase_good", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[pulumi.Input[str]]:
        """
        What to order by. Valid values are `change`, `name`, `present`, `past`.
        """
        return pulumi.get(self, "order_by")

    @order_by.setter
    def order_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_by", value)

    @property
    @pulumi.getter(name="orderDir")
    def order_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting method. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order_dir")

    @order_dir.setter
    def order_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_dir", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryArgs']]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter(name="showPresent")
    def show_present(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to `true`, displays the current value.
        """
        return pulumi.get(self, "show_present")

    @show_present.setter
    def show_present(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_present", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestFormulaArgs:
    def __init__(__self__, *,
                 formula_expression: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestFormulaConditionalFormatArgs']]]] = None,
                 limit: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestFormulaLimitArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestFormulaStyleArgs']] = None):
        """
        :param pulumi.Input[str] formula_expression: A string expression built from queries, formulas, and functions.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input[str] cell_display_mode: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestFormulaConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestFormulaLimitArgs'] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestFormulaStyleArgs'] style: Styling options for widget formulas.
        """
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> pulumi.Input[str]:
        """
        A string expression built from queries, formulas, and functions.
        """
        return pulumi.get(self, "formula_expression")

    @formula_expression.setter
    def formula_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "formula_expression", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestFormulaConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestFormulaConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestFormulaLimitArgs']]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestFormulaLimitArgs']]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestFormulaStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestFormulaStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestFormulaConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestFormulaLimitArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] count: The number of results to return
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of results to return
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestFormulaStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None,
                 palette_index: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[int] palette_index: Index specifying which color to use within the palette.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_index is not None:
            pulumi.set(__self__, "palette_index", palette_index)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteIndex")
    def palette_index(self) -> Optional[pulumi.Input[int]]:
        """
        Index specifying which color to use within the palette.
        """
        return pulumi.get(self, "palette_index")

    @palette_index.setter
    def palette_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "palette_index", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryArgs']] = None,
                 apm_resource_stats_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryApmResourceStatsQueryArgs']] = None,
                 event_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryEventQueryArgs']] = None,
                 metric_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryMetricQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryProcessQueryArgs']] = None,
                 slo_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQuerySloQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryArgs'] apm_dependency_stats_query: The APM Dependency Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryApmResourceStatsQueryArgs'] apm_resource_stats_query: The APM Resource Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryEventQueryArgs'] event_query: A timeseries formula and functions events query.
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryMetricQueryArgs'] metric_query: A timeseries formula and functions metrics query.
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestQuerySloQueryArgs'] slo_query: The slo query using formulas and functions.
        """
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if slo_query is not None:
            pulumi.set(__self__, "slo_query", slo_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryArgs']]:
        """
        The APM Dependency Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_dependency_stats_query")

    @apm_dependency_stats_query.setter
    def apm_dependency_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryArgs']]):
        pulumi.set(self, "apm_dependency_stats_query", value)

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryApmResourceStatsQueryArgs']]:
        """
        The APM Resource Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_resource_stats_query")

    @apm_resource_stats_query.setter
    def apm_resource_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryApmResourceStatsQueryArgs']]):
        pulumi.set(self, "apm_resource_stats_query", value)

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryEventQueryArgs']]:
        """
        A timeseries formula and functions events query.
        """
        return pulumi.get(self, "event_query")

    @event_query.setter
    def event_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryEventQueryArgs']]):
        pulumi.set(self, "event_query", value)

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryMetricQueryArgs']]:
        """
        A timeseries formula and functions metrics query.
        """
        return pulumi.get(self, "metric_query")

    @metric_query.setter
    def metric_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryMetricQueryArgs']]):
        pulumi.set(self, "metric_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter(name="sloQuery")
    def slo_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQuerySloQueryArgs']]:
        """
        The slo query using formulas and functions.
        """
        return pulumi.get(self, "slo_query")

    @slo_query.setter
    def slo_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQuerySloQueryArgs']]):
        pulumi.set(self, "slo_query", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 operation_name: pulumi.Input[str],
                 resource_name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 is_upstream: Optional[pulumi.Input[bool]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] resource_name: APM resource.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[bool] is_upstream: Determines whether stats for upstream or downstream dependencies should be queried.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> pulumi.Input[str]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether stats for upstream or downstream dependencies should be queried.
        """
        return pulumi.get(self, "is_upstream")

    @is_upstream.setter
    def is_upstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_upstream", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestQueryApmResourceStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operation_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        :param pulumi.Input[str] resource_name: APM resource.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestQueryEventQueryArgs:
    def __init__(__self__, *,
                 computes: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryEventQueryComputeArgs']]],
                 data_source: pulumi.Input[str],
                 name: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupByArgs']]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryEventQuerySearchArgs']] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryEventQueryComputeArgs']]] computes: The compute options.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryEventQuerySearchArgs'] search: The search options.
        :param pulumi.Input[str] storage: Storage location (private beta).
        """
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def computes(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryEventQueryComputeArgs']]]:
        """
        The compute options.
        """
        return pulumi.get(self, "computes")

    @computes.setter
    def computes(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryEventQueryComputeArgs']]]):
        pulumi.set(self, "computes", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryEventQuerySearchArgs']]:
        """
        The search options.
        """
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryEventQuerySearchArgs']]):
        pulumi.set(self, "search", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage location (private beta).
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestQueryEventQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 interval: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupBySortArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupBySortArgs'] sort: The options for sorting group by results.
        """
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupBySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestQueryEventQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 metric: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestQueryEventQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestQueryMetricQueryArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 data_source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[str]]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestQueryProcessQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 metric: pulumi.Input[str],
                 name: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 is_normalized_cpu: Optional[pulumi.Input[bool]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[bool] is_normalized_cpu: Whether to normalize the CPU percentages.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] sort: The options for sorting group by results.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_filters: An array of tags to filter by.
        :param pulumi.Input[str] text_filter: The text to use as a filter.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to normalize the CPU percentages.
        """
        return pulumi.get(self, "is_normalized_cpu")

    @is_normalized_cpu.setter
    def is_normalized_cpu(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_normalized_cpu", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of tags to filter by.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[pulumi.Input[str]]:
        """
        The text to use as a filter.
        """
        return pulumi.get(self, "text_filter")

    @text_filter.setter
    def text_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_filter", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestQuerySloQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 measure: pulumi.Input[str],
                 slo_id: pulumi.Input[str],
                 additional_query_filters: Optional[pulumi.Input[str]] = None,
                 group_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slo_query_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] measure: SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        :param pulumi.Input[str] slo_id: ID of an SLO to query.
        :param pulumi.Input[str] additional_query_filters: Additional filters applied to the SLO query.
        :param pulumi.Input[str] group_mode: Group mode to query measures. Valid values are `overall`, `components`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] slo_query_type: type of the SLO to query. Valid values are `metric`.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "measure", measure)
        pulumi.set(__self__, "slo_id", slo_id)
        if additional_query_filters is not None:
            pulumi.set(__self__, "additional_query_filters", additional_query_filters)
        if group_mode is not None:
            pulumi.set(__self__, "group_mode", group_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slo_query_type is not None:
            pulumi.set(__self__, "slo_query_type", slo_query_type)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def measure(self) -> pulumi.Input[str]:
        """
        SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        """
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure", value)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        """
        ID of an SLO to query.
        """
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="additionalQueryFilters")
    def additional_query_filters(self) -> Optional[pulumi.Input[str]]:
        """
        Additional filters applied to the SLO query.
        """
        return pulumi.get(self, "additional_query_filters")

    @additional_query_filters.setter
    def additional_query_filters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_query_filters", value)

    @property
    @pulumi.getter(name="groupMode")
    def group_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Group mode to query measures. Valid values are `overall`, `components`.
        """
        return pulumi.get(self, "group_mode")

    @group_mode.setter
    def group_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sloQueryType")
    def slo_query_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the SLO to query. Valid values are `metric`.
        """
        return pulumi.get(self, "slo_query_type")

    @slo_query_type.setter
    def slo_query_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slo_query_type", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetCheckStatusDefinitionArgs:
    def __init__(__self__, *,
                 check: pulumi.Input[str],
                 grouping: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] check: The check to use in the widget.
        :param pulumi.Input[str] grouping: The kind of grouping to use. Valid values are `check`, `cluster`.
        :param pulumi.Input[str] group: The check group to use in the widget.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags to use in the widget.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "check", check)
        pulumi.set(__self__, "grouping", grouping)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def check(self) -> pulumi.Input[str]:
        """
        The check to use in the widget.
        """
        return pulumi.get(self, "check")

    @check.setter
    def check(self, value: pulumi.Input[str]):
        pulumi.set(self, "check", value)

    @property
    @pulumi.getter
    def grouping(self) -> pulumi.Input[str]:
        """
        The kind of grouping to use. Valid values are `check`, `cluster`.
        """
        return pulumi.get(self, "grouping")

    @grouping.setter
    def grouping(self, value: pulumi.Input[str]):
        pulumi.set(self, "grouping", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        The check group to use in the widget.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tags to use in the widget.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionArgs:
    def __init__(__self__, *,
                 legend_size: Optional[pulumi.Input[str]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestArgs']]]] = None,
                 show_legend: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] legend_size: The size of the legend displayed in the widget.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[bool] show_legend: Whether or not to show the legend on this widget.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        if legend_size is not None:
            pulumi.set(__self__, "legend_size", legend_size)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if show_legend is not None:
            pulumi.set(__self__, "show_legend", show_legend)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="legendSize")
    def legend_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the legend displayed in the widget.
        """
        return pulumi.get(self, "legend_size")

    @legend_size.setter
    def legend_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "legend_size", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="showLegend")
    def show_legend(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to show the legend on this widget.
        """
        return pulumi.get(self, "show_legend")

    @show_legend.setter
    def show_legend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_legend", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryArgs']] = None,
                 apm_stats_query: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmStatsQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestStyleArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetDistributionDefinitionRequestProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryArgs'] security_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetDistributionDefinitionRequestStyleArgs'] style: Styling options for widget formulas.
        """
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if apm_stats_query is not None:
            pulumi.set(__self__, "apm_stats_query", apm_stats_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="apmStatsQuery")
    def apm_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmStatsQueryArgs']]:
        return pulumi.get(self, "apm_stats_query")

    @apm_stats_query.setter
    def apm_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmStatsQueryArgs']]):
        pulumi.set(self, "apm_stats_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestApmStatsQueryArgs:
    def __init__(__self__, *,
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 primary_tag: pulumi.Input[str],
                 row_type: pulumi.Input[str],
                 service: pulumi.Input[str],
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmStatsQueryColumnArgs']]]] = None,
                 resource: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] primary_tag: The organization's host group name and value.
        :param pulumi.Input[str] row_type: The level of detail for the request. Valid values are `service`, `resource`, `span`.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmStatsQueryColumnArgs']]] columns: Column properties used by the front end for display.
        :param pulumi.Input[str] resource: The resource name.
        """
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_tag", primary_tag)
        pulumi.set(__self__, "row_type", row_type)
        pulumi.set(__self__, "service", service)
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryTag")
    def primary_tag(self) -> pulumi.Input[str]:
        """
        The organization's host group name and value.
        """
        return pulumi.get(self, "primary_tag")

    @primary_tag.setter
    def primary_tag(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary_tag", value)

    @property
    @pulumi.getter(name="rowType")
    def row_type(self) -> pulumi.Input[str]:
        """
        The level of detail for the request. Valid values are `service`, `resource`, `span`.
        """
        return pulumi.get(self, "row_type")

    @row_type.setter
    def row_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "row_type", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmStatsQueryColumnArgs']]]]:
        """
        Column properties used by the front end for display.
        """
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestApmStatsQueryColumnArgs']]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        """
        The resource name.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestApmStatsQueryColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input[str] cell_display_mode: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "name", name)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetDistributionDefinitionRequestStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)


@pulumi.input_type
class DashboardWidgetEventStreamDefinitionArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 event_size: Optional[pulumi.Input[str]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 tags_execution: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] event_size: The size to use to display an event. Valid values are `s`, `l`.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[str] tags_execution: The execution method for multi-value filters, options: `and` or `or`.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "query", query)
        if event_size is not None:
            pulumi.set(__self__, "event_size", event_size)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="eventSize")
    def event_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size to use to display an event. Valid values are `s`, `l`.
        """
        return pulumi.get(self, "event_size")

    @event_size.setter
    def event_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_size", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[pulumi.Input[str]]:
        """
        The execution method for multi-value filters, options: `and` or `or`.
        """
        return pulumi.get(self, "tags_execution")

    @tags_execution.setter
    def tags_execution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags_execution", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetEventTimelineDefinitionArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 live_span: Optional[pulumi.Input[str]] = None,
                 tags_execution: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[str] tags_execution: The execution method for multi-value filters, options: `and` or `or`.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "query", query)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[pulumi.Input[str]]:
        """
        The execution method for multi-value filters, options: `and` or `or`.
        """
        return pulumi.get(self, "tags_execution")

    @tags_execution.setter
    def tags_execution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags_execution", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetFreeTextDefinitionArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 color: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[str]] = None,
                 text_align: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] text: The text to display in the widget.
        :param pulumi.Input[str] color: The color of the text in the widget.
        :param pulumi.Input[str] font_size: The size of the text in the widget.
        :param pulumi.Input[str] text_align: The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
        """
        pulumi.set(__self__, "text", text)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        The text to display in the widget.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        The color of the text in the widget.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the text in the widget.
        """
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "text_align")

    @text_align.setter
    def text_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_align", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionArgs:
    def __init__(__self__, *,
                 view: pulumi.Input['DashboardWidgetGeomapDefinitionViewArgs'],
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionCustomLinkArgs']]]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestArgs']]]] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionStyleArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['DashboardWidgetGeomapDefinitionViewArgs'] view: The view of the world that the map should render.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input['DashboardWidgetGeomapDefinitionStyleArgs'] style: Styling options for widget formulas.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "view", view)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def view(self) -> pulumi.Input['DashboardWidgetGeomapDefinitionViewArgs']:
        """
        The view of the world that the map should render.
        """
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: pulumi.Input['DashboardWidgetGeomapDefinitionViewArgs']):
        pulumi.set(self, "view", value)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGeomapDefinitionStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionStyleArgs']]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestArgs:
    def __init__(__self__, *,
                 formulas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestFormulaArgs']]]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestLogQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryArgs']]]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestRumQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetGeomapDefinitionRequestLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetGeomapDefinitionRequestRumQueryArgs'] rum_query: The query to use for this widget.
        """
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestFormulaArgs']]]]:
        return pulumi.get(self, "formulas")

    @formulas.setter
    def formulas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestFormulaArgs']]]]):
        pulumi.set(self, "formulas", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryArgs']]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestFormulaArgs:
    def __init__(__self__, *,
                 formula_expression: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestFormulaConditionalFormatArgs']]]] = None,
                 limit: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestFormulaLimitArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestFormulaStyleArgs']] = None):
        """
        :param pulumi.Input[str] formula_expression: A string expression built from queries, formulas, and functions.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input[str] cell_display_mode: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestFormulaConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetGeomapDefinitionRequestFormulaLimitArgs'] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGeomapDefinitionRequestFormulaStyleArgs'] style: Styling options for widget formulas.
        """
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> pulumi.Input[str]:
        """
        A string expression built from queries, formulas, and functions.
        """
        return pulumi.get(self, "formula_expression")

    @formula_expression.setter
    def formula_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "formula_expression", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestFormulaConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestFormulaConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestFormulaLimitArgs']]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestFormulaLimitArgs']]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestFormulaStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestFormulaStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestFormulaConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestFormulaLimitArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] count: The number of results to return
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of results to return
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestFormulaStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None,
                 palette_index: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[int] palette_index: Index specifying which color to use within the palette.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_index is not None:
            pulumi.set(__self__, "palette_index", palette_index)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteIndex")
    def palette_index(self) -> Optional[pulumi.Input[int]]:
        """
        Index specifying which color to use within the palette.
        """
        return pulumi.get(self, "palette_index")

    @palette_index.setter
    def palette_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "palette_index", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGeomapDefinitionRequestLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryArgs']] = None,
                 apm_resource_stats_query: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryArgs']] = None,
                 event_query: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryEventQueryArgs']] = None,
                 metric_query: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryMetricQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryProcessQueryArgs']] = None,
                 slo_query: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQuerySloQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryArgs'] apm_dependency_stats_query: The APM Dependency Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryArgs'] apm_resource_stats_query: The APM Resource Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryEventQueryArgs'] event_query: A timeseries formula and functions events query.
        :param pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryMetricQueryArgs'] metric_query: A timeseries formula and functions metrics query.
        :param pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input['DashboardWidgetGeomapDefinitionRequestQuerySloQueryArgs'] slo_query: The slo query using formulas and functions.
        """
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if slo_query is not None:
            pulumi.set(__self__, "slo_query", slo_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryArgs']]:
        """
        The APM Dependency Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_dependency_stats_query")

    @apm_dependency_stats_query.setter
    def apm_dependency_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryArgs']]):
        pulumi.set(self, "apm_dependency_stats_query", value)

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryArgs']]:
        """
        The APM Resource Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_resource_stats_query")

    @apm_resource_stats_query.setter
    def apm_resource_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryArgs']]):
        pulumi.set(self, "apm_resource_stats_query", value)

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryEventQueryArgs']]:
        """
        A timeseries formula and functions events query.
        """
        return pulumi.get(self, "event_query")

    @event_query.setter
    def event_query(self, value: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryEventQueryArgs']]):
        pulumi.set(self, "event_query", value)

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryMetricQueryArgs']]:
        """
        A timeseries formula and functions metrics query.
        """
        return pulumi.get(self, "metric_query")

    @metric_query.setter
    def metric_query(self, value: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryMetricQueryArgs']]):
        pulumi.set(self, "metric_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter(name="sloQuery")
    def slo_query(self) -> Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQuerySloQueryArgs']]:
        """
        The slo query using formulas and functions.
        """
        return pulumi.get(self, "slo_query")

    @slo_query.setter
    def slo_query(self, value: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQuerySloQueryArgs']]):
        pulumi.set(self, "slo_query", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 operation_name: pulumi.Input[str],
                 resource_name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 is_upstream: Optional[pulumi.Input[bool]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] resource_name: APM resource.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[bool] is_upstream: Determines whether stats for upstream or downstream dependencies should be queried.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> pulumi.Input[str]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether stats for upstream or downstream dependencies should be queried.
        """
        return pulumi.get(self, "is_upstream")

    @is_upstream.setter
    def is_upstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_upstream", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operation_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        :param pulumi.Input[str] resource_name: APM resource.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestQueryEventQueryArgs:
    def __init__(__self__, *,
                 computes: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryEventQueryComputeArgs']]],
                 data_source: pulumi.Input[str],
                 name: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupByArgs']]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryEventQuerySearchArgs']] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryEventQueryComputeArgs']]] computes: The compute options.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryEventQuerySearchArgs'] search: The search options.
        :param pulumi.Input[str] storage: Storage location (private beta).
        """
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def computes(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryEventQueryComputeArgs']]]:
        """
        The compute options.
        """
        return pulumi.get(self, "computes")

    @computes.setter
    def computes(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryEventQueryComputeArgs']]]):
        pulumi.set(self, "computes", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryEventQuerySearchArgs']]:
        """
        The search options.
        """
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryEventQuerySearchArgs']]):
        pulumi.set(self, "search", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage location (private beta).
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestQueryEventQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 interval: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortArgs'] sort: The options for sorting group by results.
        """
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 metric: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestQueryEventQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestQueryMetricQueryArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 data_source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[str]]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestQueryProcessQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 metric: pulumi.Input[str],
                 name: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 is_normalized_cpu: Optional[pulumi.Input[bool]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[bool] is_normalized_cpu: Whether to normalize the CPU percentages.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] sort: The options for sorting group by results.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_filters: An array of tags to filter by.
        :param pulumi.Input[str] text_filter: The text to use as a filter.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to normalize the CPU percentages.
        """
        return pulumi.get(self, "is_normalized_cpu")

    @is_normalized_cpu.setter
    def is_normalized_cpu(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_normalized_cpu", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of tags to filter by.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[pulumi.Input[str]]:
        """
        The text to use as a filter.
        """
        return pulumi.get(self, "text_filter")

    @text_filter.setter
    def text_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_filter", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestQuerySloQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 measure: pulumi.Input[str],
                 slo_id: pulumi.Input[str],
                 additional_query_filters: Optional[pulumi.Input[str]] = None,
                 group_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slo_query_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] measure: SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        :param pulumi.Input[str] slo_id: ID of an SLO to query.
        :param pulumi.Input[str] additional_query_filters: Additional filters applied to the SLO query.
        :param pulumi.Input[str] group_mode: Group mode to query measures. Valid values are `overall`, `components`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] slo_query_type: type of the SLO to query. Valid values are `metric`.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "measure", measure)
        pulumi.set(__self__, "slo_id", slo_id)
        if additional_query_filters is not None:
            pulumi.set(__self__, "additional_query_filters", additional_query_filters)
        if group_mode is not None:
            pulumi.set(__self__, "group_mode", group_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slo_query_type is not None:
            pulumi.set(__self__, "slo_query_type", slo_query_type)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def measure(self) -> pulumi.Input[str]:
        """
        SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        """
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure", value)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        """
        ID of an SLO to query.
        """
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="additionalQueryFilters")
    def additional_query_filters(self) -> Optional[pulumi.Input[str]]:
        """
        Additional filters applied to the SLO query.
        """
        return pulumi.get(self, "additional_query_filters")

    @additional_query_filters.setter
    def additional_query_filters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_query_filters", value)

    @property
    @pulumi.getter(name="groupMode")
    def group_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Group mode to query measures. Valid values are `overall`, `components`.
        """
        return pulumi.get(self, "group_mode")

    @group_mode.setter
    def group_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sloQueryType")
    def slo_query_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the SLO to query. Valid values are `metric`.
        """
        return pulumi.get(self, "slo_query_type")

    @slo_query_type.setter
    def slo_query_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slo_query_type", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGeomapDefinitionRequestRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGeomapDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionStyleArgs:
    def __init__(__self__, *,
                 palette: pulumi.Input[str],
                 palette_flip: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[bool] palette_flip: A Boolean indicating whether to flip the palette tones.
        """
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "palette_flip", palette_flip)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteFlip")
    def palette_flip(self) -> pulumi.Input[bool]:
        """
        A Boolean indicating whether to flip the palette tones.
        """
        return pulumi.get(self, "palette_flip")

    @palette_flip.setter
    def palette_flip(self, value: pulumi.Input[bool]):
        pulumi.set(self, "palette_flip", value)


@pulumi.input_type
class DashboardWidgetGeomapDefinitionViewArgs:
    def __init__(__self__, *,
                 focus: pulumi.Input[str]):
        """
        :param pulumi.Input[str] focus: The two-letter ISO code of a country to focus the map on (or `WORLD`).
        """
        pulumi.set(__self__, "focus", focus)

    @property
    @pulumi.getter
    def focus(self) -> pulumi.Input[str]:
        """
        The two-letter ISO code of a country to focus the map on (or `WORLD`).
        """
        return pulumi.get(self, "focus")

    @focus.setter
    def focus(self, value: pulumi.Input[str]):
        pulumi.set(self, "focus", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionArgs:
    def __init__(__self__, *,
                 layout_type: pulumi.Input[str],
                 background_color: Optional[pulumi.Input[str]] = None,
                 banner_img: Optional[pulumi.Input[str]] = None,
                 show_title: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 widgets: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetArgs']]]] = None):
        """
        :param pulumi.Input[str] layout_type: The layout type of the group. Valid values are `ordered`.
        :param pulumi.Input[str] background_color: The background color of the group title, options: `vivid_blue`, `vivid_purple`, `vivid_pink`, `vivid_orange`, `vivid_yellow`, `vivid_green`, `blue`, `purple`, `pink`, `orange`, `yellow`, `green`, `gray` or `white`
        :param pulumi.Input[str] banner_img: The image URL to display as a banner for the group.
        :param pulumi.Input[bool] show_title: Whether to show the title or not.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetArgs']]] widgets: The list of widgets in this group.
        """
        pulumi.set(__self__, "layout_type", layout_type)
        if background_color is not None:
            pulumi.set(__self__, "background_color", background_color)
        if banner_img is not None:
            pulumi.set(__self__, "banner_img", banner_img)
        if show_title is not None:
            pulumi.set(__self__, "show_title", show_title)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if widgets is not None:
            pulumi.set(__self__, "widgets", widgets)

    @property
    @pulumi.getter(name="layoutType")
    def layout_type(self) -> pulumi.Input[str]:
        """
        The layout type of the group. Valid values are `ordered`.
        """
        return pulumi.get(self, "layout_type")

    @layout_type.setter
    def layout_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "layout_type", value)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input[str]]:
        """
        The background color of the group title, options: `vivid_blue`, `vivid_purple`, `vivid_pink`, `vivid_orange`, `vivid_yellow`, `vivid_green`, `blue`, `purple`, `pink`, `orange`, `yellow`, `green`, `gray` or `white`
        """
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter(name="bannerImg")
    def banner_img(self) -> Optional[pulumi.Input[str]]:
        """
        The image URL to display as a banner for the group.
        """
        return pulumi.get(self, "banner_img")

    @banner_img.setter
    def banner_img(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "banner_img", value)

    @property
    @pulumi.getter(name="showTitle")
    def show_title(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to show the title or not.
        """
        return pulumi.get(self, "show_title")

    @show_title.setter
    def show_title(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_title", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def widgets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetArgs']]]]:
        """
        The list of widgets in this group.
        """
        return pulumi.get(self, "widgets")

    @widgets.setter
    def widgets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetArgs']]]]):
        pulumi.set(self, "widgets", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetArgs:
    def __init__(__self__, *,
                 alert_graph_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionArgs']] = None,
                 alert_value_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetAlertValueDefinitionArgs']] = None,
                 change_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionArgs']] = None,
                 check_status_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionArgs']] = None,
                 distribution_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionArgs']] = None,
                 event_stream_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionArgs']] = None,
                 event_timeline_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionArgs']] = None,
                 free_text_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetFreeTextDefinitionArgs']] = None,
                 geomap_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionArgs']] = None,
                 heatmap_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionArgs']] = None,
                 hostmap_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionArgs']] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 iframe_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetIframeDefinitionArgs']] = None,
                 image_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetImageDefinitionArgs']] = None,
                 list_stream_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetListStreamDefinitionArgs']] = None,
                 log_stream_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionArgs']] = None,
                 manage_status_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetManageStatusDefinitionArgs']] = None,
                 note_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetNoteDefinitionArgs']] = None,
                 query_table_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionArgs']] = None,
                 query_value_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs']] = None,
                 run_workflow_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionArgs']] = None,
                 scatterplot_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionArgs']] = None,
                 service_level_objective_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinitionArgs']] = None,
                 servicemap_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetServicemapDefinitionArgs']] = None,
                 slo_list_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSloListDefinitionArgs']] = None,
                 sunburst_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionArgs']] = None,
                 timeseries_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionArgs']] = None,
                 toplist_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionArgs']] = None,
                 topology_map_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionArgs']] = None,
                 trace_service_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionArgs']] = None,
                 treemap_definition: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionArgs']] = None,
                 widget_layout: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetWidgetLayoutArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionArgs'] alert_graph_definition: The definition for a Alert Graph widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetAlertValueDefinitionArgs'] alert_value_definition: The definition for a Alert Value widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionArgs'] change_definition: The definition for a Change widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionArgs'] check_status_definition: The definition for a Check Status widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionArgs'] distribution_definition: The definition for a Distribution widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionArgs'] event_stream_definition: The definition for a Event Stream widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionArgs'] event_timeline_definition: The definition for a Event Timeline widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetFreeTextDefinitionArgs'] free_text_definition: The definition for a Free Text widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionArgs'] geomap_definition: The definition for a Geomap widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionArgs'] heatmap_definition: The definition for a Heatmap widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionArgs'] hostmap_definition: The definition for a Hostmap widget.
        :param pulumi.Input[int] id: The ID of the widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetIframeDefinitionArgs'] iframe_definition: The definition for an Iframe widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetImageDefinitionArgs'] image_definition: The definition for an Image widget
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetListStreamDefinitionArgs'] list_stream_definition: The definition for a List Stream widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionArgs'] log_stream_definition: The definition for an Log Stream widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetManageStatusDefinitionArgs'] manage_status_definition: The definition for an Manage Status widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetNoteDefinitionArgs'] note_definition: The definition for a Note widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionArgs'] query_table_definition: The definition for a Query Table widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs'] query_value_definition: The definition for a Query Value widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionArgs'] run_workflow_definition: The definition for a Run Workflow widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionArgs'] scatterplot_definition: The definition for a Scatterplot widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinitionArgs'] service_level_objective_definition: The definition for a Service Level Objective widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetServicemapDefinitionArgs'] servicemap_definition: The definition for a Service Map widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSloListDefinitionArgs'] slo_list_definition: The definition for an SLO (Service Level Objective) List widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionArgs'] sunburst_definition: The definition for a Sunburst widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionArgs'] timeseries_definition: The definition for a Timeseries widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionArgs'] toplist_definition: The definition for a Toplist widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionArgs'] topology_map_definition: The definition for a Topology Map widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionArgs'] trace_service_definition: The definition for a Trace Service widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionArgs'] treemap_definition: The definition for a Treemap widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetWidgetLayoutArgs'] widget_layout: The layout of the widget on a 'free' dashboard.
        """
        if alert_graph_definition is not None:
            pulumi.set(__self__, "alert_graph_definition", alert_graph_definition)
        if alert_value_definition is not None:
            pulumi.set(__self__, "alert_value_definition", alert_value_definition)
        if change_definition is not None:
            pulumi.set(__self__, "change_definition", change_definition)
        if check_status_definition is not None:
            pulumi.set(__self__, "check_status_definition", check_status_definition)
        if distribution_definition is not None:
            pulumi.set(__self__, "distribution_definition", distribution_definition)
        if event_stream_definition is not None:
            pulumi.set(__self__, "event_stream_definition", event_stream_definition)
        if event_timeline_definition is not None:
            pulumi.set(__self__, "event_timeline_definition", event_timeline_definition)
        if free_text_definition is not None:
            pulumi.set(__self__, "free_text_definition", free_text_definition)
        if geomap_definition is not None:
            pulumi.set(__self__, "geomap_definition", geomap_definition)
        if heatmap_definition is not None:
            pulumi.set(__self__, "heatmap_definition", heatmap_definition)
        if hostmap_definition is not None:
            pulumi.set(__self__, "hostmap_definition", hostmap_definition)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if iframe_definition is not None:
            pulumi.set(__self__, "iframe_definition", iframe_definition)
        if image_definition is not None:
            pulumi.set(__self__, "image_definition", image_definition)
        if list_stream_definition is not None:
            pulumi.set(__self__, "list_stream_definition", list_stream_definition)
        if log_stream_definition is not None:
            pulumi.set(__self__, "log_stream_definition", log_stream_definition)
        if manage_status_definition is not None:
            pulumi.set(__self__, "manage_status_definition", manage_status_definition)
        if note_definition is not None:
            pulumi.set(__self__, "note_definition", note_definition)
        if query_table_definition is not None:
            pulumi.set(__self__, "query_table_definition", query_table_definition)
        if query_value_definition is not None:
            pulumi.set(__self__, "query_value_definition", query_value_definition)
        if run_workflow_definition is not None:
            pulumi.set(__self__, "run_workflow_definition", run_workflow_definition)
        if scatterplot_definition is not None:
            pulumi.set(__self__, "scatterplot_definition", scatterplot_definition)
        if service_level_objective_definition is not None:
            pulumi.set(__self__, "service_level_objective_definition", service_level_objective_definition)
        if servicemap_definition is not None:
            pulumi.set(__self__, "servicemap_definition", servicemap_definition)
        if slo_list_definition is not None:
            pulumi.set(__self__, "slo_list_definition", slo_list_definition)
        if sunburst_definition is not None:
            pulumi.set(__self__, "sunburst_definition", sunburst_definition)
        if timeseries_definition is not None:
            pulumi.set(__self__, "timeseries_definition", timeseries_definition)
        if toplist_definition is not None:
            pulumi.set(__self__, "toplist_definition", toplist_definition)
        if topology_map_definition is not None:
            pulumi.set(__self__, "topology_map_definition", topology_map_definition)
        if trace_service_definition is not None:
            pulumi.set(__self__, "trace_service_definition", trace_service_definition)
        if treemap_definition is not None:
            pulumi.set(__self__, "treemap_definition", treemap_definition)
        if widget_layout is not None:
            pulumi.set(__self__, "widget_layout", widget_layout)

    @property
    @pulumi.getter(name="alertGraphDefinition")
    def alert_graph_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionArgs']]:
        """
        The definition for a Alert Graph widget.
        """
        return pulumi.get(self, "alert_graph_definition")

    @alert_graph_definition.setter
    def alert_graph_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionArgs']]):
        pulumi.set(self, "alert_graph_definition", value)

    @property
    @pulumi.getter(name="alertValueDefinition")
    def alert_value_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetAlertValueDefinitionArgs']]:
        """
        The definition for a Alert Value widget.
        """
        return pulumi.get(self, "alert_value_definition")

    @alert_value_definition.setter
    def alert_value_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetAlertValueDefinitionArgs']]):
        pulumi.set(self, "alert_value_definition", value)

    @property
    @pulumi.getter(name="changeDefinition")
    def change_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionArgs']]:
        """
        The definition for a Change widget.
        """
        return pulumi.get(self, "change_definition")

    @change_definition.setter
    def change_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionArgs']]):
        pulumi.set(self, "change_definition", value)

    @property
    @pulumi.getter(name="checkStatusDefinition")
    def check_status_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionArgs']]:
        """
        The definition for a Check Status widget.
        """
        return pulumi.get(self, "check_status_definition")

    @check_status_definition.setter
    def check_status_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionArgs']]):
        pulumi.set(self, "check_status_definition", value)

    @property
    @pulumi.getter(name="distributionDefinition")
    def distribution_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionArgs']]:
        """
        The definition for a Distribution widget.
        """
        return pulumi.get(self, "distribution_definition")

    @distribution_definition.setter
    def distribution_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionArgs']]):
        pulumi.set(self, "distribution_definition", value)

    @property
    @pulumi.getter(name="eventStreamDefinition")
    def event_stream_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionArgs']]:
        """
        The definition for a Event Stream widget.
        """
        return pulumi.get(self, "event_stream_definition")

    @event_stream_definition.setter
    def event_stream_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionArgs']]):
        pulumi.set(self, "event_stream_definition", value)

    @property
    @pulumi.getter(name="eventTimelineDefinition")
    def event_timeline_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionArgs']]:
        """
        The definition for a Event Timeline widget.
        """
        return pulumi.get(self, "event_timeline_definition")

    @event_timeline_definition.setter
    def event_timeline_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionArgs']]):
        pulumi.set(self, "event_timeline_definition", value)

    @property
    @pulumi.getter(name="freeTextDefinition")
    def free_text_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetFreeTextDefinitionArgs']]:
        """
        The definition for a Free Text widget.
        """
        return pulumi.get(self, "free_text_definition")

    @free_text_definition.setter
    def free_text_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetFreeTextDefinitionArgs']]):
        pulumi.set(self, "free_text_definition", value)

    @property
    @pulumi.getter(name="geomapDefinition")
    def geomap_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionArgs']]:
        """
        The definition for a Geomap widget.
        """
        return pulumi.get(self, "geomap_definition")

    @geomap_definition.setter
    def geomap_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionArgs']]):
        pulumi.set(self, "geomap_definition", value)

    @property
    @pulumi.getter(name="heatmapDefinition")
    def heatmap_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionArgs']]:
        """
        The definition for a Heatmap widget.
        """
        return pulumi.get(self, "heatmap_definition")

    @heatmap_definition.setter
    def heatmap_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionArgs']]):
        pulumi.set(self, "heatmap_definition", value)

    @property
    @pulumi.getter(name="hostmapDefinition")
    def hostmap_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionArgs']]:
        """
        The definition for a Hostmap widget.
        """
        return pulumi.get(self, "hostmap_definition")

    @hostmap_definition.setter
    def hostmap_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionArgs']]):
        pulumi.set(self, "hostmap_definition", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the widget.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="iframeDefinition")
    def iframe_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetIframeDefinitionArgs']]:
        """
        The definition for an Iframe widget.
        """
        return pulumi.get(self, "iframe_definition")

    @iframe_definition.setter
    def iframe_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetIframeDefinitionArgs']]):
        pulumi.set(self, "iframe_definition", value)

    @property
    @pulumi.getter(name="imageDefinition")
    def image_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetImageDefinitionArgs']]:
        """
        The definition for an Image widget
        """
        return pulumi.get(self, "image_definition")

    @image_definition.setter
    def image_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetImageDefinitionArgs']]):
        pulumi.set(self, "image_definition", value)

    @property
    @pulumi.getter(name="listStreamDefinition")
    def list_stream_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetListStreamDefinitionArgs']]:
        """
        The definition for a List Stream widget.
        """
        return pulumi.get(self, "list_stream_definition")

    @list_stream_definition.setter
    def list_stream_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetListStreamDefinitionArgs']]):
        pulumi.set(self, "list_stream_definition", value)

    @property
    @pulumi.getter(name="logStreamDefinition")
    def log_stream_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionArgs']]:
        """
        The definition for an Log Stream widget.
        """
        return pulumi.get(self, "log_stream_definition")

    @log_stream_definition.setter
    def log_stream_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionArgs']]):
        pulumi.set(self, "log_stream_definition", value)

    @property
    @pulumi.getter(name="manageStatusDefinition")
    def manage_status_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetManageStatusDefinitionArgs']]:
        """
        The definition for an Manage Status widget.
        """
        return pulumi.get(self, "manage_status_definition")

    @manage_status_definition.setter
    def manage_status_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetManageStatusDefinitionArgs']]):
        pulumi.set(self, "manage_status_definition", value)

    @property
    @pulumi.getter(name="noteDefinition")
    def note_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetNoteDefinitionArgs']]:
        """
        The definition for a Note widget.
        """
        return pulumi.get(self, "note_definition")

    @note_definition.setter
    def note_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetNoteDefinitionArgs']]):
        pulumi.set(self, "note_definition", value)

    @property
    @pulumi.getter(name="queryTableDefinition")
    def query_table_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionArgs']]:
        """
        The definition for a Query Table widget.
        """
        return pulumi.get(self, "query_table_definition")

    @query_table_definition.setter
    def query_table_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionArgs']]):
        pulumi.set(self, "query_table_definition", value)

    @property
    @pulumi.getter(name="queryValueDefinition")
    def query_value_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs']]:
        """
        The definition for a Query Value widget.
        """
        return pulumi.get(self, "query_value_definition")

    @query_value_definition.setter
    def query_value_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs']]):
        pulumi.set(self, "query_value_definition", value)

    @property
    @pulumi.getter(name="runWorkflowDefinition")
    def run_workflow_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionArgs']]:
        """
        The definition for a Run Workflow widget.
        """
        return pulumi.get(self, "run_workflow_definition")

    @run_workflow_definition.setter
    def run_workflow_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionArgs']]):
        pulumi.set(self, "run_workflow_definition", value)

    @property
    @pulumi.getter(name="scatterplotDefinition")
    def scatterplot_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionArgs']]:
        """
        The definition for a Scatterplot widget.
        """
        return pulumi.get(self, "scatterplot_definition")

    @scatterplot_definition.setter
    def scatterplot_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionArgs']]):
        pulumi.set(self, "scatterplot_definition", value)

    @property
    @pulumi.getter(name="serviceLevelObjectiveDefinition")
    def service_level_objective_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinitionArgs']]:
        """
        The definition for a Service Level Objective widget.
        """
        return pulumi.get(self, "service_level_objective_definition")

    @service_level_objective_definition.setter
    def service_level_objective_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinitionArgs']]):
        pulumi.set(self, "service_level_objective_definition", value)

    @property
    @pulumi.getter(name="servicemapDefinition")
    def servicemap_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetServicemapDefinitionArgs']]:
        """
        The definition for a Service Map widget.
        """
        return pulumi.get(self, "servicemap_definition")

    @servicemap_definition.setter
    def servicemap_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetServicemapDefinitionArgs']]):
        pulumi.set(self, "servicemap_definition", value)

    @property
    @pulumi.getter(name="sloListDefinition")
    def slo_list_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSloListDefinitionArgs']]:
        """
        The definition for an SLO (Service Level Objective) List widget.
        """
        return pulumi.get(self, "slo_list_definition")

    @slo_list_definition.setter
    def slo_list_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSloListDefinitionArgs']]):
        pulumi.set(self, "slo_list_definition", value)

    @property
    @pulumi.getter(name="sunburstDefinition")
    def sunburst_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionArgs']]:
        """
        The definition for a Sunburst widget.
        """
        return pulumi.get(self, "sunburst_definition")

    @sunburst_definition.setter
    def sunburst_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionArgs']]):
        pulumi.set(self, "sunburst_definition", value)

    @property
    @pulumi.getter(name="timeseriesDefinition")
    def timeseries_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionArgs']]:
        """
        The definition for a Timeseries widget.
        """
        return pulumi.get(self, "timeseries_definition")

    @timeseries_definition.setter
    def timeseries_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionArgs']]):
        pulumi.set(self, "timeseries_definition", value)

    @property
    @pulumi.getter(name="toplistDefinition")
    def toplist_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionArgs']]:
        """
        The definition for a Toplist widget.
        """
        return pulumi.get(self, "toplist_definition")

    @toplist_definition.setter
    def toplist_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionArgs']]):
        pulumi.set(self, "toplist_definition", value)

    @property
    @pulumi.getter(name="topologyMapDefinition")
    def topology_map_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionArgs']]:
        """
        The definition for a Topology Map widget.
        """
        return pulumi.get(self, "topology_map_definition")

    @topology_map_definition.setter
    def topology_map_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionArgs']]):
        pulumi.set(self, "topology_map_definition", value)

    @property
    @pulumi.getter(name="traceServiceDefinition")
    def trace_service_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionArgs']]:
        """
        The definition for a Trace Service widget.
        """
        return pulumi.get(self, "trace_service_definition")

    @trace_service_definition.setter
    def trace_service_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionArgs']]):
        pulumi.set(self, "trace_service_definition", value)

    @property
    @pulumi.getter(name="treemapDefinition")
    def treemap_definition(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionArgs']]:
        """
        The definition for a Treemap widget.
        """
        return pulumi.get(self, "treemap_definition")

    @treemap_definition.setter
    def treemap_definition(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionArgs']]):
        pulumi.set(self, "treemap_definition", value)

    @property
    @pulumi.getter(name="widgetLayout")
    def widget_layout(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetWidgetLayoutArgs']]:
        """
        The layout of the widget on a 'free' dashboard.
        """
        return pulumi.get(self, "widget_layout")

    @widget_layout.setter
    def widget_layout(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetWidgetLayoutArgs']]):
        pulumi.set(self, "widget_layout", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionArgs:
    def __init__(__self__, *,
                 alert_id: pulumi.Input[str],
                 viz_type: pulumi.Input[str],
                 live_span: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] alert_id: The ID of the monitor used by the widget.
        :param pulumi.Input[str] viz_type: Type of visualization to use when displaying the widget. Valid values are `timeseries`, `toplist`.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "alert_id", alert_id)
        pulumi.set(__self__, "viz_type", viz_type)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> pulumi.Input[str]:
        """
        The ID of the monitor used by the widget.
        """
        return pulumi.get(self, "alert_id")

    @alert_id.setter
    def alert_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "alert_id", value)

    @property
    @pulumi.getter(name="vizType")
    def viz_type(self) -> pulumi.Input[str]:
        """
        Type of visualization to use when displaying the widget. Valid values are `timeseries`, `toplist`.
        """
        return pulumi.get(self, "viz_type")

    @viz_type.setter
    def viz_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "viz_type", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetAlertValueDefinitionArgs:
    def __init__(__self__, *,
                 alert_id: pulumi.Input[str],
                 precision: Optional[pulumi.Input[int]] = None,
                 text_align: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None,
                 unit: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] alert_id: The ID of the monitor used by the widget.
        :param pulumi.Input[int] precision: The precision to use when displaying the value. Use `*` for maximum precision.
        :param pulumi.Input[str] text_align: The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        :param pulumi.Input[str] unit: The unit for the value displayed in the widget.
        """
        pulumi.set(__self__, "alert_id", alert_id)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> pulumi.Input[str]:
        """
        The ID of the monitor used by the widget.
        """
        return pulumi.get(self, "alert_id")

    @alert_id.setter
    def alert_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "alert_id", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        """
        The precision to use when displaying the value. Use `*` for maximum precision.
        """
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "text_align")

    @text_align.setter
    def text_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_align", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)

    @property
    @pulumi.getter
    def unit(self) -> Optional[pulumi.Input[str]]:
        """
        The unit for the value displayed in the widget.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unit", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLinkArgs']]]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryArgs']] = None,
                 change_type: Optional[pulumi.Input[str]] = None,
                 compare_to: Optional[pulumi.Input[str]] = None,
                 formulas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaArgs']]]] = None,
                 increase_good: Optional[pulumi.Input[bool]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryArgs']] = None,
                 order_by: Optional[pulumi.Input[str]] = None,
                 order_dir: Optional[pulumi.Input[str]] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryArgs']]]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryArgs']] = None,
                 show_present: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input[str] change_type: Whether to show absolute or relative change. Valid values are `absolute`, `relative`.
        :param pulumi.Input[str] compare_to: Choose from when to compare current data to. Valid values are `hour_before`, `day_before`, `week_before`, `month_before`.
        :param pulumi.Input[bool] increase_good: A Boolean indicating whether an increase in the value is good (displayed in green) or not (displayed in red).
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input[str] order_by: What to order by. Valid values are `change`, `name`, `present`, `past`.
        :param pulumi.Input[str] order_dir: Widget sorting method. Valid values are `asc`, `desc`.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryArgs'] security_query: The query to use for this widget.
        :param pulumi.Input[bool] show_present: If set to `true`, displays the current value.
        """
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if change_type is not None:
            pulumi.set(__self__, "change_type", change_type)
        if compare_to is not None:
            pulumi.set(__self__, "compare_to", compare_to)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if increase_good is not None:
            pulumi.set(__self__, "increase_good", increase_good)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if order_by is not None:
            pulumi.set(__self__, "order_by", order_by)
        if order_dir is not None:
            pulumi.set(__self__, "order_dir", order_dir)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if show_present is not None:
            pulumi.set(__self__, "show_present", show_present)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="changeType")
    def change_type(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to show absolute or relative change. Valid values are `absolute`, `relative`.
        """
        return pulumi.get(self, "change_type")

    @change_type.setter
    def change_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "change_type", value)

    @property
    @pulumi.getter(name="compareTo")
    def compare_to(self) -> Optional[pulumi.Input[str]]:
        """
        Choose from when to compare current data to. Valid values are `hour_before`, `day_before`, `week_before`, `month_before`.
        """
        return pulumi.get(self, "compare_to")

    @compare_to.setter
    def compare_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compare_to", value)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaArgs']]]]:
        return pulumi.get(self, "formulas")

    @formulas.setter
    def formulas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaArgs']]]]):
        pulumi.set(self, "formulas", value)

    @property
    @pulumi.getter(name="increaseGood")
    def increase_good(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean indicating whether an increase in the value is good (displayed in green) or not (displayed in red).
        """
        return pulumi.get(self, "increase_good")

    @increase_good.setter
    def increase_good(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "increase_good", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="orderBy")
    def order_by(self) -> Optional[pulumi.Input[str]]:
        """
        What to order by. Valid values are `change`, `name`, `present`, `past`.
        """
        return pulumi.get(self, "order_by")

    @order_by.setter
    def order_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_by", value)

    @property
    @pulumi.getter(name="orderDir")
    def order_dir(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting method. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order_dir")

    @order_dir.setter
    def order_dir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_dir", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryArgs']]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter(name="showPresent")
    def show_present(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to `true`, displays the current value.
        """
        return pulumi.get(self, "show_present")

    @show_present.setter
    def show_present(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_present", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaArgs:
    def __init__(__self__, *,
                 formula_expression: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaConditionalFormatArgs']]]] = None,
                 limit: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimitArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaStyleArgs']] = None):
        """
        :param pulumi.Input[str] formula_expression: A string expression built from queries, formulas, and functions.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input[str] cell_display_mode: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimitArgs'] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaStyleArgs'] style: Styling options for widget formulas.
        """
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> pulumi.Input[str]:
        """
        A string expression built from queries, formulas, and functions.
        """
        return pulumi.get(self, "formula_expression")

    @formula_expression.setter
    def formula_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "formula_expression", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimitArgs']]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimitArgs']]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaLimitArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] count: The number of results to return
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of results to return
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestFormulaStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None,
                 palette_index: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[int] palette_index: Index specifying which color to use within the palette.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_index is not None:
            pulumi.set(__self__, "palette_index", palette_index)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteIndex")
    def palette_index(self) -> Optional[pulumi.Input[int]]:
        """
        Index specifying which color to use within the palette.
        """
        return pulumi.get(self, "palette_index")

    @palette_index.setter
    def palette_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "palette_index", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryArgs']] = None,
                 apm_resource_stats_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQueryArgs']] = None,
                 event_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryArgs']] = None,
                 metric_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQueryArgs']] = None,
                 slo_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQuerySloQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryArgs'] apm_dependency_stats_query: The APM Dependency Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQueryArgs'] apm_resource_stats_query: The APM Resource Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryArgs'] event_query: A timeseries formula and functions events query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQueryArgs'] metric_query: A timeseries formula and functions metrics query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQuerySloQueryArgs'] slo_query: The slo query using formulas and functions.
        """
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if slo_query is not None:
            pulumi.set(__self__, "slo_query", slo_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryArgs']]:
        """
        The APM Dependency Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_dependency_stats_query")

    @apm_dependency_stats_query.setter
    def apm_dependency_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryArgs']]):
        pulumi.set(self, "apm_dependency_stats_query", value)

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQueryArgs']]:
        """
        The APM Resource Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_resource_stats_query")

    @apm_resource_stats_query.setter
    def apm_resource_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQueryArgs']]):
        pulumi.set(self, "apm_resource_stats_query", value)

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryArgs']]:
        """
        A timeseries formula and functions events query.
        """
        return pulumi.get(self, "event_query")

    @event_query.setter
    def event_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryArgs']]):
        pulumi.set(self, "event_query", value)

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQueryArgs']]:
        """
        A timeseries formula and functions metrics query.
        """
        return pulumi.get(self, "metric_query")

    @metric_query.setter
    def metric_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQueryArgs']]):
        pulumi.set(self, "metric_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter(name="sloQuery")
    def slo_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQuerySloQueryArgs']]:
        """
        The slo query using formulas and functions.
        """
        return pulumi.get(self, "slo_query")

    @slo_query.setter
    def slo_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQuerySloQueryArgs']]):
        pulumi.set(self, "slo_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmDependencyStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 operation_name: pulumi.Input[str],
                 resource_name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 is_upstream: Optional[pulumi.Input[bool]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] resource_name: APM resource.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[bool] is_upstream: Determines whether stats for upstream or downstream dependencies should be queried.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> pulumi.Input[str]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether stats for upstream or downstream dependencies should be queried.
        """
        return pulumi.get(self, "is_upstream")

    @is_upstream.setter
    def is_upstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_upstream", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryApmResourceStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operation_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        :param pulumi.Input[str] resource_name: APM resource.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryArgs:
    def __init__(__self__, *,
                 computes: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryComputeArgs']]],
                 data_source: pulumi.Input[str],
                 name: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupByArgs']]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearchArgs']] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryComputeArgs']]] computes: The compute options.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearchArgs'] search: The search options.
        :param pulumi.Input[str] storage: Storage location (private beta).
        """
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def computes(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryComputeArgs']]]:
        """
        The compute options.
        """
        return pulumi.get(self, "computes")

    @computes.setter
    def computes(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryComputeArgs']]]):
        pulumi.set(self, "computes", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearchArgs']]:
        """
        The search options.
        """
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearchArgs']]):
        pulumi.set(self, "search", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage location (private beta).
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 interval: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySortArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySortArgs'] sort: The options for sorting group by results.
        """
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 metric: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryEventQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryMetricQueryArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 data_source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[str]]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQueryProcessQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 metric: pulumi.Input[str],
                 name: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 is_normalized_cpu: Optional[pulumi.Input[bool]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[bool] is_normalized_cpu: Whether to normalize the CPU percentages.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] sort: The options for sorting group by results.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_filters: An array of tags to filter by.
        :param pulumi.Input[str] text_filter: The text to use as a filter.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to normalize the CPU percentages.
        """
        return pulumi.get(self, "is_normalized_cpu")

    @is_normalized_cpu.setter
    def is_normalized_cpu(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_normalized_cpu", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of tags to filter by.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[pulumi.Input[str]]:
        """
        The text to use as a filter.
        """
        return pulumi.get(self, "text_filter")

    @text_filter.setter
    def text_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_filter", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestQuerySloQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 measure: pulumi.Input[str],
                 slo_id: pulumi.Input[str],
                 additional_query_filters: Optional[pulumi.Input[str]] = None,
                 group_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slo_query_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] measure: SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        :param pulumi.Input[str] slo_id: ID of an SLO to query.
        :param pulumi.Input[str] additional_query_filters: Additional filters applied to the SLO query.
        :param pulumi.Input[str] group_mode: Group mode to query measures. Valid values are `overall`, `components`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] slo_query_type: type of the SLO to query. Valid values are `metric`.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "measure", measure)
        pulumi.set(__self__, "slo_id", slo_id)
        if additional_query_filters is not None:
            pulumi.set(__self__, "additional_query_filters", additional_query_filters)
        if group_mode is not None:
            pulumi.set(__self__, "group_mode", group_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slo_query_type is not None:
            pulumi.set(__self__, "slo_query_type", slo_query_type)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def measure(self) -> pulumi.Input[str]:
        """
        SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        """
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure", value)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        """
        ID of an SLO to query.
        """
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="additionalQueryFilters")
    def additional_query_filters(self) -> Optional[pulumi.Input[str]]:
        """
        Additional filters applied to the SLO query.
        """
        return pulumi.get(self, "additional_query_filters")

    @additional_query_filters.setter
    def additional_query_filters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_query_filters", value)

    @property
    @pulumi.getter(name="groupMode")
    def group_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Group mode to query measures. Valid values are `overall`, `components`.
        """
        return pulumi.get(self, "group_mode")

    @group_mode.setter
    def group_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sloQueryType")
    def slo_query_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the SLO to query. Valid values are `metric`.
        """
        return pulumi.get(self, "slo_query_type")

    @slo_query_type.setter
    def slo_query_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slo_query_type", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionArgs:
    def __init__(__self__, *,
                 check: pulumi.Input[str],
                 grouping: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] check: The check to use in the widget.
        :param pulumi.Input[str] grouping: The kind of grouping to use. Valid values are `check`, `cluster`.
        :param pulumi.Input[str] group: The check group to use in the widget.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tags: A list of tags to use in the widget.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "check", check)
        pulumi.set(__self__, "grouping", grouping)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def check(self) -> pulumi.Input[str]:
        """
        The check to use in the widget.
        """
        return pulumi.get(self, "check")

    @check.setter
    def check(self, value: pulumi.Input[str]):
        pulumi.set(self, "check", value)

    @property
    @pulumi.getter
    def grouping(self) -> pulumi.Input[str]:
        """
        The kind of grouping to use. Valid values are `check`, `cluster`.
        """
        return pulumi.get(self, "grouping")

    @grouping.setter
    def grouping(self, value: pulumi.Input[str]):
        pulumi.set(self, "grouping", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        The check group to use in the widget.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of tags to use in the widget.
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionArgs:
    def __init__(__self__, *,
                 legend_size: Optional[pulumi.Input[str]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestArgs']]]] = None,
                 show_legend: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] legend_size: The size of the legend displayed in the widget.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[bool] show_legend: Whether or not to show the legend on this widget.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        if legend_size is not None:
            pulumi.set(__self__, "legend_size", legend_size)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if show_legend is not None:
            pulumi.set(__self__, "show_legend", show_legend)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="legendSize")
    def legend_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the legend displayed in the widget.
        """
        return pulumi.get(self, "legend_size")

    @legend_size.setter
    def legend_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "legend_size", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="showLegend")
    def show_legend(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to show the legend on this widget.
        """
        return pulumi.get(self, "show_legend")

    @show_legend.setter
    def show_legend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_legend", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryArgs']] = None,
                 apm_stats_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmStatsQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyleArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryArgs'] security_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyleArgs'] style: Styling options for widget formulas.
        """
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if apm_stats_query is not None:
            pulumi.set(__self__, "apm_stats_query", apm_stats_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="apmStatsQuery")
    def apm_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmStatsQueryArgs']]:
        return pulumi.get(self, "apm_stats_query")

    @apm_stats_query.setter
    def apm_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmStatsQueryArgs']]):
        pulumi.set(self, "apm_stats_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmStatsQueryArgs:
    def __init__(__self__, *,
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 primary_tag: pulumi.Input[str],
                 row_type: pulumi.Input[str],
                 service: pulumi.Input[str],
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmStatsQueryColumnArgs']]]] = None,
                 resource: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] primary_tag: The organization's host group name and value.
        :param pulumi.Input[str] row_type: The level of detail for the request. Valid values are `service`, `resource`, `span`.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmStatsQueryColumnArgs']]] columns: Column properties used by the front end for display.
        :param pulumi.Input[str] resource: The resource name.
        """
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_tag", primary_tag)
        pulumi.set(__self__, "row_type", row_type)
        pulumi.set(__self__, "service", service)
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryTag")
    def primary_tag(self) -> pulumi.Input[str]:
        """
        The organization's host group name and value.
        """
        return pulumi.get(self, "primary_tag")

    @primary_tag.setter
    def primary_tag(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary_tag", value)

    @property
    @pulumi.getter(name="rowType")
    def row_type(self) -> pulumi.Input[str]:
        """
        The level of detail for the request. Valid values are `service`, `resource`, `span`.
        """
        return pulumi.get(self, "row_type")

    @row_type.setter
    def row_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "row_type", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmStatsQueryColumnArgs']]]]:
        """
        Column properties used by the front end for display.
        """
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmStatsQueryColumnArgs']]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        """
        The resource name.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmStatsQueryColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input[str] cell_display_mode: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "name", name)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 event_size: Optional[pulumi.Input[str]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 tags_execution: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] event_size: The size to use to display an event. Valid values are `s`, `l`.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[str] tags_execution: The execution method for multi-value filters, options: `and` or `or`.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "query", query)
        if event_size is not None:
            pulumi.set(__self__, "event_size", event_size)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="eventSize")
    def event_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size to use to display an event. Valid values are `s`, `l`.
        """
        return pulumi.get(self, "event_size")

    @event_size.setter
    def event_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_size", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[pulumi.Input[str]]:
        """
        The execution method for multi-value filters, options: `and` or `or`.
        """
        return pulumi.get(self, "tags_execution")

    @tags_execution.setter
    def tags_execution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags_execution", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 live_span: Optional[pulumi.Input[str]] = None,
                 tags_execution: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[str] tags_execution: The execution method for multi-value filters, options: `and` or `or`.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "query", query)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[pulumi.Input[str]]:
        """
        The execution method for multi-value filters, options: `and` or `or`.
        """
        return pulumi.get(self, "tags_execution")

    @tags_execution.setter
    def tags_execution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags_execution", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetFreeTextDefinitionArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 color: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[str]] = None,
                 text_align: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] text: The text to display in the widget.
        :param pulumi.Input[str] color: The color of the text in the widget.
        :param pulumi.Input[str] font_size: The size of the text in the widget.
        :param pulumi.Input[str] text_align: The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
        """
        pulumi.set(__self__, "text", text)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        The text to display in the widget.
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        The color of the text in the widget.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the text in the widget.
        """
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "text_align")

    @text_align.setter
    def text_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_align", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionArgs:
    def __init__(__self__, *,
                 view: pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionViewArgs'],
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionCustomLinkArgs']]]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestArgs']]]] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyleArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionViewArgs'] view: The view of the world that the map should render.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyleArgs'] style: Styling options for widget formulas.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "view", view)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def view(self) -> pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionViewArgs']:
        """
        The view of the world that the map should render.
        """
        return pulumi.get(self, "view")

    @view.setter
    def view(self, value: pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionViewArgs']):
        pulumi.set(self, "view", value)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyleArgs']]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestArgs:
    def __init__(__self__, *,
                 formulas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaArgs']]]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryArgs']]]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryArgs'] rum_query: The query to use for this widget.
        """
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaArgs']]]]:
        return pulumi.get(self, "formulas")

    @formulas.setter
    def formulas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaArgs']]]]):
        pulumi.set(self, "formulas", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryArgs']]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaArgs:
    def __init__(__self__, *,
                 formula_expression: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaConditionalFormatArgs']]]] = None,
                 limit: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimitArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaStyleArgs']] = None):
        """
        :param pulumi.Input[str] formula_expression: A string expression built from queries, formulas, and functions.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input[str] cell_display_mode: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimitArgs'] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaStyleArgs'] style: Styling options for widget formulas.
        """
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> pulumi.Input[str]:
        """
        A string expression built from queries, formulas, and functions.
        """
        return pulumi.get(self, "formula_expression")

    @formula_expression.setter
    def formula_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "formula_expression", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimitArgs']]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimitArgs']]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaLimitArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] count: The number of results to return
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of results to return
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestFormulaStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None,
                 palette_index: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[int] palette_index: Index specifying which color to use within the palette.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_index is not None:
            pulumi.set(__self__, "palette_index", palette_index)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteIndex")
    def palette_index(self) -> Optional[pulumi.Input[int]]:
        """
        Index specifying which color to use within the palette.
        """
        return pulumi.get(self, "palette_index")

    @palette_index.setter
    def palette_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "palette_index", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryArgs']] = None,
                 apm_resource_stats_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryArgs']] = None,
                 event_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryArgs']] = None,
                 metric_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryArgs']] = None,
                 slo_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQuerySloQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryArgs'] apm_dependency_stats_query: The APM Dependency Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryArgs'] apm_resource_stats_query: The APM Resource Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryArgs'] event_query: A timeseries formula and functions events query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQueryArgs'] metric_query: A timeseries formula and functions metrics query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQuerySloQueryArgs'] slo_query: The slo query using formulas and functions.
        """
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if slo_query is not None:
            pulumi.set(__self__, "slo_query", slo_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryArgs']]:
        """
        The APM Dependency Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_dependency_stats_query")

    @apm_dependency_stats_query.setter
    def apm_dependency_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryArgs']]):
        pulumi.set(self, "apm_dependency_stats_query", value)

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryArgs']]:
        """
        The APM Resource Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_resource_stats_query")

    @apm_resource_stats_query.setter
    def apm_resource_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryArgs']]):
        pulumi.set(self, "apm_resource_stats_query", value)

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryArgs']]:
        """
        A timeseries formula and functions events query.
        """
        return pulumi.get(self, "event_query")

    @event_query.setter
    def event_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryArgs']]):
        pulumi.set(self, "event_query", value)

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQueryArgs']]:
        """
        A timeseries formula and functions metrics query.
        """
        return pulumi.get(self, "metric_query")

    @metric_query.setter
    def metric_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQueryArgs']]):
        pulumi.set(self, "metric_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter(name="sloQuery")
    def slo_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQuerySloQueryArgs']]:
        """
        The slo query using formulas and functions.
        """
        return pulumi.get(self, "slo_query")

    @slo_query.setter
    def slo_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQuerySloQueryArgs']]):
        pulumi.set(self, "slo_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmDependencyStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 operation_name: pulumi.Input[str],
                 resource_name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 is_upstream: Optional[pulumi.Input[bool]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] resource_name: APM resource.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[bool] is_upstream: Determines whether stats for upstream or downstream dependencies should be queried.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> pulumi.Input[str]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether stats for upstream or downstream dependencies should be queried.
        """
        return pulumi.get(self, "is_upstream")

    @is_upstream.setter
    def is_upstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_upstream", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryApmResourceStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operation_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        :param pulumi.Input[str] resource_name: APM resource.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryArgs:
    def __init__(__self__, *,
                 computes: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryComputeArgs']]],
                 data_source: pulumi.Input[str],
                 name: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupByArgs']]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearchArgs']] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryComputeArgs']]] computes: The compute options.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearchArgs'] search: The search options.
        :param pulumi.Input[str] storage: Storage location (private beta).
        """
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def computes(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryComputeArgs']]]:
        """
        The compute options.
        """
        return pulumi.get(self, "computes")

    @computes.setter
    def computes(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryComputeArgs']]]):
        pulumi.set(self, "computes", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearchArgs']]:
        """
        The search options.
        """
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearchArgs']]):
        pulumi.set(self, "search", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage location (private beta).
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 interval: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortArgs'] sort: The options for sorting group by results.
        """
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 metric: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryEventQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryMetricQueryArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 data_source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[str]]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 metric: pulumi.Input[str],
                 name: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 is_normalized_cpu: Optional[pulumi.Input[bool]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[bool] is_normalized_cpu: Whether to normalize the CPU percentages.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] sort: The options for sorting group by results.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_filters: An array of tags to filter by.
        :param pulumi.Input[str] text_filter: The text to use as a filter.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to normalize the CPU percentages.
        """
        return pulumi.get(self, "is_normalized_cpu")

    @is_normalized_cpu.setter
    def is_normalized_cpu(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_normalized_cpu", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of tags to filter by.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[pulumi.Input[str]]:
        """
        The text to use as a filter.
        """
        return pulumi.get(self, "text_filter")

    @text_filter.setter
    def text_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_filter", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQuerySloQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 measure: pulumi.Input[str],
                 slo_id: pulumi.Input[str],
                 additional_query_filters: Optional[pulumi.Input[str]] = None,
                 group_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slo_query_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] measure: SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        :param pulumi.Input[str] slo_id: ID of an SLO to query.
        :param pulumi.Input[str] additional_query_filters: Additional filters applied to the SLO query.
        :param pulumi.Input[str] group_mode: Group mode to query measures. Valid values are `overall`, `components`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] slo_query_type: type of the SLO to query. Valid values are `metric`.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "measure", measure)
        pulumi.set(__self__, "slo_id", slo_id)
        if additional_query_filters is not None:
            pulumi.set(__self__, "additional_query_filters", additional_query_filters)
        if group_mode is not None:
            pulumi.set(__self__, "group_mode", group_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slo_query_type is not None:
            pulumi.set(__self__, "slo_query_type", slo_query_type)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def measure(self) -> pulumi.Input[str]:
        """
        SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        """
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure", value)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        """
        ID of an SLO to query.
        """
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="additionalQueryFilters")
    def additional_query_filters(self) -> Optional[pulumi.Input[str]]:
        """
        Additional filters applied to the SLO query.
        """
        return pulumi.get(self, "additional_query_filters")

    @additional_query_filters.setter
    def additional_query_filters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_query_filters", value)

    @property
    @pulumi.getter(name="groupMode")
    def group_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Group mode to query measures. Valid values are `overall`, `components`.
        """
        return pulumi.get(self, "group_mode")

    @group_mode.setter
    def group_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sloQueryType")
    def slo_query_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the SLO to query. Valid values are `metric`.
        """
        return pulumi.get(self, "slo_query_type")

    @slo_query_type.setter
    def slo_query_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slo_query_type", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionStyleArgs:
    def __init__(__self__, *,
                 palette: pulumi.Input[str],
                 palette_flip: pulumi.Input[bool]):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[bool] palette_flip: A Boolean indicating whether to flip the palette tones.
        """
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "palette_flip", palette_flip)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteFlip")
    def palette_flip(self) -> pulumi.Input[bool]:
        """
        A Boolean indicating whether to flip the palette tones.
        """
        return pulumi.get(self, "palette_flip")

    @palette_flip.setter
    def palette_flip(self, value: pulumi.Input[bool]):
        pulumi.set(self, "palette_flip", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionViewArgs:
    def __init__(__self__, *,
                 focus: pulumi.Input[str]):
        """
        :param pulumi.Input[str] focus: The two-letter ISO code of a country to focus the map on (or `WORLD`).
        """
        pulumi.set(__self__, "focus", focus)

    @property
    @pulumi.getter
    def focus(self) -> pulumi.Input[str]:
        """
        The two-letter ISO code of a country to focus the map on (or `WORLD`).
        """
        return pulumi.get(self, "focus")

    @focus.setter
    def focus(self, value: pulumi.Input[str]):
        pulumi.set(self, "focus", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLinkArgs']]]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEventArgs']]]] = None,
                 legend_size: Optional[pulumi.Input[str]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestArgs']]]] = None,
                 show_legend: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None,
                 yaxis: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxisArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEventArgs']]] events: The definition of the event to overlay on the graph. Multiple `event` blocks are allowed using the structure below.
        :param pulumi.Input[str] legend_size: The size of the legend displayed in the widget.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[bool] show_legend: Whether or not to show the legend on this widget.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxisArgs'] yaxis: A nested block describing the Y-Axis Controls. The structure of this block is described below.
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if legend_size is not None:
            pulumi.set(__self__, "legend_size", legend_size)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if show_legend is not None:
            pulumi.set(__self__, "show_legend", show_legend)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if yaxis is not None:
            pulumi.set(__self__, "yaxis", yaxis)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEventArgs']]]]:
        """
        The definition of the event to overlay on the graph. Multiple `event` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEventArgs']]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="legendSize")
    def legend_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the legend displayed in the widget.
        """
        return pulumi.get(self, "legend_size")

    @legend_size.setter
    def legend_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "legend_size", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="showLegend")
    def show_legend(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to show the legend on this widget.
        """
        return pulumi.get(self, "show_legend")

    @show_legend.setter
    def show_legend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_legend", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)

    @property
    @pulumi.getter
    def yaxis(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxisArgs']]:
        """
        A nested block describing the Y-Axis Controls. The structure of this block is described below.
        """
        return pulumi.get(self, "yaxis")

    @yaxis.setter
    def yaxis(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxisArgs']]):
        pulumi.set(self, "yaxis", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEventArgs:
    def __init__(__self__, *,
                 q: pulumi.Input[str],
                 tags_execution: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input[str] tags_execution: The execution method for multi-value filters, options: `and` or `or`.
        """
        pulumi.set(__self__, "q", q)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)

    @property
    @pulumi.getter
    def q(self) -> pulumi.Input[str]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: pulumi.Input[str]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[pulumi.Input[str]]:
        """
        The execution method for multi-value filters, options: `and` or `or`.
        """
        return pulumi.get(self, "tags_execution")

    @tags_execution.setter
    def tags_execution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags_execution", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyleArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryArgs'] security_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyleArgs'] style: Styling options for widget formulas.
        """
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] include_zero: Always include zero or fit the axis to the data range.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] max: Specify the maximum value to show on the Y-axis.
        :param pulumi.Input[str] min: Specify the minimum value to show on the Y-axis.
        :param pulumi.Input[str] scale: Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        """
        Always include zero or fit the axis to the data range.
        """
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the maximum value to show on the Y-axis.
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the minimum value to show on the Y-axis.
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLinkArgs']]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 no_group_hosts: Optional[pulumi.Input[bool]] = None,
                 no_metric_hosts: Optional[pulumi.Input[bool]] = None,
                 node_type: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestArgs']] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyleArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] groups: The check group to use in the widget.
        :param pulumi.Input[bool] no_group_hosts: A Boolean indicating whether to show ungrouped nodes.
        :param pulumi.Input[bool] no_metric_hosts: A Boolean indicating whether to show nodes with no metrics.
        :param pulumi.Input[str] node_type: The type of node used. Valid values are `host`, `container`.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestArgs'] request: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: The list of tags to filter nodes by.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyleArgs'] style: Styling options for widget formulas.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if no_group_hosts is not None:
            pulumi.set(__self__, "no_group_hosts", no_group_hosts)
        if no_metric_hosts is not None:
            pulumi.set(__self__, "no_metric_hosts", no_metric_hosts)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The check group to use in the widget.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="noGroupHosts")
    def no_group_hosts(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean indicating whether to show ungrouped nodes.
        """
        return pulumi.get(self, "no_group_hosts")

    @no_group_hosts.setter
    def no_group_hosts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_group_hosts", value)

    @property
    @pulumi.getter(name="noMetricHosts")
    def no_metric_hosts(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean indicating whether to show nodes with no metrics.
        """
        return pulumi.get(self, "no_metric_hosts")

    @no_metric_hosts.setter
    def no_metric_hosts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_metric_hosts", value)

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of node used. Valid values are `host`, `container`.
        """
        return pulumi.get(self, "node_type")

    @node_type.setter
    def node_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestArgs']]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestArgs']]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of tags to filter nodes by.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyleArgs']]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestArgs:
    def __init__(__self__, *,
                 fills: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillArgs']]]] = None,
                 sizes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillArgs']]] fills: The query used to fill the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeArgs']]] sizes: The query used to size the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        if fills is not None:
            pulumi.set(__self__, "fills", fills)
        if sizes is not None:
            pulumi.set(__self__, "sizes", sizes)

    @property
    @pulumi.getter
    def fills(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillArgs']]]]:
        """
        The query used to fill the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "fills")

    @fills.setter
    def fills(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillArgs']]]]):
        pulumi.set(self, "fills", value)

    @property
    @pulumi.getter
    def sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeArgs']]]]:
        """
        The query used to size the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "sizes")

    @sizes.setter
    def sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeArgs']]]]):
        pulumi.set(self, "sizes", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryArgs'] security_query: The query to use for this widget.
        """
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryArgs'] security_query: The query to use for this widget.
        """
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyleArgs:
    def __init__(__self__, *,
                 fill_max: Optional[pulumi.Input[str]] = None,
                 fill_min: Optional[pulumi.Input[str]] = None,
                 palette: Optional[pulumi.Input[str]] = None,
                 palette_flip: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] fill_max: The max value to use to color the map.
        :param pulumi.Input[str] fill_min: The min value to use to color the map.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[bool] palette_flip: A Boolean indicating whether to flip the palette tones.
        """
        if fill_max is not None:
            pulumi.set(__self__, "fill_max", fill_max)
        if fill_min is not None:
            pulumi.set(__self__, "fill_min", fill_min)
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_flip is not None:
            pulumi.set(__self__, "palette_flip", palette_flip)

    @property
    @pulumi.getter(name="fillMax")
    def fill_max(self) -> Optional[pulumi.Input[str]]:
        """
        The max value to use to color the map.
        """
        return pulumi.get(self, "fill_max")

    @fill_max.setter
    def fill_max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_max", value)

    @property
    @pulumi.getter(name="fillMin")
    def fill_min(self) -> Optional[pulumi.Input[str]]:
        """
        The min value to use to color the map.
        """
        return pulumi.get(self, "fill_min")

    @fill_min.setter
    def fill_min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_min", value)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteFlip")
    def palette_flip(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean indicating whether to flip the palette tones.
        """
        return pulumi.get(self, "palette_flip")

    @palette_flip.setter
    def palette_flip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "palette_flip", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetIframeDefinitionArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] url: The URL to use as a data source for the widget.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL to use as a data source for the widget.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetImageDefinitionArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 has_background: Optional[pulumi.Input[bool]] = None,
                 has_border: Optional[pulumi.Input[bool]] = None,
                 horizontal_align: Optional[pulumi.Input[str]] = None,
                 margin: Optional[pulumi.Input[str]] = None,
                 sizing: Optional[pulumi.Input[str]] = None,
                 url_dark_theme: Optional[pulumi.Input[str]] = None,
                 vertical_align: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] url: The URL to use as a data source for the widget.
        :param pulumi.Input[bool] has_background: Whether to display a background or not.
        :param pulumi.Input[bool] has_border: Whether to display a border or not.
        :param pulumi.Input[str] horizontal_align: The horizontal alignment for the widget. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] margin: The margins to use around the image. Note: `small` and `large` values are deprecated. Valid values are `sm`, `md`, `lg`, `small`, `large`.
        :param pulumi.Input[str] sizing: The preferred method to adapt the dimensions of the image. The values are based on the image `object-fit` CSS properties. Note: `zoom`, `fit` and `center` values are deprecated. Valid values are `fill`, `contain`, `cover`, `none`, `scale-down`, `zoom`, `fit`, `center`.
        :param pulumi.Input[str] url_dark_theme: The URL in dark mode to use as a data source for the widget.
        :param pulumi.Input[str] vertical_align: The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
        """
        pulumi.set(__self__, "url", url)
        if has_background is not None:
            pulumi.set(__self__, "has_background", has_background)
        if has_border is not None:
            pulumi.set(__self__, "has_border", has_border)
        if horizontal_align is not None:
            pulumi.set(__self__, "horizontal_align", horizontal_align)
        if margin is not None:
            pulumi.set(__self__, "margin", margin)
        if sizing is not None:
            pulumi.set(__self__, "sizing", sizing)
        if url_dark_theme is not None:
            pulumi.set(__self__, "url_dark_theme", url_dark_theme)
        if vertical_align is not None:
            pulumi.set(__self__, "vertical_align", vertical_align)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL to use as a data source for the widget.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="hasBackground")
    def has_background(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to display a background or not.
        """
        return pulumi.get(self, "has_background")

    @has_background.setter
    def has_background(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_background", value)

    @property
    @pulumi.getter(name="hasBorder")
    def has_border(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to display a border or not.
        """
        return pulumi.get(self, "has_border")

    @has_border.setter
    def has_border(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_border", value)

    @property
    @pulumi.getter(name="horizontalAlign")
    def horizontal_align(self) -> Optional[pulumi.Input[str]]:
        """
        The horizontal alignment for the widget. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "horizontal_align")

    @horizontal_align.setter
    def horizontal_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "horizontal_align", value)

    @property
    @pulumi.getter
    def margin(self) -> Optional[pulumi.Input[str]]:
        """
        The margins to use around the image. Note: `small` and `large` values are deprecated. Valid values are `sm`, `md`, `lg`, `small`, `large`.
        """
        return pulumi.get(self, "margin")

    @margin.setter
    def margin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "margin", value)

    @property
    @pulumi.getter
    def sizing(self) -> Optional[pulumi.Input[str]]:
        """
        The preferred method to adapt the dimensions of the image. The values are based on the image `object-fit` CSS properties. Note: `zoom`, `fit` and `center` values are deprecated. Valid values are `fill`, `contain`, `cover`, `none`, `scale-down`, `zoom`, `fit`, `center`.
        """
        return pulumi.get(self, "sizing")

    @sizing.setter
    def sizing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sizing", value)

    @property
    @pulumi.getter(name="urlDarkTheme")
    def url_dark_theme(self) -> Optional[pulumi.Input[str]]:
        """
        The URL in dark mode to use as a data source for the widget.
        """
        return pulumi.get(self, "url_dark_theme")

    @url_dark_theme.setter
    def url_dark_theme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_dark_theme", value)

    @property
    @pulumi.getter(name="verticalAlign")
    def vertical_align(self) -> Optional[pulumi.Input[str]]:
        """
        The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
        """
        return pulumi.get(self, "vertical_align")

    @vertical_align.setter
    def vertical_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vertical_align", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetListStreamDefinitionArgs:
    def __init__(__self__, *,
                 requests: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestArgs']]],
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def requests(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestArgs']]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestArgs']]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestArgs:
    def __init__(__self__, *,
                 columns: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestColumnArgs']]],
                 query: pulumi.Input['DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestQueryArgs'],
                 response_format: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestColumnArgs']]] columns: Column properties used by the front end for display.
        :param pulumi.Input[str] response_format: Widget response format. Valid values are `event_list`.
        """
        pulumi.set(__self__, "columns", columns)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "response_format", response_format)

    @property
    @pulumi.getter
    def columns(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestColumnArgs']]]:
        """
        Column properties used by the front end for display.
        """
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestColumnArgs']]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input['DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestQueryArgs']:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input['DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestQueryArgs']):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="responseFormat")
    def response_format(self) -> pulumi.Input[str]:
        """
        Widget response format. Valid values are `event_list`.
        """
        return pulumi.get(self, "response_format")

    @response_format.setter
    def response_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "response_format", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestColumnArgs:
    def __init__(__self__, *,
                 field: pulumi.Input[str],
                 width: pulumi.Input[str]):
        """
        :param pulumi.Input[str] field: Widget column field.
        :param pulumi.Input[str] width: Widget column width. Valid values are `auto`, `compact`, `full`.
        """
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def field(self) -> pulumi.Input[str]:
        """
        Widget column field.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: pulumi.Input[str]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def width(self) -> pulumi.Input[str]:
        """
        Widget column width. Valid values are `auto`, `compact`, `full`.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: pulumi.Input[str]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 event_size: Optional[pulumi.Input[str]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 query_string: Optional[pulumi.Input[str]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestQuerySortArgs']] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] event_size: The size to use to display an event. Valid values are `s`, `l`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input[str] query_string: Widget query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestQuerySortArgs'] sort: The options for sorting group by results.
        :param pulumi.Input[str] storage: Storage location (private beta).
        """
        pulumi.set(__self__, "data_source", data_source)
        if event_size is not None:
            pulumi.set(__self__, "event_size", event_size)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if query_string is not None:
            pulumi.set(__self__, "query_string", query_string)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter(name="eventSize")
    def event_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size to use to display an event. Valid values are `s`, `l`.
        """
        return pulumi.get(self, "event_size")

    @event_size.setter
    def event_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_size", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[pulumi.Input[str]]:
        """
        Widget query.
        """
        return pulumi.get(self, "query_string")

    @query_string.setter
    def query_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_string", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestQuerySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestQuerySortArgs']]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage location (private beta).
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetListStreamDefinitionRequestQuerySortArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[str],
                 order: pulumi.Input[str]):
        """
        :param pulumi.Input[str] column: The facet path for the column.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[str]:
        """
        The facet path for the column.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[str]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionArgs:
    def __init__(__self__, *,
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 message_display: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 show_date_column: Optional[pulumi.Input[bool]] = None,
                 show_message_column: Optional[pulumi.Input[bool]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSortArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] columns: Column properties used by the front end for display.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[str] message_display: The number of log lines to display. Valid values are `inline`, `expanded-md`, `expanded-lg`.
        :param pulumi.Input[bool] show_date_column: If the date column should be displayed.
        :param pulumi.Input[bool] show_message_column: If the message column should be displayed.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSortArgs'] sort: The options for sorting group by results.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if message_display is not None:
            pulumi.set(__self__, "message_display", message_display)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if show_date_column is not None:
            pulumi.set(__self__, "show_date_column", show_date_column)
        if show_message_column is not None:
            pulumi.set(__self__, "show_message_column", show_message_column)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Column properties used by the front end for display.
        """
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter(name="messageDisplay")
    def message_display(self) -> Optional[pulumi.Input[str]]:
        """
        The number of log lines to display. Valid values are `inline`, `expanded-md`, `expanded-lg`.
        """
        return pulumi.get(self, "message_display")

    @message_display.setter
    def message_display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_display", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="showDateColumn")
    def show_date_column(self) -> Optional[pulumi.Input[bool]]:
        """
        If the date column should be displayed.
        """
        return pulumi.get(self, "show_date_column")

    @show_date_column.setter
    def show_date_column(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_date_column", value)

    @property
    @pulumi.getter(name="showMessageColumn")
    def show_message_column(self) -> Optional[pulumi.Input[bool]]:
        """
        If the message column should be displayed.
        """
        return pulumi.get(self, "show_message_column")

    @show_message_column.setter
    def show_message_column(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_message_column", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSortArgs']]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSortArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[str],
                 order: pulumi.Input[str]):
        """
        :param pulumi.Input[str] column: The facet path for the column.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[str]:
        """
        The facet path for the column.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[str]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetManageStatusDefinitionArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 color_preference: Optional[pulumi.Input[str]] = None,
                 display_format: Optional[pulumi.Input[str]] = None,
                 hide_zero_counts: Optional[pulumi.Input[bool]] = None,
                 show_last_triggered: Optional[pulumi.Input[bool]] = None,
                 show_priority: Optional[pulumi.Input[bool]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 summary_type: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] color_preference: Whether to colorize text or background. Valid values are `background`, `text`.
        :param pulumi.Input[str] display_format: The display setting to use. Valid values are `counts`, `countsAndList`, `list`.
        :param pulumi.Input[bool] hide_zero_counts: A Boolean indicating whether to hide empty categories.
        :param pulumi.Input[bool] show_last_triggered: A Boolean indicating whether to show when monitors/groups last triggered.
        :param pulumi.Input[bool] show_priority: Whether to show the priorities column.
        :param pulumi.Input[str] sort: The options for sorting group by results.
        :param pulumi.Input[str] summary_type: The summary type to use. Valid values are `monitors`, `groups`, `combined`.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "query", query)
        if color_preference is not None:
            pulumi.set(__self__, "color_preference", color_preference)
        if display_format is not None:
            pulumi.set(__self__, "display_format", display_format)
        if hide_zero_counts is not None:
            pulumi.set(__self__, "hide_zero_counts", hide_zero_counts)
        if show_last_triggered is not None:
            pulumi.set(__self__, "show_last_triggered", show_last_triggered)
        if show_priority is not None:
            pulumi.set(__self__, "show_priority", show_priority)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if summary_type is not None:
            pulumi.set(__self__, "summary_type", summary_type)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="colorPreference")
    def color_preference(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to colorize text or background. Valid values are `background`, `text`.
        """
        return pulumi.get(self, "color_preference")

    @color_preference.setter
    def color_preference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_preference", value)

    @property
    @pulumi.getter(name="displayFormat")
    def display_format(self) -> Optional[pulumi.Input[str]]:
        """
        The display setting to use. Valid values are `counts`, `countsAndList`, `list`.
        """
        return pulumi.get(self, "display_format")

    @display_format.setter
    def display_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_format", value)

    @property
    @pulumi.getter(name="hideZeroCounts")
    def hide_zero_counts(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean indicating whether to hide empty categories.
        """
        return pulumi.get(self, "hide_zero_counts")

    @hide_zero_counts.setter
    def hide_zero_counts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_zero_counts", value)

    @property
    @pulumi.getter(name="showLastTriggered")
    def show_last_triggered(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean indicating whether to show when monitors/groups last triggered.
        """
        return pulumi.get(self, "show_last_triggered")

    @show_last_triggered.setter
    def show_last_triggered(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_last_triggered", value)

    @property
    @pulumi.getter(name="showPriority")
    def show_priority(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to show the priorities column.
        """
        return pulumi.get(self, "show_priority")

    @show_priority.setter
    def show_priority(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_priority", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter(name="summaryType")
    def summary_type(self) -> Optional[pulumi.Input[str]]:
        """
        The summary type to use. Valid values are `monitors`, `groups`, `combined`.
        """
        return pulumi.get(self, "summary_type")

    @summary_type.setter
    def summary_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary_type", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetNoteDefinitionArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 background_color: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[str]] = None,
                 has_padding: Optional[pulumi.Input[bool]] = None,
                 show_tick: Optional[pulumi.Input[bool]] = None,
                 text_align: Optional[pulumi.Input[str]] = None,
                 tick_edge: Optional[pulumi.Input[str]] = None,
                 tick_pos: Optional[pulumi.Input[str]] = None,
                 vertical_align: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content: The content of the note.
        :param pulumi.Input[str] background_color: The background color of the group title, options: `vivid_blue`, `vivid_purple`, `vivid_pink`, `vivid_orange`, `vivid_yellow`, `vivid_green`, `blue`, `purple`, `pink`, `orange`, `yellow`, `green`, `gray` or `white`
        :param pulumi.Input[str] font_size: The size of the text in the widget.
        :param pulumi.Input[bool] has_padding: Whether to add padding or not.
        :param pulumi.Input[bool] show_tick: Whether to show a tick or not.
        :param pulumi.Input[str] text_align: The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] tick_edge: When `tick = true`, a string indicating on which side of the widget the tick should be displayed. Valid values are `bottom`, `left`, `right`, `top`.
        :param pulumi.Input[str] tick_pos: When `tick = true`, a string with a percent sign indicating the position of the tick, for example: `tick_pos = "50%"` is centered alignment.
        :param pulumi.Input[str] vertical_align: The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
        """
        pulumi.set(__self__, "content", content)
        if background_color is not None:
            pulumi.set(__self__, "background_color", background_color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if has_padding is not None:
            pulumi.set(__self__, "has_padding", has_padding)
        if show_tick is not None:
            pulumi.set(__self__, "show_tick", show_tick)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)
        if tick_edge is not None:
            pulumi.set(__self__, "tick_edge", tick_edge)
        if tick_pos is not None:
            pulumi.set(__self__, "tick_pos", tick_pos)
        if vertical_align is not None:
            pulumi.set(__self__, "vertical_align", vertical_align)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The content of the note.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input[str]]:
        """
        The background color of the group title, options: `vivid_blue`, `vivid_purple`, `vivid_pink`, `vivid_orange`, `vivid_yellow`, `vivid_green`, `blue`, `purple`, `pink`, `orange`, `yellow`, `green`, `gray` or `white`
        """
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the text in the widget.
        """
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="hasPadding")
    def has_padding(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to add padding or not.
        """
        return pulumi.get(self, "has_padding")

    @has_padding.setter
    def has_padding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_padding", value)

    @property
    @pulumi.getter(name="showTick")
    def show_tick(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to show a tick or not.
        """
        return pulumi.get(self, "show_tick")

    @show_tick.setter
    def show_tick(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_tick", value)

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "text_align")

    @text_align.setter
    def text_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_align", value)

    @property
    @pulumi.getter(name="tickEdge")
    def tick_edge(self) -> Optional[pulumi.Input[str]]:
        """
        When `tick = true`, a string indicating on which side of the widget the tick should be displayed. Valid values are `bottom`, `left`, `right`, `top`.
        """
        return pulumi.get(self, "tick_edge")

    @tick_edge.setter
    def tick_edge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tick_edge", value)

    @property
    @pulumi.getter(name="tickPos")
    def tick_pos(self) -> Optional[pulumi.Input[str]]:
        """
        When `tick = true`, a string with a percent sign indicating the position of the tick, for example: `tick_pos = "50%"` is centered alignment.
        """
        return pulumi.get(self, "tick_pos")

    @tick_pos.setter
    def tick_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tick_pos", value)

    @property
    @pulumi.getter(name="verticalAlign")
    def vertical_align(self) -> Optional[pulumi.Input[str]]:
        """
        The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
        """
        return pulumi.get(self, "vertical_align")

    @vertical_align.setter
    def vertical_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vertical_align", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLinkArgs']]]] = None,
                 has_search_bar: Optional[pulumi.Input[str]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[str] has_search_bar: Controls the display of the search bar. Valid values are `always`, `never`, `auto`.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if has_search_bar is not None:
            pulumi.set(__self__, "has_search_bar", has_search_bar)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter(name="hasSearchBar")
    def has_search_bar(self) -> Optional[pulumi.Input[str]]:
        """
        Controls the display of the search bar. Valid values are `always`, `never`, `auto`.
        """
        return pulumi.get(self, "has_search_bar")

    @has_search_bar.setter
    def has_search_bar(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "has_search_bar", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestArgs:
    def __init__(__self__, *,
                 aggregator: Optional[pulumi.Input[str]] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryArgs']] = None,
                 apm_stats_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryArgs']] = None,
                 cell_display_modes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormatArgs']]]] = None,
                 formulas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaArgs']]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryArgs']] = None,
                 order: Optional[pulumi.Input[str]] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryArgs']]]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryArgs']] = None):
        """
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cell_display_modes: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryArgs'] security_query: The query to use for this widget.
        """
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if apm_stats_query is not None:
            pulumi.set(__self__, "apm_stats_query", apm_stats_query)
        if cell_display_modes is not None:
            pulumi.set(__self__, "cell_display_modes", cell_display_modes)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="apmStatsQuery")
    def apm_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryArgs']]:
        return pulumi.get(self, "apm_stats_query")

    @apm_stats_query.setter
    def apm_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryArgs']]):
        pulumi.set(self, "apm_stats_query", value)

    @property
    @pulumi.getter(name="cellDisplayModes")
    def cell_display_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_modes")

    @cell_display_modes.setter
    def cell_display_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cell_display_modes", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaArgs']]]]:
        return pulumi.get(self, "formulas")

    @formulas.setter
    def formulas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaArgs']]]]):
        pulumi.set(self, "formulas", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryArgs']]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryArgs:
    def __init__(__self__, *,
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 primary_tag: pulumi.Input[str],
                 row_type: pulumi.Input[str],
                 service: pulumi.Input[str],
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs']]]] = None,
                 resource: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] primary_tag: The organization's host group name and value.
        :param pulumi.Input[str] row_type: The level of detail for the request. Valid values are `service`, `resource`, `span`.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs']]] columns: Column properties used by the front end for display.
        :param pulumi.Input[str] resource: The resource name.
        """
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_tag", primary_tag)
        pulumi.set(__self__, "row_type", row_type)
        pulumi.set(__self__, "service", service)
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryTag")
    def primary_tag(self) -> pulumi.Input[str]:
        """
        The organization's host group name and value.
        """
        return pulumi.get(self, "primary_tag")

    @primary_tag.setter
    def primary_tag(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary_tag", value)

    @property
    @pulumi.getter(name="rowType")
    def row_type(self) -> pulumi.Input[str]:
        """
        The level of detail for the request. Valid values are `service`, `resource`, `span`.
        """
        return pulumi.get(self, "row_type")

    @row_type.setter
    def row_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "row_type", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs']]]]:
        """
        Column properties used by the front end for display.
        """
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs']]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        """
        The resource name.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input[str] cell_display_mode: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "name", name)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaArgs:
    def __init__(__self__, *,
                 formula_expression: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaConditionalFormatArgs']]]] = None,
                 limit: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimitArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaStyleArgs']] = None):
        """
        :param pulumi.Input[str] formula_expression: A string expression built from queries, formulas, and functions.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input[str] cell_display_mode: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimitArgs'] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaStyleArgs'] style: Styling options for widget formulas.
        """
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> pulumi.Input[str]:
        """
        A string expression built from queries, formulas, and functions.
        """
        return pulumi.get(self, "formula_expression")

    @formula_expression.setter
    def formula_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "formula_expression", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimitArgs']]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimitArgs']]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaLimitArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] count: The number of results to return
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of results to return
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestFormulaStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None,
                 palette_index: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[int] palette_index: Index specifying which color to use within the palette.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_index is not None:
            pulumi.set(__self__, "palette_index", palette_index)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteIndex")
    def palette_index(self) -> Optional[pulumi.Input[int]]:
        """
        Index specifying which color to use within the palette.
        """
        return pulumi.get(self, "palette_index")

    @palette_index.setter
    def palette_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "palette_index", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryArgs']] = None,
                 apm_resource_stats_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryArgs']] = None,
                 event_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryArgs']] = None,
                 metric_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQueryArgs']] = None,
                 slo_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQuerySloQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryArgs'] apm_dependency_stats_query: The APM Dependency Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryArgs'] apm_resource_stats_query: The APM Resource Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryArgs'] event_query: A timeseries formula and functions events query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQueryArgs'] metric_query: A timeseries formula and functions metrics query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQuerySloQueryArgs'] slo_query: The slo query using formulas and functions.
        """
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if slo_query is not None:
            pulumi.set(__self__, "slo_query", slo_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryArgs']]:
        """
        The APM Dependency Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_dependency_stats_query")

    @apm_dependency_stats_query.setter
    def apm_dependency_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryArgs']]):
        pulumi.set(self, "apm_dependency_stats_query", value)

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryArgs']]:
        """
        The APM Resource Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_resource_stats_query")

    @apm_resource_stats_query.setter
    def apm_resource_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryArgs']]):
        pulumi.set(self, "apm_resource_stats_query", value)

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryArgs']]:
        """
        A timeseries formula and functions events query.
        """
        return pulumi.get(self, "event_query")

    @event_query.setter
    def event_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryArgs']]):
        pulumi.set(self, "event_query", value)

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQueryArgs']]:
        """
        A timeseries formula and functions metrics query.
        """
        return pulumi.get(self, "metric_query")

    @metric_query.setter
    def metric_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQueryArgs']]):
        pulumi.set(self, "metric_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter(name="sloQuery")
    def slo_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQuerySloQueryArgs']]:
        """
        The slo query using formulas and functions.
        """
        return pulumi.get(self, "slo_query")

    @slo_query.setter
    def slo_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQuerySloQueryArgs']]):
        pulumi.set(self, "slo_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 operation_name: pulumi.Input[str],
                 resource_name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 is_upstream: Optional[pulumi.Input[bool]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] resource_name: APM resource.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[bool] is_upstream: Determines whether stats for upstream or downstream dependencies should be queried.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> pulumi.Input[str]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether stats for upstream or downstream dependencies should be queried.
        """
        return pulumi.get(self, "is_upstream")

    @is_upstream.setter
    def is_upstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_upstream", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operation_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        :param pulumi.Input[str] resource_name: APM resource.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryArgs:
    def __init__(__self__, *,
                 computes: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryComputeArgs']]],
                 data_source: pulumi.Input[str],
                 name: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupByArgs']]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearchArgs']] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryComputeArgs']]] computes: The compute options.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearchArgs'] search: The search options.
        :param pulumi.Input[str] storage: Storage location (private beta).
        """
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def computes(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryComputeArgs']]]:
        """
        The compute options.
        """
        return pulumi.get(self, "computes")

    @computes.setter
    def computes(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryComputeArgs']]]):
        pulumi.set(self, "computes", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearchArgs']]:
        """
        The search options.
        """
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearchArgs']]):
        pulumi.set(self, "search", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage location (private beta).
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 interval: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortArgs'] sort: The options for sorting group by results.
        """
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 metric: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryEventQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryMetricQueryArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 data_source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[str]]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQueryProcessQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 metric: pulumi.Input[str],
                 name: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 is_normalized_cpu: Optional[pulumi.Input[bool]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[bool] is_normalized_cpu: Whether to normalize the CPU percentages.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] sort: The options for sorting group by results.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_filters: An array of tags to filter by.
        :param pulumi.Input[str] text_filter: The text to use as a filter.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to normalize the CPU percentages.
        """
        return pulumi.get(self, "is_normalized_cpu")

    @is_normalized_cpu.setter
    def is_normalized_cpu(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_normalized_cpu", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of tags to filter by.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[pulumi.Input[str]]:
        """
        The text to use as a filter.
        """
        return pulumi.get(self, "text_filter")

    @text_filter.setter
    def text_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_filter", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestQuerySloQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 measure: pulumi.Input[str],
                 slo_id: pulumi.Input[str],
                 additional_query_filters: Optional[pulumi.Input[str]] = None,
                 group_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slo_query_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] measure: SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        :param pulumi.Input[str] slo_id: ID of an SLO to query.
        :param pulumi.Input[str] additional_query_filters: Additional filters applied to the SLO query.
        :param pulumi.Input[str] group_mode: Group mode to query measures. Valid values are `overall`, `components`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] slo_query_type: type of the SLO to query. Valid values are `metric`.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "measure", measure)
        pulumi.set(__self__, "slo_id", slo_id)
        if additional_query_filters is not None:
            pulumi.set(__self__, "additional_query_filters", additional_query_filters)
        if group_mode is not None:
            pulumi.set(__self__, "group_mode", group_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slo_query_type is not None:
            pulumi.set(__self__, "slo_query_type", slo_query_type)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def measure(self) -> pulumi.Input[str]:
        """
        SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        """
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure", value)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        """
        ID of an SLO to query.
        """
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="additionalQueryFilters")
    def additional_query_filters(self) -> Optional[pulumi.Input[str]]:
        """
        Additional filters applied to the SLO query.
        """
        return pulumi.get(self, "additional_query_filters")

    @additional_query_filters.setter
    def additional_query_filters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_query_filters", value)

    @property
    @pulumi.getter(name="groupMode")
    def group_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Group mode to query measures. Valid values are `overall`, `components`.
        """
        return pulumi.get(self, "group_mode")

    @group_mode.setter
    def group_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sloQueryType")
    def slo_query_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the SLO to query. Valid values are `metric`.
        """
        return pulumi.get(self, "slo_query_type")

    @slo_query_type.setter
    def slo_query_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slo_query_type", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionArgs:
    def __init__(__self__, *,
                 autoscale: Optional[pulumi.Input[bool]] = None,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLinkArgs']]]] = None,
                 custom_unit: Optional[pulumi.Input[str]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 precision: Optional[pulumi.Input[int]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestArgs']]]] = None,
                 text_align: Optional[pulumi.Input[str]] = None,
                 timeseries_background: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeseriesBackgroundArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] autoscale: A Boolean indicating whether to automatically scale the tile.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[str] custom_unit: The unit for the value displayed in the widget.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[int] precision: The precision to use when displaying the value. Use `*` for maximum precision.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[str] text_align: The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeseriesBackgroundArgs'] timeseries_background: Set a timeseries on the widget background.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if custom_unit is not None:
            pulumi.set(__self__, "custom_unit", custom_unit)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)
        if timeseries_background is not None:
            pulumi.set(__self__, "timeseries_background", timeseries_background)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean indicating whether to automatically scale the tile.
        """
        return pulumi.get(self, "autoscale")

    @autoscale.setter
    def autoscale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autoscale", value)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter(name="customUnit")
    def custom_unit(self) -> Optional[pulumi.Input[str]]:
        """
        The unit for the value displayed in the widget.
        """
        return pulumi.get(self, "custom_unit")

    @custom_unit.setter
    def custom_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_unit", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        """
        The precision to use when displaying the value. Use `*` for maximum precision.
        """
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "text_align")

    @text_align.setter
    def text_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_align", value)

    @property
    @pulumi.getter(name="timeseriesBackground")
    def timeseries_background(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeseriesBackgroundArgs']]:
        """
        Set a timeseries on the widget background.
        """
        return pulumi.get(self, "timeseries_background")

    @timeseries_background.setter
    def timeseries_background(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeseriesBackgroundArgs']]):
        pulumi.set(self, "timeseries_background", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestArgs:
    def __init__(__self__, *,
                 aggregator: Optional[pulumi.Input[str]] = None,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryArgs']] = None,
                 audit_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryArgs']] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormatArgs']]]] = None,
                 formulas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaArgs']]]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryArgs']]]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryArgs']] = None):
        """
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryArgs'] audit_query: The query to use for this widget.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryArgs'] security_query: The query to use for this widget.
        """
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if audit_query is not None:
            pulumi.set(__self__, "audit_query", audit_query)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="auditQuery")
    def audit_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "audit_query")

    @audit_query.setter
    def audit_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryArgs']]):
        pulumi.set(self, "audit_query", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaArgs']]]]:
        return pulumi.get(self, "formulas")

    @formulas.setter
    def formulas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaArgs']]]]):
        pulumi.set(self, "formulas", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryArgs']]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestAuditQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaArgs:
    def __init__(__self__, *,
                 formula_expression: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs']]]] = None,
                 limit: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimitArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaStyleArgs']] = None):
        """
        :param pulumi.Input[str] formula_expression: A string expression built from queries, formulas, and functions.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input[str] cell_display_mode: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimitArgs'] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaStyleArgs'] style: Styling options for widget formulas.
        """
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> pulumi.Input[str]:
        """
        A string expression built from queries, formulas, and functions.
        """
        return pulumi.get(self, "formula_expression")

    @formula_expression.setter
    def formula_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "formula_expression", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimitArgs']]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimitArgs']]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaLimitArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] count: The number of results to return
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of results to return
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestFormulaStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None,
                 palette_index: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[int] palette_index: Index specifying which color to use within the palette.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_index is not None:
            pulumi.set(__self__, "palette_index", palette_index)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteIndex")
    def palette_index(self) -> Optional[pulumi.Input[int]]:
        """
        Index specifying which color to use within the palette.
        """
        return pulumi.get(self, "palette_index")

    @palette_index.setter
    def palette_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "palette_index", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryArgs']] = None,
                 apm_resource_stats_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryArgs']] = None,
                 event_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryArgs']] = None,
                 metric_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQueryArgs']] = None,
                 slo_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQuerySloQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryArgs'] apm_dependency_stats_query: The APM Dependency Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryArgs'] apm_resource_stats_query: The APM Resource Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryArgs'] event_query: A timeseries formula and functions events query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQueryArgs'] metric_query: A timeseries formula and functions metrics query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQuerySloQueryArgs'] slo_query: The slo query using formulas and functions.
        """
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if slo_query is not None:
            pulumi.set(__self__, "slo_query", slo_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryArgs']]:
        """
        The APM Dependency Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_dependency_stats_query")

    @apm_dependency_stats_query.setter
    def apm_dependency_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryArgs']]):
        pulumi.set(self, "apm_dependency_stats_query", value)

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryArgs']]:
        """
        The APM Resource Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_resource_stats_query")

    @apm_resource_stats_query.setter
    def apm_resource_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryArgs']]):
        pulumi.set(self, "apm_resource_stats_query", value)

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryArgs']]:
        """
        A timeseries formula and functions events query.
        """
        return pulumi.get(self, "event_query")

    @event_query.setter
    def event_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryArgs']]):
        pulumi.set(self, "event_query", value)

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQueryArgs']]:
        """
        A timeseries formula and functions metrics query.
        """
        return pulumi.get(self, "metric_query")

    @metric_query.setter
    def metric_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQueryArgs']]):
        pulumi.set(self, "metric_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter(name="sloQuery")
    def slo_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQuerySloQueryArgs']]:
        """
        The slo query using formulas and functions.
        """
        return pulumi.get(self, "slo_query")

    @slo_query.setter
    def slo_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQuerySloQueryArgs']]):
        pulumi.set(self, "slo_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 operation_name: pulumi.Input[str],
                 resource_name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 is_upstream: Optional[pulumi.Input[bool]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] resource_name: APM resource.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[bool] is_upstream: Determines whether stats for upstream or downstream dependencies should be queried.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> pulumi.Input[str]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether stats for upstream or downstream dependencies should be queried.
        """
        return pulumi.get(self, "is_upstream")

    @is_upstream.setter
    def is_upstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_upstream", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operation_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        :param pulumi.Input[str] resource_name: APM resource.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryArgs:
    def __init__(__self__, *,
                 computes: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryComputeArgs']]],
                 data_source: pulumi.Input[str],
                 name: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupByArgs']]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearchArgs']] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryComputeArgs']]] computes: The compute options.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearchArgs'] search: The search options.
        :param pulumi.Input[str] storage: Storage location (private beta).
        """
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def computes(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryComputeArgs']]]:
        """
        The compute options.
        """
        return pulumi.get(self, "computes")

    @computes.setter
    def computes(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryComputeArgs']]]):
        pulumi.set(self, "computes", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearchArgs']]:
        """
        The search options.
        """
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearchArgs']]):
        pulumi.set(self, "search", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage location (private beta).
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 interval: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortArgs'] sort: The options for sorting group by results.
        """
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 metric: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryEventQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryMetricQueryArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 data_source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[str]]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQueryProcessQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 metric: pulumi.Input[str],
                 name: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 is_normalized_cpu: Optional[pulumi.Input[bool]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[bool] is_normalized_cpu: Whether to normalize the CPU percentages.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] sort: The options for sorting group by results.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_filters: An array of tags to filter by.
        :param pulumi.Input[str] text_filter: The text to use as a filter.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to normalize the CPU percentages.
        """
        return pulumi.get(self, "is_normalized_cpu")

    @is_normalized_cpu.setter
    def is_normalized_cpu(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_normalized_cpu", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of tags to filter by.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[pulumi.Input[str]]:
        """
        The text to use as a filter.
        """
        return pulumi.get(self, "text_filter")

    @text_filter.setter
    def text_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_filter", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestQuerySloQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 measure: pulumi.Input[str],
                 slo_id: pulumi.Input[str],
                 additional_query_filters: Optional[pulumi.Input[str]] = None,
                 group_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slo_query_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] measure: SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        :param pulumi.Input[str] slo_id: ID of an SLO to query.
        :param pulumi.Input[str] additional_query_filters: Additional filters applied to the SLO query.
        :param pulumi.Input[str] group_mode: Group mode to query measures. Valid values are `overall`, `components`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] slo_query_type: type of the SLO to query. Valid values are `metric`.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "measure", measure)
        pulumi.set(__self__, "slo_id", slo_id)
        if additional_query_filters is not None:
            pulumi.set(__self__, "additional_query_filters", additional_query_filters)
        if group_mode is not None:
            pulumi.set(__self__, "group_mode", group_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slo_query_type is not None:
            pulumi.set(__self__, "slo_query_type", slo_query_type)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def measure(self) -> pulumi.Input[str]:
        """
        SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        """
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure", value)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        """
        ID of an SLO to query.
        """
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="additionalQueryFilters")
    def additional_query_filters(self) -> Optional[pulumi.Input[str]]:
        """
        Additional filters applied to the SLO query.
        """
        return pulumi.get(self, "additional_query_filters")

    @additional_query_filters.setter
    def additional_query_filters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_query_filters", value)

    @property
    @pulumi.getter(name="groupMode")
    def group_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Group mode to query measures. Valid values are `overall`, `components`.
        """
        return pulumi.get(self, "group_mode")

    @group_mode.setter
    def group_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sloQueryType")
    def slo_query_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the SLO to query. Valid values are `metric`.
        """
        return pulumi.get(self, "slo_query_type")

    @slo_query_type.setter
    def slo_query_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slo_query_type", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeseriesBackgroundArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 yaxis: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeseriesBackgroundYaxisArgs']] = None):
        """
        :param pulumi.Input[str] type: Whether the Timeseries is made using an area or bars. Valid values are `bars`, `area`.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeseriesBackgroundYaxisArgs'] yaxis: A nested block describing the Y-Axis Controls. The structure of this block is described below.
        """
        pulumi.set(__self__, "type", type)
        if yaxis is not None:
            pulumi.set(__self__, "yaxis", yaxis)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Whether the Timeseries is made using an area or bars. Valid values are `bars`, `area`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def yaxis(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeseriesBackgroundYaxisArgs']]:
        """
        A nested block describing the Y-Axis Controls. The structure of this block is described below.
        """
        return pulumi.get(self, "yaxis")

    @yaxis.setter
    def yaxis(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeseriesBackgroundYaxisArgs']]):
        pulumi.set(self, "yaxis", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTimeseriesBackgroundYaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] include_zero: Always include zero or fit the axis to the data range.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] max: Specify the maximum value to show on the Y-axis.
        :param pulumi.Input[str] min: Specify the minimum value to show on the Y-axis.
        :param pulumi.Input[str] scale: Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        """
        Always include zero or fit the axis to the data range.
        """
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the maximum value to show on the Y-axis.
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the minimum value to show on the Y-axis.
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionArgs:
    def __init__(__self__, *,
                 workflow_id: pulumi.Input[str],
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionCustomLinkArgs']]]] = None,
                 inputs: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionInputArgs']]]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] workflow_id: Workflow ID
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionInputArgs']]] inputs: Array of workflow inputs to map to dashboard template variables.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "workflow_id", workflow_id)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if inputs is not None:
            pulumi.set(__self__, "inputs", inputs)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> pulumi.Input[str]:
        """
        Workflow ID
        """
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workflow_id", value)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def inputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionInputArgs']]]]:
        """
        Array of workflow inputs to map to dashboard template variables.
        """
        return pulumi.get(self, "inputs")

    @inputs.setter
    def inputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionInputArgs']]]]):
        pulumi.set(self, "inputs", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetRunWorkflowDefinitionInputArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionArgs:
    def __init__(__self__, *,
                 color_by_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLinkArgs']]]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None,
                 xaxis: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxisArgs']] = None,
                 yaxis: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxisArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] color_by_groups: List of groups used for colors.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestArgs'] request: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxisArgs'] xaxis: A nested block describing the X-Axis Controls. Exactly one nested block is allowed using the structure below.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxisArgs'] yaxis: A nested block describing the Y-Axis Controls. The structure of this block is described below.
        """
        if color_by_groups is not None:
            pulumi.set(__self__, "color_by_groups", color_by_groups)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if xaxis is not None:
            pulumi.set(__self__, "xaxis", xaxis)
        if yaxis is not None:
            pulumi.set(__self__, "yaxis", yaxis)

    @property
    @pulumi.getter(name="colorByGroups")
    def color_by_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of groups used for colors.
        """
        return pulumi.get(self, "color_by_groups")

    @color_by_groups.setter
    def color_by_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "color_by_groups", value)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestArgs']]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestArgs']]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)

    @property
    @pulumi.getter
    def xaxis(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxisArgs']]:
        """
        A nested block describing the X-Axis Controls. Exactly one nested block is allowed using the structure below.
        """
        return pulumi.get(self, "xaxis")

    @xaxis.setter
    def xaxis(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxisArgs']]):
        pulumi.set(self, "xaxis", value)

    @property
    @pulumi.getter
    def yaxis(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxisArgs']]:
        """
        A nested block describing the Y-Axis Controls. The structure of this block is described below.
        """
        return pulumi.get(self, "yaxis")

    @yaxis.setter
    def yaxis(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxisArgs']]):
        pulumi.set(self, "yaxis", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestArgs:
    def __init__(__self__, *,
                 scatterplot_tables: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableArgs']]]] = None,
                 xes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXArgs']]]] = None,
                 ys: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableArgs']]] scatterplot_tables: Scatterplot request containing formulas and functions.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXArgs']]] xes: The query used for the X-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYArgs']]] ys: The query used for the Y-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
        """
        if scatterplot_tables is not None:
            pulumi.set(__self__, "scatterplot_tables", scatterplot_tables)
        if xes is not None:
            pulumi.set(__self__, "xes", xes)
        if ys is not None:
            pulumi.set(__self__, "ys", ys)

    @property
    @pulumi.getter(name="scatterplotTables")
    def scatterplot_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableArgs']]]]:
        """
        Scatterplot request containing formulas and functions.
        """
        return pulumi.get(self, "scatterplot_tables")

    @scatterplot_tables.setter
    def scatterplot_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableArgs']]]]):
        pulumi.set(self, "scatterplot_tables", value)

    @property
    @pulumi.getter
    def xes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXArgs']]]]:
        """
        The query used for the X-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
        """
        return pulumi.get(self, "xes")

    @xes.setter
    def xes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXArgs']]]]):
        pulumi.set(self, "xes", value)

    @property
    @pulumi.getter
    def ys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYArgs']]]]:
        """
        The query used for the Y-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
        """
        return pulumi.get(self, "ys")

    @ys.setter
    def ys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYArgs']]]]):
        pulumi.set(self, "ys", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableArgs:
    def __init__(__self__, *,
                 formulas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableFormulaArgs']]]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryArgs']]]] = None):
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableFormulaArgs']]]]:
        return pulumi.get(self, "formulas")

    @formulas.setter
    def formulas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableFormulaArgs']]]]):
        pulumi.set(self, "formulas", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryArgs']]]]):
        pulumi.set(self, "queries", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableFormulaArgs:
    def __init__(__self__, *,
                 dimension: pulumi.Input[str],
                 formula_expression: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dimension: Dimension of the Scatterplot. Valid values are `x`, `y`, `radius`, `color`.
        :param pulumi.Input[str] formula_expression: A string expression built from queries, formulas, and functions.
        :param pulumi.Input[str] alias: An expression alias.
        """
        pulumi.set(__self__, "dimension", dimension)
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)

    @property
    @pulumi.getter
    def dimension(self) -> pulumi.Input[str]:
        """
        Dimension of the Scatterplot. Valid values are `x`, `y`, `radius`, `color`.
        """
        return pulumi.get(self, "dimension")

    @dimension.setter
    def dimension(self, value: pulumi.Input[str]):
        pulumi.set(self, "dimension", value)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> pulumi.Input[str]:
        """
        A string expression built from queries, formulas, and functions.
        """
        return pulumi.get(self, "formula_expression")

    @formula_expression.setter
    def formula_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "formula_expression", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryArgs:
    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryArgs']] = None,
                 apm_resource_stats_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryArgs']] = None,
                 event_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryArgs']] = None,
                 metric_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryArgs']] = None,
                 slo_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQuerySloQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryArgs'] apm_dependency_stats_query: The APM Dependency Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryArgs'] apm_resource_stats_query: The APM Resource Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryArgs'] event_query: A timeseries formula and functions events query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryArgs'] metric_query: A timeseries formula and functions metrics query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQuerySloQueryArgs'] slo_query: The slo query using formulas and functions.
        """
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if slo_query is not None:
            pulumi.set(__self__, "slo_query", slo_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryArgs']]:
        """
        The APM Dependency Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_dependency_stats_query")

    @apm_dependency_stats_query.setter
    def apm_dependency_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryArgs']]):
        pulumi.set(self, "apm_dependency_stats_query", value)

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryArgs']]:
        """
        The APM Resource Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_resource_stats_query")

    @apm_resource_stats_query.setter
    def apm_resource_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryArgs']]):
        pulumi.set(self, "apm_resource_stats_query", value)

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryArgs']]:
        """
        A timeseries formula and functions events query.
        """
        return pulumi.get(self, "event_query")

    @event_query.setter
    def event_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryArgs']]):
        pulumi.set(self, "event_query", value)

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryArgs']]:
        """
        A timeseries formula and functions metrics query.
        """
        return pulumi.get(self, "metric_query")

    @metric_query.setter
    def metric_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryArgs']]):
        pulumi.set(self, "metric_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter(name="sloQuery")
    def slo_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQuerySloQueryArgs']]:
        """
        The slo query using formulas and functions.
        """
        return pulumi.get(self, "slo_query")

    @slo_query.setter
    def slo_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQuerySloQueryArgs']]):
        pulumi.set(self, "slo_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 operation_name: pulumi.Input[str],
                 resource_name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 is_upstream: Optional[pulumi.Input[bool]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] resource_name: APM resource.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[bool] is_upstream: Determines whether stats for upstream or downstream dependencies should be queried.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> pulumi.Input[str]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether stats for upstream or downstream dependencies should be queried.
        """
        return pulumi.get(self, "is_upstream")

    @is_upstream.setter
    def is_upstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_upstream", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operation_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        :param pulumi.Input[str] resource_name: APM resource.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryArgs:
    def __init__(__self__, *,
                 computes: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryComputeArgs']]],
                 data_source: pulumi.Input[str],
                 name: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupByArgs']]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchArgs']] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryComputeArgs']]] computes: The compute options.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchArgs'] search: The search options.
        :param pulumi.Input[str] storage: Storage location (private beta).
        """
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def computes(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryComputeArgs']]]:
        """
        The compute options.
        """
        return pulumi.get(self, "computes")

    @computes.setter
    def computes(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryComputeArgs']]]):
        pulumi.set(self, "computes", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchArgs']]:
        """
        The search options.
        """
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchArgs']]):
        pulumi.set(self, "search", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage location (private beta).
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 interval: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortArgs'] sort: The options for sorting group by results.
        """
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 metric: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 data_source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[str]]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 metric: pulumi.Input[str],
                 name: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 is_normalized_cpu: Optional[pulumi.Input[bool]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[bool] is_normalized_cpu: Whether to normalize the CPU percentages.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] sort: The options for sorting group by results.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_filters: An array of tags to filter by.
        :param pulumi.Input[str] text_filter: The text to use as a filter.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to normalize the CPU percentages.
        """
        return pulumi.get(self, "is_normalized_cpu")

    @is_normalized_cpu.setter
    def is_normalized_cpu(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_normalized_cpu", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of tags to filter by.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[pulumi.Input[str]]:
        """
        The text to use as a filter.
        """
        return pulumi.get(self, "text_filter")

    @text_filter.setter
    def text_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_filter", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestScatterplotTableQuerySloQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 measure: pulumi.Input[str],
                 slo_id: pulumi.Input[str],
                 additional_query_filters: Optional[pulumi.Input[str]] = None,
                 group_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slo_query_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] measure: SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        :param pulumi.Input[str] slo_id: ID of an SLO to query.
        :param pulumi.Input[str] additional_query_filters: Additional filters applied to the SLO query.
        :param pulumi.Input[str] group_mode: Group mode to query measures. Valid values are `overall`, `components`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] slo_query_type: type of the SLO to query. Valid values are `metric`.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "measure", measure)
        pulumi.set(__self__, "slo_id", slo_id)
        if additional_query_filters is not None:
            pulumi.set(__self__, "additional_query_filters", additional_query_filters)
        if group_mode is not None:
            pulumi.set(__self__, "group_mode", group_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slo_query_type is not None:
            pulumi.set(__self__, "slo_query_type", slo_query_type)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def measure(self) -> pulumi.Input[str]:
        """
        SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        """
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure", value)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        """
        ID of an SLO to query.
        """
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="additionalQueryFilters")
    def additional_query_filters(self) -> Optional[pulumi.Input[str]]:
        """
        Additional filters applied to the SLO query.
        """
        return pulumi.get(self, "additional_query_filters")

    @additional_query_filters.setter
    def additional_query_filters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_query_filters", value)

    @property
    @pulumi.getter(name="groupMode")
    def group_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Group mode to query measures. Valid values are `overall`, `components`.
        """
        return pulumi.get(self, "group_mode")

    @group_mode.setter
    def group_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sloQueryType")
    def slo_query_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the SLO to query. Valid values are `metric`.
        """
        return pulumi.get(self, "slo_query_type")

    @slo_query_type.setter
    def slo_query_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slo_query_type", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXArgs:
    def __init__(__self__, *,
                 aggregator: Optional[pulumi.Input[str]] = None,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryArgs']] = None):
        """
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryArgs'] security_query: The query to use for this widget.
        """
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYArgs:
    def __init__(__self__, *,
                 aggregator: Optional[pulumi.Input[str]] = None,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryArgs']] = None):
        """
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryArgs'] security_query: The query to use for this widget.
        """
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] include_zero: Always include zero or fit the axis to the data range.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] max: Specify the maximum value to show on the Y-axis.
        :param pulumi.Input[str] min: Specify the minimum value to show on the Y-axis.
        :param pulumi.Input[str] scale: Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        """
        Always include zero or fit the axis to the data range.
        """
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the maximum value to show on the Y-axis.
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the minimum value to show on the Y-axis.
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] include_zero: Always include zero or fit the axis to the data range.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] max: Specify the maximum value to show on the Y-axis.
        :param pulumi.Input[str] min: Specify the minimum value to show on the Y-axis.
        :param pulumi.Input[str] scale: Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        """
        Always include zero or fit the axis to the data range.
        """
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the maximum value to show on the Y-axis.
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the minimum value to show on the Y-axis.
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinitionArgs:
    def __init__(__self__, *,
                 slo_id: pulumi.Input[str],
                 time_windows: pulumi.Input[Sequence[pulumi.Input[str]]],
                 view_mode: pulumi.Input[str],
                 view_type: pulumi.Input[str],
                 additional_query_filters: Optional[pulumi.Input[str]] = None,
                 global_time_target: Optional[pulumi.Input[str]] = None,
                 show_error_budget: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] slo_id: ID of an SLO to query.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] time_windows: A list of time windows to display in the widget. Valid values are `7d`, `30d`, `90d`, `week_to_date`, `previous_week`, `month_to_date`, `previous_month`, `global_time`.
        :param pulumi.Input[str] view_mode: The view mode for the widget. Valid values are `overall`, `component`, `both`.
        :param pulumi.Input[str] view_type: The type of view to use when displaying the widget. Only `detail` is supported.
        :param pulumi.Input[str] additional_query_filters: Additional filters applied to the SLO query.
        :param pulumi.Input[str] global_time_target: The global time target of the widget.
        :param pulumi.Input[bool] show_error_budget: Whether to show the error budget or not.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "slo_id", slo_id)
        pulumi.set(__self__, "time_windows", time_windows)
        pulumi.set(__self__, "view_mode", view_mode)
        pulumi.set(__self__, "view_type", view_type)
        if additional_query_filters is not None:
            pulumi.set(__self__, "additional_query_filters", additional_query_filters)
        if global_time_target is not None:
            pulumi.set(__self__, "global_time_target", global_time_target)
        if show_error_budget is not None:
            pulumi.set(__self__, "show_error_budget", show_error_budget)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        """
        ID of an SLO to query.
        """
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of time windows to display in the widget. Valid values are `7d`, `30d`, `90d`, `week_to_date`, `previous_week`, `month_to_date`, `previous_month`, `global_time`.
        """
        return pulumi.get(self, "time_windows")

    @time_windows.setter
    def time_windows(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "time_windows", value)

    @property
    @pulumi.getter(name="viewMode")
    def view_mode(self) -> pulumi.Input[str]:
        """
        The view mode for the widget. Valid values are `overall`, `component`, `both`.
        """
        return pulumi.get(self, "view_mode")

    @view_mode.setter
    def view_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "view_mode", value)

    @property
    @pulumi.getter(name="viewType")
    def view_type(self) -> pulumi.Input[str]:
        """
        The type of view to use when displaying the widget. Only `detail` is supported.
        """
        return pulumi.get(self, "view_type")

    @view_type.setter
    def view_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "view_type", value)

    @property
    @pulumi.getter(name="additionalQueryFilters")
    def additional_query_filters(self) -> Optional[pulumi.Input[str]]:
        """
        Additional filters applied to the SLO query.
        """
        return pulumi.get(self, "additional_query_filters")

    @additional_query_filters.setter
    def additional_query_filters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_query_filters", value)

    @property
    @pulumi.getter(name="globalTimeTarget")
    def global_time_target(self) -> Optional[pulumi.Input[str]]:
        """
        The global time target of the widget.
        """
        return pulumi.get(self, "global_time_target")

    @global_time_target.setter
    def global_time_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_time_target", value)

    @property
    @pulumi.getter(name="showErrorBudget")
    def show_error_budget(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to show the error budget or not.
        """
        return pulumi.get(self, "show_error_budget")

    @show_error_budget.setter
    def show_error_budget(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_error_budget", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetServicemapDefinitionArgs:
    def __init__(__self__, *,
                 filters: pulumi.Input[Sequence[pulumi.Input[str]]],
                 service: pulumi.Input[str],
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLinkArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filters: Your environment and primary tag (or `*` if enabled for your account).
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "service", service)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Your environment and primary tag (or `*` if enabled for your account).
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetServicemapDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSloListDefinitionArgs:
    def __init__(__self__, *,
                 request: pulumi.Input['DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequestArgs'],
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequestArgs'] request: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "request", request)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def request(self) -> pulumi.Input['DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequestArgs']:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: pulumi.Input['DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequestArgs']):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequestArgs:
    def __init__(__self__, *,
                 query: pulumi.Input['DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequestQueryArgs'],
                 request_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] request_type: The request type for the SLO List request. Valid values are `slo_list`.
        """
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "request_type", request_type)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input['DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequestQueryArgs']:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input['DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequestQueryArgs']):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> pulumi.Input[str]:
        """
        The request type for the SLO List request. Valid values are `slo_list`.
        """
        return pulumi.get(self, "request_type")

    @request_type.setter
    def request_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "request_type", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 query_string: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequestQuerySortArgs']] = None):
        """
        :param pulumi.Input[str] query_string: Widget query.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequestQuerySortArgs'] sort: The options for sorting group by results.
        """
        pulumi.set(__self__, "query_string", query_string)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> pulumi.Input[str]:
        """
        Widget query.
        """
        return pulumi.get(self, "query_string")

    @query_string.setter
    def query_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_string", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequestQuerySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequestQuerySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSloListDefinitionRequestQuerySortArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[str],
                 order: pulumi.Input[str]):
        """
        :param pulumi.Input[str] column: The facet path for the column.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[str]:
        """
        The facet path for the column.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[str]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionCustomLinkArgs']]]] = None,
                 hide_total: Optional[pulumi.Input[bool]] = None,
                 legend_inline: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendInlineArgs']] = None,
                 legend_table: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendTableArgs']] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[bool] hide_total: Whether or not to show the total value in the widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendInlineArgs'] legend_inline: Used to configure the inline legend. Cannot be used in conjunction with legend*table.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendTableArgs'] legend_table: Used to configure the table legend. Cannot be used in conjunction with legend*inline.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if hide_total is not None:
            pulumi.set(__self__, "hide_total", hide_total)
        if legend_inline is not None:
            pulumi.set(__self__, "legend_inline", legend_inline)
        if legend_table is not None:
            pulumi.set(__self__, "legend_table", legend_table)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter(name="hideTotal")
    def hide_total(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to show the total value in the widget.
        """
        return pulumi.get(self, "hide_total")

    @hide_total.setter
    def hide_total(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_total", value)

    @property
    @pulumi.getter(name="legendInline")
    def legend_inline(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendInlineArgs']]:
        """
        Used to configure the inline legend. Cannot be used in conjunction with legend*table.
        """
        return pulumi.get(self, "legend_inline")

    @legend_inline.setter
    def legend_inline(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendInlineArgs']]):
        pulumi.set(self, "legend_inline", value)

    @property
    @pulumi.getter(name="legendTable")
    def legend_table(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendTableArgs']]:
        """
        Used to configure the table legend. Cannot be used in conjunction with legend*inline.
        """
        return pulumi.get(self, "legend_table")

    @legend_table.setter
    def legend_table(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendTableArgs']]):
        pulumi.set(self, "legend_table", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendInlineArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 hide_percent: Optional[pulumi.Input[bool]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Whether the Timeseries is made using an area or bars. Valid values are `bars`, `area`.
        :param pulumi.Input[bool] hide_percent: Whether to hide the percentages of the groups.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        """
        pulumi.set(__self__, "type", type)
        if hide_percent is not None:
            pulumi.set(__self__, "hide_percent", hide_percent)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Whether the Timeseries is made using an area or bars. Valid values are `bars`, `area`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="hidePercent")
    def hide_percent(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to hide the percentages of the groups.
        """
        return pulumi.get(self, "hide_percent")

    @hide_percent.setter
    def hide_percent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_percent", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionLegendTableArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] type: Whether the Timeseries is made using an area or bars. Valid values are `bars`, `area`.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Whether the Timeseries is made using an area or bars. Valid values are `bars`, `area`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryArgs']] = None,
                 audit_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryArgs']] = None,
                 formulas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaArgs']]]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryArgs']] = None,
                 network_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryArgs']]]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestStyleArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryArgs'] audit_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryArgs'] network_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryArgs'] security_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestStyleArgs'] style: Styling options for widget formulas.
        """
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if audit_query is not None:
            pulumi.set(__self__, "audit_query", audit_query)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if network_query is not None:
            pulumi.set(__self__, "network_query", network_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="auditQuery")
    def audit_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "audit_query")

    @audit_query.setter
    def audit_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryArgs']]):
        pulumi.set(self, "audit_query", value)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaArgs']]]]:
        return pulumi.get(self, "formulas")

    @formulas.setter
    def formulas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaArgs']]]]):
        pulumi.set(self, "formulas", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="networkQuery")
    def network_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "network_query")

    @network_query.setter
    def network_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryArgs']]):
        pulumi.set(self, "network_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryArgs']]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestAuditQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaArgs:
    def __init__(__self__, *,
                 formula_expression: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaConditionalFormatArgs']]]] = None,
                 limit: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimitArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaStyleArgs']] = None):
        """
        :param pulumi.Input[str] formula_expression: A string expression built from queries, formulas, and functions.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input[str] cell_display_mode: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimitArgs'] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaStyleArgs'] style: Styling options for widget formulas.
        """
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> pulumi.Input[str]:
        """
        A string expression built from queries, formulas, and functions.
        """
        return pulumi.get(self, "formula_expression")

    @formula_expression.setter
    def formula_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "formula_expression", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimitArgs']]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimitArgs']]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaLimitArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] count: The number of results to return
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of results to return
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestFormulaStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None,
                 palette_index: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[int] palette_index: Index specifying which color to use within the palette.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_index is not None:
            pulumi.set(__self__, "palette_index", palette_index)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteIndex")
    def palette_index(self) -> Optional[pulumi.Input[int]]:
        """
        Index specifying which color to use within the palette.
        """
        return pulumi.get(self, "palette_index")

    @palette_index.setter
    def palette_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "palette_index", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestNetworkQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryArgs']] = None,
                 apm_resource_stats_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryArgs']] = None,
                 event_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryArgs']] = None,
                 metric_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQueryArgs']] = None,
                 slo_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQuerySloQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryArgs'] apm_dependency_stats_query: The APM Dependency Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryArgs'] apm_resource_stats_query: The APM Resource Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryArgs'] event_query: A timeseries formula and functions events query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQueryArgs'] metric_query: A timeseries formula and functions metrics query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQuerySloQueryArgs'] slo_query: The slo query using formulas and functions.
        """
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if slo_query is not None:
            pulumi.set(__self__, "slo_query", slo_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryArgs']]:
        """
        The APM Dependency Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_dependency_stats_query")

    @apm_dependency_stats_query.setter
    def apm_dependency_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryArgs']]):
        pulumi.set(self, "apm_dependency_stats_query", value)

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryArgs']]:
        """
        The APM Resource Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_resource_stats_query")

    @apm_resource_stats_query.setter
    def apm_resource_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryArgs']]):
        pulumi.set(self, "apm_resource_stats_query", value)

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryArgs']]:
        """
        A timeseries formula and functions events query.
        """
        return pulumi.get(self, "event_query")

    @event_query.setter
    def event_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryArgs']]):
        pulumi.set(self, "event_query", value)

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQueryArgs']]:
        """
        A timeseries formula and functions metrics query.
        """
        return pulumi.get(self, "metric_query")

    @metric_query.setter
    def metric_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQueryArgs']]):
        pulumi.set(self, "metric_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter(name="sloQuery")
    def slo_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQuerySloQueryArgs']]:
        """
        The slo query using formulas and functions.
        """
        return pulumi.get(self, "slo_query")

    @slo_query.setter
    def slo_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQuerySloQueryArgs']]):
        pulumi.set(self, "slo_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 operation_name: pulumi.Input[str],
                 resource_name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 is_upstream: Optional[pulumi.Input[bool]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] resource_name: APM resource.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[bool] is_upstream: Determines whether stats for upstream or downstream dependencies should be queried.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> pulumi.Input[str]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether stats for upstream or downstream dependencies should be queried.
        """
        return pulumi.get(self, "is_upstream")

    @is_upstream.setter
    def is_upstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_upstream", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operation_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        :param pulumi.Input[str] resource_name: APM resource.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryArgs:
    def __init__(__self__, *,
                 computes: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryComputeArgs']]],
                 data_source: pulumi.Input[str],
                 name: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupByArgs']]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearchArgs']] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryComputeArgs']]] computes: The compute options.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearchArgs'] search: The search options.
        :param pulumi.Input[str] storage: Storage location (private beta).
        """
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def computes(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryComputeArgs']]]:
        """
        The compute options.
        """
        return pulumi.get(self, "computes")

    @computes.setter
    def computes(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryComputeArgs']]]):
        pulumi.set(self, "computes", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearchArgs']]:
        """
        The search options.
        """
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearchArgs']]):
        pulumi.set(self, "search", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage location (private beta).
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 interval: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortArgs'] sort: The options for sorting group by results.
        """
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 metric: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryEventQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryMetricQueryArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 data_source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[str]]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQueryProcessQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 metric: pulumi.Input[str],
                 name: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 is_normalized_cpu: Optional[pulumi.Input[bool]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[bool] is_normalized_cpu: Whether to normalize the CPU percentages.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] sort: The options for sorting group by results.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_filters: An array of tags to filter by.
        :param pulumi.Input[str] text_filter: The text to use as a filter.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to normalize the CPU percentages.
        """
        return pulumi.get(self, "is_normalized_cpu")

    @is_normalized_cpu.setter
    def is_normalized_cpu(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_normalized_cpu", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of tags to filter by.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[pulumi.Input[str]]:
        """
        The text to use as a filter.
        """
        return pulumi.get(self, "text_filter")

    @text_filter.setter
    def text_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_filter", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestQuerySloQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 measure: pulumi.Input[str],
                 slo_id: pulumi.Input[str],
                 additional_query_filters: Optional[pulumi.Input[str]] = None,
                 group_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slo_query_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] measure: SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        :param pulumi.Input[str] slo_id: ID of an SLO to query.
        :param pulumi.Input[str] additional_query_filters: Additional filters applied to the SLO query.
        :param pulumi.Input[str] group_mode: Group mode to query measures. Valid values are `overall`, `components`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] slo_query_type: type of the SLO to query. Valid values are `metric`.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "measure", measure)
        pulumi.set(__self__, "slo_id", slo_id)
        if additional_query_filters is not None:
            pulumi.set(__self__, "additional_query_filters", additional_query_filters)
        if group_mode is not None:
            pulumi.set(__self__, "group_mode", group_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slo_query_type is not None:
            pulumi.set(__self__, "slo_query_type", slo_query_type)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def measure(self) -> pulumi.Input[str]:
        """
        SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        """
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure", value)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        """
        ID of an SLO to query.
        """
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="additionalQueryFilters")
    def additional_query_filters(self) -> Optional[pulumi.Input[str]]:
        """
        Additional filters applied to the SLO query.
        """
        return pulumi.get(self, "additional_query_filters")

    @additional_query_filters.setter
    def additional_query_filters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_query_filters", value)

    @property
    @pulumi.getter(name="groupMode")
    def group_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Group mode to query measures. Valid values are `overall`, `components`.
        """
        return pulumi.get(self, "group_mode")

    @group_mode.setter
    def group_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sloQueryType")
    def slo_query_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the SLO to query. Valid values are `metric`.
        """
        return pulumi.get(self, "slo_query_type")

    @slo_query_type.setter
    def slo_query_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slo_query_type", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetSunburstDefinitionRequestStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLinkArgs']]]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEventArgs']]]] = None,
                 legend_columns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 legend_layout: Optional[pulumi.Input[str]] = None,
                 legend_size: Optional[pulumi.Input[str]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 markers: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarkerArgs']]]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestArgs']]]] = None,
                 right_yaxis: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxisArgs']] = None,
                 show_legend: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None,
                 yaxis: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxisArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEventArgs']]] events: The definition of the event to overlay on the graph. Multiple `event` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] legend_columns: A list of columns to display in the legend. Valid values are `value`, `avg`, `sum`, `min`, `max`.
        :param pulumi.Input[str] legend_layout: The layout of the legend displayed in the widget. Valid values are `auto`, `horizontal`, `vertical`.
        :param pulumi.Input[str] legend_size: The size of the legend displayed in the widget.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarkerArgs']]] markers: A nested block describing the marker to use when displaying the widget. The structure of this block is described below. Multiple `marker` blocks are allowed within a given `tile_def` block.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxisArgs'] right_yaxis: A nested block describing the right Y-Axis Controls. See the `on_right_yaxis` property for which request will use this axis. The structure of this block is described below.
        :param pulumi.Input[bool] show_legend: Whether or not to show the legend on this widget.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxisArgs'] yaxis: A nested block describing the Y-Axis Controls. The structure of this block is described below.
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if legend_columns is not None:
            pulumi.set(__self__, "legend_columns", legend_columns)
        if legend_layout is not None:
            pulumi.set(__self__, "legend_layout", legend_layout)
        if legend_size is not None:
            pulumi.set(__self__, "legend_size", legend_size)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if markers is not None:
            pulumi.set(__self__, "markers", markers)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if right_yaxis is not None:
            pulumi.set(__self__, "right_yaxis", right_yaxis)
        if show_legend is not None:
            pulumi.set(__self__, "show_legend", show_legend)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if yaxis is not None:
            pulumi.set(__self__, "yaxis", yaxis)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEventArgs']]]]:
        """
        The definition of the event to overlay on the graph. Multiple `event` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEventArgs']]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="legendColumns")
    def legend_columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of columns to display in the legend. Valid values are `value`, `avg`, `sum`, `min`, `max`.
        """
        return pulumi.get(self, "legend_columns")

    @legend_columns.setter
    def legend_columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "legend_columns", value)

    @property
    @pulumi.getter(name="legendLayout")
    def legend_layout(self) -> Optional[pulumi.Input[str]]:
        """
        The layout of the legend displayed in the widget. Valid values are `auto`, `horizontal`, `vertical`.
        """
        return pulumi.get(self, "legend_layout")

    @legend_layout.setter
    def legend_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "legend_layout", value)

    @property
    @pulumi.getter(name="legendSize")
    def legend_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the legend displayed in the widget.
        """
        return pulumi.get(self, "legend_size")

    @legend_size.setter
    def legend_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "legend_size", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def markers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarkerArgs']]]]:
        """
        A nested block describing the marker to use when displaying the widget. The structure of this block is described below. Multiple `marker` blocks are allowed within a given `tile_def` block.
        """
        return pulumi.get(self, "markers")

    @markers.setter
    def markers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarkerArgs']]]]):
        pulumi.set(self, "markers", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="rightYaxis")
    def right_yaxis(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxisArgs']]:
        """
        A nested block describing the right Y-Axis Controls. See the `on_right_yaxis` property for which request will use this axis. The structure of this block is described below.
        """
        return pulumi.get(self, "right_yaxis")

    @right_yaxis.setter
    def right_yaxis(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxisArgs']]):
        pulumi.set(self, "right_yaxis", value)

    @property
    @pulumi.getter(name="showLegend")
    def show_legend(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to show the legend on this widget.
        """
        return pulumi.get(self, "show_legend")

    @show_legend.setter
    def show_legend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_legend", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)

    @property
    @pulumi.getter
    def yaxis(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxisArgs']]:
        """
        A nested block describing the Y-Axis Controls. The structure of this block is described below.
        """
        return pulumi.get(self, "yaxis")

    @yaxis.setter
    def yaxis(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxisArgs']]):
        pulumi.set(self, "yaxis", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEventArgs:
    def __init__(__self__, *,
                 q: pulumi.Input[str],
                 tags_execution: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input[str] tags_execution: The execution method for multi-value filters, options: `and` or `or`.
        """
        pulumi.set(__self__, "q", q)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)

    @property
    @pulumi.getter
    def q(self) -> pulumi.Input[str]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: pulumi.Input[str]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[pulumi.Input[str]]:
        """
        The execution method for multi-value filters, options: `and` or `or`.
        """
        return pulumi.get(self, "tags_execution")

    @tags_execution.setter
    def tags_execution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags_execution", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarkerArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 display_type: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] display_type: How the marker lines are displayed, options are one of {`error`, `warning`, `info`, `ok`} combined with one of {`dashed`, `solid`, `bold`}. Example: `error dashed`.
        :param pulumi.Input[str] label: The label for the custom link URL.
        """
        pulumi.set(__self__, "value", value)
        if display_type is not None:
            pulumi.set(__self__, "display_type", display_type)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="displayType")
    def display_type(self) -> Optional[pulumi.Input[str]]:
        """
        How the marker lines are displayed, options are one of {`error`, `warning`, `info`, `ok`} combined with one of {`dashed`, `solid`, `bold`}. Example: `error dashed`.
        """
        return pulumi.get(self, "display_type")

    @display_type.setter
    def display_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_type", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryArgs']] = None,
                 audit_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryArgs']] = None,
                 display_type: Optional[pulumi.Input[str]] = None,
                 formulas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaArgs']]]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryArgs']] = None,
                 metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadataArgs']]]] = None,
                 network_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryArgs']] = None,
                 on_right_yaxis: Optional[pulumi.Input[bool]] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryArgs']]]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyleArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryArgs'] audit_query: The query to use for this widget.
        :param pulumi.Input[str] display_type: How the marker lines are displayed, options are one of {`error`, `warning`, `info`, `ok`} combined with one of {`dashed`, `solid`, `bold`}. Example: `error dashed`.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadataArgs']]] metadatas: Used to define expression aliases. Multiple `metadata` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryArgs'] network_query: The query to use for this widget.
        :param pulumi.Input[bool] on_right_yaxis: A Boolean indicating whether the request uses the right or left Y-Axis.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryArgs'] security_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyleArgs'] style: Styling options for widget formulas.
        """
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if audit_query is not None:
            pulumi.set(__self__, "audit_query", audit_query)
        if display_type is not None:
            pulumi.set(__self__, "display_type", display_type)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if network_query is not None:
            pulumi.set(__self__, "network_query", network_query)
        if on_right_yaxis is not None:
            pulumi.set(__self__, "on_right_yaxis", on_right_yaxis)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="auditQuery")
    def audit_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "audit_query")

    @audit_query.setter
    def audit_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryArgs']]):
        pulumi.set(self, "audit_query", value)

    @property
    @pulumi.getter(name="displayType")
    def display_type(self) -> Optional[pulumi.Input[str]]:
        """
        How the marker lines are displayed, options are one of {`error`, `warning`, `info`, `ok`} combined with one of {`dashed`, `solid`, `bold`}. Example: `error dashed`.
        """
        return pulumi.get(self, "display_type")

    @display_type.setter
    def display_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_type", value)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaArgs']]]]:
        return pulumi.get(self, "formulas")

    @formulas.setter
    def formulas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaArgs']]]]):
        pulumi.set(self, "formulas", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadataArgs']]]]:
        """
        Used to define expression aliases. Multiple `metadata` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadataArgs']]]]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter(name="networkQuery")
    def network_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "network_query")

    @network_query.setter
    def network_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryArgs']]):
        pulumi.set(self, "network_query", value)

    @property
    @pulumi.getter(name="onRightYaxis")
    def on_right_yaxis(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean indicating whether the request uses the right or left Y-Axis.
        """
        return pulumi.get(self, "on_right_yaxis")

    @on_right_yaxis.setter
    def on_right_yaxis(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_right_yaxis", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryArgs']]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestAuditQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaArgs:
    def __init__(__self__, *,
                 formula_expression: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaConditionalFormatArgs']]]] = None,
                 limit: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimitArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaStyleArgs']] = None):
        """
        :param pulumi.Input[str] formula_expression: A string expression built from queries, formulas, and functions.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input[str] cell_display_mode: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimitArgs'] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaStyleArgs'] style: Styling options for widget formulas.
        """
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> pulumi.Input[str]:
        """
        A string expression built from queries, formulas, and functions.
        """
        return pulumi.get(self, "formula_expression")

    @formula_expression.setter
    def formula_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "formula_expression", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimitArgs']]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimitArgs']]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaLimitArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] count: The number of results to return
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of results to return
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestFormulaStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None,
                 palette_index: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[int] palette_index: Index specifying which color to use within the palette.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_index is not None:
            pulumi.set(__self__, "palette_index", palette_index)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteIndex")
    def palette_index(self) -> Optional[pulumi.Input[int]]:
        """
        Index specifying which color to use within the palette.
        """
        return pulumi.get(self, "palette_index")

    @palette_index.setter
    def palette_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "palette_index", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadataArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 alias_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] expression: The expression name.
        :param pulumi.Input[str] alias_name: The expression alias.
        """
        pulumi.set(__self__, "expression", expression)
        if alias_name is not None:
            pulumi.set(__self__, "alias_name", alias_name)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        The expression name.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="aliasName")
    def alias_name(self) -> Optional[pulumi.Input[str]]:
        """
        The expression alias.
        """
        return pulumi.get(self, "alias_name")

    @alias_name.setter
    def alias_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias_name", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryArgs']] = None,
                 apm_resource_stats_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryArgs']] = None,
                 event_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryArgs']] = None,
                 metric_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQueryArgs']] = None,
                 slo_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQuerySloQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryArgs'] apm_dependency_stats_query: The APM Dependency Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryArgs'] apm_resource_stats_query: The APM Resource Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryArgs'] event_query: A timeseries formula and functions events query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQueryArgs'] metric_query: A timeseries formula and functions metrics query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQuerySloQueryArgs'] slo_query: The slo query using formulas and functions.
        """
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if slo_query is not None:
            pulumi.set(__self__, "slo_query", slo_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryArgs']]:
        """
        The APM Dependency Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_dependency_stats_query")

    @apm_dependency_stats_query.setter
    def apm_dependency_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryArgs']]):
        pulumi.set(self, "apm_dependency_stats_query", value)

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryArgs']]:
        """
        The APM Resource Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_resource_stats_query")

    @apm_resource_stats_query.setter
    def apm_resource_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryArgs']]):
        pulumi.set(self, "apm_resource_stats_query", value)

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryArgs']]:
        """
        A timeseries formula and functions events query.
        """
        return pulumi.get(self, "event_query")

    @event_query.setter
    def event_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryArgs']]):
        pulumi.set(self, "event_query", value)

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQueryArgs']]:
        """
        A timeseries formula and functions metrics query.
        """
        return pulumi.get(self, "metric_query")

    @metric_query.setter
    def metric_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQueryArgs']]):
        pulumi.set(self, "metric_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter(name="sloQuery")
    def slo_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQuerySloQueryArgs']]:
        """
        The slo query using formulas and functions.
        """
        return pulumi.get(self, "slo_query")

    @slo_query.setter
    def slo_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQuerySloQueryArgs']]):
        pulumi.set(self, "slo_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 operation_name: pulumi.Input[str],
                 resource_name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 is_upstream: Optional[pulumi.Input[bool]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] resource_name: APM resource.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[bool] is_upstream: Determines whether stats for upstream or downstream dependencies should be queried.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> pulumi.Input[str]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether stats for upstream or downstream dependencies should be queried.
        """
        return pulumi.get(self, "is_upstream")

    @is_upstream.setter
    def is_upstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_upstream", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operation_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        :param pulumi.Input[str] resource_name: APM resource.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryArgs:
    def __init__(__self__, *,
                 computes: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryComputeArgs']]],
                 data_source: pulumi.Input[str],
                 name: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupByArgs']]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearchArgs']] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryComputeArgs']]] computes: The compute options.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearchArgs'] search: The search options.
        :param pulumi.Input[str] storage: Storage location (private beta).
        """
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def computes(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryComputeArgs']]]:
        """
        The compute options.
        """
        return pulumi.get(self, "computes")

    @computes.setter
    def computes(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryComputeArgs']]]):
        pulumi.set(self, "computes", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearchArgs']]:
        """
        The search options.
        """
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearchArgs']]):
        pulumi.set(self, "search", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage location (private beta).
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 interval: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortArgs'] sort: The options for sorting group by results.
        """
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 metric: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryEventQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryMetricQueryArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 data_source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[str]]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQueryProcessQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 metric: pulumi.Input[str],
                 name: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 is_normalized_cpu: Optional[pulumi.Input[bool]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[bool] is_normalized_cpu: Whether to normalize the CPU percentages.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] sort: The options for sorting group by results.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_filters: An array of tags to filter by.
        :param pulumi.Input[str] text_filter: The text to use as a filter.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to normalize the CPU percentages.
        """
        return pulumi.get(self, "is_normalized_cpu")

    @is_normalized_cpu.setter
    def is_normalized_cpu(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_normalized_cpu", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of tags to filter by.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[pulumi.Input[str]]:
        """
        The text to use as a filter.
        """
        return pulumi.get(self, "text_filter")

    @text_filter.setter
    def text_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_filter", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestQuerySloQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 measure: pulumi.Input[str],
                 slo_id: pulumi.Input[str],
                 additional_query_filters: Optional[pulumi.Input[str]] = None,
                 group_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slo_query_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] measure: SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        :param pulumi.Input[str] slo_id: ID of an SLO to query.
        :param pulumi.Input[str] additional_query_filters: Additional filters applied to the SLO query.
        :param pulumi.Input[str] group_mode: Group mode to query measures. Valid values are `overall`, `components`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] slo_query_type: type of the SLO to query. Valid values are `metric`.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "measure", measure)
        pulumi.set(__self__, "slo_id", slo_id)
        if additional_query_filters is not None:
            pulumi.set(__self__, "additional_query_filters", additional_query_filters)
        if group_mode is not None:
            pulumi.set(__self__, "group_mode", group_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slo_query_type is not None:
            pulumi.set(__self__, "slo_query_type", slo_query_type)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def measure(self) -> pulumi.Input[str]:
        """
        SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        """
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure", value)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        """
        ID of an SLO to query.
        """
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="additionalQueryFilters")
    def additional_query_filters(self) -> Optional[pulumi.Input[str]]:
        """
        Additional filters applied to the SLO query.
        """
        return pulumi.get(self, "additional_query_filters")

    @additional_query_filters.setter
    def additional_query_filters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_query_filters", value)

    @property
    @pulumi.getter(name="groupMode")
    def group_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Group mode to query measures. Valid values are `overall`, `components`.
        """
        return pulumi.get(self, "group_mode")

    @group_mode.setter
    def group_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sloQueryType")
    def slo_query_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the SLO to query. Valid values are `metric`.
        """
        return pulumi.get(self, "slo_query_type")

    @slo_query_type.setter
    def slo_query_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slo_query_type", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyleArgs:
    def __init__(__self__, *,
                 line_type: Optional[pulumi.Input[str]] = None,
                 line_width: Optional[pulumi.Input[str]] = None,
                 palette: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] line_type: The type of lines displayed. Valid values are `dashed`, `dotted`, `solid`.
        :param pulumi.Input[str] line_width: The width of line displayed. Valid values are `normal`, `thick`, `thin`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        if line_type is not None:
            pulumi.set(__self__, "line_type", line_type)
        if line_width is not None:
            pulumi.set(__self__, "line_width", line_width)
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter(name="lineType")
    def line_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of lines displayed. Valid values are `dashed`, `dotted`, `solid`.
        """
        return pulumi.get(self, "line_type")

    @line_type.setter
    def line_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_type", value)

    @property
    @pulumi.getter(name="lineWidth")
    def line_width(self) -> Optional[pulumi.Input[str]]:
        """
        The width of line displayed. Valid values are `normal`, `thick`, `thin`.
        """
        return pulumi.get(self, "line_width")

    @line_width.setter
    def line_width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_width", value)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRightYaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] include_zero: Always include zero or fit the axis to the data range.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] max: Specify the maximum value to show on the Y-axis.
        :param pulumi.Input[str] min: Specify the minimum value to show on the Y-axis.
        :param pulumi.Input[str] scale: Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        """
        Always include zero or fit the axis to the data range.
        """
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the maximum value to show on the Y-axis.
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the minimum value to show on the Y-axis.
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] include_zero: Always include zero or fit the axis to the data range.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] max: Specify the maximum value to show on the Y-axis.
        :param pulumi.Input[str] min: Specify the minimum value to show on the Y-axis.
        :param pulumi.Input[str] scale: Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        """
        Always include zero or fit the axis to the data range.
        """
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the maximum value to show on the Y-axis.
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the minimum value to show on the Y-axis.
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLinkArgs']]]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryArgs']] = None,
                 audit_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryArgs']] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormatArgs']]]] = None,
                 formulas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaArgs']]]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryArgs']]]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyleArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryArgs'] audit_query: The query to use for this widget.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryArgs'] security_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyleArgs'] style: Styling options for widget formulas.
        """
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if audit_query is not None:
            pulumi.set(__self__, "audit_query", audit_query)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="auditQuery")
    def audit_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "audit_query")

    @audit_query.setter
    def audit_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryArgs']]):
        pulumi.set(self, "audit_query", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaArgs']]]]:
        return pulumi.get(self, "formulas")

    @formulas.setter
    def formulas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaArgs']]]]):
        pulumi.set(self, "formulas", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryArgs']]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestAuditQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaArgs:
    def __init__(__self__, *,
                 formula_expression: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaConditionalFormatArgs']]]] = None,
                 limit: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimitArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaStyleArgs']] = None):
        """
        :param pulumi.Input[str] formula_expression: A string expression built from queries, formulas, and functions.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input[str] cell_display_mode: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimitArgs'] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaStyleArgs'] style: Styling options for widget formulas.
        """
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> pulumi.Input[str]:
        """
        A string expression built from queries, formulas, and functions.
        """
        return pulumi.get(self, "formula_expression")

    @formula_expression.setter
    def formula_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "formula_expression", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimitArgs']]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimitArgs']]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaLimitArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] count: The number of results to return
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of results to return
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestFormulaStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None,
                 palette_index: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[int] palette_index: Index specifying which color to use within the palette.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_index is not None:
            pulumi.set(__self__, "palette_index", palette_index)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteIndex")
    def palette_index(self) -> Optional[pulumi.Input[int]]:
        """
        Index specifying which color to use within the palette.
        """
        return pulumi.get(self, "palette_index")

    @palette_index.setter
    def palette_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "palette_index", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryArgs']] = None,
                 apm_resource_stats_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQueryArgs']] = None,
                 event_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryArgs']] = None,
                 metric_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQueryArgs']] = None,
                 slo_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQuerySloQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryArgs'] apm_dependency_stats_query: The APM Dependency Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQueryArgs'] apm_resource_stats_query: The APM Resource Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryArgs'] event_query: A timeseries formula and functions events query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQueryArgs'] metric_query: A timeseries formula and functions metrics query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQuerySloQueryArgs'] slo_query: The slo query using formulas and functions.
        """
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if slo_query is not None:
            pulumi.set(__self__, "slo_query", slo_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryArgs']]:
        """
        The APM Dependency Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_dependency_stats_query")

    @apm_dependency_stats_query.setter
    def apm_dependency_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryArgs']]):
        pulumi.set(self, "apm_dependency_stats_query", value)

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQueryArgs']]:
        """
        The APM Resource Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_resource_stats_query")

    @apm_resource_stats_query.setter
    def apm_resource_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQueryArgs']]):
        pulumi.set(self, "apm_resource_stats_query", value)

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryArgs']]:
        """
        A timeseries formula and functions events query.
        """
        return pulumi.get(self, "event_query")

    @event_query.setter
    def event_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryArgs']]):
        pulumi.set(self, "event_query", value)

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQueryArgs']]:
        """
        A timeseries formula and functions metrics query.
        """
        return pulumi.get(self, "metric_query")

    @metric_query.setter
    def metric_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQueryArgs']]):
        pulumi.set(self, "metric_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter(name="sloQuery")
    def slo_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQuerySloQueryArgs']]:
        """
        The slo query using formulas and functions.
        """
        return pulumi.get(self, "slo_query")

    @slo_query.setter
    def slo_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQuerySloQueryArgs']]):
        pulumi.set(self, "slo_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 operation_name: pulumi.Input[str],
                 resource_name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 is_upstream: Optional[pulumi.Input[bool]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] resource_name: APM resource.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[bool] is_upstream: Determines whether stats for upstream or downstream dependencies should be queried.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> pulumi.Input[str]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether stats for upstream or downstream dependencies should be queried.
        """
        return pulumi.get(self, "is_upstream")

    @is_upstream.setter
    def is_upstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_upstream", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryApmResourceStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operation_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        :param pulumi.Input[str] resource_name: APM resource.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryArgs:
    def __init__(__self__, *,
                 computes: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryComputeArgs']]],
                 data_source: pulumi.Input[str],
                 name: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupByArgs']]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearchArgs']] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryComputeArgs']]] computes: The compute options.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearchArgs'] search: The search options.
        :param pulumi.Input[str] storage: Storage location (private beta).
        """
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def computes(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryComputeArgs']]]:
        """
        The compute options.
        """
        return pulumi.get(self, "computes")

    @computes.setter
    def computes(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryComputeArgs']]]):
        pulumi.set(self, "computes", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearchArgs']]:
        """
        The search options.
        """
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearchArgs']]):
        pulumi.set(self, "search", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage location (private beta).
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 interval: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySortArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySortArgs'] sort: The options for sorting group by results.
        """
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 metric: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryEventQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryMetricQueryArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 data_source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[str]]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQueryProcessQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 metric: pulumi.Input[str],
                 name: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 is_normalized_cpu: Optional[pulumi.Input[bool]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[bool] is_normalized_cpu: Whether to normalize the CPU percentages.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] sort: The options for sorting group by results.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_filters: An array of tags to filter by.
        :param pulumi.Input[str] text_filter: The text to use as a filter.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to normalize the CPU percentages.
        """
        return pulumi.get(self, "is_normalized_cpu")

    @is_normalized_cpu.setter
    def is_normalized_cpu(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_normalized_cpu", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of tags to filter by.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[pulumi.Input[str]]:
        """
        The text to use as a filter.
        """
        return pulumi.get(self, "text_filter")

    @text_filter.setter
    def text_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_filter", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestQuerySloQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 measure: pulumi.Input[str],
                 slo_id: pulumi.Input[str],
                 additional_query_filters: Optional[pulumi.Input[str]] = None,
                 group_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slo_query_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] measure: SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        :param pulumi.Input[str] slo_id: ID of an SLO to query.
        :param pulumi.Input[str] additional_query_filters: Additional filters applied to the SLO query.
        :param pulumi.Input[str] group_mode: Group mode to query measures. Valid values are `overall`, `components`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] slo_query_type: type of the SLO to query. Valid values are `metric`.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "measure", measure)
        pulumi.set(__self__, "slo_id", slo_id)
        if additional_query_filters is not None:
            pulumi.set(__self__, "additional_query_filters", additional_query_filters)
        if group_mode is not None:
            pulumi.set(__self__, "group_mode", group_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slo_query_type is not None:
            pulumi.set(__self__, "slo_query_type", slo_query_type)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def measure(self) -> pulumi.Input[str]:
        """
        SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        """
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure", value)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        """
        ID of an SLO to query.
        """
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="additionalQueryFilters")
    def additional_query_filters(self) -> Optional[pulumi.Input[str]]:
        """
        Additional filters applied to the SLO query.
        """
        return pulumi.get(self, "additional_query_filters")

    @additional_query_filters.setter
    def additional_query_filters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_query_filters", value)

    @property
    @pulumi.getter(name="groupMode")
    def group_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Group mode to query measures. Valid values are `overall`, `components`.
        """
        return pulumi.get(self, "group_mode")

    @group_mode.setter
    def group_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sloQueryType")
    def slo_query_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the SLO to query. Valid values are `metric`.
        """
        return pulumi.get(self, "slo_query_type")

    @slo_query_type.setter
    def slo_query_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slo_query_type", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionCustomLinkArgs']]]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionRequestArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionRequestArgs:
    def __init__(__self__, *,
                 queries: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionRequestQueryArgs']]],
                 request_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] request_type: The request type for the SLO List request. Valid values are `slo_list`.
        """
        pulumi.set(__self__, "queries", queries)
        pulumi.set(__self__, "request_type", request_type)

    @property
    @pulumi.getter
    def queries(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionRequestQueryArgs']]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionRequestQueryArgs']]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> pulumi.Input[str]:
        """
        The request type for the SLO List request. Valid values are `slo_list`.
        """
        return pulumi.get(self, "request_type")

    @request_type.setter
    def request_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "request_type", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTopologyMapDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 filters: pulumi.Input[Sequence[pulumi.Input[str]]],
                 service: pulumi.Input[str]):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filters: Your environment and primary tag (or `*` if enabled for your account).
        :param pulumi.Input[str] service: APM service.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Your environment and primary tag (or `*` if enabled for your account).
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionArgs:
    def __init__(__self__, *,
                 env: pulumi.Input[str],
                 service: pulumi.Input[str],
                 span_name: pulumi.Input[str],
                 display_format: Optional[pulumi.Input[str]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 show_breakdown: Optional[pulumi.Input[bool]] = None,
                 show_distribution: Optional[pulumi.Input[bool]] = None,
                 show_errors: Optional[pulumi.Input[bool]] = None,
                 show_hits: Optional[pulumi.Input[bool]] = None,
                 show_latency: Optional[pulumi.Input[bool]] = None,
                 show_resource_list: Optional[pulumi.Input[bool]] = None,
                 size_format: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] span_name: APM span name
        :param pulumi.Input[str] display_format: The display setting to use. Valid values are `counts`, `countsAndList`, `list`.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[bool] show_breakdown: Whether to show the latency breakdown or not.
        :param pulumi.Input[bool] show_distribution: Whether to show the latency distribution or not.
        :param pulumi.Input[bool] show_errors: Whether to show the error metrics or not.
        :param pulumi.Input[bool] show_hits: Whether to show the hits metrics or not
        :param pulumi.Input[bool] show_latency: Whether to show the latency metrics or not.
        :param pulumi.Input[bool] show_resource_list: Whether to show the resource list or not.
        :param pulumi.Input[str] size_format: The size of the widget. Valid values are `small`, `medium`, `large`.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "span_name", span_name)
        if display_format is not None:
            pulumi.set(__self__, "display_format", display_format)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if show_breakdown is not None:
            pulumi.set(__self__, "show_breakdown", show_breakdown)
        if show_distribution is not None:
            pulumi.set(__self__, "show_distribution", show_distribution)
        if show_errors is not None:
            pulumi.set(__self__, "show_errors", show_errors)
        if show_hits is not None:
            pulumi.set(__self__, "show_hits", show_hits)
        if show_latency is not None:
            pulumi.set(__self__, "show_latency", show_latency)
        if show_resource_list is not None:
            pulumi.set(__self__, "show_resource_list", show_resource_list)
        if size_format is not None:
            pulumi.set(__self__, "size_format", size_format)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="spanName")
    def span_name(self) -> pulumi.Input[str]:
        """
        APM span name
        """
        return pulumi.get(self, "span_name")

    @span_name.setter
    def span_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "span_name", value)

    @property
    @pulumi.getter(name="displayFormat")
    def display_format(self) -> Optional[pulumi.Input[str]]:
        """
        The display setting to use. Valid values are `counts`, `countsAndList`, `list`.
        """
        return pulumi.get(self, "display_format")

    @display_format.setter
    def display_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_format", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter(name="showBreakdown")
    def show_breakdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to show the latency breakdown or not.
        """
        return pulumi.get(self, "show_breakdown")

    @show_breakdown.setter
    def show_breakdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_breakdown", value)

    @property
    @pulumi.getter(name="showDistribution")
    def show_distribution(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to show the latency distribution or not.
        """
        return pulumi.get(self, "show_distribution")

    @show_distribution.setter
    def show_distribution(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_distribution", value)

    @property
    @pulumi.getter(name="showErrors")
    def show_errors(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to show the error metrics or not.
        """
        return pulumi.get(self, "show_errors")

    @show_errors.setter
    def show_errors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_errors", value)

    @property
    @pulumi.getter(name="showHits")
    def show_hits(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to show the hits metrics or not
        """
        return pulumi.get(self, "show_hits")

    @show_hits.setter
    def show_hits(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_hits", value)

    @property
    @pulumi.getter(name="showLatency")
    def show_latency(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to show the latency metrics or not.
        """
        return pulumi.get(self, "show_latency")

    @show_latency.setter
    def show_latency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_latency", value)

    @property
    @pulumi.getter(name="showResourceList")
    def show_resource_list(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to show the resource list or not.
        """
        return pulumi.get(self, "show_resource_list")

    @show_resource_list.setter
    def show_resource_list(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_resource_list", value)

    @property
    @pulumi.getter(name="sizeFormat")
    def size_format(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget. Valid values are `small`, `medium`, `large`.
        """
        return pulumi.get(self, "size_format")

    @size_format.setter
    def size_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_format", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTreemapDefinitionArgs:
    def __init__(__self__, *,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[str] title: The title of the widget.
        """
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestArgs:
    def __init__(__self__, *,
                 formulas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaArgs']]]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryArgs']]]] = None):
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaArgs']]]]:
        return pulumi.get(self, "formulas")

    @formulas.setter
    def formulas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaArgs']]]]):
        pulumi.set(self, "formulas", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryArgs']]]]):
        pulumi.set(self, "queries", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaArgs:
    def __init__(__self__, *,
                 formula_expression: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaConditionalFormatArgs']]]] = None,
                 limit: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaLimitArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaStyleArgs']] = None):
        """
        :param pulumi.Input[str] formula_expression: A string expression built from queries, formulas, and functions.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input[str] cell_display_mode: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaLimitArgs'] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaStyleArgs'] style: Styling options for widget formulas.
        """
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> pulumi.Input[str]:
        """
        A string expression built from queries, formulas, and functions.
        """
        return pulumi.get(self, "formula_expression")

    @formula_expression.setter
    def formula_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "formula_expression", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaLimitArgs']]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaLimitArgs']]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaLimitArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] count: The number of results to return
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of results to return
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestFormulaStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None,
                 palette_index: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[int] palette_index: Index specifying which color to use within the palette.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_index is not None:
            pulumi.set(__self__, "palette_index", palette_index)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteIndex")
    def palette_index(self) -> Optional[pulumi.Input[int]]:
        """
        Index specifying which color to use within the palette.
        """
        return pulumi.get(self, "palette_index")

    @palette_index.setter
    def palette_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "palette_index", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryApmDependencyStatsQueryArgs']] = None,
                 apm_resource_stats_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryApmResourceStatsQueryArgs']] = None,
                 event_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryArgs']] = None,
                 metric_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryMetricQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryProcessQueryArgs']] = None,
                 slo_query: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQuerySloQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryApmDependencyStatsQueryArgs'] apm_dependency_stats_query: The APM Dependency Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryApmResourceStatsQueryArgs'] apm_resource_stats_query: The APM Resource Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryArgs'] event_query: A timeseries formula and functions events query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryMetricQueryArgs'] metric_query: A timeseries formula and functions metrics query.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQuerySloQueryArgs'] slo_query: The slo query using formulas and functions.
        """
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if slo_query is not None:
            pulumi.set(__self__, "slo_query", slo_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryApmDependencyStatsQueryArgs']]:
        """
        The APM Dependency Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_dependency_stats_query")

    @apm_dependency_stats_query.setter
    def apm_dependency_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryApmDependencyStatsQueryArgs']]):
        pulumi.set(self, "apm_dependency_stats_query", value)

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryApmResourceStatsQueryArgs']]:
        """
        The APM Resource Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_resource_stats_query")

    @apm_resource_stats_query.setter
    def apm_resource_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryApmResourceStatsQueryArgs']]):
        pulumi.set(self, "apm_resource_stats_query", value)

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryArgs']]:
        """
        A timeseries formula and functions events query.
        """
        return pulumi.get(self, "event_query")

    @event_query.setter
    def event_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryArgs']]):
        pulumi.set(self, "event_query", value)

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryMetricQueryArgs']]:
        """
        A timeseries formula and functions metrics query.
        """
        return pulumi.get(self, "metric_query")

    @metric_query.setter
    def metric_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryMetricQueryArgs']]):
        pulumi.set(self, "metric_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter(name="sloQuery")
    def slo_query(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQuerySloQueryArgs']]:
        """
        The slo query using formulas and functions.
        """
        return pulumi.get(self, "slo_query")

    @slo_query.setter
    def slo_query(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQuerySloQueryArgs']]):
        pulumi.set(self, "slo_query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryApmDependencyStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 operation_name: pulumi.Input[str],
                 resource_name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 is_upstream: Optional[pulumi.Input[bool]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] resource_name: APM resource.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[bool] is_upstream: Determines whether stats for upstream or downstream dependencies should be queried.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> pulumi.Input[str]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether stats for upstream or downstream dependencies should be queried.
        """
        return pulumi.get(self, "is_upstream")

    @is_upstream.setter
    def is_upstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_upstream", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryApmResourceStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operation_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        :param pulumi.Input[str] resource_name: APM resource.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryArgs:
    def __init__(__self__, *,
                 computes: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryComputeArgs']]],
                 data_source: pulumi.Input[str],
                 name: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryGroupByArgs']]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQuerySearchArgs']] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryComputeArgs']]] computes: The compute options.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQuerySearchArgs'] search: The search options.
        :param pulumi.Input[str] storage: Storage location (private beta).
        """
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def computes(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryComputeArgs']]]:
        """
        The compute options.
        """
        return pulumi.get(self, "computes")

    @computes.setter
    def computes(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryComputeArgs']]]):
        pulumi.set(self, "computes", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQuerySearchArgs']]:
        """
        The search options.
        """
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQuerySearchArgs']]):
        pulumi.set(self, "search", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage location (private beta).
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 interval: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryGroupBySortArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryGroupBySortArgs'] sort: The options for sorting group by results.
        """
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryGroupBySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 metric: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryEventQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryMetricQueryArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 data_source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[str]]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQueryProcessQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 metric: pulumi.Input[str],
                 name: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 is_normalized_cpu: Optional[pulumi.Input[bool]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[bool] is_normalized_cpu: Whether to normalize the CPU percentages.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] sort: The options for sorting group by results.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_filters: An array of tags to filter by.
        :param pulumi.Input[str] text_filter: The text to use as a filter.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to normalize the CPU percentages.
        """
        return pulumi.get(self, "is_normalized_cpu")

    @is_normalized_cpu.setter
    def is_normalized_cpu(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_normalized_cpu", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of tags to filter by.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[pulumi.Input[str]]:
        """
        The text to use as a filter.
        """
        return pulumi.get(self, "text_filter")

    @text_filter.setter
    def text_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_filter", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetTreemapDefinitionRequestQuerySloQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 measure: pulumi.Input[str],
                 slo_id: pulumi.Input[str],
                 additional_query_filters: Optional[pulumi.Input[str]] = None,
                 group_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slo_query_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] measure: SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        :param pulumi.Input[str] slo_id: ID of an SLO to query.
        :param pulumi.Input[str] additional_query_filters: Additional filters applied to the SLO query.
        :param pulumi.Input[str] group_mode: Group mode to query measures. Valid values are `overall`, `components`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] slo_query_type: type of the SLO to query. Valid values are `metric`.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "measure", measure)
        pulumi.set(__self__, "slo_id", slo_id)
        if additional_query_filters is not None:
            pulumi.set(__self__, "additional_query_filters", additional_query_filters)
        if group_mode is not None:
            pulumi.set(__self__, "group_mode", group_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slo_query_type is not None:
            pulumi.set(__self__, "slo_query_type", slo_query_type)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def measure(self) -> pulumi.Input[str]:
        """
        SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        """
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure", value)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        """
        ID of an SLO to query.
        """
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="additionalQueryFilters")
    def additional_query_filters(self) -> Optional[pulumi.Input[str]]:
        """
        Additional filters applied to the SLO query.
        """
        return pulumi.get(self, "additional_query_filters")

    @additional_query_filters.setter
    def additional_query_filters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_query_filters", value)

    @property
    @pulumi.getter(name="groupMode")
    def group_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Group mode to query measures. Valid values are `overall`, `components`.
        """
        return pulumi.get(self, "group_mode")

    @group_mode.setter
    def group_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sloQueryType")
    def slo_query_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the SLO to query. Valid values are `metric`.
        """
        return pulumi.get(self, "slo_query_type")

    @slo_query_type.setter
    def slo_query_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slo_query_type", value)


@pulumi.input_type
class DashboardWidgetGroupDefinitionWidgetWidgetLayoutArgs:
    def __init__(__self__, *,
                 height: pulumi.Input[int],
                 width: pulumi.Input[int],
                 x: pulumi.Input[int],
                 y: pulumi.Input[int],
                 is_column_break: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] height: The height of the widget.
        :param pulumi.Input[int] width: Widget column width. Valid values are `auto`, `compact`, `full`.
        :param pulumi.Input[int] x: The query used for the X-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
        :param pulumi.Input[int] y: The query used for the Y-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
        :param pulumi.Input[bool] is_column_break: Whether the widget should be the first one on the second column in high density or not. Only for the new dashboard layout and only one widget in the dashboard should have this property set to `true`.
        """
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "width", width)
        pulumi.set(__self__, "x", x)
        pulumi.set(__self__, "y", y)
        if is_column_break is not None:
            pulumi.set(__self__, "is_column_break", is_column_break)

    @property
    @pulumi.getter
    def height(self) -> pulumi.Input[int]:
        """
        The height of the widget.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: pulumi.Input[int]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def width(self) -> pulumi.Input[int]:
        """
        Widget column width. Valid values are `auto`, `compact`, `full`.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: pulumi.Input[int]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter
    def x(self) -> pulumi.Input[int]:
        """
        The query used for the X-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
        """
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: pulumi.Input[int]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter
    def y(self) -> pulumi.Input[int]:
        """
        The query used for the Y-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
        """
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: pulumi.Input[int]):
        pulumi.set(self, "y", value)

    @property
    @pulumi.getter(name="isColumnBreak")
    def is_column_break(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the widget should be the first one on the second column in high density or not. Only for the new dashboard layout and only one widget in the dashboard should have this property set to `true`.
        """
        return pulumi.get(self, "is_column_break")

    @is_column_break.setter
    def is_column_break(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_column_break", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionCustomLinkArgs']]]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionEventArgs']]]] = None,
                 legend_size: Optional[pulumi.Input[str]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestArgs']]]] = None,
                 show_legend: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None,
                 yaxis: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionYaxisArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionEventArgs']]] events: The definition of the event to overlay on the graph. Multiple `event` blocks are allowed using the structure below.
        :param pulumi.Input[str] legend_size: The size of the legend displayed in the widget.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[bool] show_legend: Whether or not to show the legend on this widget.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        :param pulumi.Input['DashboardWidgetHeatmapDefinitionYaxisArgs'] yaxis: A nested block describing the Y-Axis Controls. The structure of this block is described below.
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if legend_size is not None:
            pulumi.set(__self__, "legend_size", legend_size)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if show_legend is not None:
            pulumi.set(__self__, "show_legend", show_legend)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if yaxis is not None:
            pulumi.set(__self__, "yaxis", yaxis)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionEventArgs']]]]:
        """
        The definition of the event to overlay on the graph. Multiple `event` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionEventArgs']]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="legendSize")
    def legend_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the legend displayed in the widget.
        """
        return pulumi.get(self, "legend_size")

    @legend_size.setter
    def legend_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "legend_size", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="showLegend")
    def show_legend(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to show the legend on this widget.
        """
        return pulumi.get(self, "show_legend")

    @show_legend.setter
    def show_legend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_legend", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)

    @property
    @pulumi.getter
    def yaxis(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionYaxisArgs']]:
        """
        A nested block describing the Y-Axis Controls. The structure of this block is described below.
        """
        return pulumi.get(self, "yaxis")

    @yaxis.setter
    def yaxis(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionYaxisArgs']]):
        pulumi.set(self, "yaxis", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionEventArgs:
    def __init__(__self__, *,
                 q: pulumi.Input[str],
                 tags_execution: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input[str] tags_execution: The execution method for multi-value filters, options: `and` or `or`.
        """
        pulumi.set(__self__, "q", q)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)

    @property
    @pulumi.getter
    def q(self) -> pulumi.Input[str]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: pulumi.Input[str]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[pulumi.Input[str]]:
        """
        The execution method for multi-value filters, options: `and` or `or`.
        """
        return pulumi.get(self, "tags_execution")

    @tags_execution.setter
    def tags_execution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags_execution", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestStyleArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetHeatmapDefinitionRequestProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryArgs'] security_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetHeatmapDefinitionRequestStyleArgs'] style: Styling options for widget formulas.
        """
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionRequestStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)


@pulumi.input_type
class DashboardWidgetHeatmapDefinitionYaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] include_zero: Always include zero or fit the axis to the data range.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] max: Specify the maximum value to show on the Y-axis.
        :param pulumi.Input[str] min: Specify the minimum value to show on the Y-axis.
        :param pulumi.Input[str] scale: Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        """
        Always include zero or fit the axis to the data range.
        """
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the maximum value to show on the Y-axis.
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the minimum value to show on the Y-axis.
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionCustomLinkArgs']]]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 no_group_hosts: Optional[pulumi.Input[bool]] = None,
                 no_metric_hosts: Optional[pulumi.Input[bool]] = None,
                 node_type: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestArgs']] = None,
                 scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 style: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionStyleArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] groups: The check group to use in the widget.
        :param pulumi.Input[bool] no_group_hosts: A Boolean indicating whether to show ungrouped nodes.
        :param pulumi.Input[bool] no_metric_hosts: A Boolean indicating whether to show nodes with no metrics.
        :param pulumi.Input[str] node_type: The type of node used. Valid values are `host`, `container`.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestArgs'] request: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] scopes: The list of tags to filter nodes by.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionStyleArgs'] style: Styling options for widget formulas.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if no_group_hosts is not None:
            pulumi.set(__self__, "no_group_hosts", no_group_hosts)
        if no_metric_hosts is not None:
            pulumi.set(__self__, "no_metric_hosts", no_metric_hosts)
        if node_type is not None:
            pulumi.set(__self__, "node_type", node_type)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if scopes is not None:
            pulumi.set(__self__, "scopes", scopes)
        if style is not None:
            pulumi.set(__self__, "style", style)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The check group to use in the widget.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="noGroupHosts")
    def no_group_hosts(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean indicating whether to show ungrouped nodes.
        """
        return pulumi.get(self, "no_group_hosts")

    @no_group_hosts.setter
    def no_group_hosts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_group_hosts", value)

    @property
    @pulumi.getter(name="noMetricHosts")
    def no_metric_hosts(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean indicating whether to show nodes with no metrics.
        """
        return pulumi.get(self, "no_metric_hosts")

    @no_metric_hosts.setter
    def no_metric_hosts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_metric_hosts", value)

    @property
    @pulumi.getter(name="nodeType")
    def node_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of node used. Valid values are `host`, `container`.
        """
        return pulumi.get(self, "node_type")

    @node_type.setter
    def node_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "node_type", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestArgs']]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestArgs']]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter
    def scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of tags to filter nodes by.
        """
        return pulumi.get(self, "scopes")

    @scopes.setter
    def scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "scopes", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionStyleArgs']]):
        pulumi.set(self, "style", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestArgs:
    def __init__(__self__, *,
                 fills: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillArgs']]]] = None,
                 sizes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillArgs']]] fills: The query used to fill the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeArgs']]] sizes: The query used to size the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        if fills is not None:
            pulumi.set(__self__, "fills", fills)
        if sizes is not None:
            pulumi.set(__self__, "sizes", sizes)

    @property
    @pulumi.getter
    def fills(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillArgs']]]]:
        """
        The query used to fill the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "fills")

    @fills.setter
    def fills(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillArgs']]]]):
        pulumi.set(self, "fills", value)

    @property
    @pulumi.getter
    def sizes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeArgs']]]]:
        """
        The query used to size the map. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "sizes")

    @sizes.setter
    def sizes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeArgs']]]]):
        pulumi.set(self, "sizes", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryArgs'] security_query: The query to use for this widget.
        """
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestFillSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryArgs'] security_query: The query to use for this widget.
        """
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionRequestSizeSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetHostmapDefinitionStyleArgs:
    def __init__(__self__, *,
                 fill_max: Optional[pulumi.Input[str]] = None,
                 fill_min: Optional[pulumi.Input[str]] = None,
                 palette: Optional[pulumi.Input[str]] = None,
                 palette_flip: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] fill_max: The max value to use to color the map.
        :param pulumi.Input[str] fill_min: The min value to use to color the map.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[bool] palette_flip: A Boolean indicating whether to flip the palette tones.
        """
        if fill_max is not None:
            pulumi.set(__self__, "fill_max", fill_max)
        if fill_min is not None:
            pulumi.set(__self__, "fill_min", fill_min)
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_flip is not None:
            pulumi.set(__self__, "palette_flip", palette_flip)

    @property
    @pulumi.getter(name="fillMax")
    def fill_max(self) -> Optional[pulumi.Input[str]]:
        """
        The max value to use to color the map.
        """
        return pulumi.get(self, "fill_max")

    @fill_max.setter
    def fill_max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_max", value)

    @property
    @pulumi.getter(name="fillMin")
    def fill_min(self) -> Optional[pulumi.Input[str]]:
        """
        The min value to use to color the map.
        """
        return pulumi.get(self, "fill_min")

    @fill_min.setter
    def fill_min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fill_min", value)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteFlip")
    def palette_flip(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean indicating whether to flip the palette tones.
        """
        return pulumi.get(self, "palette_flip")

    @palette_flip.setter
    def palette_flip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "palette_flip", value)


@pulumi.input_type
class DashboardWidgetIframeDefinitionArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str]):
        """
        :param pulumi.Input[str] url: The URL to use as a data source for the widget.
        """
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL to use as a data source for the widget.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class DashboardWidgetImageDefinitionArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 has_background: Optional[pulumi.Input[bool]] = None,
                 has_border: Optional[pulumi.Input[bool]] = None,
                 horizontal_align: Optional[pulumi.Input[str]] = None,
                 margin: Optional[pulumi.Input[str]] = None,
                 sizing: Optional[pulumi.Input[str]] = None,
                 url_dark_theme: Optional[pulumi.Input[str]] = None,
                 vertical_align: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] url: The URL to use as a data source for the widget.
        :param pulumi.Input[bool] has_background: Whether to display a background or not.
        :param pulumi.Input[bool] has_border: Whether to display a border or not.
        :param pulumi.Input[str] horizontal_align: The horizontal alignment for the widget. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] margin: The margins to use around the image. Note: `small` and `large` values are deprecated. Valid values are `sm`, `md`, `lg`, `small`, `large`.
        :param pulumi.Input[str] sizing: The preferred method to adapt the dimensions of the image. The values are based on the image `object-fit` CSS properties. Note: `zoom`, `fit` and `center` values are deprecated. Valid values are `fill`, `contain`, `cover`, `none`, `scale-down`, `zoom`, `fit`, `center`.
        :param pulumi.Input[str] url_dark_theme: The URL in dark mode to use as a data source for the widget.
        :param pulumi.Input[str] vertical_align: The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
        """
        pulumi.set(__self__, "url", url)
        if has_background is not None:
            pulumi.set(__self__, "has_background", has_background)
        if has_border is not None:
            pulumi.set(__self__, "has_border", has_border)
        if horizontal_align is not None:
            pulumi.set(__self__, "horizontal_align", horizontal_align)
        if margin is not None:
            pulumi.set(__self__, "margin", margin)
        if sizing is not None:
            pulumi.set(__self__, "sizing", sizing)
        if url_dark_theme is not None:
            pulumi.set(__self__, "url_dark_theme", url_dark_theme)
        if vertical_align is not None:
            pulumi.set(__self__, "vertical_align", vertical_align)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL to use as a data source for the widget.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="hasBackground")
    def has_background(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to display a background or not.
        """
        return pulumi.get(self, "has_background")

    @has_background.setter
    def has_background(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_background", value)

    @property
    @pulumi.getter(name="hasBorder")
    def has_border(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to display a border or not.
        """
        return pulumi.get(self, "has_border")

    @has_border.setter
    def has_border(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_border", value)

    @property
    @pulumi.getter(name="horizontalAlign")
    def horizontal_align(self) -> Optional[pulumi.Input[str]]:
        """
        The horizontal alignment for the widget. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "horizontal_align")

    @horizontal_align.setter
    def horizontal_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "horizontal_align", value)

    @property
    @pulumi.getter
    def margin(self) -> Optional[pulumi.Input[str]]:
        """
        The margins to use around the image. Note: `small` and `large` values are deprecated. Valid values are `sm`, `md`, `lg`, `small`, `large`.
        """
        return pulumi.get(self, "margin")

    @margin.setter
    def margin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "margin", value)

    @property
    @pulumi.getter
    def sizing(self) -> Optional[pulumi.Input[str]]:
        """
        The preferred method to adapt the dimensions of the image. The values are based on the image `object-fit` CSS properties. Note: `zoom`, `fit` and `center` values are deprecated. Valid values are `fill`, `contain`, `cover`, `none`, `scale-down`, `zoom`, `fit`, `center`.
        """
        return pulumi.get(self, "sizing")

    @sizing.setter
    def sizing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sizing", value)

    @property
    @pulumi.getter(name="urlDarkTheme")
    def url_dark_theme(self) -> Optional[pulumi.Input[str]]:
        """
        The URL in dark mode to use as a data source for the widget.
        """
        return pulumi.get(self, "url_dark_theme")

    @url_dark_theme.setter
    def url_dark_theme(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_dark_theme", value)

    @property
    @pulumi.getter(name="verticalAlign")
    def vertical_align(self) -> Optional[pulumi.Input[str]]:
        """
        The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
        """
        return pulumi.get(self, "vertical_align")

    @vertical_align.setter
    def vertical_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vertical_align", value)


@pulumi.input_type
class DashboardWidgetListStreamDefinitionArgs:
    def __init__(__self__, *,
                 requests: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetListStreamDefinitionRequestArgs']]],
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetListStreamDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def requests(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetListStreamDefinitionRequestArgs']]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetListStreamDefinitionRequestArgs']]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetListStreamDefinitionRequestArgs:
    def __init__(__self__, *,
                 columns: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetListStreamDefinitionRequestColumnArgs']]],
                 query: pulumi.Input['DashboardWidgetListStreamDefinitionRequestQueryArgs'],
                 response_format: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetListStreamDefinitionRequestColumnArgs']]] columns: Column properties used by the front end for display.
        :param pulumi.Input[str] response_format: Widget response format. Valid values are `event_list`.
        """
        pulumi.set(__self__, "columns", columns)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "response_format", response_format)

    @property
    @pulumi.getter
    def columns(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetListStreamDefinitionRequestColumnArgs']]]:
        """
        Column properties used by the front end for display.
        """
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetListStreamDefinitionRequestColumnArgs']]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input['DashboardWidgetListStreamDefinitionRequestQueryArgs']:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input['DashboardWidgetListStreamDefinitionRequestQueryArgs']):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="responseFormat")
    def response_format(self) -> pulumi.Input[str]:
        """
        Widget response format. Valid values are `event_list`.
        """
        return pulumi.get(self, "response_format")

    @response_format.setter
    def response_format(self, value: pulumi.Input[str]):
        pulumi.set(self, "response_format", value)


@pulumi.input_type
class DashboardWidgetListStreamDefinitionRequestColumnArgs:
    def __init__(__self__, *,
                 field: pulumi.Input[str],
                 width: pulumi.Input[str]):
        """
        :param pulumi.Input[str] field: Widget column field.
        :param pulumi.Input[str] width: Widget column width. Valid values are `auto`, `compact`, `full`.
        """
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter
    def field(self) -> pulumi.Input[str]:
        """
        Widget column field.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: pulumi.Input[str]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def width(self) -> pulumi.Input[str]:
        """
        Widget column width. Valid values are `auto`, `compact`, `full`.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: pulumi.Input[str]):
        pulumi.set(self, "width", value)


@pulumi.input_type
class DashboardWidgetListStreamDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 event_size: Optional[pulumi.Input[str]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 query_string: Optional[pulumi.Input[str]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetListStreamDefinitionRequestQuerySortArgs']] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] event_size: The size to use to display an event. Valid values are `s`, `l`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input[str] query_string: Widget query.
        :param pulumi.Input['DashboardWidgetListStreamDefinitionRequestQuerySortArgs'] sort: The options for sorting group by results.
        :param pulumi.Input[str] storage: Storage location (private beta).
        """
        pulumi.set(__self__, "data_source", data_source)
        if event_size is not None:
            pulumi.set(__self__, "event_size", event_size)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if query_string is not None:
            pulumi.set(__self__, "query_string", query_string)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter(name="eventSize")
    def event_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size to use to display an event. Valid values are `s`, `l`.
        """
        return pulumi.get(self, "event_size")

    @event_size.setter
    def event_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_size", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> Optional[pulumi.Input[str]]:
        """
        Widget query.
        """
        return pulumi.get(self, "query_string")

    @query_string.setter
    def query_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_string", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetListStreamDefinitionRequestQuerySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetListStreamDefinitionRequestQuerySortArgs']]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage location (private beta).
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class DashboardWidgetListStreamDefinitionRequestQuerySortArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[str],
                 order: pulumi.Input[str]):
        """
        :param pulumi.Input[str] column: The facet path for the column.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[str]:
        """
        The facet path for the column.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[str]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetLogStreamDefinitionArgs:
    def __init__(__self__, *,
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 message_display: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 show_date_column: Optional[pulumi.Input[bool]] = None,
                 show_message_column: Optional[pulumi.Input[bool]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetLogStreamDefinitionSortArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] columns: Column properties used by the front end for display.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[str] message_display: The number of log lines to display. Valid values are `inline`, `expanded-md`, `expanded-lg`.
        :param pulumi.Input[bool] show_date_column: If the date column should be displayed.
        :param pulumi.Input[bool] show_message_column: If the message column should be displayed.
        :param pulumi.Input['DashboardWidgetLogStreamDefinitionSortArgs'] sort: The options for sorting group by results.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if message_display is not None:
            pulumi.set(__self__, "message_display", message_display)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if show_date_column is not None:
            pulumi.set(__self__, "show_date_column", show_date_column)
        if show_message_column is not None:
            pulumi.set(__self__, "show_message_column", show_message_column)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Column properties used by the front end for display.
        """
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter(name="messageDisplay")
    def message_display(self) -> Optional[pulumi.Input[str]]:
        """
        The number of log lines to display. Valid values are `inline`, `expanded-md`, `expanded-lg`.
        """
        return pulumi.get(self, "message_display")

    @message_display.setter
    def message_display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_display", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="showDateColumn")
    def show_date_column(self) -> Optional[pulumi.Input[bool]]:
        """
        If the date column should be displayed.
        """
        return pulumi.get(self, "show_date_column")

    @show_date_column.setter
    def show_date_column(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_date_column", value)

    @property
    @pulumi.getter(name="showMessageColumn")
    def show_message_column(self) -> Optional[pulumi.Input[bool]]:
        """
        If the message column should be displayed.
        """
        return pulumi.get(self, "show_message_column")

    @show_message_column.setter
    def show_message_column(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_message_column", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetLogStreamDefinitionSortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetLogStreamDefinitionSortArgs']]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetLogStreamDefinitionSortArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[str],
                 order: pulumi.Input[str]):
        """
        :param pulumi.Input[str] column: The facet path for the column.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[str]:
        """
        The facet path for the column.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[str]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetManageStatusDefinitionArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 color_preference: Optional[pulumi.Input[str]] = None,
                 display_format: Optional[pulumi.Input[str]] = None,
                 hide_zero_counts: Optional[pulumi.Input[bool]] = None,
                 show_last_triggered: Optional[pulumi.Input[bool]] = None,
                 show_priority: Optional[pulumi.Input[bool]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 summary_type: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] color_preference: Whether to colorize text or background. Valid values are `background`, `text`.
        :param pulumi.Input[str] display_format: The display setting to use. Valid values are `counts`, `countsAndList`, `list`.
        :param pulumi.Input[bool] hide_zero_counts: A Boolean indicating whether to hide empty categories.
        :param pulumi.Input[bool] show_last_triggered: A Boolean indicating whether to show when monitors/groups last triggered.
        :param pulumi.Input[bool] show_priority: Whether to show the priorities column.
        :param pulumi.Input[str] sort: The options for sorting group by results.
        :param pulumi.Input[str] summary_type: The summary type to use. Valid values are `monitors`, `groups`, `combined`.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "query", query)
        if color_preference is not None:
            pulumi.set(__self__, "color_preference", color_preference)
        if display_format is not None:
            pulumi.set(__self__, "display_format", display_format)
        if hide_zero_counts is not None:
            pulumi.set(__self__, "hide_zero_counts", hide_zero_counts)
        if show_last_triggered is not None:
            pulumi.set(__self__, "show_last_triggered", show_last_triggered)
        if show_priority is not None:
            pulumi.set(__self__, "show_priority", show_priority)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if summary_type is not None:
            pulumi.set(__self__, "summary_type", summary_type)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="colorPreference")
    def color_preference(self) -> Optional[pulumi.Input[str]]:
        """
        Whether to colorize text or background. Valid values are `background`, `text`.
        """
        return pulumi.get(self, "color_preference")

    @color_preference.setter
    def color_preference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_preference", value)

    @property
    @pulumi.getter(name="displayFormat")
    def display_format(self) -> Optional[pulumi.Input[str]]:
        """
        The display setting to use. Valid values are `counts`, `countsAndList`, `list`.
        """
        return pulumi.get(self, "display_format")

    @display_format.setter
    def display_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_format", value)

    @property
    @pulumi.getter(name="hideZeroCounts")
    def hide_zero_counts(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean indicating whether to hide empty categories.
        """
        return pulumi.get(self, "hide_zero_counts")

    @hide_zero_counts.setter
    def hide_zero_counts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_zero_counts", value)

    @property
    @pulumi.getter(name="showLastTriggered")
    def show_last_triggered(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean indicating whether to show when monitors/groups last triggered.
        """
        return pulumi.get(self, "show_last_triggered")

    @show_last_triggered.setter
    def show_last_triggered(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_last_triggered", value)

    @property
    @pulumi.getter(name="showPriority")
    def show_priority(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to show the priorities column.
        """
        return pulumi.get(self, "show_priority")

    @show_priority.setter
    def show_priority(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_priority", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter(name="summaryType")
    def summary_type(self) -> Optional[pulumi.Input[str]]:
        """
        The summary type to use. Valid values are `monitors`, `groups`, `combined`.
        """
        return pulumi.get(self, "summary_type")

    @summary_type.setter
    def summary_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary_type", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetNoteDefinitionArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 background_color: Optional[pulumi.Input[str]] = None,
                 font_size: Optional[pulumi.Input[str]] = None,
                 has_padding: Optional[pulumi.Input[bool]] = None,
                 show_tick: Optional[pulumi.Input[bool]] = None,
                 text_align: Optional[pulumi.Input[str]] = None,
                 tick_edge: Optional[pulumi.Input[str]] = None,
                 tick_pos: Optional[pulumi.Input[str]] = None,
                 vertical_align: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content: The content of the note.
        :param pulumi.Input[str] background_color: The background color of the group title, options: `vivid_blue`, `vivid_purple`, `vivid_pink`, `vivid_orange`, `vivid_yellow`, `vivid_green`, `blue`, `purple`, `pink`, `orange`, `yellow`, `green`, `gray` or `white`
        :param pulumi.Input[str] font_size: The size of the text in the widget.
        :param pulumi.Input[bool] has_padding: Whether to add padding or not.
        :param pulumi.Input[bool] show_tick: Whether to show a tick or not.
        :param pulumi.Input[str] text_align: The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] tick_edge: When `tick = true`, a string indicating on which side of the widget the tick should be displayed. Valid values are `bottom`, `left`, `right`, `top`.
        :param pulumi.Input[str] tick_pos: When `tick = true`, a string with a percent sign indicating the position of the tick, for example: `tick_pos = "50%"` is centered alignment.
        :param pulumi.Input[str] vertical_align: The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
        """
        pulumi.set(__self__, "content", content)
        if background_color is not None:
            pulumi.set(__self__, "background_color", background_color)
        if font_size is not None:
            pulumi.set(__self__, "font_size", font_size)
        if has_padding is not None:
            pulumi.set(__self__, "has_padding", has_padding)
        if show_tick is not None:
            pulumi.set(__self__, "show_tick", show_tick)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)
        if tick_edge is not None:
            pulumi.set(__self__, "tick_edge", tick_edge)
        if tick_pos is not None:
            pulumi.set(__self__, "tick_pos", tick_pos)
        if vertical_align is not None:
            pulumi.set(__self__, "vertical_align", vertical_align)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The content of the note.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="backgroundColor")
    def background_color(self) -> Optional[pulumi.Input[str]]:
        """
        The background color of the group title, options: `vivid_blue`, `vivid_purple`, `vivid_pink`, `vivid_orange`, `vivid_yellow`, `vivid_green`, `blue`, `purple`, `pink`, `orange`, `yellow`, `green`, `gray` or `white`
        """
        return pulumi.get(self, "background_color")

    @background_color.setter
    def background_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "background_color", value)

    @property
    @pulumi.getter(name="fontSize")
    def font_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the text in the widget.
        """
        return pulumi.get(self, "font_size")

    @font_size.setter
    def font_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "font_size", value)

    @property
    @pulumi.getter(name="hasPadding")
    def has_padding(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to add padding or not.
        """
        return pulumi.get(self, "has_padding")

    @has_padding.setter
    def has_padding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "has_padding", value)

    @property
    @pulumi.getter(name="showTick")
    def show_tick(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to show a tick or not.
        """
        return pulumi.get(self, "show_tick")

    @show_tick.setter
    def show_tick(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_tick", value)

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "text_align")

    @text_align.setter
    def text_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_align", value)

    @property
    @pulumi.getter(name="tickEdge")
    def tick_edge(self) -> Optional[pulumi.Input[str]]:
        """
        When `tick = true`, a string indicating on which side of the widget the tick should be displayed. Valid values are `bottom`, `left`, `right`, `top`.
        """
        return pulumi.get(self, "tick_edge")

    @tick_edge.setter
    def tick_edge(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tick_edge", value)

    @property
    @pulumi.getter(name="tickPos")
    def tick_pos(self) -> Optional[pulumi.Input[str]]:
        """
        When `tick = true`, a string with a percent sign indicating the position of the tick, for example: `tick_pos = "50%"` is centered alignment.
        """
        return pulumi.get(self, "tick_pos")

    @tick_pos.setter
    def tick_pos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tick_pos", value)

    @property
    @pulumi.getter(name="verticalAlign")
    def vertical_align(self) -> Optional[pulumi.Input[str]]:
        """
        The vertical alignment for the widget. Valid values are `center`, `top`, `bottom`.
        """
        return pulumi.get(self, "vertical_align")

    @vertical_align.setter
    def vertical_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "vertical_align", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionCustomLinkArgs']]]] = None,
                 has_search_bar: Optional[pulumi.Input[str]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[str] has_search_bar: Controls the display of the search bar. Valid values are `always`, `never`, `auto`.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if has_search_bar is not None:
            pulumi.set(__self__, "has_search_bar", has_search_bar)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter(name="hasSearchBar")
    def has_search_bar(self) -> Optional[pulumi.Input[str]]:
        """
        Controls the display of the search bar. Valid values are `always`, `never`, `auto`.
        """
        return pulumi.get(self, "has_search_bar")

    @has_search_bar.setter
    def has_search_bar(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "has_search_bar", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestArgs:
    def __init__(__self__, *,
                 aggregator: Optional[pulumi.Input[str]] = None,
                 alias: Optional[pulumi.Input[str]] = None,
                 apm_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryArgs']] = None,
                 apm_stats_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmStatsQueryArgs']] = None,
                 cell_display_modes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestConditionalFormatArgs']]]] = None,
                 formulas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestFormulaArgs']]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryArgs']] = None,
                 order: Optional[pulumi.Input[str]] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryArgs']]]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryArgs']] = None):
        """
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cell_display_modes: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryArgs'] security_query: The query to use for this widget.
        """
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if apm_stats_query is not None:
            pulumi.set(__self__, "apm_stats_query", apm_stats_query)
        if cell_display_modes is not None:
            pulumi.set(__self__, "cell_display_modes", cell_display_modes)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="apmStatsQuery")
    def apm_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmStatsQueryArgs']]:
        return pulumi.get(self, "apm_stats_query")

    @apm_stats_query.setter
    def apm_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmStatsQueryArgs']]):
        pulumi.set(self, "apm_stats_query", value)

    @property
    @pulumi.getter(name="cellDisplayModes")
    def cell_display_modes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_modes")

    @cell_display_modes.setter
    def cell_display_modes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cell_display_modes", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestFormulaArgs']]]]:
        return pulumi.get(self, "formulas")

    @formulas.setter
    def formulas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestFormulaArgs']]]]):
        pulumi.set(self, "formulas", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryArgs']]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestApmStatsQueryArgs:
    def __init__(__self__, *,
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 primary_tag: pulumi.Input[str],
                 row_type: pulumi.Input[str],
                 service: pulumi.Input[str],
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs']]]] = None,
                 resource: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] primary_tag: The organization's host group name and value.
        :param pulumi.Input[str] row_type: The level of detail for the request. Valid values are `service`, `resource`, `span`.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs']]] columns: Column properties used by the front end for display.
        :param pulumi.Input[str] resource: The resource name.
        """
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_tag", primary_tag)
        pulumi.set(__self__, "row_type", row_type)
        pulumi.set(__self__, "service", service)
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryTag")
    def primary_tag(self) -> pulumi.Input[str]:
        """
        The organization's host group name and value.
        """
        return pulumi.get(self, "primary_tag")

    @primary_tag.setter
    def primary_tag(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary_tag", value)

    @property
    @pulumi.getter(name="rowType")
    def row_type(self) -> pulumi.Input[str]:
        """
        The level of detail for the request. Valid values are `service`, `resource`, `span`.
        """
        return pulumi.get(self, "row_type")

    @row_type.setter
    def row_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "row_type", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs']]]]:
        """
        Column properties used by the front end for display.
        """
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs']]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        """
        The resource name.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestApmStatsQueryColumnArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input[str] cell_display_mode: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "name", name)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestFormulaArgs:
    def __init__(__self__, *,
                 formula_expression: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestFormulaConditionalFormatArgs']]]] = None,
                 limit: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestFormulaLimitArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestFormulaStyleArgs']] = None):
        """
        :param pulumi.Input[str] formula_expression: A string expression built from queries, formulas, and functions.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input[str] cell_display_mode: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestFormulaConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestFormulaLimitArgs'] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestFormulaStyleArgs'] style: Styling options for widget formulas.
        """
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> pulumi.Input[str]:
        """
        A string expression built from queries, formulas, and functions.
        """
        return pulumi.get(self, "formula_expression")

    @formula_expression.setter
    def formula_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "formula_expression", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestFormulaConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestFormulaConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestFormulaLimitArgs']]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestFormulaLimitArgs']]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestFormulaStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestFormulaStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestFormulaConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestFormulaLimitArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] count: The number of results to return
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of results to return
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestFormulaStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None,
                 palette_index: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[int] palette_index: Index specifying which color to use within the palette.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_index is not None:
            pulumi.set(__self__, "palette_index", palette_index)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteIndex")
    def palette_index(self) -> Optional[pulumi.Input[int]]:
        """
        Index specifying which color to use within the palette.
        """
        return pulumi.get(self, "palette_index")

    @palette_index.setter
    def palette_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "palette_index", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryArgs']] = None,
                 apm_resource_stats_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryArgs']] = None,
                 event_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryEventQueryArgs']] = None,
                 metric_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryMetricQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryProcessQueryArgs']] = None,
                 slo_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQuerySloQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryArgs'] apm_dependency_stats_query: The APM Dependency Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryArgs'] apm_resource_stats_query: The APM Resource Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryEventQueryArgs'] event_query: A timeseries formula and functions events query.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryMetricQueryArgs'] metric_query: A timeseries formula and functions metrics query.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQuerySloQueryArgs'] slo_query: The slo query using formulas and functions.
        """
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if slo_query is not None:
            pulumi.set(__self__, "slo_query", slo_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryArgs']]:
        """
        The APM Dependency Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_dependency_stats_query")

    @apm_dependency_stats_query.setter
    def apm_dependency_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryArgs']]):
        pulumi.set(self, "apm_dependency_stats_query", value)

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryArgs']]:
        """
        The APM Resource Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_resource_stats_query")

    @apm_resource_stats_query.setter
    def apm_resource_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryArgs']]):
        pulumi.set(self, "apm_resource_stats_query", value)

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryEventQueryArgs']]:
        """
        A timeseries formula and functions events query.
        """
        return pulumi.get(self, "event_query")

    @event_query.setter
    def event_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryEventQueryArgs']]):
        pulumi.set(self, "event_query", value)

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryMetricQueryArgs']]:
        """
        A timeseries formula and functions metrics query.
        """
        return pulumi.get(self, "metric_query")

    @metric_query.setter
    def metric_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryMetricQueryArgs']]):
        pulumi.set(self, "metric_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter(name="sloQuery")
    def slo_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQuerySloQueryArgs']]:
        """
        The slo query using formulas and functions.
        """
        return pulumi.get(self, "slo_query")

    @slo_query.setter
    def slo_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQuerySloQueryArgs']]):
        pulumi.set(self, "slo_query", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestQueryApmDependencyStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 operation_name: pulumi.Input[str],
                 resource_name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 is_upstream: Optional[pulumi.Input[bool]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] resource_name: APM resource.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[bool] is_upstream: Determines whether stats for upstream or downstream dependencies should be queried.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> pulumi.Input[str]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether stats for upstream or downstream dependencies should be queried.
        """
        return pulumi.get(self, "is_upstream")

    @is_upstream.setter
    def is_upstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_upstream", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestQueryApmResourceStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operation_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        :param pulumi.Input[str] resource_name: APM resource.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestQueryEventQueryArgs:
    def __init__(__self__, *,
                 computes: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryEventQueryComputeArgs']]],
                 data_source: pulumi.Input[str],
                 name: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupByArgs']]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryEventQuerySearchArgs']] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryEventQueryComputeArgs']]] computes: The compute options.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryEventQuerySearchArgs'] search: The search options.
        :param pulumi.Input[str] storage: Storage location (private beta).
        """
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def computes(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryEventQueryComputeArgs']]]:
        """
        The compute options.
        """
        return pulumi.get(self, "computes")

    @computes.setter
    def computes(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryEventQueryComputeArgs']]]):
        pulumi.set(self, "computes", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryEventQuerySearchArgs']]:
        """
        The search options.
        """
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryEventQuerySearchArgs']]):
        pulumi.set(self, "search", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage location (private beta).
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestQueryEventQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 interval: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortArgs'] sort: The options for sorting group by results.
        """
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestQueryEventQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 metric: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestQueryEventQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestQueryMetricQueryArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 data_source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[str]]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestQueryProcessQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 metric: pulumi.Input[str],
                 name: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 is_normalized_cpu: Optional[pulumi.Input[bool]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[bool] is_normalized_cpu: Whether to normalize the CPU percentages.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] sort: The options for sorting group by results.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_filters: An array of tags to filter by.
        :param pulumi.Input[str] text_filter: The text to use as a filter.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to normalize the CPU percentages.
        """
        return pulumi.get(self, "is_normalized_cpu")

    @is_normalized_cpu.setter
    def is_normalized_cpu(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_normalized_cpu", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of tags to filter by.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[pulumi.Input[str]]:
        """
        The text to use as a filter.
        """
        return pulumi.get(self, "text_filter")

    @text_filter.setter
    def text_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_filter", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestQuerySloQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 measure: pulumi.Input[str],
                 slo_id: pulumi.Input[str],
                 additional_query_filters: Optional[pulumi.Input[str]] = None,
                 group_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slo_query_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] measure: SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        :param pulumi.Input[str] slo_id: ID of an SLO to query.
        :param pulumi.Input[str] additional_query_filters: Additional filters applied to the SLO query.
        :param pulumi.Input[str] group_mode: Group mode to query measures. Valid values are `overall`, `components`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] slo_query_type: type of the SLO to query. Valid values are `metric`.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "measure", measure)
        pulumi.set(__self__, "slo_id", slo_id)
        if additional_query_filters is not None:
            pulumi.set(__self__, "additional_query_filters", additional_query_filters)
        if group_mode is not None:
            pulumi.set(__self__, "group_mode", group_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slo_query_type is not None:
            pulumi.set(__self__, "slo_query_type", slo_query_type)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def measure(self) -> pulumi.Input[str]:
        """
        SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        """
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure", value)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        """
        ID of an SLO to query.
        """
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="additionalQueryFilters")
    def additional_query_filters(self) -> Optional[pulumi.Input[str]]:
        """
        Additional filters applied to the SLO query.
        """
        return pulumi.get(self, "additional_query_filters")

    @additional_query_filters.setter
    def additional_query_filters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_query_filters", value)

    @property
    @pulumi.getter(name="groupMode")
    def group_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Group mode to query measures. Valid values are `overall`, `components`.
        """
        return pulumi.get(self, "group_mode")

    @group_mode.setter
    def group_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sloQueryType")
    def slo_query_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the SLO to query. Valid values are `metric`.
        """
        return pulumi.get(self, "slo_query_type")

    @slo_query_type.setter
    def slo_query_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slo_query_type", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetQueryTableDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionArgs:
    def __init__(__self__, *,
                 autoscale: Optional[pulumi.Input[bool]] = None,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionCustomLinkArgs']]]] = None,
                 custom_unit: Optional[pulumi.Input[str]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 precision: Optional[pulumi.Input[int]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestArgs']]]] = None,
                 text_align: Optional[pulumi.Input[str]] = None,
                 timeseries_background: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionTimeseriesBackgroundArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] autoscale: A Boolean indicating whether to automatically scale the tile.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[str] custom_unit: The unit for the value displayed in the widget.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[int] precision: The precision to use when displaying the value. Use `*` for maximum precision.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[str] text_align: The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionTimeseriesBackgroundArgs'] timeseries_background: Set a timeseries on the widget background.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        if autoscale is not None:
            pulumi.set(__self__, "autoscale", autoscale)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if custom_unit is not None:
            pulumi.set(__self__, "custom_unit", custom_unit)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if text_align is not None:
            pulumi.set(__self__, "text_align", text_align)
        if timeseries_background is not None:
            pulumi.set(__self__, "timeseries_background", timeseries_background)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def autoscale(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean indicating whether to automatically scale the tile.
        """
        return pulumi.get(self, "autoscale")

    @autoscale.setter
    def autoscale(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "autoscale", value)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter(name="customUnit")
    def custom_unit(self) -> Optional[pulumi.Input[str]]:
        """
        The unit for the value displayed in the widget.
        """
        return pulumi.get(self, "custom_unit")

    @custom_unit.setter
    def custom_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_unit", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def precision(self) -> Optional[pulumi.Input[int]]:
        """
        The precision to use when displaying the value. Use `*` for maximum precision.
        """
        return pulumi.get(self, "precision")

    @precision.setter
    def precision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "precision", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="textAlign")
    def text_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the text in the widget. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "text_align")

    @text_align.setter
    def text_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_align", value)

    @property
    @pulumi.getter(name="timeseriesBackground")
    def timeseries_background(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionTimeseriesBackgroundArgs']]:
        """
        Set a timeseries on the widget background.
        """
        return pulumi.get(self, "timeseries_background")

    @timeseries_background.setter
    def timeseries_background(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionTimeseriesBackgroundArgs']]):
        pulumi.set(self, "timeseries_background", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestArgs:
    def __init__(__self__, *,
                 aggregator: Optional[pulumi.Input[str]] = None,
                 apm_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryArgs']] = None,
                 audit_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestAuditQueryArgs']] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestConditionalFormatArgs']]]] = None,
                 formulas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestFormulaArgs']]]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryArgs']]]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryArgs']] = None):
        """
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestAuditQueryArgs'] audit_query: The query to use for this widget.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryArgs'] security_query: The query to use for this widget.
        """
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if audit_query is not None:
            pulumi.set(__self__, "audit_query", audit_query)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="auditQuery")
    def audit_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestAuditQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "audit_query")

    @audit_query.setter
    def audit_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestAuditQueryArgs']]):
        pulumi.set(self, "audit_query", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestFormulaArgs']]]]:
        return pulumi.get(self, "formulas")

    @formulas.setter
    def formulas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestFormulaArgs']]]]):
        pulumi.set(self, "formulas", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryArgs']]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestAuditQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestAuditQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestAuditQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestAuditQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestAuditQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestAuditQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestAuditQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestAuditQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestAuditQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestAuditQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestAuditQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestAuditQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestFormulaArgs:
    def __init__(__self__, *,
                 formula_expression: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs']]]] = None,
                 limit: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestFormulaLimitArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestFormulaStyleArgs']] = None):
        """
        :param pulumi.Input[str] formula_expression: A string expression built from queries, formulas, and functions.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input[str] cell_display_mode: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestFormulaLimitArgs'] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestFormulaStyleArgs'] style: Styling options for widget formulas.
        """
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> pulumi.Input[str]:
        """
        A string expression built from queries, formulas, and functions.
        """
        return pulumi.get(self, "formula_expression")

    @formula_expression.setter
    def formula_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "formula_expression", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestFormulaLimitArgs']]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestFormulaLimitArgs']]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestFormulaStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestFormulaStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestFormulaLimitArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] count: The number of results to return
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of results to return
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestFormulaStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None,
                 palette_index: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[int] palette_index: Index specifying which color to use within the palette.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_index is not None:
            pulumi.set(__self__, "palette_index", palette_index)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteIndex")
    def palette_index(self) -> Optional[pulumi.Input[int]]:
        """
        Index specifying which color to use within the palette.
        """
        return pulumi.get(self, "palette_index")

    @palette_index.setter
    def palette_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "palette_index", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryArgs']] = None,
                 apm_resource_stats_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryArgs']] = None,
                 event_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryEventQueryArgs']] = None,
                 metric_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryMetricQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryProcessQueryArgs']] = None,
                 slo_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQuerySloQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryArgs'] apm_dependency_stats_query: The APM Dependency Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryArgs'] apm_resource_stats_query: The APM Resource Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryEventQueryArgs'] event_query: A timeseries formula and functions events query.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryMetricQueryArgs'] metric_query: A timeseries formula and functions metrics query.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQuerySloQueryArgs'] slo_query: The slo query using formulas and functions.
        """
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if slo_query is not None:
            pulumi.set(__self__, "slo_query", slo_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryArgs']]:
        """
        The APM Dependency Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_dependency_stats_query")

    @apm_dependency_stats_query.setter
    def apm_dependency_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryArgs']]):
        pulumi.set(self, "apm_dependency_stats_query", value)

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryArgs']]:
        """
        The APM Resource Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_resource_stats_query")

    @apm_resource_stats_query.setter
    def apm_resource_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryArgs']]):
        pulumi.set(self, "apm_resource_stats_query", value)

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryEventQueryArgs']]:
        """
        A timeseries formula and functions events query.
        """
        return pulumi.get(self, "event_query")

    @event_query.setter
    def event_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryEventQueryArgs']]):
        pulumi.set(self, "event_query", value)

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryMetricQueryArgs']]:
        """
        A timeseries formula and functions metrics query.
        """
        return pulumi.get(self, "metric_query")

    @metric_query.setter
    def metric_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryMetricQueryArgs']]):
        pulumi.set(self, "metric_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter(name="sloQuery")
    def slo_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQuerySloQueryArgs']]:
        """
        The slo query using formulas and functions.
        """
        return pulumi.get(self, "slo_query")

    @slo_query.setter
    def slo_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQuerySloQueryArgs']]):
        pulumi.set(self, "slo_query", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestQueryApmDependencyStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 operation_name: pulumi.Input[str],
                 resource_name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 is_upstream: Optional[pulumi.Input[bool]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] resource_name: APM resource.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[bool] is_upstream: Determines whether stats for upstream or downstream dependencies should be queried.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> pulumi.Input[str]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether stats for upstream or downstream dependencies should be queried.
        """
        return pulumi.get(self, "is_upstream")

    @is_upstream.setter
    def is_upstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_upstream", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestQueryApmResourceStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operation_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        :param pulumi.Input[str] resource_name: APM resource.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestQueryEventQueryArgs:
    def __init__(__self__, *,
                 computes: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryEventQueryComputeArgs']]],
                 data_source: pulumi.Input[str],
                 name: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupByArgs']]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryEventQuerySearchArgs']] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryEventQueryComputeArgs']]] computes: The compute options.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryEventQuerySearchArgs'] search: The search options.
        :param pulumi.Input[str] storage: Storage location (private beta).
        """
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def computes(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryEventQueryComputeArgs']]]:
        """
        The compute options.
        """
        return pulumi.get(self, "computes")

    @computes.setter
    def computes(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryEventQueryComputeArgs']]]):
        pulumi.set(self, "computes", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryEventQuerySearchArgs']]:
        """
        The search options.
        """
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryEventQuerySearchArgs']]):
        pulumi.set(self, "search", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage location (private beta).
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestQueryEventQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 interval: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortArgs'] sort: The options for sorting group by results.
        """
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestQueryEventQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 metric: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestQueryEventQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestQueryMetricQueryArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 data_source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[str]]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestQueryProcessQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 metric: pulumi.Input[str],
                 name: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 is_normalized_cpu: Optional[pulumi.Input[bool]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[bool] is_normalized_cpu: Whether to normalize the CPU percentages.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] sort: The options for sorting group by results.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_filters: An array of tags to filter by.
        :param pulumi.Input[str] text_filter: The text to use as a filter.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to normalize the CPU percentages.
        """
        return pulumi.get(self, "is_normalized_cpu")

    @is_normalized_cpu.setter
    def is_normalized_cpu(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_normalized_cpu", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of tags to filter by.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[pulumi.Input[str]]:
        """
        The text to use as a filter.
        """
        return pulumi.get(self, "text_filter")

    @text_filter.setter
    def text_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_filter", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestQuerySloQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 measure: pulumi.Input[str],
                 slo_id: pulumi.Input[str],
                 additional_query_filters: Optional[pulumi.Input[str]] = None,
                 group_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slo_query_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] measure: SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        :param pulumi.Input[str] slo_id: ID of an SLO to query.
        :param pulumi.Input[str] additional_query_filters: Additional filters applied to the SLO query.
        :param pulumi.Input[str] group_mode: Group mode to query measures. Valid values are `overall`, `components`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] slo_query_type: type of the SLO to query. Valid values are `metric`.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "measure", measure)
        pulumi.set(__self__, "slo_id", slo_id)
        if additional_query_filters is not None:
            pulumi.set(__self__, "additional_query_filters", additional_query_filters)
        if group_mode is not None:
            pulumi.set(__self__, "group_mode", group_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slo_query_type is not None:
            pulumi.set(__self__, "slo_query_type", slo_query_type)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def measure(self) -> pulumi.Input[str]:
        """
        SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        """
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure", value)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        """
        ID of an SLO to query.
        """
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="additionalQueryFilters")
    def additional_query_filters(self) -> Optional[pulumi.Input[str]]:
        """
        Additional filters applied to the SLO query.
        """
        return pulumi.get(self, "additional_query_filters")

    @additional_query_filters.setter
    def additional_query_filters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_query_filters", value)

    @property
    @pulumi.getter(name="groupMode")
    def group_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Group mode to query measures. Valid values are `overall`, `components`.
        """
        return pulumi.get(self, "group_mode")

    @group_mode.setter
    def group_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sloQueryType")
    def slo_query_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the SLO to query. Valid values are `metric`.
        """
        return pulumi.get(self, "slo_query_type")

    @slo_query_type.setter
    def slo_query_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slo_query_type", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionTimeseriesBackgroundArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 yaxis: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionTimeseriesBackgroundYaxisArgs']] = None):
        """
        :param pulumi.Input[str] type: Whether the Timeseries is made using an area or bars. Valid values are `bars`, `area`.
        :param pulumi.Input['DashboardWidgetQueryValueDefinitionTimeseriesBackgroundYaxisArgs'] yaxis: A nested block describing the Y-Axis Controls. The structure of this block is described below.
        """
        pulumi.set(__self__, "type", type)
        if yaxis is not None:
            pulumi.set(__self__, "yaxis", yaxis)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Whether the Timeseries is made using an area or bars. Valid values are `bars`, `area`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def yaxis(self) -> Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionTimeseriesBackgroundYaxisArgs']]:
        """
        A nested block describing the Y-Axis Controls. The structure of this block is described below.
        """
        return pulumi.get(self, "yaxis")

    @yaxis.setter
    def yaxis(self, value: Optional[pulumi.Input['DashboardWidgetQueryValueDefinitionTimeseriesBackgroundYaxisArgs']]):
        pulumi.set(self, "yaxis", value)


@pulumi.input_type
class DashboardWidgetQueryValueDefinitionTimeseriesBackgroundYaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] include_zero: Always include zero or fit the axis to the data range.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] max: Specify the maximum value to show on the Y-axis.
        :param pulumi.Input[str] min: Specify the minimum value to show on the Y-axis.
        :param pulumi.Input[str] scale: Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        """
        Always include zero or fit the axis to the data range.
        """
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the maximum value to show on the Y-axis.
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the minimum value to show on the Y-axis.
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetRunWorkflowDefinitionArgs:
    def __init__(__self__, *,
                 workflow_id: pulumi.Input[str],
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetRunWorkflowDefinitionCustomLinkArgs']]]] = None,
                 inputs: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetRunWorkflowDefinitionInputArgs']]]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] workflow_id: Workflow ID
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetRunWorkflowDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetRunWorkflowDefinitionInputArgs']]] inputs: Array of workflow inputs to map to dashboard template variables.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "workflow_id", workflow_id)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if inputs is not None:
            pulumi.set(__self__, "inputs", inputs)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> pulumi.Input[str]:
        """
        Workflow ID
        """
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workflow_id", value)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetRunWorkflowDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetRunWorkflowDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def inputs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetRunWorkflowDefinitionInputArgs']]]]:
        """
        Array of workflow inputs to map to dashboard template variables.
        """
        return pulumi.get(self, "inputs")

    @inputs.setter
    def inputs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetRunWorkflowDefinitionInputArgs']]]]):
        pulumi.set(self, "inputs", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetRunWorkflowDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetRunWorkflowDefinitionInputArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 value: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionArgs:
    def __init__(__self__, *,
                 color_by_groups: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionCustomLinkArgs']]]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestArgs']] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None,
                 xaxis: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionXaxisArgs']] = None,
                 yaxis: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionYaxisArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] color_by_groups: List of groups used for colors.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestArgs'] request: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionXaxisArgs'] xaxis: A nested block describing the X-Axis Controls. Exactly one nested block is allowed using the structure below.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionYaxisArgs'] yaxis: A nested block describing the Y-Axis Controls. The structure of this block is described below.
        """
        if color_by_groups is not None:
            pulumi.set(__self__, "color_by_groups", color_by_groups)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if xaxis is not None:
            pulumi.set(__self__, "xaxis", xaxis)
        if yaxis is not None:
            pulumi.set(__self__, "yaxis", yaxis)

    @property
    @pulumi.getter(name="colorByGroups")
    def color_by_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of groups used for colors.
        """
        return pulumi.get(self, "color_by_groups")

    @color_by_groups.setter
    def color_by_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "color_by_groups", value)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestArgs']]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestArgs']]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)

    @property
    @pulumi.getter
    def xaxis(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionXaxisArgs']]:
        """
        A nested block describing the X-Axis Controls. Exactly one nested block is allowed using the structure below.
        """
        return pulumi.get(self, "xaxis")

    @xaxis.setter
    def xaxis(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionXaxisArgs']]):
        pulumi.set(self, "xaxis", value)

    @property
    @pulumi.getter
    def yaxis(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionYaxisArgs']]:
        """
        A nested block describing the Y-Axis Controls. The structure of this block is described below.
        """
        return pulumi.get(self, "yaxis")

    @yaxis.setter
    def yaxis(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionYaxisArgs']]):
        pulumi.set(self, "yaxis", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestArgs:
    def __init__(__self__, *,
                 scatterplot_tables: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableArgs']]]] = None,
                 xes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXArgs']]]] = None,
                 ys: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableArgs']]] scatterplot_tables: Scatterplot request containing formulas and functions.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXArgs']]] xes: The query used for the X-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYArgs']]] ys: The query used for the Y-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
        """
        if scatterplot_tables is not None:
            pulumi.set(__self__, "scatterplot_tables", scatterplot_tables)
        if xes is not None:
            pulumi.set(__self__, "xes", xes)
        if ys is not None:
            pulumi.set(__self__, "ys", ys)

    @property
    @pulumi.getter(name="scatterplotTables")
    def scatterplot_tables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableArgs']]]]:
        """
        Scatterplot request containing formulas and functions.
        """
        return pulumi.get(self, "scatterplot_tables")

    @scatterplot_tables.setter
    def scatterplot_tables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableArgs']]]]):
        pulumi.set(self, "scatterplot_tables", value)

    @property
    @pulumi.getter
    def xes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXArgs']]]]:
        """
        The query used for the X-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
        """
        return pulumi.get(self, "xes")

    @xes.setter
    def xes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXArgs']]]]):
        pulumi.set(self, "xes", value)

    @property
    @pulumi.getter
    def ys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYArgs']]]]:
        """
        The query used for the Y-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
        """
        return pulumi.get(self, "ys")

    @ys.setter
    def ys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYArgs']]]]):
        pulumi.set(self, "ys", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableArgs:
    def __init__(__self__, *,
                 formulas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableFormulaArgs']]]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryArgs']]]] = None):
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableFormulaArgs']]]]:
        return pulumi.get(self, "formulas")

    @formulas.setter
    def formulas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableFormulaArgs']]]]):
        pulumi.set(self, "formulas", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryArgs']]]]):
        pulumi.set(self, "queries", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableFormulaArgs:
    def __init__(__self__, *,
                 dimension: pulumi.Input[str],
                 formula_expression: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] dimension: Dimension of the Scatterplot. Valid values are `x`, `y`, `radius`, `color`.
        :param pulumi.Input[str] formula_expression: A string expression built from queries, formulas, and functions.
        :param pulumi.Input[str] alias: An expression alias.
        """
        pulumi.set(__self__, "dimension", dimension)
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)

    @property
    @pulumi.getter
    def dimension(self) -> pulumi.Input[str]:
        """
        Dimension of the Scatterplot. Valid values are `x`, `y`, `radius`, `color`.
        """
        return pulumi.get(self, "dimension")

    @dimension.setter
    def dimension(self, value: pulumi.Input[str]):
        pulumi.set(self, "dimension", value)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> pulumi.Input[str]:
        """
        A string expression built from queries, formulas, and functions.
        """
        return pulumi.get(self, "formula_expression")

    @formula_expression.setter
    def formula_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "formula_expression", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryArgs:
    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryArgs']] = None,
                 apm_resource_stats_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryArgs']] = None,
                 event_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryArgs']] = None,
                 metric_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryArgs']] = None,
                 slo_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQuerySloQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryArgs'] apm_dependency_stats_query: The APM Dependency Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryArgs'] apm_resource_stats_query: The APM Resource Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryArgs'] event_query: A timeseries formula and functions events query.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryArgs'] metric_query: A timeseries formula and functions metrics query.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQuerySloQueryArgs'] slo_query: The slo query using formulas and functions.
        """
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if slo_query is not None:
            pulumi.set(__self__, "slo_query", slo_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryArgs']]:
        """
        The APM Dependency Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_dependency_stats_query")

    @apm_dependency_stats_query.setter
    def apm_dependency_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryArgs']]):
        pulumi.set(self, "apm_dependency_stats_query", value)

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryArgs']]:
        """
        The APM Resource Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_resource_stats_query")

    @apm_resource_stats_query.setter
    def apm_resource_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryArgs']]):
        pulumi.set(self, "apm_resource_stats_query", value)

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryArgs']]:
        """
        A timeseries formula and functions events query.
        """
        return pulumi.get(self, "event_query")

    @event_query.setter
    def event_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryArgs']]):
        pulumi.set(self, "event_query", value)

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryArgs']]:
        """
        A timeseries formula and functions metrics query.
        """
        return pulumi.get(self, "metric_query")

    @metric_query.setter
    def metric_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryArgs']]):
        pulumi.set(self, "metric_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter(name="sloQuery")
    def slo_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQuerySloQueryArgs']]:
        """
        The slo query using formulas and functions.
        """
        return pulumi.get(self, "slo_query")

    @slo_query.setter
    def slo_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQuerySloQueryArgs']]):
        pulumi.set(self, "slo_query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmDependencyStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 operation_name: pulumi.Input[str],
                 resource_name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 is_upstream: Optional[pulumi.Input[bool]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] resource_name: APM resource.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[bool] is_upstream: Determines whether stats for upstream or downstream dependencies should be queried.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> pulumi.Input[str]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether stats for upstream or downstream dependencies should be queried.
        """
        return pulumi.get(self, "is_upstream")

    @is_upstream.setter
    def is_upstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_upstream", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryApmResourceStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operation_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        :param pulumi.Input[str] resource_name: APM resource.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryArgs:
    def __init__(__self__, *,
                 computes: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryComputeArgs']]],
                 data_source: pulumi.Input[str],
                 name: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupByArgs']]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchArgs']] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryComputeArgs']]] computes: The compute options.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchArgs'] search: The search options.
        :param pulumi.Input[str] storage: Storage location (private beta).
        """
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def computes(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryComputeArgs']]]:
        """
        The compute options.
        """
        return pulumi.get(self, "computes")

    @computes.setter
    def computes(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryComputeArgs']]]):
        pulumi.set(self, "computes", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchArgs']]:
        """
        The search options.
        """
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchArgs']]):
        pulumi.set(self, "search", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage location (private beta).
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 interval: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortArgs'] sort: The options for sorting group by results.
        """
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 metric: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryEventQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryMetricQueryArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 data_source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[str]]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQueryProcessQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 metric: pulumi.Input[str],
                 name: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 is_normalized_cpu: Optional[pulumi.Input[bool]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[bool] is_normalized_cpu: Whether to normalize the CPU percentages.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] sort: The options for sorting group by results.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_filters: An array of tags to filter by.
        :param pulumi.Input[str] text_filter: The text to use as a filter.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to normalize the CPU percentages.
        """
        return pulumi.get(self, "is_normalized_cpu")

    @is_normalized_cpu.setter
    def is_normalized_cpu(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_normalized_cpu", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of tags to filter by.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[pulumi.Input[str]]:
        """
        The text to use as a filter.
        """
        return pulumi.get(self, "text_filter")

    @text_filter.setter
    def text_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_filter", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestScatterplotTableQuerySloQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 measure: pulumi.Input[str],
                 slo_id: pulumi.Input[str],
                 additional_query_filters: Optional[pulumi.Input[str]] = None,
                 group_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slo_query_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] measure: SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        :param pulumi.Input[str] slo_id: ID of an SLO to query.
        :param pulumi.Input[str] additional_query_filters: Additional filters applied to the SLO query.
        :param pulumi.Input[str] group_mode: Group mode to query measures. Valid values are `overall`, `components`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] slo_query_type: type of the SLO to query. Valid values are `metric`.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "measure", measure)
        pulumi.set(__self__, "slo_id", slo_id)
        if additional_query_filters is not None:
            pulumi.set(__self__, "additional_query_filters", additional_query_filters)
        if group_mode is not None:
            pulumi.set(__self__, "group_mode", group_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slo_query_type is not None:
            pulumi.set(__self__, "slo_query_type", slo_query_type)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def measure(self) -> pulumi.Input[str]:
        """
        SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        """
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure", value)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        """
        ID of an SLO to query.
        """
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="additionalQueryFilters")
    def additional_query_filters(self) -> Optional[pulumi.Input[str]]:
        """
        Additional filters applied to the SLO query.
        """
        return pulumi.get(self, "additional_query_filters")

    @additional_query_filters.setter
    def additional_query_filters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_query_filters", value)

    @property
    @pulumi.getter(name="groupMode")
    def group_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Group mode to query measures. Valid values are `overall`, `components`.
        """
        return pulumi.get(self, "group_mode")

    @group_mode.setter
    def group_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sloQueryType")
    def slo_query_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the SLO to query. Valid values are `metric`.
        """
        return pulumi.get(self, "slo_query_type")

    @slo_query_type.setter
    def slo_query_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slo_query_type", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXArgs:
    def __init__(__self__, *,
                 aggregator: Optional[pulumi.Input[str]] = None,
                 apm_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryArgs']] = None):
        """
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryArgs'] security_query: The query to use for this widget.
        """
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestXSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYArgs:
    def __init__(__self__, *,
                 aggregator: Optional[pulumi.Input[str]] = None,
                 apm_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryArgs']] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryArgs']] = None):
        """
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryArgs'] security_query: The query to use for this widget.
        """
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionRequestYSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionXaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] include_zero: Always include zero or fit the axis to the data range.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] max: Specify the maximum value to show on the Y-axis.
        :param pulumi.Input[str] min: Specify the minimum value to show on the Y-axis.
        :param pulumi.Input[str] scale: Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        """
        Always include zero or fit the axis to the data range.
        """
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the maximum value to show on the Y-axis.
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the minimum value to show on the Y-axis.
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetScatterplotDefinitionYaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] include_zero: Always include zero or fit the axis to the data range.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] max: Specify the maximum value to show on the Y-axis.
        :param pulumi.Input[str] min: Specify the minimum value to show on the Y-axis.
        :param pulumi.Input[str] scale: Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        """
        Always include zero or fit the axis to the data range.
        """
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the maximum value to show on the Y-axis.
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the minimum value to show on the Y-axis.
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetServiceLevelObjectiveDefinitionArgs:
    def __init__(__self__, *,
                 slo_id: pulumi.Input[str],
                 time_windows: pulumi.Input[Sequence[pulumi.Input[str]]],
                 view_mode: pulumi.Input[str],
                 view_type: pulumi.Input[str],
                 additional_query_filters: Optional[pulumi.Input[str]] = None,
                 global_time_target: Optional[pulumi.Input[str]] = None,
                 show_error_budget: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] slo_id: ID of an SLO to query.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] time_windows: A list of time windows to display in the widget. Valid values are `7d`, `30d`, `90d`, `week_to_date`, `previous_week`, `month_to_date`, `previous_month`, `global_time`.
        :param pulumi.Input[str] view_mode: The view mode for the widget. Valid values are `overall`, `component`, `both`.
        :param pulumi.Input[str] view_type: The type of view to use when displaying the widget. Only `detail` is supported.
        :param pulumi.Input[str] additional_query_filters: Additional filters applied to the SLO query.
        :param pulumi.Input[str] global_time_target: The global time target of the widget.
        :param pulumi.Input[bool] show_error_budget: Whether to show the error budget or not.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "slo_id", slo_id)
        pulumi.set(__self__, "time_windows", time_windows)
        pulumi.set(__self__, "view_mode", view_mode)
        pulumi.set(__self__, "view_type", view_type)
        if additional_query_filters is not None:
            pulumi.set(__self__, "additional_query_filters", additional_query_filters)
        if global_time_target is not None:
            pulumi.set(__self__, "global_time_target", global_time_target)
        if show_error_budget is not None:
            pulumi.set(__self__, "show_error_budget", show_error_budget)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        """
        ID of an SLO to query.
        """
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of time windows to display in the widget. Valid values are `7d`, `30d`, `90d`, `week_to_date`, `previous_week`, `month_to_date`, `previous_month`, `global_time`.
        """
        return pulumi.get(self, "time_windows")

    @time_windows.setter
    def time_windows(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "time_windows", value)

    @property
    @pulumi.getter(name="viewMode")
    def view_mode(self) -> pulumi.Input[str]:
        """
        The view mode for the widget. Valid values are `overall`, `component`, `both`.
        """
        return pulumi.get(self, "view_mode")

    @view_mode.setter
    def view_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "view_mode", value)

    @property
    @pulumi.getter(name="viewType")
    def view_type(self) -> pulumi.Input[str]:
        """
        The type of view to use when displaying the widget. Only `detail` is supported.
        """
        return pulumi.get(self, "view_type")

    @view_type.setter
    def view_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "view_type", value)

    @property
    @pulumi.getter(name="additionalQueryFilters")
    def additional_query_filters(self) -> Optional[pulumi.Input[str]]:
        """
        Additional filters applied to the SLO query.
        """
        return pulumi.get(self, "additional_query_filters")

    @additional_query_filters.setter
    def additional_query_filters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_query_filters", value)

    @property
    @pulumi.getter(name="globalTimeTarget")
    def global_time_target(self) -> Optional[pulumi.Input[str]]:
        """
        The global time target of the widget.
        """
        return pulumi.get(self, "global_time_target")

    @global_time_target.setter
    def global_time_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "global_time_target", value)

    @property
    @pulumi.getter(name="showErrorBudget")
    def show_error_budget(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to show the error budget or not.
        """
        return pulumi.get(self, "show_error_budget")

    @show_error_budget.setter
    def show_error_budget(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_error_budget", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetServicemapDefinitionArgs:
    def __init__(__self__, *,
                 filters: pulumi.Input[Sequence[pulumi.Input[str]]],
                 service: pulumi.Input[str],
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetServicemapDefinitionCustomLinkArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filters: Your environment and primary tag (or `*` if enabled for your account).
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetServicemapDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "service", service)
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Your environment and primary tag (or `*` if enabled for your account).
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetServicemapDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetServicemapDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetServicemapDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetSloListDefinitionArgs:
    def __init__(__self__, *,
                 request: pulumi.Input['DashboardWidgetSloListDefinitionRequestArgs'],
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['DashboardWidgetSloListDefinitionRequestArgs'] request: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "request", request)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def request(self) -> pulumi.Input['DashboardWidgetSloListDefinitionRequestArgs']:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: pulumi.Input['DashboardWidgetSloListDefinitionRequestArgs']):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetSloListDefinitionRequestArgs:
    def __init__(__self__, *,
                 query: pulumi.Input['DashboardWidgetSloListDefinitionRequestQueryArgs'],
                 request_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] request_type: The request type for the SLO List request. Valid values are `slo_list`.
        """
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "request_type", request_type)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input['DashboardWidgetSloListDefinitionRequestQueryArgs']:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input['DashboardWidgetSloListDefinitionRequestQueryArgs']):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> pulumi.Input[str]:
        """
        The request type for the SLO List request. Valid values are `slo_list`.
        """
        return pulumi.get(self, "request_type")

    @request_type.setter
    def request_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "request_type", value)


@pulumi.input_type
class DashboardWidgetSloListDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 query_string: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetSloListDefinitionRequestQuerySortArgs']] = None):
        """
        :param pulumi.Input[str] query_string: Widget query.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetSloListDefinitionRequestQuerySortArgs'] sort: The options for sorting group by results.
        """
        pulumi.set(__self__, "query_string", query_string)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter(name="queryString")
    def query_string(self) -> pulumi.Input[str]:
        """
        Widget query.
        """
        return pulumi.get(self, "query_string")

    @query_string.setter
    def query_string(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_string", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetSloListDefinitionRequestQuerySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetSloListDefinitionRequestQuerySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetSloListDefinitionRequestQuerySortArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[str],
                 order: pulumi.Input[str]):
        """
        :param pulumi.Input[str] column: The facet path for the column.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[str]:
        """
        The facet path for the column.
        """
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[str]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionCustomLinkArgs']]]] = None,
                 hide_total: Optional[pulumi.Input[bool]] = None,
                 legend_inline: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionLegendInlineArgs']] = None,
                 legend_table: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionLegendTableArgs']] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[bool] hide_total: Whether or not to show the total value in the widget.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionLegendInlineArgs'] legend_inline: Used to configure the inline legend. Cannot be used in conjunction with legend*table.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionLegendTableArgs'] legend_table: Used to configure the table legend. Cannot be used in conjunction with legend*inline.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if hide_total is not None:
            pulumi.set(__self__, "hide_total", hide_total)
        if legend_inline is not None:
            pulumi.set(__self__, "legend_inline", legend_inline)
        if legend_table is not None:
            pulumi.set(__self__, "legend_table", legend_table)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter(name="hideTotal")
    def hide_total(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to show the total value in the widget.
        """
        return pulumi.get(self, "hide_total")

    @hide_total.setter
    def hide_total(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_total", value)

    @property
    @pulumi.getter(name="legendInline")
    def legend_inline(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionLegendInlineArgs']]:
        """
        Used to configure the inline legend. Cannot be used in conjunction with legend*table.
        """
        return pulumi.get(self, "legend_inline")

    @legend_inline.setter
    def legend_inline(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionLegendInlineArgs']]):
        pulumi.set(self, "legend_inline", value)

    @property
    @pulumi.getter(name="legendTable")
    def legend_table(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionLegendTableArgs']]:
        """
        Used to configure the table legend. Cannot be used in conjunction with legend*inline.
        """
        return pulumi.get(self, "legend_table")

    @legend_table.setter
    def legend_table(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionLegendTableArgs']]):
        pulumi.set(self, "legend_table", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionLegendInlineArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 hide_percent: Optional[pulumi.Input[bool]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Whether the Timeseries is made using an area or bars. Valid values are `bars`, `area`.
        :param pulumi.Input[bool] hide_percent: Whether to hide the percentages of the groups.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        """
        pulumi.set(__self__, "type", type)
        if hide_percent is not None:
            pulumi.set(__self__, "hide_percent", hide_percent)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Whether the Timeseries is made using an area or bars. Valid values are `bars`, `area`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="hidePercent")
    def hide_percent(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to hide the percentages of the groups.
        """
        return pulumi.get(self, "hide_percent")

    @hide_percent.setter
    def hide_percent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_percent", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionLegendTableArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] type: Whether the Timeseries is made using an area or bars. Valid values are `bars`, `area`.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Whether the Timeseries is made using an area or bars. Valid values are `bars`, `area`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestApmQueryArgs']] = None,
                 audit_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestAuditQueryArgs']] = None,
                 formulas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestFormulaArgs']]]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestLogQueryArgs']] = None,
                 network_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestNetworkQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryArgs']]]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestSecurityQueryArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestStyleArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestAuditQueryArgs'] audit_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestNetworkQueryArgs'] network_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestSecurityQueryArgs'] security_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestStyleArgs'] style: Styling options for widget formulas.
        """
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if audit_query is not None:
            pulumi.set(__self__, "audit_query", audit_query)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if network_query is not None:
            pulumi.set(__self__, "network_query", network_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="auditQuery")
    def audit_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestAuditQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "audit_query")

    @audit_query.setter
    def audit_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestAuditQueryArgs']]):
        pulumi.set(self, "audit_query", value)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestFormulaArgs']]]]:
        return pulumi.get(self, "formulas")

    @formulas.setter
    def formulas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestFormulaArgs']]]]):
        pulumi.set(self, "formulas", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="networkQuery")
    def network_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestNetworkQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "network_query")

    @network_query.setter
    def network_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestNetworkQueryArgs']]):
        pulumi.set(self, "network_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryArgs']]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestAuditQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestAuditQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestAuditQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestAuditQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestAuditQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestAuditQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestAuditQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestAuditQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestAuditQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestAuditQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestAuditQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestAuditQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestAuditQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestAuditQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestAuditQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestAuditQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestAuditQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestFormulaArgs:
    def __init__(__self__, *,
                 formula_expression: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestFormulaConditionalFormatArgs']]]] = None,
                 limit: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestFormulaLimitArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestFormulaStyleArgs']] = None):
        """
        :param pulumi.Input[str] formula_expression: A string expression built from queries, formulas, and functions.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input[str] cell_display_mode: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestFormulaConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestFormulaLimitArgs'] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestFormulaStyleArgs'] style: Styling options for widget formulas.
        """
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> pulumi.Input[str]:
        """
        A string expression built from queries, formulas, and functions.
        """
        return pulumi.get(self, "formula_expression")

    @formula_expression.setter
    def formula_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "formula_expression", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestFormulaConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestFormulaConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestFormulaLimitArgs']]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestFormulaLimitArgs']]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestFormulaStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestFormulaStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestFormulaConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestFormulaLimitArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] count: The number of results to return
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of results to return
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestFormulaStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None,
                 palette_index: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[int] palette_index: Index specifying which color to use within the palette.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_index is not None:
            pulumi.set(__self__, "palette_index", palette_index)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteIndex")
    def palette_index(self) -> Optional[pulumi.Input[int]]:
        """
        Index specifying which color to use within the palette.
        """
        return pulumi.get(self, "palette_index")

    @palette_index.setter
    def palette_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "palette_index", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestNetworkQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestNetworkQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestNetworkQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestNetworkQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestNetworkQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestNetworkQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestNetworkQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestNetworkQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestNetworkQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestNetworkQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestNetworkQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestNetworkQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryArgs']] = None,
                 apm_resource_stats_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryArgs']] = None,
                 event_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryEventQueryArgs']] = None,
                 metric_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryMetricQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryProcessQueryArgs']] = None,
                 slo_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQuerySloQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryArgs'] apm_dependency_stats_query: The APM Dependency Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryArgs'] apm_resource_stats_query: The APM Resource Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryEventQueryArgs'] event_query: A timeseries formula and functions events query.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryMetricQueryArgs'] metric_query: A timeseries formula and functions metrics query.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestQuerySloQueryArgs'] slo_query: The slo query using formulas and functions.
        """
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if slo_query is not None:
            pulumi.set(__self__, "slo_query", slo_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryArgs']]:
        """
        The APM Dependency Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_dependency_stats_query")

    @apm_dependency_stats_query.setter
    def apm_dependency_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryArgs']]):
        pulumi.set(self, "apm_dependency_stats_query", value)

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryArgs']]:
        """
        The APM Resource Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_resource_stats_query")

    @apm_resource_stats_query.setter
    def apm_resource_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryArgs']]):
        pulumi.set(self, "apm_resource_stats_query", value)

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryEventQueryArgs']]:
        """
        A timeseries formula and functions events query.
        """
        return pulumi.get(self, "event_query")

    @event_query.setter
    def event_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryEventQueryArgs']]):
        pulumi.set(self, "event_query", value)

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryMetricQueryArgs']]:
        """
        A timeseries formula and functions metrics query.
        """
        return pulumi.get(self, "metric_query")

    @metric_query.setter
    def metric_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryMetricQueryArgs']]):
        pulumi.set(self, "metric_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter(name="sloQuery")
    def slo_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQuerySloQueryArgs']]:
        """
        The slo query using formulas and functions.
        """
        return pulumi.get(self, "slo_query")

    @slo_query.setter
    def slo_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQuerySloQueryArgs']]):
        pulumi.set(self, "slo_query", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestQueryApmDependencyStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 operation_name: pulumi.Input[str],
                 resource_name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 is_upstream: Optional[pulumi.Input[bool]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] resource_name: APM resource.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[bool] is_upstream: Determines whether stats for upstream or downstream dependencies should be queried.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> pulumi.Input[str]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether stats for upstream or downstream dependencies should be queried.
        """
        return pulumi.get(self, "is_upstream")

    @is_upstream.setter
    def is_upstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_upstream", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestQueryApmResourceStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operation_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        :param pulumi.Input[str] resource_name: APM resource.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestQueryEventQueryArgs:
    def __init__(__self__, *,
                 computes: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryEventQueryComputeArgs']]],
                 data_source: pulumi.Input[str],
                 name: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupByArgs']]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryEventQuerySearchArgs']] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryEventQueryComputeArgs']]] computes: The compute options.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryEventQuerySearchArgs'] search: The search options.
        :param pulumi.Input[str] storage: Storage location (private beta).
        """
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def computes(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryEventQueryComputeArgs']]]:
        """
        The compute options.
        """
        return pulumi.get(self, "computes")

    @computes.setter
    def computes(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryEventQueryComputeArgs']]]):
        pulumi.set(self, "computes", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryEventQuerySearchArgs']]:
        """
        The search options.
        """
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryEventQuerySearchArgs']]):
        pulumi.set(self, "search", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage location (private beta).
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestQueryEventQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 interval: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortArgs'] sort: The options for sorting group by results.
        """
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestQueryEventQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 metric: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestQueryEventQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestQueryMetricQueryArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 data_source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[str]]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestQueryProcessQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 metric: pulumi.Input[str],
                 name: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 is_normalized_cpu: Optional[pulumi.Input[bool]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[bool] is_normalized_cpu: Whether to normalize the CPU percentages.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] sort: The options for sorting group by results.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_filters: An array of tags to filter by.
        :param pulumi.Input[str] text_filter: The text to use as a filter.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to normalize the CPU percentages.
        """
        return pulumi.get(self, "is_normalized_cpu")

    @is_normalized_cpu.setter
    def is_normalized_cpu(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_normalized_cpu", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of tags to filter by.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[pulumi.Input[str]]:
        """
        The text to use as a filter.
        """
        return pulumi.get(self, "text_filter")

    @text_filter.setter
    def text_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_filter", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestQuerySloQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 measure: pulumi.Input[str],
                 slo_id: pulumi.Input[str],
                 additional_query_filters: Optional[pulumi.Input[str]] = None,
                 group_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slo_query_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] measure: SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        :param pulumi.Input[str] slo_id: ID of an SLO to query.
        :param pulumi.Input[str] additional_query_filters: Additional filters applied to the SLO query.
        :param pulumi.Input[str] group_mode: Group mode to query measures. Valid values are `overall`, `components`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] slo_query_type: type of the SLO to query. Valid values are `metric`.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "measure", measure)
        pulumi.set(__self__, "slo_id", slo_id)
        if additional_query_filters is not None:
            pulumi.set(__self__, "additional_query_filters", additional_query_filters)
        if group_mode is not None:
            pulumi.set(__self__, "group_mode", group_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slo_query_type is not None:
            pulumi.set(__self__, "slo_query_type", slo_query_type)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def measure(self) -> pulumi.Input[str]:
        """
        SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        """
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure", value)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        """
        ID of an SLO to query.
        """
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="additionalQueryFilters")
    def additional_query_filters(self) -> Optional[pulumi.Input[str]]:
        """
        Additional filters applied to the SLO query.
        """
        return pulumi.get(self, "additional_query_filters")

    @additional_query_filters.setter
    def additional_query_filters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_query_filters", value)

    @property
    @pulumi.getter(name="groupMode")
    def group_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Group mode to query measures. Valid values are `overall`, `components`.
        """
        return pulumi.get(self, "group_mode")

    @group_mode.setter
    def group_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sloQueryType")
    def slo_query_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the SLO to query. Valid values are `metric`.
        """
        return pulumi.get(self, "slo_query_type")

    @slo_query_type.setter
    def slo_query_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slo_query_type", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetSunburstDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetSunburstDefinitionRequestStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionCustomLinkArgs']]]] = None,
                 events: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionEventArgs']]]] = None,
                 legend_columns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 legend_layout: Optional[pulumi.Input[str]] = None,
                 legend_size: Optional[pulumi.Input[str]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 markers: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionMarkerArgs']]]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestArgs']]]] = None,
                 right_yaxis: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRightYaxisArgs']] = None,
                 show_legend: Optional[pulumi.Input[bool]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None,
                 yaxis: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionYaxisArgs']] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionEventArgs']]] events: The definition of the event to overlay on the graph. Multiple `event` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] legend_columns: A list of columns to display in the legend. Valid values are `value`, `avg`, `sum`, `min`, `max`.
        :param pulumi.Input[str] legend_layout: The layout of the legend displayed in the widget. Valid values are `auto`, `horizontal`, `vertical`.
        :param pulumi.Input[str] legend_size: The size of the legend displayed in the widget.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionMarkerArgs']]] markers: A nested block describing the marker to use when displaying the widget. The structure of this block is described below. Multiple `marker` blocks are allowed within a given `tile_def` block.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRightYaxisArgs'] right_yaxis: A nested block describing the right Y-Axis Controls. See the `on_right_yaxis` property for which request will use this axis. The structure of this block is described below.
        :param pulumi.Input[bool] show_legend: Whether or not to show the legend on this widget.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionYaxisArgs'] yaxis: A nested block describing the Y-Axis Controls. The structure of this block is described below.
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if events is not None:
            pulumi.set(__self__, "events", events)
        if legend_columns is not None:
            pulumi.set(__self__, "legend_columns", legend_columns)
        if legend_layout is not None:
            pulumi.set(__self__, "legend_layout", legend_layout)
        if legend_size is not None:
            pulumi.set(__self__, "legend_size", legend_size)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if markers is not None:
            pulumi.set(__self__, "markers", markers)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if right_yaxis is not None:
            pulumi.set(__self__, "right_yaxis", right_yaxis)
        if show_legend is not None:
            pulumi.set(__self__, "show_legend", show_legend)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)
        if yaxis is not None:
            pulumi.set(__self__, "yaxis", yaxis)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def events(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionEventArgs']]]]:
        """
        The definition of the event to overlay on the graph. Multiple `event` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "events")

    @events.setter
    def events(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionEventArgs']]]]):
        pulumi.set(self, "events", value)

    @property
    @pulumi.getter(name="legendColumns")
    def legend_columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of columns to display in the legend. Valid values are `value`, `avg`, `sum`, `min`, `max`.
        """
        return pulumi.get(self, "legend_columns")

    @legend_columns.setter
    def legend_columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "legend_columns", value)

    @property
    @pulumi.getter(name="legendLayout")
    def legend_layout(self) -> Optional[pulumi.Input[str]]:
        """
        The layout of the legend displayed in the widget. Valid values are `auto`, `horizontal`, `vertical`.
        """
        return pulumi.get(self, "legend_layout")

    @legend_layout.setter
    def legend_layout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "legend_layout", value)

    @property
    @pulumi.getter(name="legendSize")
    def legend_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the legend displayed in the widget.
        """
        return pulumi.get(self, "legend_size")

    @legend_size.setter
    def legend_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "legend_size", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def markers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionMarkerArgs']]]]:
        """
        A nested block describing the marker to use when displaying the widget. The structure of this block is described below. Multiple `marker` blocks are allowed within a given `tile_def` block.
        """
        return pulumi.get(self, "markers")

    @markers.setter
    def markers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionMarkerArgs']]]]):
        pulumi.set(self, "markers", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter(name="rightYaxis")
    def right_yaxis(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRightYaxisArgs']]:
        """
        A nested block describing the right Y-Axis Controls. See the `on_right_yaxis` property for which request will use this axis. The structure of this block is described below.
        """
        return pulumi.get(self, "right_yaxis")

    @right_yaxis.setter
    def right_yaxis(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRightYaxisArgs']]):
        pulumi.set(self, "right_yaxis", value)

    @property
    @pulumi.getter(name="showLegend")
    def show_legend(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to show the legend on this widget.
        """
        return pulumi.get(self, "show_legend")

    @show_legend.setter
    def show_legend(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_legend", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)

    @property
    @pulumi.getter
    def yaxis(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionYaxisArgs']]:
        """
        A nested block describing the Y-Axis Controls. The structure of this block is described below.
        """
        return pulumi.get(self, "yaxis")

    @yaxis.setter
    def yaxis(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionYaxisArgs']]):
        pulumi.set(self, "yaxis", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionEventArgs:
    def __init__(__self__, *,
                 q: pulumi.Input[str],
                 tags_execution: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input[str] tags_execution: The execution method for multi-value filters, options: `and` or `or`.
        """
        pulumi.set(__self__, "q", q)
        if tags_execution is not None:
            pulumi.set(__self__, "tags_execution", tags_execution)

    @property
    @pulumi.getter
    def q(self) -> pulumi.Input[str]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: pulumi.Input[str]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter(name="tagsExecution")
    def tags_execution(self) -> Optional[pulumi.Input[str]]:
        """
        The execution method for multi-value filters, options: `and` or `or`.
        """
        return pulumi.get(self, "tags_execution")

    @tags_execution.setter
    def tags_execution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags_execution", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionMarkerArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 display_type: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] display_type: How the marker lines are displayed, options are one of {`error`, `warning`, `info`, `ok`} combined with one of {`dashed`, `solid`, `bold`}. Example: `error dashed`.
        :param pulumi.Input[str] label: The label for the custom link URL.
        """
        pulumi.set(__self__, "value", value)
        if display_type is not None:
            pulumi.set(__self__, "display_type", display_type)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="displayType")
    def display_type(self) -> Optional[pulumi.Input[str]]:
        """
        How the marker lines are displayed, options are one of {`error`, `warning`, `info`, `ok`} combined with one of {`dashed`, `solid`, `bold`}. Example: `error dashed`.
        """
        return pulumi.get(self, "display_type")

    @display_type.setter
    def display_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_type", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryArgs']] = None,
                 audit_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestAuditQueryArgs']] = None,
                 display_type: Optional[pulumi.Input[str]] = None,
                 formulas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestFormulaArgs']]]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryArgs']] = None,
                 metadatas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestMetadataArgs']]]] = None,
                 network_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryArgs']] = None,
                 on_right_yaxis: Optional[pulumi.Input[bool]] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryArgs']]]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestStyleArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestAuditQueryArgs'] audit_query: The query to use for this widget.
        :param pulumi.Input[str] display_type: How the marker lines are displayed, options are one of {`error`, `warning`, `info`, `ok`} combined with one of {`dashed`, `solid`, `bold`}. Example: `error dashed`.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestMetadataArgs']]] metadatas: Used to define expression aliases. Multiple `metadata` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryArgs'] network_query: The query to use for this widget.
        :param pulumi.Input[bool] on_right_yaxis: A Boolean indicating whether the request uses the right or left Y-Axis.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryArgs'] security_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestStyleArgs'] style: Styling options for widget formulas.
        """
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if audit_query is not None:
            pulumi.set(__self__, "audit_query", audit_query)
        if display_type is not None:
            pulumi.set(__self__, "display_type", display_type)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if metadatas is not None:
            pulumi.set(__self__, "metadatas", metadatas)
        if network_query is not None:
            pulumi.set(__self__, "network_query", network_query)
        if on_right_yaxis is not None:
            pulumi.set(__self__, "on_right_yaxis", on_right_yaxis)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="auditQuery")
    def audit_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestAuditQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "audit_query")

    @audit_query.setter
    def audit_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestAuditQueryArgs']]):
        pulumi.set(self, "audit_query", value)

    @property
    @pulumi.getter(name="displayType")
    def display_type(self) -> Optional[pulumi.Input[str]]:
        """
        How the marker lines are displayed, options are one of {`error`, `warning`, `info`, `ok`} combined with one of {`dashed`, `solid`, `bold`}. Example: `error dashed`.
        """
        return pulumi.get(self, "display_type")

    @display_type.setter
    def display_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_type", value)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestFormulaArgs']]]]:
        return pulumi.get(self, "formulas")

    @formulas.setter
    def formulas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestFormulaArgs']]]]):
        pulumi.set(self, "formulas", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter
    def metadatas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestMetadataArgs']]]]:
        """
        Used to define expression aliases. Multiple `metadata` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "metadatas")

    @metadatas.setter
    def metadatas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestMetadataArgs']]]]):
        pulumi.set(self, "metadatas", value)

    @property
    @pulumi.getter(name="networkQuery")
    def network_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "network_query")

    @network_query.setter
    def network_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryArgs']]):
        pulumi.set(self, "network_query", value)

    @property
    @pulumi.getter(name="onRightYaxis")
    def on_right_yaxis(self) -> Optional[pulumi.Input[bool]]:
        """
        A Boolean indicating whether the request uses the right or left Y-Axis.
        """
        return pulumi.get(self, "on_right_yaxis")

    @on_right_yaxis.setter
    def on_right_yaxis(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_right_yaxis", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryArgs']]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestAuditQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestAuditQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestAuditQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestAuditQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestAuditQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestAuditQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestAuditQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestAuditQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestFormulaArgs:
    def __init__(__self__, *,
                 formula_expression: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestFormulaConditionalFormatArgs']]]] = None,
                 limit: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestFormulaLimitArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestFormulaStyleArgs']] = None):
        """
        :param pulumi.Input[str] formula_expression: A string expression built from queries, formulas, and functions.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input[str] cell_display_mode: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestFormulaConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestFormulaLimitArgs'] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestFormulaStyleArgs'] style: Styling options for widget formulas.
        """
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> pulumi.Input[str]:
        """
        A string expression built from queries, formulas, and functions.
        """
        return pulumi.get(self, "formula_expression")

    @formula_expression.setter
    def formula_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "formula_expression", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestFormulaConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestFormulaConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestFormulaLimitArgs']]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestFormulaLimitArgs']]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestFormulaStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestFormulaStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestFormulaConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestFormulaLimitArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] count: The number of results to return
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of results to return
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestFormulaStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None,
                 palette_index: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[int] palette_index: Index specifying which color to use within the palette.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_index is not None:
            pulumi.set(__self__, "palette_index", palette_index)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteIndex")
    def palette_index(self) -> Optional[pulumi.Input[int]]:
        """
        Index specifying which color to use within the palette.
        """
        return pulumi.get(self, "palette_index")

    @palette_index.setter
    def palette_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "palette_index", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestMetadataArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 alias_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] expression: The expression name.
        :param pulumi.Input[str] alias_name: The expression alias.
        """
        pulumi.set(__self__, "expression", expression)
        if alias_name is not None:
            pulumi.set(__self__, "alias_name", alias_name)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        The expression name.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter(name="aliasName")
    def alias_name(self) -> Optional[pulumi.Input[str]]:
        """
        The expression alias.
        """
        return pulumi.get(self, "alias_name")

    @alias_name.setter
    def alias_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias_name", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestNetworkQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestNetworkQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestNetworkQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryArgs']] = None,
                 apm_resource_stats_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryArgs']] = None,
                 event_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryArgs']] = None,
                 metric_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryMetricQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryProcessQueryArgs']] = None,
                 slo_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQuerySloQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryArgs'] apm_dependency_stats_query: The APM Dependency Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryArgs'] apm_resource_stats_query: The APM Resource Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryArgs'] event_query: A timeseries formula and functions events query.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryMetricQueryArgs'] metric_query: A timeseries formula and functions metrics query.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQuerySloQueryArgs'] slo_query: The slo query using formulas and functions.
        """
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if slo_query is not None:
            pulumi.set(__self__, "slo_query", slo_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryArgs']]:
        """
        The APM Dependency Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_dependency_stats_query")

    @apm_dependency_stats_query.setter
    def apm_dependency_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryArgs']]):
        pulumi.set(self, "apm_dependency_stats_query", value)

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryArgs']]:
        """
        The APM Resource Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_resource_stats_query")

    @apm_resource_stats_query.setter
    def apm_resource_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryArgs']]):
        pulumi.set(self, "apm_resource_stats_query", value)

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryArgs']]:
        """
        A timeseries formula and functions events query.
        """
        return pulumi.get(self, "event_query")

    @event_query.setter
    def event_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryArgs']]):
        pulumi.set(self, "event_query", value)

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryMetricQueryArgs']]:
        """
        A timeseries formula and functions metrics query.
        """
        return pulumi.get(self, "metric_query")

    @metric_query.setter
    def metric_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryMetricQueryArgs']]):
        pulumi.set(self, "metric_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter(name="sloQuery")
    def slo_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQuerySloQueryArgs']]:
        """
        The slo query using formulas and functions.
        """
        return pulumi.get(self, "slo_query")

    @slo_query.setter
    def slo_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQuerySloQueryArgs']]):
        pulumi.set(self, "slo_query", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestQueryApmDependencyStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 operation_name: pulumi.Input[str],
                 resource_name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 is_upstream: Optional[pulumi.Input[bool]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] resource_name: APM resource.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[bool] is_upstream: Determines whether stats for upstream or downstream dependencies should be queried.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> pulumi.Input[str]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether stats for upstream or downstream dependencies should be queried.
        """
        return pulumi.get(self, "is_upstream")

    @is_upstream.setter
    def is_upstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_upstream", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestQueryApmResourceStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operation_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        :param pulumi.Input[str] resource_name: APM resource.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryArgs:
    def __init__(__self__, *,
                 computes: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryComputeArgs']]],
                 data_source: pulumi.Input[str],
                 name: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupByArgs']]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryEventQuerySearchArgs']] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryComputeArgs']]] computes: The compute options.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryEventQuerySearchArgs'] search: The search options.
        :param pulumi.Input[str] storage: Storage location (private beta).
        """
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def computes(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryComputeArgs']]]:
        """
        The compute options.
        """
        return pulumi.get(self, "computes")

    @computes.setter
    def computes(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryComputeArgs']]]):
        pulumi.set(self, "computes", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryEventQuerySearchArgs']]:
        """
        The search options.
        """
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryEventQuerySearchArgs']]):
        pulumi.set(self, "search", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage location (private beta).
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 interval: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortArgs'] sort: The options for sorting group by results.
        """
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestQueryEventQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 metric: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestQueryEventQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestQueryMetricQueryArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 data_source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[str]]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestQueryProcessQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 metric: pulumi.Input[str],
                 name: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 is_normalized_cpu: Optional[pulumi.Input[bool]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[bool] is_normalized_cpu: Whether to normalize the CPU percentages.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] sort: The options for sorting group by results.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_filters: An array of tags to filter by.
        :param pulumi.Input[str] text_filter: The text to use as a filter.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to normalize the CPU percentages.
        """
        return pulumi.get(self, "is_normalized_cpu")

    @is_normalized_cpu.setter
    def is_normalized_cpu(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_normalized_cpu", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of tags to filter by.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[pulumi.Input[str]]:
        """
        The text to use as a filter.
        """
        return pulumi.get(self, "text_filter")

    @text_filter.setter
    def text_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_filter", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestQuerySloQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 measure: pulumi.Input[str],
                 slo_id: pulumi.Input[str],
                 additional_query_filters: Optional[pulumi.Input[str]] = None,
                 group_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slo_query_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] measure: SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        :param pulumi.Input[str] slo_id: ID of an SLO to query.
        :param pulumi.Input[str] additional_query_filters: Additional filters applied to the SLO query.
        :param pulumi.Input[str] group_mode: Group mode to query measures. Valid values are `overall`, `components`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] slo_query_type: type of the SLO to query. Valid values are `metric`.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "measure", measure)
        pulumi.set(__self__, "slo_id", slo_id)
        if additional_query_filters is not None:
            pulumi.set(__self__, "additional_query_filters", additional_query_filters)
        if group_mode is not None:
            pulumi.set(__self__, "group_mode", group_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slo_query_type is not None:
            pulumi.set(__self__, "slo_query_type", slo_query_type)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def measure(self) -> pulumi.Input[str]:
        """
        SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        """
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure", value)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        """
        ID of an SLO to query.
        """
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="additionalQueryFilters")
    def additional_query_filters(self) -> Optional[pulumi.Input[str]]:
        """
        Additional filters applied to the SLO query.
        """
        return pulumi.get(self, "additional_query_filters")

    @additional_query_filters.setter
    def additional_query_filters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_query_filters", value)

    @property
    @pulumi.getter(name="groupMode")
    def group_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Group mode to query measures. Valid values are `overall`, `components`.
        """
        return pulumi.get(self, "group_mode")

    @group_mode.setter
    def group_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sloQueryType")
    def slo_query_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the SLO to query. Valid values are `metric`.
        """
        return pulumi.get(self, "slo_query_type")

    @slo_query_type.setter
    def slo_query_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slo_query_type", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRequestStyleArgs:
    def __init__(__self__, *,
                 line_type: Optional[pulumi.Input[str]] = None,
                 line_width: Optional[pulumi.Input[str]] = None,
                 palette: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] line_type: The type of lines displayed. Valid values are `dashed`, `dotted`, `solid`.
        :param pulumi.Input[str] line_width: The width of line displayed. Valid values are `normal`, `thick`, `thin`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        if line_type is not None:
            pulumi.set(__self__, "line_type", line_type)
        if line_width is not None:
            pulumi.set(__self__, "line_width", line_width)
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter(name="lineType")
    def line_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of lines displayed. Valid values are `dashed`, `dotted`, `solid`.
        """
        return pulumi.get(self, "line_type")

    @line_type.setter
    def line_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_type", value)

    @property
    @pulumi.getter(name="lineWidth")
    def line_width(self) -> Optional[pulumi.Input[str]]:
        """
        The width of line displayed. Valid values are `normal`, `thick`, `thin`.
        """
        return pulumi.get(self, "line_width")

    @line_width.setter
    def line_width(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "line_width", value)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionRightYaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] include_zero: Always include zero or fit the axis to the data range.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] max: Specify the maximum value to show on the Y-axis.
        :param pulumi.Input[str] min: Specify the minimum value to show on the Y-axis.
        :param pulumi.Input[str] scale: Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        """
        Always include zero or fit the axis to the data range.
        """
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the maximum value to show on the Y-axis.
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the minimum value to show on the Y-axis.
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetTimeseriesDefinitionYaxisArgs:
    def __init__(__self__, *,
                 include_zero: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 max: Optional[pulumi.Input[str]] = None,
                 min: Optional[pulumi.Input[str]] = None,
                 scale: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] include_zero: Always include zero or fit the axis to the data range.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] max: Specify the maximum value to show on the Y-axis.
        :param pulumi.Input[str] min: Specify the minimum value to show on the Y-axis.
        :param pulumi.Input[str] scale: Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        if include_zero is not None:
            pulumi.set(__self__, "include_zero", include_zero)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if scale is not None:
            pulumi.set(__self__, "scale", scale)

    @property
    @pulumi.getter(name="includeZero")
    def include_zero(self) -> Optional[pulumi.Input[bool]]:
        """
        Always include zero or fit the axis to the data range.
        """
        return pulumi.get(self, "include_zero")

    @include_zero.setter
    def include_zero(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_zero", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def max(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the maximum value to show on the Y-axis.
        """
        return pulumi.get(self, "max")

    @max.setter
    def max(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "max", value)

    @property
    @pulumi.getter
    def min(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the minimum value to show on the Y-axis.
        """
        return pulumi.get(self, "min")

    @min.setter
    def min(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "min", value)

    @property
    @pulumi.getter
    def scale(self) -> Optional[pulumi.Input[str]]:
        """
        Specify the scale type, options: `linear`, `log`, `pow`, `sqrt`.
        """
        return pulumi.get(self, "scale")

    @scale.setter
    def scale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scale", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionCustomLinkArgs']]]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestArgs:
    def __init__(__self__, *,
                 apm_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryArgs']] = None,
                 audit_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestAuditQueryArgs']] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestConditionalFormatArgs']]]] = None,
                 formulas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestFormulaArgs']]]] = None,
                 log_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestProcessQueryArgs']] = None,
                 q: Optional[pulumi.Input[str]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryArgs']]]] = None,
                 rum_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryArgs']] = None,
                 security_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestStyleArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryArgs'] apm_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestAuditQueryArgs'] audit_query: The query to use for this widget.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryArgs'] log_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input[str] q: The metric query to use for this widget.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryArgs'] rum_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryArgs'] security_query: The query to use for this widget.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestStyleArgs'] style: Styling options for widget formulas.
        """
        if apm_query is not None:
            pulumi.set(__self__, "apm_query", apm_query)
        if audit_query is not None:
            pulumi.set(__self__, "audit_query", audit_query)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if log_query is not None:
            pulumi.set(__self__, "log_query", log_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if q is not None:
            pulumi.set(__self__, "q", q)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if rum_query is not None:
            pulumi.set(__self__, "rum_query", rum_query)
        if security_query is not None:
            pulumi.set(__self__, "security_query", security_query)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="apmQuery")
    def apm_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "apm_query")

    @apm_query.setter
    def apm_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryArgs']]):
        pulumi.set(self, "apm_query", value)

    @property
    @pulumi.getter(name="auditQuery")
    def audit_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestAuditQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "audit_query")

    @audit_query.setter
    def audit_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestAuditQueryArgs']]):
        pulumi.set(self, "audit_query", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestFormulaArgs']]]]:
        return pulumi.get(self, "formulas")

    @formulas.setter
    def formulas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestFormulaArgs']]]]):
        pulumi.set(self, "formulas", value)

    @property
    @pulumi.getter(name="logQuery")
    def log_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "log_query")

    @log_query.setter
    def log_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryArgs']]):
        pulumi.set(self, "log_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter
    def q(self) -> Optional[pulumi.Input[str]]:
        """
        The metric query to use for this widget.
        """
        return pulumi.get(self, "q")

    @q.setter
    def q(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "q", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryArgs']]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="rumQuery")
    def rum_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "rum_query")

    @rum_query.setter
    def rum_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryArgs']]):
        pulumi.set(self, "rum_query", value)

    @property
    @pulumi.getter(name="securityQuery")
    def security_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryArgs']]:
        """
        The query to use for this widget.
        """
        return pulumi.get(self, "security_query")

    @security_query.setter
    def security_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryArgs']]):
        pulumi.set(self, "security_query", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestApmQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestApmQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestApmQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestApmQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestApmQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestApmQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestAuditQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestAuditQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestAuditQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestAuditQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestAuditQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestAuditQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestAuditQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestAuditQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestAuditQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestAuditQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestAuditQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestAuditQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestAuditQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestAuditQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestAuditQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestAuditQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestAuditQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestFormulaArgs:
    def __init__(__self__, *,
                 formula_expression: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestFormulaConditionalFormatArgs']]]] = None,
                 limit: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestFormulaLimitArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestFormulaStyleArgs']] = None):
        """
        :param pulumi.Input[str] formula_expression: A string expression built from queries, formulas, and functions.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input[str] cell_display_mode: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestFormulaConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestFormulaLimitArgs'] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestFormulaStyleArgs'] style: Styling options for widget formulas.
        """
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> pulumi.Input[str]:
        """
        A string expression built from queries, formulas, and functions.
        """
        return pulumi.get(self, "formula_expression")

    @formula_expression.setter
    def formula_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "formula_expression", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestFormulaConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestFormulaConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestFormulaLimitArgs']]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestFormulaLimitArgs']]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestFormulaStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestFormulaStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestFormulaConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestFormulaLimitArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] count: The number of results to return
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of results to return
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestFormulaStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None,
                 palette_index: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[int] palette_index: Index specifying which color to use within the palette.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_index is not None:
            pulumi.set(__self__, "palette_index", palette_index)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteIndex")
    def palette_index(self) -> Optional[pulumi.Input[int]]:
        """
        Index specifying which color to use within the palette.
        """
        return pulumi.get(self, "palette_index")

    @palette_index.setter
    def palette_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "palette_index", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestLogQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestLogQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestLogQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestLogQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestLogQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestLogQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestProcessQueryArgs:
    def __init__(__self__, *,
                 metric: pulumi.Input[str],
                 filter_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 search_by: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filter_bies: A list of processes.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] search_by: Your chosen search term.
        """
        pulumi.set(__self__, "metric", metric)
        if filter_bies is not None:
            pulumi.set(__self__, "filter_bies", filter_bies)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if search_by is not None:
            pulumi.set(__self__, "search_by", search_by)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter(name="filterBies")
    def filter_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of processes.
        """
        return pulumi.get(self, "filter_bies")

    @filter_bies.setter
    def filter_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "filter_bies", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="searchBy")
    def search_by(self) -> Optional[pulumi.Input[str]]:
        """
        Your chosen search term.
        """
        return pulumi.get(self, "search_by")

    @search_by.setter
    def search_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_by", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryArgs']] = None,
                 apm_resource_stats_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryApmResourceStatsQueryArgs']] = None,
                 event_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryEventQueryArgs']] = None,
                 metric_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryMetricQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryProcessQueryArgs']] = None,
                 slo_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQuerySloQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryArgs'] apm_dependency_stats_query: The APM Dependency Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryApmResourceStatsQueryArgs'] apm_resource_stats_query: The APM Resource Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryEventQueryArgs'] event_query: A timeseries formula and functions events query.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryMetricQueryArgs'] metric_query: A timeseries formula and functions metrics query.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestQuerySloQueryArgs'] slo_query: The slo query using formulas and functions.
        """
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if slo_query is not None:
            pulumi.set(__self__, "slo_query", slo_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryArgs']]:
        """
        The APM Dependency Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_dependency_stats_query")

    @apm_dependency_stats_query.setter
    def apm_dependency_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryArgs']]):
        pulumi.set(self, "apm_dependency_stats_query", value)

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryApmResourceStatsQueryArgs']]:
        """
        The APM Resource Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_resource_stats_query")

    @apm_resource_stats_query.setter
    def apm_resource_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryApmResourceStatsQueryArgs']]):
        pulumi.set(self, "apm_resource_stats_query", value)

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryEventQueryArgs']]:
        """
        A timeseries formula and functions events query.
        """
        return pulumi.get(self, "event_query")

    @event_query.setter
    def event_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryEventQueryArgs']]):
        pulumi.set(self, "event_query", value)

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryMetricQueryArgs']]:
        """
        A timeseries formula and functions metrics query.
        """
        return pulumi.get(self, "metric_query")

    @metric_query.setter
    def metric_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryMetricQueryArgs']]):
        pulumi.set(self, "metric_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter(name="sloQuery")
    def slo_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQuerySloQueryArgs']]:
        """
        The slo query using formulas and functions.
        """
        return pulumi.get(self, "slo_query")

    @slo_query.setter
    def slo_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQuerySloQueryArgs']]):
        pulumi.set(self, "slo_query", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestQueryApmDependencyStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 operation_name: pulumi.Input[str],
                 resource_name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 is_upstream: Optional[pulumi.Input[bool]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] resource_name: APM resource.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[bool] is_upstream: Determines whether stats for upstream or downstream dependencies should be queried.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> pulumi.Input[str]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether stats for upstream or downstream dependencies should be queried.
        """
        return pulumi.get(self, "is_upstream")

    @is_upstream.setter
    def is_upstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_upstream", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestQueryApmResourceStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operation_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        :param pulumi.Input[str] resource_name: APM resource.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestQueryEventQueryArgs:
    def __init__(__self__, *,
                 computes: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryEventQueryComputeArgs']]],
                 data_source: pulumi.Input[str],
                 name: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupByArgs']]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryEventQuerySearchArgs']] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryEventQueryComputeArgs']]] computes: The compute options.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryEventQuerySearchArgs'] search: The search options.
        :param pulumi.Input[str] storage: Storage location (private beta).
        """
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def computes(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryEventQueryComputeArgs']]]:
        """
        The compute options.
        """
        return pulumi.get(self, "computes")

    @computes.setter
    def computes(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryEventQueryComputeArgs']]]):
        pulumi.set(self, "computes", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryEventQuerySearchArgs']]:
        """
        The search options.
        """
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryEventQuerySearchArgs']]):
        pulumi.set(self, "search", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage location (private beta).
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestQueryEventQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 interval: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBySortArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBySortArgs'] sort: The options for sorting group by results.
        """
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestQueryEventQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 metric: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestQueryEventQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestQueryMetricQueryArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 data_source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[str]]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestQueryProcessQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 metric: pulumi.Input[str],
                 name: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 is_normalized_cpu: Optional[pulumi.Input[bool]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[bool] is_normalized_cpu: Whether to normalize the CPU percentages.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] sort: The options for sorting group by results.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_filters: An array of tags to filter by.
        :param pulumi.Input[str] text_filter: The text to use as a filter.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to normalize the CPU percentages.
        """
        return pulumi.get(self, "is_normalized_cpu")

    @is_normalized_cpu.setter
    def is_normalized_cpu(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_normalized_cpu", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of tags to filter by.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[pulumi.Input[str]]:
        """
        The text to use as a filter.
        """
        return pulumi.get(self, "text_filter")

    @text_filter.setter
    def text_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_filter", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestQuerySloQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 measure: pulumi.Input[str],
                 slo_id: pulumi.Input[str],
                 additional_query_filters: Optional[pulumi.Input[str]] = None,
                 group_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slo_query_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] measure: SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        :param pulumi.Input[str] slo_id: ID of an SLO to query.
        :param pulumi.Input[str] additional_query_filters: Additional filters applied to the SLO query.
        :param pulumi.Input[str] group_mode: Group mode to query measures. Valid values are `overall`, `components`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] slo_query_type: type of the SLO to query. Valid values are `metric`.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "measure", measure)
        pulumi.set(__self__, "slo_id", slo_id)
        if additional_query_filters is not None:
            pulumi.set(__self__, "additional_query_filters", additional_query_filters)
        if group_mode is not None:
            pulumi.set(__self__, "group_mode", group_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slo_query_type is not None:
            pulumi.set(__self__, "slo_query_type", slo_query_type)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def measure(self) -> pulumi.Input[str]:
        """
        SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        """
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure", value)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        """
        ID of an SLO to query.
        """
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="additionalQueryFilters")
    def additional_query_filters(self) -> Optional[pulumi.Input[str]]:
        """
        Additional filters applied to the SLO query.
        """
        return pulumi.get(self, "additional_query_filters")

    @additional_query_filters.setter
    def additional_query_filters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_query_filters", value)

    @property
    @pulumi.getter(name="groupMode")
    def group_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Group mode to query measures. Valid values are `overall`, `components`.
        """
        return pulumi.get(self, "group_mode")

    @group_mode.setter
    def group_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sloQueryType")
    def slo_query_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the SLO to query. Valid values are `metric`.
        """
        return pulumi.get(self, "slo_query_type")

    @slo_query_type.setter
    def slo_query_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slo_query_type", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestRumQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestRumQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestRumQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestRumQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestRumQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestRumQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestSecurityQueryArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 compute_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryComputeQueryArgs']] = None,
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryGroupByArgs']]]] = None,
                 multi_computes: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs']]]] = None,
                 search_query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] index: The name of the index to query.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryComputeQueryArgs'] compute_query: `compute_query` or `multi_compute` is required. The map keys are listed below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs']]] multi_computes: `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        :param pulumi.Input[str] search_query: The search query to use.
        """
        pulumi.set(__self__, "index", index)
        if compute_query is not None:
            pulumi.set(__self__, "compute_query", compute_query)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if multi_computes is not None:
            pulumi.set(__self__, "multi_computes", multi_computes)
        if search_query is not None:
            pulumi.set(__self__, "search_query", search_query)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        """
        The name of the index to query.
        """
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="computeQuery")
    def compute_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryComputeQueryArgs']]:
        """
        `compute_query` or `multi_compute` is required. The map keys are listed below.
        """
        return pulumi.get(self, "compute_query")

    @compute_query.setter
    def compute_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryComputeQueryArgs']]):
        pulumi.set(self, "compute_query", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="multiComputes")
    def multi_computes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs']]]]:
        """
        `compute_query` or `multi_compute` is required. Multiple `multi_compute` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "multi_computes")

    @multi_computes.setter
    def multi_computes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs']]]]):
        pulumi.set(self, "multi_computes", value)

    @property
    @pulumi.getter(name="searchQuery")
    def search_query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query to use.
        """
        return pulumi.get(self, "search_query")

    @search_query.setter
    def search_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search_query", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestSecurityQueryComputeQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestSecurityQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort_query: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryArgs'] sort_query: A list of exactly one element describing the sort query to use.
        """
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort_query is not None:
            pulumi.set(__self__, "sort_query", sort_query)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter(name="sortQuery")
    def sort_query(self) -> Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryArgs']]:
        """
        A list of exactly one element describing the sort query to use.
        """
        return pulumi.get(self, "sort_query")

    @sort_query.setter
    def sort_query(self, value: Optional[pulumi.Input['DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryArgs']]):
        pulumi.set(self, "sort_query", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestSecurityQueryGroupBySortQueryArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 order: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        :param pulumi.Input[str] facet: The facet name.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "order", order)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[str]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[str]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestSecurityQueryMultiComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 facet: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if facet is not None:
            pulumi.set(__self__, "facet", facet)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def facet(self) -> Optional[pulumi.Input[str]]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class DashboardWidgetToplistDefinitionRequestStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)


@pulumi.input_type
class DashboardWidgetTopologyMapDefinitionArgs:
    def __init__(__self__, *,
                 custom_links: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTopologyMapDefinitionCustomLinkArgs']]]] = None,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTopologyMapDefinitionRequestArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTopologyMapDefinitionCustomLinkArgs']]] custom_links: A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTopologyMapDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        if custom_links is not None:
            pulumi.set(__self__, "custom_links", custom_links)
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter(name="customLinks")
    def custom_links(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTopologyMapDefinitionCustomLinkArgs']]]]:
        """
        A nested block describing a custom link. Multiple `custom_link` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "custom_links")

    @custom_links.setter
    def custom_links(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTopologyMapDefinitionCustomLinkArgs']]]]):
        pulumi.set(self, "custom_links", value)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTopologyMapDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTopologyMapDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetTopologyMapDefinitionCustomLinkArgs:
    def __init__(__self__, *,
                 is_hidden: Optional[pulumi.Input[bool]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 override_label: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_hidden: The flag for toggling context menu link visibility.
        :param pulumi.Input[str] label: The label for the custom link URL.
        :param pulumi.Input[str] link: The URL of the custom link.
        :param pulumi.Input[str] override_label: The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        if is_hidden is not None:
            pulumi.set(__self__, "is_hidden", is_hidden)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if override_label is not None:
            pulumi.set(__self__, "override_label", override_label)

    @property
    @pulumi.getter(name="isHidden")
    def is_hidden(self) -> Optional[pulumi.Input[bool]]:
        """
        The flag for toggling context menu link visibility.
        """
        return pulumi.get(self, "is_hidden")

    @is_hidden.setter
    def is_hidden(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_hidden", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        """
        The label for the custom link URL.
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the custom link.
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="overrideLabel")
    def override_label(self) -> Optional[pulumi.Input[str]]:
        """
        The label ID that refers to a context menu link item. When `override_label` is provided, the client request omits the label field.
        """
        return pulumi.get(self, "override_label")

    @override_label.setter
    def override_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "override_label", value)


@pulumi.input_type
class DashboardWidgetTopologyMapDefinitionRequestArgs:
    def __init__(__self__, *,
                 queries: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTopologyMapDefinitionRequestQueryArgs']]],
                 request_type: pulumi.Input[str]):
        """
        :param pulumi.Input[str] request_type: The request type for the SLO List request. Valid values are `slo_list`.
        """
        pulumi.set(__self__, "queries", queries)
        pulumi.set(__self__, "request_type", request_type)

    @property
    @pulumi.getter
    def queries(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTopologyMapDefinitionRequestQueryArgs']]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTopologyMapDefinitionRequestQueryArgs']]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter(name="requestType")
    def request_type(self) -> pulumi.Input[str]:
        """
        The request type for the SLO List request. Valid values are `slo_list`.
        """
        return pulumi.get(self, "request_type")

    @request_type.setter
    def request_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "request_type", value)


@pulumi.input_type
class DashboardWidgetTopologyMapDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 filters: pulumi.Input[Sequence[pulumi.Input[str]]],
                 service: pulumi.Input[str]):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] filters: Your environment and primary tag (or `*` if enabled for your account).
        :param pulumi.Input[str] service: APM service.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Your environment and primary tag (or `*` if enabled for your account).
        """
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)


@pulumi.input_type
class DashboardWidgetTraceServiceDefinitionArgs:
    def __init__(__self__, *,
                 env: pulumi.Input[str],
                 service: pulumi.Input[str],
                 span_name: pulumi.Input[str],
                 display_format: Optional[pulumi.Input[str]] = None,
                 live_span: Optional[pulumi.Input[str]] = None,
                 show_breakdown: Optional[pulumi.Input[bool]] = None,
                 show_distribution: Optional[pulumi.Input[bool]] = None,
                 show_errors: Optional[pulumi.Input[bool]] = None,
                 show_hits: Optional[pulumi.Input[bool]] = None,
                 show_latency: Optional[pulumi.Input[bool]] = None,
                 show_resource_list: Optional[pulumi.Input[bool]] = None,
                 size_format: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 title_align: Optional[pulumi.Input[str]] = None,
                 title_size: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] span_name: APM span name
        :param pulumi.Input[str] display_format: The display setting to use. Valid values are `counts`, `countsAndList`, `list`.
        :param pulumi.Input[str] live_span: The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        :param pulumi.Input[bool] show_breakdown: Whether to show the latency breakdown or not.
        :param pulumi.Input[bool] show_distribution: Whether to show the latency distribution or not.
        :param pulumi.Input[bool] show_errors: Whether to show the error metrics or not.
        :param pulumi.Input[bool] show_hits: Whether to show the hits metrics or not
        :param pulumi.Input[bool] show_latency: Whether to show the latency metrics or not.
        :param pulumi.Input[bool] show_resource_list: Whether to show the resource list or not.
        :param pulumi.Input[str] size_format: The size of the widget. Valid values are `small`, `medium`, `large`.
        :param pulumi.Input[str] title: The title of the widget.
        :param pulumi.Input[str] title_align: The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        :param pulumi.Input[str] title_size: The size of the widget's title (defaults to 16).
        """
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "span_name", span_name)
        if display_format is not None:
            pulumi.set(__self__, "display_format", display_format)
        if live_span is not None:
            pulumi.set(__self__, "live_span", live_span)
        if show_breakdown is not None:
            pulumi.set(__self__, "show_breakdown", show_breakdown)
        if show_distribution is not None:
            pulumi.set(__self__, "show_distribution", show_distribution)
        if show_errors is not None:
            pulumi.set(__self__, "show_errors", show_errors)
        if show_hits is not None:
            pulumi.set(__self__, "show_hits", show_hits)
        if show_latency is not None:
            pulumi.set(__self__, "show_latency", show_latency)
        if show_resource_list is not None:
            pulumi.set(__self__, "show_resource_list", show_resource_list)
        if size_format is not None:
            pulumi.set(__self__, "size_format", size_format)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if title_align is not None:
            pulumi.set(__self__, "title_align", title_align)
        if title_size is not None:
            pulumi.set(__self__, "title_size", title_size)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="spanName")
    def span_name(self) -> pulumi.Input[str]:
        """
        APM span name
        """
        return pulumi.get(self, "span_name")

    @span_name.setter
    def span_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "span_name", value)

    @property
    @pulumi.getter(name="displayFormat")
    def display_format(self) -> Optional[pulumi.Input[str]]:
        """
        The display setting to use. Valid values are `counts`, `countsAndList`, `list`.
        """
        return pulumi.get(self, "display_format")

    @display_format.setter
    def display_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_format", value)

    @property
    @pulumi.getter(name="liveSpan")
    def live_span(self) -> Optional[pulumi.Input[str]]:
        """
        The timeframe to use when displaying the widget. Valid values are `1m`, `5m`, `10m`, `15m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`, `1mo`, `3mo`, `6mo`, `1y`, `alert`.
        """
        return pulumi.get(self, "live_span")

    @live_span.setter
    def live_span(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "live_span", value)

    @property
    @pulumi.getter(name="showBreakdown")
    def show_breakdown(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to show the latency breakdown or not.
        """
        return pulumi.get(self, "show_breakdown")

    @show_breakdown.setter
    def show_breakdown(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_breakdown", value)

    @property
    @pulumi.getter(name="showDistribution")
    def show_distribution(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to show the latency distribution or not.
        """
        return pulumi.get(self, "show_distribution")

    @show_distribution.setter
    def show_distribution(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_distribution", value)

    @property
    @pulumi.getter(name="showErrors")
    def show_errors(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to show the error metrics or not.
        """
        return pulumi.get(self, "show_errors")

    @show_errors.setter
    def show_errors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_errors", value)

    @property
    @pulumi.getter(name="showHits")
    def show_hits(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to show the hits metrics or not
        """
        return pulumi.get(self, "show_hits")

    @show_hits.setter
    def show_hits(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_hits", value)

    @property
    @pulumi.getter(name="showLatency")
    def show_latency(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to show the latency metrics or not.
        """
        return pulumi.get(self, "show_latency")

    @show_latency.setter
    def show_latency(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_latency", value)

    @property
    @pulumi.getter(name="showResourceList")
    def show_resource_list(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to show the resource list or not.
        """
        return pulumi.get(self, "show_resource_list")

    @show_resource_list.setter
    def show_resource_list(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_resource_list", value)

    @property
    @pulumi.getter(name="sizeFormat")
    def size_format(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget. Valid values are `small`, `medium`, `large`.
        """
        return pulumi.get(self, "size_format")

    @size_format.setter
    def size_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size_format", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="titleAlign")
    def title_align(self) -> Optional[pulumi.Input[str]]:
        """
        The alignment of the widget's title. Valid values are `center`, `left`, `right`.
        """
        return pulumi.get(self, "title_align")

    @title_align.setter
    def title_align(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_align", value)

    @property
    @pulumi.getter(name="titleSize")
    def title_size(self) -> Optional[pulumi.Input[str]]:
        """
        The size of the widget's title (defaults to 16).
        """
        return pulumi.get(self, "title_size")

    @title_size.setter
    def title_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title_size", value)


@pulumi.input_type
class DashboardWidgetTreemapDefinitionArgs:
    def __init__(__self__, *,
                 requests: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestArgs']]] requests: A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        :param pulumi.Input[str] title: The title of the widget.
        """
        if requests is not None:
            pulumi.set(__self__, "requests", requests)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def requests(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestArgs']]]]:
        """
        A nested block describing the request to use when displaying the widget. Multiple request blocks are allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query` or `process_query` is required within the request block).
        """
        return pulumi.get(self, "requests")

    @requests.setter
    def requests(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestArgs']]]]):
        pulumi.set(self, "requests", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the widget.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class DashboardWidgetTreemapDefinitionRequestArgs:
    def __init__(__self__, *,
                 formulas: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestFormulaArgs']]]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryArgs']]]] = None):
        if formulas is not None:
            pulumi.set(__self__, "formulas", formulas)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)

    @property
    @pulumi.getter
    def formulas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestFormulaArgs']]]]:
        return pulumi.get(self, "formulas")

    @formulas.setter
    def formulas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestFormulaArgs']]]]):
        pulumi.set(self, "formulas", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryArgs']]]]):
        pulumi.set(self, "queries", value)


@pulumi.input_type
class DashboardWidgetTreemapDefinitionRequestFormulaArgs:
    def __init__(__self__, *,
                 formula_expression: pulumi.Input[str],
                 alias: Optional[pulumi.Input[str]] = None,
                 cell_display_mode: Optional[pulumi.Input[str]] = None,
                 conditional_formats: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestFormulaConditionalFormatArgs']]]] = None,
                 limit: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestFormulaLimitArgs']] = None,
                 style: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestFormulaStyleArgs']] = None):
        """
        :param pulumi.Input[str] formula_expression: A string expression built from queries, formulas, and functions.
        :param pulumi.Input[str] alias: An expression alias.
        :param pulumi.Input[str] cell_display_mode: A list of display modes for each table cell. Valid values are `number`, `bar`.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestFormulaConditionalFormatArgs']]] conditional_formats: Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        :param pulumi.Input['DashboardWidgetTreemapDefinitionRequestFormulaLimitArgs'] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetTreemapDefinitionRequestFormulaStyleArgs'] style: Styling options for widget formulas.
        """
        pulumi.set(__self__, "formula_expression", formula_expression)
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if cell_display_mode is not None:
            pulumi.set(__self__, "cell_display_mode", cell_display_mode)
        if conditional_formats is not None:
            pulumi.set(__self__, "conditional_formats", conditional_formats)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if style is not None:
            pulumi.set(__self__, "style", style)

    @property
    @pulumi.getter(name="formulaExpression")
    def formula_expression(self) -> pulumi.Input[str]:
        """
        A string expression built from queries, formulas, and functions.
        """
        return pulumi.get(self, "formula_expression")

    @formula_expression.setter
    def formula_expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "formula_expression", value)

    @property
    @pulumi.getter
    def alias(self) -> Optional[pulumi.Input[str]]:
        """
        An expression alias.
        """
        return pulumi.get(self, "alias")

    @alias.setter
    def alias(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alias", value)

    @property
    @pulumi.getter(name="cellDisplayMode")
    def cell_display_mode(self) -> Optional[pulumi.Input[str]]:
        """
        A list of display modes for each table cell. Valid values are `number`, `bar`.
        """
        return pulumi.get(self, "cell_display_mode")

    @cell_display_mode.setter
    def cell_display_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cell_display_mode", value)

    @property
    @pulumi.getter(name="conditionalFormats")
    def conditional_formats(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestFormulaConditionalFormatArgs']]]]:
        """
        Conditional formats allow you to set the color of your widget content or background depending on the rule applied to your data. Multiple `conditional_formats` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "conditional_formats")

    @conditional_formats.setter
    def conditional_formats(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestFormulaConditionalFormatArgs']]]]):
        pulumi.set(self, "conditional_formats", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestFormulaLimitArgs']]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestFormulaLimitArgs']]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def style(self) -> Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestFormulaStyleArgs']]:
        """
        Styling options for widget formulas.
        """
        return pulumi.get(self, "style")

    @style.setter
    def style(self, value: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestFormulaStyleArgs']]):
        pulumi.set(self, "style", value)


@pulumi.input_type
class DashboardWidgetTreemapDefinitionRequestFormulaConditionalFormatArgs:
    def __init__(__self__, *,
                 comparator: pulumi.Input[str],
                 palette: pulumi.Input[str],
                 value: pulumi.Input[float],
                 custom_bg_color: Optional[pulumi.Input[str]] = None,
                 custom_fg_color: Optional[pulumi.Input[str]] = None,
                 hide_value: Optional[pulumi.Input[bool]] = None,
                 image_url: Optional[pulumi.Input[str]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 timeframe: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] comparator: The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[float] value: The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        :param pulumi.Input[str] custom_bg_color: The color palette to apply to the background, same values available as palette.
        :param pulumi.Input[str] custom_fg_color: The color palette to apply to the foreground, same values available as palette.
        :param pulumi.Input[bool] hide_value: Setting this to True hides values.
        :param pulumi.Input[str] image_url: Displays an image as the background.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] timeframe: Defines the displayed timeframe.
        """
        pulumi.set(__self__, "comparator", comparator)
        pulumi.set(__self__, "palette", palette)
        pulumi.set(__self__, "value", value)
        if custom_bg_color is not None:
            pulumi.set(__self__, "custom_bg_color", custom_bg_color)
        if custom_fg_color is not None:
            pulumi.set(__self__, "custom_fg_color", custom_fg_color)
        if hide_value is not None:
            pulumi.set(__self__, "hide_value", hide_value)
        if image_url is not None:
            pulumi.set(__self__, "image_url", image_url)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if timeframe is not None:
            pulumi.set(__self__, "timeframe", timeframe)

    @property
    @pulumi.getter
    def comparator(self) -> pulumi.Input[str]:
        """
        The comparator to use. Valid values are `=`, `>`, `>=`, `<`, `<=`.
        """
        return pulumi.get(self, "comparator")

    @comparator.setter
    def comparator(self, value: pulumi.Input[str]):
        pulumi.set(self, "comparator", value)

    @property
    @pulumi.getter
    def palette(self) -> pulumi.Input[str]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: pulumi.Input[str]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[float]:
        """
        The value that should be assumed by the template variable in this preset. Cannot be used in conjunction with `values`. **Deprecated.** Use `values` instead.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[float]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customBgColor")
    def custom_bg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the background, same values available as palette.
        """
        return pulumi.get(self, "custom_bg_color")

    @custom_bg_color.setter
    def custom_bg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_bg_color", value)

    @property
    @pulumi.getter(name="customFgColor")
    def custom_fg_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply to the foreground, same values available as palette.
        """
        return pulumi.get(self, "custom_fg_color")

    @custom_fg_color.setter
    def custom_fg_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fg_color", value)

    @property
    @pulumi.getter(name="hideValue")
    def hide_value(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting this to True hides values.
        """
        return pulumi.get(self, "hide_value")

    @hide_value.setter
    def hide_value(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "hide_value", value)

    @property
    @pulumi.getter(name="imageUrl")
    def image_url(self) -> Optional[pulumi.Input[str]]:
        """
        Displays an image as the background.
        """
        return pulumi.get(self, "image_url")

    @image_url.setter
    def image_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "image_url", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def timeframe(self) -> Optional[pulumi.Input[str]]:
        """
        Defines the displayed timeframe.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timeframe", value)


@pulumi.input_type
class DashboardWidgetTreemapDefinitionRequestFormulaLimitArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] count: The number of results to return
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of results to return
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetTreemapDefinitionRequestFormulaStyleArgs:
    def __init__(__self__, *,
                 palette: Optional[pulumi.Input[str]] = None,
                 palette_index: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] palette: The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        :param pulumi.Input[int] palette_index: Index specifying which color to use within the palette.
        """
        if palette is not None:
            pulumi.set(__self__, "palette", palette)
        if palette_index is not None:
            pulumi.set(__self__, "palette_index", palette_index)

    @property
    @pulumi.getter
    def palette(self) -> Optional[pulumi.Input[str]]:
        """
        The color palette to apply. Valid values are `blue`, `custom_bg`, `custom_image`, `custom_text`, `gray_on_white`, `grey`, `green`, `orange`, `red`, `red_on_white`, `white_on_gray`, `white_on_green`, `green_on_white`, `white_on_red`, `white_on_yellow`, `yellow_on_white`, `black_on_light_yellow`, `black_on_light_green`, `black_on_light_red`.
        """
        return pulumi.get(self, "palette")

    @palette.setter
    def palette(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "palette", value)

    @property
    @pulumi.getter(name="paletteIndex")
    def palette_index(self) -> Optional[pulumi.Input[int]]:
        """
        Index specifying which color to use within the palette.
        """
        return pulumi.get(self, "palette_index")

    @palette_index.setter
    def palette_index(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "palette_index", value)


@pulumi.input_type
class DashboardWidgetTreemapDefinitionRequestQueryArgs:
    def __init__(__self__, *,
                 apm_dependency_stats_query: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryApmDependencyStatsQueryArgs']] = None,
                 apm_resource_stats_query: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryApmResourceStatsQueryArgs']] = None,
                 event_query: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryEventQueryArgs']] = None,
                 metric_query: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryMetricQueryArgs']] = None,
                 process_query: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryProcessQueryArgs']] = None,
                 slo_query: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQuerySloQueryArgs']] = None):
        """
        :param pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryApmDependencyStatsQueryArgs'] apm_dependency_stats_query: The APM Dependency Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryApmResourceStatsQueryArgs'] apm_resource_stats_query: The APM Resource Stats query using formulas and functions.
        :param pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryEventQueryArgs'] event_query: A timeseries formula and functions events query.
        :param pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryMetricQueryArgs'] metric_query: A timeseries formula and functions metrics query.
        :param pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryProcessQueryArgs'] process_query: The process query to use in the widget. The structure of this block is described below.
        :param pulumi.Input['DashboardWidgetTreemapDefinitionRequestQuerySloQueryArgs'] slo_query: The slo query using formulas and functions.
        """
        if apm_dependency_stats_query is not None:
            pulumi.set(__self__, "apm_dependency_stats_query", apm_dependency_stats_query)
        if apm_resource_stats_query is not None:
            pulumi.set(__self__, "apm_resource_stats_query", apm_resource_stats_query)
        if event_query is not None:
            pulumi.set(__self__, "event_query", event_query)
        if metric_query is not None:
            pulumi.set(__self__, "metric_query", metric_query)
        if process_query is not None:
            pulumi.set(__self__, "process_query", process_query)
        if slo_query is not None:
            pulumi.set(__self__, "slo_query", slo_query)

    @property
    @pulumi.getter(name="apmDependencyStatsQuery")
    def apm_dependency_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryApmDependencyStatsQueryArgs']]:
        """
        The APM Dependency Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_dependency_stats_query")

    @apm_dependency_stats_query.setter
    def apm_dependency_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryApmDependencyStatsQueryArgs']]):
        pulumi.set(self, "apm_dependency_stats_query", value)

    @property
    @pulumi.getter(name="apmResourceStatsQuery")
    def apm_resource_stats_query(self) -> Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryApmResourceStatsQueryArgs']]:
        """
        The APM Resource Stats query using formulas and functions.
        """
        return pulumi.get(self, "apm_resource_stats_query")

    @apm_resource_stats_query.setter
    def apm_resource_stats_query(self, value: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryApmResourceStatsQueryArgs']]):
        pulumi.set(self, "apm_resource_stats_query", value)

    @property
    @pulumi.getter(name="eventQuery")
    def event_query(self) -> Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryEventQueryArgs']]:
        """
        A timeseries formula and functions events query.
        """
        return pulumi.get(self, "event_query")

    @event_query.setter
    def event_query(self, value: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryEventQueryArgs']]):
        pulumi.set(self, "event_query", value)

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryMetricQueryArgs']]:
        """
        A timeseries formula and functions metrics query.
        """
        return pulumi.get(self, "metric_query")

    @metric_query.setter
    def metric_query(self, value: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryMetricQueryArgs']]):
        pulumi.set(self, "metric_query", value)

    @property
    @pulumi.getter(name="processQuery")
    def process_query(self) -> Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryProcessQueryArgs']]:
        """
        The process query to use in the widget. The structure of this block is described below.
        """
        return pulumi.get(self, "process_query")

    @process_query.setter
    def process_query(self, value: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryProcessQueryArgs']]):
        pulumi.set(self, "process_query", value)

    @property
    @pulumi.getter(name="sloQuery")
    def slo_query(self) -> Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQuerySloQueryArgs']]:
        """
        The slo query using formulas and functions.
        """
        return pulumi.get(self, "slo_query")

    @slo_query.setter
    def slo_query(self, value: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQuerySloQueryArgs']]):
        pulumi.set(self, "slo_query", value)


@pulumi.input_type
class DashboardWidgetTreemapDefinitionRequestQueryApmDependencyStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 operation_name: pulumi.Input[str],
                 resource_name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 is_upstream: Optional[pulumi.Input[bool]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] resource_name: APM resource.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[bool] is_upstream: Determines whether stats for upstream or downstream dependencies should be queried.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "operation_name", operation_name)
        pulumi.set(__self__, "resource_name", resource_name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if is_upstream is not None:
            pulumi.set(__self__, "is_upstream", is_upstream)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> pulumi.Input[str]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> pulumi.Input[str]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="isUpstream")
    def is_upstream(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether stats for upstream or downstream dependencies should be queried.
        """
        return pulumi.get(self, "is_upstream")

    @is_upstream.setter
    def is_upstream(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_upstream", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)


@pulumi.input_type
class DashboardWidgetTreemapDefinitionRequestQueryApmResourceStatsQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 env: pulumi.Input[str],
                 name: pulumi.Input[str],
                 service: pulumi.Input[str],
                 stat: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 operation_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_name: Optional[pulumi.Input[str]] = None,
                 primary_tag_value: Optional[pulumi.Input[str]] = None,
                 resource_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] env: APM Environment.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] service: APM service.
        :param pulumi.Input[str] stat: APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[str] operation_name: Name of operation on service.
        :param pulumi.Input[str] primary_tag_name: The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        :param pulumi.Input[str] primary_tag_value: Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        :param pulumi.Input[str] resource_name: APM resource.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "env", env)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "stat", stat)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if operation_name is not None:
            pulumi.set(__self__, "operation_name", operation_name)
        if primary_tag_name is not None:
            pulumi.set(__self__, "primary_tag_name", primary_tag_name)
        if primary_tag_value is not None:
            pulumi.set(__self__, "primary_tag_value", primary_tag_value)
        if resource_name is not None:
            pulumi.set(__self__, "resource_name", resource_name)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def env(self) -> pulumi.Input[str]:
        """
        APM Environment.
        """
        return pulumi.get(self, "env")

    @env.setter
    def env(self, value: pulumi.Input[str]):
        pulumi.set(self, "env", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[str]:
        """
        APM service.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[str]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter
    def stat(self) -> pulumi.Input[str]:
        """
        APM statistic. Valid values are `avg_duration`, `avg_root_duration`, `avg_spans_per_trace`, `error_rate`, `pct_exec_time`, `pct_of_traces`, `total_traces_count`.
        """
        return pulumi.get(self, "stat")

    @stat.setter
    def stat(self, value: pulumi.Input[str]):
        pulumi.set(self, "stat", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter(name="operationName")
    def operation_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of operation on service.
        """
        return pulumi.get(self, "operation_name")

    @operation_name.setter
    def operation_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operation_name", value)

    @property
    @pulumi.getter(name="primaryTagName")
    def primary_tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the second primary tag used within APM; required when `primary_tag_value` is specified. See https://docs.datadoghq.com/tracing/guide/setting*primary*tags*to*scope/#add-a-second-primary-tag-in-datadog.
        """
        return pulumi.get(self, "primary_tag_name")

    @primary_tag_name.setter
    def primary_tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_name", value)

    @property
    @pulumi.getter(name="primaryTagValue")
    def primary_tag_value(self) -> Optional[pulumi.Input[str]]:
        """
        Filter APM data by the second primary tag. `primary_tag_name` must also be specified.
        """
        return pulumi.get(self, "primary_tag_value")

    @primary_tag_value.setter
    def primary_tag_value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_tag_value", value)

    @property
    @pulumi.getter(name="resourceName")
    def resource_name(self) -> Optional[pulumi.Input[str]]:
        """
        APM resource.
        """
        return pulumi.get(self, "resource_name")

    @resource_name.setter
    def resource_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_name", value)


@pulumi.input_type
class DashboardWidgetTreemapDefinitionRequestQueryEventQueryArgs:
    def __init__(__self__, *,
                 computes: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryEventQueryComputeArgs']]],
                 data_source: pulumi.Input[str],
                 name: pulumi.Input[str],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryEventQueryGroupByArgs']]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 search: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryEventQuerySearchArgs']] = None,
                 storage: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryEventQueryComputeArgs']]] computes: The compute options.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryEventQueryGroupByArgs']]] group_bies: Multiple `group_by` blocks are allowed using the structure below.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        :param pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryEventQuerySearchArgs'] search: The search options.
        :param pulumi.Input[str] storage: Storage location (private beta).
        """
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def computes(self) -> pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryEventQueryComputeArgs']]]:
        """
        The compute options.
        """
        return pulumi.get(self, "computes")

    @computes.setter
    def computes(self, value: pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryEventQueryComputeArgs']]]):
        pulumi.set(self, "computes", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryEventQueryGroupByArgs']]]]:
        """
        Multiple `group_by` blocks are allowed using the structure below.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryEventQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryEventQuerySearchArgs']]:
        """
        The search options.
        """
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryEventQuerySearchArgs']]):
        pulumi.set(self, "search", value)

    @property
    @pulumi.getter
    def storage(self) -> Optional[pulumi.Input[str]]:
        """
        Storage location (private beta).
        """
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage", value)


@pulumi.input_type
class DashboardWidgetTreemapDefinitionRequestQueryEventQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 interval: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[int] interval: Define the time interval in seconds.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Define the time interval in seconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)


@pulumi.input_type
class DashboardWidgetTreemapDefinitionRequestQueryEventQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryEventQueryGroupBySortArgs']] = None):
        """
        :param pulumi.Input[str] facet: The facet name.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryEventQueryGroupBySortArgs'] sort: The options for sorting group by results.
        """
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        """
        The facet name.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryEventQueryGroupBySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['DashboardWidgetTreemapDefinitionRequestQueryEventQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class DashboardWidgetTreemapDefinitionRequestQueryEventQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 metric: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation method.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] order: Widget sorting methods. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation method.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Widget sorting methods. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class DashboardWidgetTreemapDefinitionRequestQueryEventQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class DashboardWidgetTreemapDefinitionRequestQueryMetricQueryArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 query: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 data_source: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if data_source is not None:
            pulumi.set(__self__, "data_source", data_source)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> Optional[pulumi.Input[str]]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_source", value)


@pulumi.input_type
class DashboardWidgetTreemapDefinitionRequestQueryProcessQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 metric: pulumi.Input[str],
                 name: pulumi.Input[str],
                 aggregator: Optional[pulumi.Input[str]] = None,
                 is_normalized_cpu: Optional[pulumi.Input[bool]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 tag_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 text_filter: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] metric: The metric from the request to correlate with this conditional format.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] aggregator: The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        :param pulumi.Input[bool] is_normalized_cpu: Whether to normalize the CPU percentages.
        :param pulumi.Input[int] limit: The maximum number of items in the group.
        :param pulumi.Input[str] sort: The options for sorting group by results.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tag_filters: An array of tags to filter by.
        :param pulumi.Input[str] text_filter: The text to use as a filter.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "metric", metric)
        pulumi.set(__self__, "name", name)
        if aggregator is not None:
            pulumi.set(__self__, "aggregator", aggregator)
        if is_normalized_cpu is not None:
            pulumi.set(__self__, "is_normalized_cpu", is_normalized_cpu)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if tag_filters is not None:
            pulumi.set(__self__, "tag_filters", tag_filters)
        if text_filter is not None:
            pulumi.set(__self__, "text_filter", text_filter)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def metric(self) -> pulumi.Input[str]:
        """
        The metric from the request to correlate with this conditional format.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def aggregator(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation methods available for metrics queries. Valid values are `avg`, `min`, `max`, `sum`, `last`, `area`, `l2norm`, `percentile`.
        """
        return pulumi.get(self, "aggregator")

    @aggregator.setter
    def aggregator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregator", value)

    @property
    @pulumi.getter(name="isNormalizedCpu")
    def is_normalized_cpu(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to normalize the CPU percentages.
        """
        return pulumi.get(self, "is_normalized_cpu")

    @is_normalized_cpu.setter
    def is_normalized_cpu(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_normalized_cpu", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of items in the group.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter(name="tagFilters")
    def tag_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of tags to filter by.
        """
        return pulumi.get(self, "tag_filters")

    @tag_filters.setter
    def tag_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tag_filters", value)

    @property
    @pulumi.getter(name="textFilter")
    def text_filter(self) -> Optional[pulumi.Input[str]]:
        """
        The text to use as a filter.
        """
        return pulumi.get(self, "text_filter")

    @text_filter.setter
    def text_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "text_filter", value)


@pulumi.input_type
class DashboardWidgetTreemapDefinitionRequestQuerySloQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 measure: pulumi.Input[str],
                 slo_id: pulumi.Input[str],
                 additional_query_filters: Optional[pulumi.Input[str]] = None,
                 group_mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slo_query_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] data_source: The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        :param pulumi.Input[str] measure: SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        :param pulumi.Input[str] slo_id: ID of an SLO to query.
        :param pulumi.Input[str] additional_query_filters: Additional filters applied to the SLO query.
        :param pulumi.Input[str] group_mode: Group mode to query measures. Valid values are `overall`, `components`.
        :param pulumi.Input[str] name: The name of the variable.
        :param pulumi.Input[str] slo_query_type: type of the SLO to query. Valid values are `metric`.
        """
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "measure", measure)
        pulumi.set(__self__, "slo_id", slo_id)
        if additional_query_filters is not None:
            pulumi.set(__self__, "additional_query_filters", additional_query_filters)
        if group_mode is not None:
            pulumi.set(__self__, "group_mode", group_mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slo_query_type is not None:
            pulumi.set(__self__, "slo_query_type", slo_query_type)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for APM Dependency Stats queries. Valid values are `apm_dependency_stats`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def measure(self) -> pulumi.Input[str]:
        """
        SLO measures queries. Valid values are `good_events`, `bad_events`, `slo_status`, `error_budget_remaining`, `burn_rate`, `error_budget_burndown`.
        """
        return pulumi.get(self, "measure")

    @measure.setter
    def measure(self, value: pulumi.Input[str]):
        pulumi.set(self, "measure", value)

    @property
    @pulumi.getter(name="sloId")
    def slo_id(self) -> pulumi.Input[str]:
        """
        ID of an SLO to query.
        """
        return pulumi.get(self, "slo_id")

    @slo_id.setter
    def slo_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "slo_id", value)

    @property
    @pulumi.getter(name="additionalQueryFilters")
    def additional_query_filters(self) -> Optional[pulumi.Input[str]]:
        """
        Additional filters applied to the SLO query.
        """
        return pulumi.get(self, "additional_query_filters")

    @additional_query_filters.setter
    def additional_query_filters(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_query_filters", value)

    @property
    @pulumi.getter(name="groupMode")
    def group_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Group mode to query measures. Valid values are `overall`, `components`.
        """
        return pulumi.get(self, "group_mode")

    @group_mode.setter
    def group_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sloQueryType")
    def slo_query_type(self) -> Optional[pulumi.Input[str]]:
        """
        type of the SLO to query. Valid values are `metric`.
        """
        return pulumi.get(self, "slo_query_type")

    @slo_query_type.setter
    def slo_query_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slo_query_type", value)


@pulumi.input_type
class DashboardWidgetWidgetLayoutArgs:
    def __init__(__self__, *,
                 height: pulumi.Input[int],
                 width: pulumi.Input[int],
                 x: pulumi.Input[int],
                 y: pulumi.Input[int],
                 is_column_break: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] height: The height of the widget.
        :param pulumi.Input[int] width: Widget column width. Valid values are `auto`, `compact`, `full`.
        :param pulumi.Input[int] x: The query used for the X-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
        :param pulumi.Input[int] y: The query used for the Y-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
        :param pulumi.Input[bool] is_column_break: Whether the widget should be the first one on the second column in high density or not. Only for the new dashboard layout and only one widget in the dashboard should have this property set to `true`.
        """
        pulumi.set(__self__, "height", height)
        pulumi.set(__self__, "width", width)
        pulumi.set(__self__, "x", x)
        pulumi.set(__self__, "y", y)
        if is_column_break is not None:
            pulumi.set(__self__, "is_column_break", is_column_break)

    @property
    @pulumi.getter
    def height(self) -> pulumi.Input[int]:
        """
        The height of the widget.
        """
        return pulumi.get(self, "height")

    @height.setter
    def height(self, value: pulumi.Input[int]):
        pulumi.set(self, "height", value)

    @property
    @pulumi.getter
    def width(self) -> pulumi.Input[int]:
        """
        Widget column width. Valid values are `auto`, `compact`, `full`.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: pulumi.Input[int]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter
    def x(self) -> pulumi.Input[int]:
        """
        The query used for the X-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
        """
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: pulumi.Input[int]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter
    def y(self) -> pulumi.Input[int]:
        """
        The query used for the Y-Axis. Exactly one nested block is allowed using the structure below (exactly one of `q`, `apm_query`, `log_query`, `rum_query`, `security_query`, `apm_stats_query` or `process_query` is required within the block).
        """
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: pulumi.Input[int]):
        pulumi.set(self, "y", value)

    @property
    @pulumi.getter(name="isColumnBreak")
    def is_column_break(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the widget should be the first one on the second column in high density or not. Only for the new dashboard layout and only one widget in the dashboard should have this property set to `true`.
        """
        return pulumi.get(self, "is_column_break")

    @is_column_break.setter
    def is_column_break(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_column_break", value)


@pulumi.input_type
class DowntimeRecurrenceArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 period: Optional[pulumi.Input[int]] = None,
                 rrule: Optional[pulumi.Input[str]] = None,
                 until_date: Optional[pulumi.Input[int]] = None,
                 until_occurrences: Optional[pulumi.Input[int]] = None,
                 week_days: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] type: One of `days`, `weeks`, `months`, `years`, or `rrule`.
        :param pulumi.Input[int] period: How often to repeat as an integer. For example to repeat every 3 days, select a `type` of `days` and a `period` of `3`.
        :param pulumi.Input[str] rrule: The RRULE standard for defining recurring events. For example, to have a recurring event on the first day of each month, use `FREQ=MONTHLY;INTERVAL=1`. Most common rrule options from the iCalendar Spec are supported. Attributes specifying the duration in RRULE are not supported (for example, `DTSTART`, `DTEND`, `DURATION`). Only applicable when `type` is `rrule`.
        :param pulumi.Input[int] until_date: The date at which the recurrence should end as a POSIX timestamp. `until_occurrences` and `until_date` are mutually exclusive.
        :param pulumi.Input[int] until_occurrences: How many times the downtime will be rescheduled. `until_occurrences` and `until_date` are mutually exclusive.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] week_days: A list of week days to repeat on. Choose from: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat` or `Sun`. Only applicable when `type` is `weeks`. First letter must be capitalized.
        """
        pulumi.set(__self__, "type", type)
        if period is not None:
            pulumi.set(__self__, "period", period)
        if rrule is not None:
            pulumi.set(__self__, "rrule", rrule)
        if until_date is not None:
            pulumi.set(__self__, "until_date", until_date)
        if until_occurrences is not None:
            pulumi.set(__self__, "until_occurrences", until_occurrences)
        if week_days is not None:
            pulumi.set(__self__, "week_days", week_days)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        One of `days`, `weeks`, `months`, `years`, or `rrule`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def period(self) -> Optional[pulumi.Input[int]]:
        """
        How often to repeat as an integer. For example to repeat every 3 days, select a `type` of `days` and a `period` of `3`.
        """
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter
    def rrule(self) -> Optional[pulumi.Input[str]]:
        """
        The RRULE standard for defining recurring events. For example, to have a recurring event on the first day of each month, use `FREQ=MONTHLY;INTERVAL=1`. Most common rrule options from the iCalendar Spec are supported. Attributes specifying the duration in RRULE are not supported (for example, `DTSTART`, `DTEND`, `DURATION`). Only applicable when `type` is `rrule`.
        """
        return pulumi.get(self, "rrule")

    @rrule.setter
    def rrule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rrule", value)

    @property
    @pulumi.getter(name="untilDate")
    def until_date(self) -> Optional[pulumi.Input[int]]:
        """
        The date at which the recurrence should end as a POSIX timestamp. `until_occurrences` and `until_date` are mutually exclusive.
        """
        return pulumi.get(self, "until_date")

    @until_date.setter
    def until_date(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "until_date", value)

    @property
    @pulumi.getter(name="untilOccurrences")
    def until_occurrences(self) -> Optional[pulumi.Input[int]]:
        """
        How many times the downtime will be rescheduled. `until_occurrences` and `until_date` are mutually exclusive.
        """
        return pulumi.get(self, "until_occurrences")

    @until_occurrences.setter
    def until_occurrences(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "until_occurrences", value)

    @property
    @pulumi.getter(name="weekDays")
    def week_days(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of week days to repeat on. Choose from: `Mon`, `Tue`, `Wed`, `Thu`, `Fri`, `Sat` or `Sun`. Only applicable when `type` is `weeks`. First letter must be capitalized.
        """
        return pulumi.get(self, "week_days")

    @week_days.setter
    def week_days(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "week_days", value)


@pulumi.input_type
class DowntimeScheduleMonitorIdentifierArgs:
    def __init__(__self__, *,
                 monitor_id: Optional[pulumi.Input[int]] = None,
                 monitor_tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[int] monitor_id: ID of the monitor to prevent notifications.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] monitor_tags: A list of monitor tags. For example, tags that are applied directly to monitors, not tags that are used in monitor queries (which are filtered by the scope parameter), to which the downtime applies. The resulting downtime applies to monitors that match **all** provided monitor tags. Setting `monitor_tags` to `[*]` configures the downtime to mute all monitors for the given scope.
        """
        if monitor_id is not None:
            pulumi.set(__self__, "monitor_id", monitor_id)
        if monitor_tags is not None:
            pulumi.set(__self__, "monitor_tags", monitor_tags)

    @property
    @pulumi.getter(name="monitorId")
    def monitor_id(self) -> Optional[pulumi.Input[int]]:
        """
        ID of the monitor to prevent notifications.
        """
        return pulumi.get(self, "monitor_id")

    @monitor_id.setter
    def monitor_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monitor_id", value)

    @property
    @pulumi.getter(name="monitorTags")
    def monitor_tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of monitor tags. For example, tags that are applied directly to monitors, not tags that are used in monitor queries (which are filtered by the scope parameter), to which the downtime applies. The resulting downtime applies to monitors that match **all** provided monitor tags. Setting `monitor_tags` to `[*]` configures the downtime to mute all monitors for the given scope.
        """
        return pulumi.get(self, "monitor_tags")

    @monitor_tags.setter
    def monitor_tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "monitor_tags", value)


@pulumi.input_type
class DowntimeScheduleOneTimeScheduleArgs:
    def __init__(__self__, *,
                 end: Optional[pulumi.Input[str]] = None,
                 start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] end: ISO-8601 Datetime to end the downtime. Must include a UTC offset of zero. If not provided, the downtime never ends.
        :param pulumi.Input[str] start: ISO-8601 Datetime to start the downtime. Must include a UTC offset of zero. If not provided, the downtime starts the moment it is created.
        """
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[pulumi.Input[str]]:
        """
        ISO-8601 Datetime to end the downtime. Must include a UTC offset of zero. If not provided, the downtime never ends.
        """
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        """
        ISO-8601 Datetime to start the downtime. Must include a UTC offset of zero. If not provided, the downtime starts the moment it is created.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class DowntimeScheduleRecurringScheduleArgs:
    def __init__(__self__, *,
                 recurrences: Optional[pulumi.Input[Sequence[pulumi.Input['DowntimeScheduleRecurringScheduleRecurrenceArgs']]]] = None,
                 timezone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] timezone: The timezone in which to schedule the downtime.
        """
        if recurrences is not None:
            pulumi.set(__self__, "recurrences", recurrences)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def recurrences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DowntimeScheduleRecurringScheduleRecurrenceArgs']]]]:
        return pulumi.get(self, "recurrences")

    @recurrences.setter
    def recurrences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DowntimeScheduleRecurringScheduleRecurrenceArgs']]]]):
        pulumi.set(self, "recurrences", value)

    @property
    @pulumi.getter
    def timezone(self) -> Optional[pulumi.Input[str]]:
        """
        The timezone in which to schedule the downtime.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "timezone", value)


@pulumi.input_type
class DowntimeScheduleRecurringScheduleRecurrenceArgs:
    def __init__(__self__, *,
                 duration: pulumi.Input[str],
                 rrule: pulumi.Input[str],
                 start: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] duration: The length of the downtime. Must begin with an integer and end with one of 'm', 'h', d', or 'w'.
        :param pulumi.Input[str] rrule: The `RRULE` standard for defining recurring events. For example, to have a recurring event on the first day of each month, set the type to `rrule` and set the `FREQ` to `MONTHLY` and `BYMONTHDAY` to `1`. Most common `rrule` options from the [iCalendar Spec](https://tools.ietf.org/html/rfc5545) are supported.  **Note**: Attributes specifying the duration in `RRULE` are not supported (for example, `DTSTART`, `DTEND`, `DURATION`). More examples available in this [downtime guide](https://docs.datadoghq.com/monitors/guide/suppress-alert-with-downtimes/?tab=api).
        :param pulumi.Input[str] start: ISO-8601 Datetime to start the downtime. Must include a UTC offset of zero. If not provided, the downtime starts the moment it is created.
        """
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "rrule", rrule)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def duration(self) -> pulumi.Input[str]:
        """
        The length of the downtime. Must begin with an integer and end with one of 'm', 'h', d', or 'w'.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter
    def rrule(self) -> pulumi.Input[str]:
        """
        The `RRULE` standard for defining recurring events. For example, to have a recurring event on the first day of each month, set the type to `rrule` and set the `FREQ` to `MONTHLY` and `BYMONTHDAY` to `1`. Most common `rrule` options from the [iCalendar Spec](https://tools.ietf.org/html/rfc5545) are supported.  **Note**: Attributes specifying the duration in `RRULE` are not supported (for example, `DTSTART`, `DTEND`, `DURATION`). More examples available in this [downtime guide](https://docs.datadoghq.com/monitors/guide/suppress-alert-with-downtimes/?tab=api).
        """
        return pulumi.get(self, "rrule")

    @rrule.setter
    def rrule(self, value: pulumi.Input[str]):
        pulumi.set(self, "rrule", value)

    @property
    @pulumi.getter
    def start(self) -> Optional[pulumi.Input[str]]:
        """
        ISO-8601 Datetime to start the downtime. Must include a UTC offset of zero. If not provided, the downtime starts the moment it is created.
        """
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class IpAllowlistEntryArgs:
    def __init__(__self__, *,
                 cidr_block: pulumi.Input[str],
                 note: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] note: Note accompanying IP address.
        """
        pulumi.set(__self__, "cidr_block", cidr_block)
        if note is not None:
            pulumi.set(__self__, "note", note)

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: pulumi.Input[str]):
        pulumi.set(self, "cidr_block", value)

    @property
    @pulumi.getter
    def note(self) -> Optional[pulumi.Input[str]]:
        """
        Note accompanying IP address.
        """
        return pulumi.get(self, "note")

    @note.setter
    def note(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "note", value)


@pulumi.input_type
class LogsArchiveAzureArchiveArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 container: pulumi.Input[str],
                 storage_account: pulumi.Input[str],
                 tenant_id: pulumi.Input[str],
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] client_id: Your client id.
        :param pulumi.Input[str] container: The container where the archive is stored.
        :param pulumi.Input[str] storage_account: The associated storage account.
        :param pulumi.Input[str] tenant_id: Your tenant id.
        :param pulumi.Input[str] path: The path where the archive is stored.
        """
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "container", container)
        pulumi.set(__self__, "storage_account", storage_account)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        """
        Your client id.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter
    def container(self) -> pulumi.Input[str]:
        """
        The container where the archive is stored.
        """
        return pulumi.get(self, "container")

    @container.setter
    def container(self, value: pulumi.Input[str]):
        pulumi.set(self, "container", value)

    @property
    @pulumi.getter(name="storageAccount")
    def storage_account(self) -> pulumi.Input[str]:
        """
        The associated storage account.
        """
        return pulumi.get(self, "storage_account")

    @storage_account.setter
    def storage_account(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_account", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        """
        Your tenant id.
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The path where the archive is stored.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class LogsArchiveGcsArchiveArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 client_email: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] bucket: Name of your GCS bucket.
        :param pulumi.Input[str] client_email: Your client email.
        :param pulumi.Input[str] project_id: Your project id.
        :param pulumi.Input[str] path: Path where the archive is stored.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "client_email", client_email)
        pulumi.set(__self__, "project_id", project_id)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        Name of your GCS bucket.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="clientEmail")
    def client_email(self) -> pulumi.Input[str]:
        """
        Your client email.
        """
        return pulumi.get(self, "client_email")

    @client_email.setter
    def client_email(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_email", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        Your project id.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path where the archive is stored.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class LogsArchiveS3ArchiveArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 bucket: pulumi.Input[str],
                 role_name: pulumi.Input[str],
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] account_id: Your AWS account id.
        :param pulumi.Input[str] bucket: Name of your s3 bucket.
        :param pulumi.Input[str] role_name: Your AWS role name
        :param pulumi.Input[str] path: Path where the archive is stored.
        """
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "role_name", role_name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        """
        Your AWS account id.
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        """
        Name of your s3 bucket.
        """
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="roleName")
    def role_name(self) -> pulumi.Input[str]:
        """
        Your AWS role name
        """
        return pulumi.get(self, "role_name")

    @role_name.setter
    def role_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        Path where the archive is stored.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class LogsCustomPipelineFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Filter criteria of the category.
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Filter criteria of the category.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class LogsCustomPipelineProcessorArgs:
    def __init__(__self__, *,
                 arithmetic_processor: Optional[pulumi.Input['LogsCustomPipelineProcessorArithmeticProcessorArgs']] = None,
                 attribute_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorAttributeRemapperArgs']] = None,
                 category_processor: Optional[pulumi.Input['LogsCustomPipelineProcessorCategoryProcessorArgs']] = None,
                 date_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorDateRemapperArgs']] = None,
                 geo_ip_parser: Optional[pulumi.Input['LogsCustomPipelineProcessorGeoIpParserArgs']] = None,
                 grok_parser: Optional[pulumi.Input['LogsCustomPipelineProcessorGrokParserArgs']] = None,
                 lookup_processor: Optional[pulumi.Input['LogsCustomPipelineProcessorLookupProcessorArgs']] = None,
                 message_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorMessageRemapperArgs']] = None,
                 pipeline: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineArgs']] = None,
                 reference_table_lookup_processor: Optional[pulumi.Input['LogsCustomPipelineProcessorReferenceTableLookupProcessorArgs']] = None,
                 service_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorServiceRemapperArgs']] = None,
                 status_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorStatusRemapperArgs']] = None,
                 string_builder_processor: Optional[pulumi.Input['LogsCustomPipelineProcessorStringBuilderProcessorArgs']] = None,
                 trace_id_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorTraceIdRemapperArgs']] = None,
                 url_parser: Optional[pulumi.Input['LogsCustomPipelineProcessorUrlParserArgs']] = None,
                 user_agent_parser: Optional[pulumi.Input['LogsCustomPipelineProcessorUserAgentParserArgs']] = None):
        """
        :param pulumi.Input['LogsCustomPipelineProcessorArithmeticProcessorArgs'] arithmetic_processor: Arithmetic Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#arithmetic-processor)
        :param pulumi.Input['LogsCustomPipelineProcessorAttributeRemapperArgs'] attribute_remapper: Attribute Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#remapper)
        :param pulumi.Input['LogsCustomPipelineProcessorCategoryProcessorArgs'] category_processor: Category Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#category-processor)
        :param pulumi.Input['LogsCustomPipelineProcessorDateRemapperArgs'] date_remapper: Date Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-date-remapper)
        :param pulumi.Input['LogsCustomPipelineProcessorGeoIpParserArgs'] geo_ip_parser: Date GeoIP Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#geoip-parser)
        :param pulumi.Input['LogsCustomPipelineProcessorGrokParserArgs'] grok_parser: Grok Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#grok-parser)
        :param pulumi.Input['LogsCustomPipelineProcessorLookupProcessorArgs'] lookup_processor: Lookup Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
        :param pulumi.Input['LogsCustomPipelineProcessorMessageRemapperArgs'] message_remapper: Message Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-message-remapper)
        :param pulumi.Input['LogsCustomPipelineProcessorReferenceTableLookupProcessorArgs'] reference_table_lookup_processor: Reference Table Lookup Processor. Reference Tables are in public beta. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
        :param pulumi.Input['LogsCustomPipelineProcessorServiceRemapperArgs'] service_remapper: Service Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#service-remapper)
        :param pulumi.Input['LogsCustomPipelineProcessorStatusRemapperArgs'] status_remapper: Status Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-status-remapper)
        :param pulumi.Input['LogsCustomPipelineProcessorStringBuilderProcessorArgs'] string_builder_processor: String Builder Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#string-builder-processor)
        :param pulumi.Input['LogsCustomPipelineProcessorTraceIdRemapperArgs'] trace_id_remapper: Trace ID Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#trace-remapper)
        :param pulumi.Input['LogsCustomPipelineProcessorUrlParserArgs'] url_parser: URL Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#url-parser)
        :param pulumi.Input['LogsCustomPipelineProcessorUserAgentParserArgs'] user_agent_parser: User-Agent Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#user-agent-parser)
        """
        if arithmetic_processor is not None:
            pulumi.set(__self__, "arithmetic_processor", arithmetic_processor)
        if attribute_remapper is not None:
            pulumi.set(__self__, "attribute_remapper", attribute_remapper)
        if category_processor is not None:
            pulumi.set(__self__, "category_processor", category_processor)
        if date_remapper is not None:
            pulumi.set(__self__, "date_remapper", date_remapper)
        if geo_ip_parser is not None:
            pulumi.set(__self__, "geo_ip_parser", geo_ip_parser)
        if grok_parser is not None:
            pulumi.set(__self__, "grok_parser", grok_parser)
        if lookup_processor is not None:
            pulumi.set(__self__, "lookup_processor", lookup_processor)
        if message_remapper is not None:
            pulumi.set(__self__, "message_remapper", message_remapper)
        if pipeline is not None:
            pulumi.set(__self__, "pipeline", pipeline)
        if reference_table_lookup_processor is not None:
            pulumi.set(__self__, "reference_table_lookup_processor", reference_table_lookup_processor)
        if service_remapper is not None:
            pulumi.set(__self__, "service_remapper", service_remapper)
        if status_remapper is not None:
            pulumi.set(__self__, "status_remapper", status_remapper)
        if string_builder_processor is not None:
            pulumi.set(__self__, "string_builder_processor", string_builder_processor)
        if trace_id_remapper is not None:
            pulumi.set(__self__, "trace_id_remapper", trace_id_remapper)
        if url_parser is not None:
            pulumi.set(__self__, "url_parser", url_parser)
        if user_agent_parser is not None:
            pulumi.set(__self__, "user_agent_parser", user_agent_parser)

    @property
    @pulumi.getter(name="arithmeticProcessor")
    def arithmetic_processor(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorArithmeticProcessorArgs']]:
        """
        Arithmetic Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#arithmetic-processor)
        """
        return pulumi.get(self, "arithmetic_processor")

    @arithmetic_processor.setter
    def arithmetic_processor(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorArithmeticProcessorArgs']]):
        pulumi.set(self, "arithmetic_processor", value)

    @property
    @pulumi.getter(name="attributeRemapper")
    def attribute_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorAttributeRemapperArgs']]:
        """
        Attribute Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#remapper)
        """
        return pulumi.get(self, "attribute_remapper")

    @attribute_remapper.setter
    def attribute_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorAttributeRemapperArgs']]):
        pulumi.set(self, "attribute_remapper", value)

    @property
    @pulumi.getter(name="categoryProcessor")
    def category_processor(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorCategoryProcessorArgs']]:
        """
        Category Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#category-processor)
        """
        return pulumi.get(self, "category_processor")

    @category_processor.setter
    def category_processor(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorCategoryProcessorArgs']]):
        pulumi.set(self, "category_processor", value)

    @property
    @pulumi.getter(name="dateRemapper")
    def date_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorDateRemapperArgs']]:
        """
        Date Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-date-remapper)
        """
        return pulumi.get(self, "date_remapper")

    @date_remapper.setter
    def date_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorDateRemapperArgs']]):
        pulumi.set(self, "date_remapper", value)

    @property
    @pulumi.getter(name="geoIpParser")
    def geo_ip_parser(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorGeoIpParserArgs']]:
        """
        Date GeoIP Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#geoip-parser)
        """
        return pulumi.get(self, "geo_ip_parser")

    @geo_ip_parser.setter
    def geo_ip_parser(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorGeoIpParserArgs']]):
        pulumi.set(self, "geo_ip_parser", value)

    @property
    @pulumi.getter(name="grokParser")
    def grok_parser(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorGrokParserArgs']]:
        """
        Grok Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#grok-parser)
        """
        return pulumi.get(self, "grok_parser")

    @grok_parser.setter
    def grok_parser(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorGrokParserArgs']]):
        pulumi.set(self, "grok_parser", value)

    @property
    @pulumi.getter(name="lookupProcessor")
    def lookup_processor(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorLookupProcessorArgs']]:
        """
        Lookup Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
        """
        return pulumi.get(self, "lookup_processor")

    @lookup_processor.setter
    def lookup_processor(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorLookupProcessorArgs']]):
        pulumi.set(self, "lookup_processor", value)

    @property
    @pulumi.getter(name="messageRemapper")
    def message_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorMessageRemapperArgs']]:
        """
        Message Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-message-remapper)
        """
        return pulumi.get(self, "message_remapper")

    @message_remapper.setter
    def message_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorMessageRemapperArgs']]):
        pulumi.set(self, "message_remapper", value)

    @property
    @pulumi.getter
    def pipeline(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineArgs']]:
        return pulumi.get(self, "pipeline")

    @pipeline.setter
    def pipeline(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineArgs']]):
        pulumi.set(self, "pipeline", value)

    @property
    @pulumi.getter(name="referenceTableLookupProcessor")
    def reference_table_lookup_processor(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorReferenceTableLookupProcessorArgs']]:
        """
        Reference Table Lookup Processor. Reference Tables are in public beta. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
        """
        return pulumi.get(self, "reference_table_lookup_processor")

    @reference_table_lookup_processor.setter
    def reference_table_lookup_processor(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorReferenceTableLookupProcessorArgs']]):
        pulumi.set(self, "reference_table_lookup_processor", value)

    @property
    @pulumi.getter(name="serviceRemapper")
    def service_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorServiceRemapperArgs']]:
        """
        Service Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#service-remapper)
        """
        return pulumi.get(self, "service_remapper")

    @service_remapper.setter
    def service_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorServiceRemapperArgs']]):
        pulumi.set(self, "service_remapper", value)

    @property
    @pulumi.getter(name="statusRemapper")
    def status_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorStatusRemapperArgs']]:
        """
        Status Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-status-remapper)
        """
        return pulumi.get(self, "status_remapper")

    @status_remapper.setter
    def status_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorStatusRemapperArgs']]):
        pulumi.set(self, "status_remapper", value)

    @property
    @pulumi.getter(name="stringBuilderProcessor")
    def string_builder_processor(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorStringBuilderProcessorArgs']]:
        """
        String Builder Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#string-builder-processor)
        """
        return pulumi.get(self, "string_builder_processor")

    @string_builder_processor.setter
    def string_builder_processor(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorStringBuilderProcessorArgs']]):
        pulumi.set(self, "string_builder_processor", value)

    @property
    @pulumi.getter(name="traceIdRemapper")
    def trace_id_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorTraceIdRemapperArgs']]:
        """
        Trace ID Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#trace-remapper)
        """
        return pulumi.get(self, "trace_id_remapper")

    @trace_id_remapper.setter
    def trace_id_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorTraceIdRemapperArgs']]):
        pulumi.set(self, "trace_id_remapper", value)

    @property
    @pulumi.getter(name="urlParser")
    def url_parser(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorUrlParserArgs']]:
        """
        URL Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#url-parser)
        """
        return pulumi.get(self, "url_parser")

    @url_parser.setter
    def url_parser(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorUrlParserArgs']]):
        pulumi.set(self, "url_parser", value)

    @property
    @pulumi.getter(name="userAgentParser")
    def user_agent_parser(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorUserAgentParserArgs']]:
        """
        User-Agent Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#user-agent-parser)
        """
        return pulumi.get(self, "user_agent_parser")

    @user_agent_parser.setter
    def user_agent_parser(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorUserAgentParserArgs']]):
        pulumi.set(self, "user_agent_parser", value)


@pulumi.input_type
class LogsCustomPipelineProcessorArithmeticProcessorArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 is_replace_missing: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] expression: Arithmetic operation between one or more log attributes.
        :param pulumi.Input[str] target: Name of the attribute that contains the result of the arithmetic operation.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[bool] is_replace_missing: If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_replace_missing is not None:
            pulumi.set(__self__, "is_replace_missing", is_replace_missing)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        Arithmetic operation between one or more log attributes.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Name of the attribute that contains the result of the arithmetic operation.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="isReplaceMissing")
    def is_replace_missing(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
        """
        return pulumi.get(self, "is_replace_missing")

    @is_replace_missing.setter
    def is_replace_missing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_replace_missing", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorAttributeRemapperArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 target: pulumi.Input[str],
                 target_type: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_on_conflict: Optional[pulumi.Input[bool]] = None,
                 preserve_source: Optional[pulumi.Input[bool]] = None,
                 target_format: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] source_type: Defines where the sources are from (log `attribute` or `tag`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sources: List of source attributes or tags.
        :param pulumi.Input[str] target: Name of the attribute that contains the result of the arithmetic operation.
        :param pulumi.Input[str] target_type: Defines if the target is a log `attribute` or `tag`.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        :param pulumi.Input[bool] override_on_conflict: Override the target element if already set.
        :param pulumi.Input[bool] preserve_source: Remove or preserve the remapped source element.
        :param pulumi.Input[str] target_format: If the `target_type` of the remapper is `attribute`, try to cast the value to a new specific type. If the cast is not possible, the original type is kept. `string`, `integer`, or `double` are the possible types. If the `target_type` is `tag`, this parameter may not be specified.
        """
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "target_type", target_type)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_on_conflict is not None:
            pulumi.set(__self__, "override_on_conflict", override_on_conflict)
        if preserve_source is not None:
            pulumi.set(__self__, "preserve_source", preserve_source)
        if target_format is not None:
            pulumi.set(__self__, "target_format", target_format)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        """
        Defines where the sources are from (log `attribute` or `tag`).
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of source attributes or tags.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Name of the attribute that contains the result of the arithmetic operation.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Input[str]:
        """
        Defines if the target is a log `attribute` or `tag`.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_type", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideOnConflict")
    def override_on_conflict(self) -> Optional[pulumi.Input[bool]]:
        """
        Override the target element if already set.
        """
        return pulumi.get(self, "override_on_conflict")

    @override_on_conflict.setter
    def override_on_conflict(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override_on_conflict", value)

    @property
    @pulumi.getter(name="preserveSource")
    def preserve_source(self) -> Optional[pulumi.Input[bool]]:
        """
        Remove or preserve the remapped source element.
        """
        return pulumi.get(self, "preserve_source")

    @preserve_source.setter
    def preserve_source(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_source", value)

    @property
    @pulumi.getter(name="targetFormat")
    def target_format(self) -> Optional[pulumi.Input[str]]:
        """
        If the `target_type` of the remapper is `attribute`, try to cast the value to a new specific type. If the cast is not possible, the original type is kept. `string`, `integer`, or `double` are the possible types. If the `target_type` is `tag`, this parameter may not be specified.
        """
        return pulumi.get(self, "target_format")

    @target_format.setter
    def target_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_format", value)


@pulumi.input_type
class LogsCustomPipelineProcessorCategoryProcessorArgs:
    def __init__(__self__, *,
                 categories: pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorCategoryProcessorCategoryArgs']]],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorCategoryProcessorCategoryArgs']]] categories: List of filters to match or exclude a log with their corresponding name to assign a custom value to the log.
        :param pulumi.Input[str] target: Name of the attribute that contains the result of the arithmetic operation.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorCategoryProcessorCategoryArgs']]]:
        """
        List of filters to match or exclude a log with their corresponding name to assign a custom value to the log.
        """
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorCategoryProcessorCategoryArgs']]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Name of the attribute that contains the result of the arithmetic operation.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorCategoryProcessorCategoryArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input['LogsCustomPipelineProcessorCategoryProcessorCategoryFilterArgs'],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input['LogsCustomPipelineProcessorCategoryProcessorCategoryFilterArgs']:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input['LogsCustomPipelineProcessorCategoryProcessorCategoryFilterArgs']):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorCategoryProcessorCategoryFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Filter criteria of the category.
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Filter criteria of the category.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class LogsCustomPipelineProcessorDateRemapperArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sources: List of source attributes or tags.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of source attributes or tags.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorGeoIpParserArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sources: List of source attributes or tags.
        :param pulumi.Input[str] target: Name of the attribute that contains the result of the arithmetic operation.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of source attributes or tags.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Name of the attribute that contains the result of the arithmetic operation.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorGrokParserArgs:
    def __init__(__self__, *,
                 grok: pulumi.Input['LogsCustomPipelineProcessorGrokParserGrokArgs'],
                 source: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 samples: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] source: Name of the log attribute to parse.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] samples: List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
        """
        pulumi.set(__self__, "grok", grok)
        pulumi.set(__self__, "source", source)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if samples is not None:
            pulumi.set(__self__, "samples", samples)

    @property
    @pulumi.getter
    def grok(self) -> pulumi.Input['LogsCustomPipelineProcessorGrokParserGrokArgs']:
        return pulumi.get(self, "grok")

    @grok.setter
    def grok(self, value: pulumi.Input['LogsCustomPipelineProcessorGrokParserGrokArgs']):
        pulumi.set(self, "grok", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        Name of the log attribute to parse.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def samples(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
        """
        return pulumi.get(self, "samples")

    @samples.setter
    def samples(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "samples", value)


@pulumi.input_type
class LogsCustomPipelineProcessorGrokParserGrokArgs:
    def __init__(__self__, *,
                 match_rules: pulumi.Input[str],
                 support_rules: pulumi.Input[str]):
        """
        :param pulumi.Input[str] match_rules: Match rules for your grok parser.
        :param pulumi.Input[str] support_rules: Support rules for your grok parser.
        """
        pulumi.set(__self__, "match_rules", match_rules)
        pulumi.set(__self__, "support_rules", support_rules)

    @property
    @pulumi.getter(name="matchRules")
    def match_rules(self) -> pulumi.Input[str]:
        """
        Match rules for your grok parser.
        """
        return pulumi.get(self, "match_rules")

    @match_rules.setter
    def match_rules(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_rules", value)

    @property
    @pulumi.getter(name="supportRules")
    def support_rules(self) -> pulumi.Input[str]:
        """
        Support rules for your grok parser.
        """
        return pulumi.get(self, "support_rules")

    @support_rules.setter
    def support_rules(self, value: pulumi.Input[str]):
        pulumi.set(self, "support_rules", value)


@pulumi.input_type
class LogsCustomPipelineProcessorLookupProcessorArgs:
    def __init__(__self__, *,
                 lookup_tables: pulumi.Input[Sequence[pulumi.Input[str]]],
                 source: pulumi.Input[str],
                 target: pulumi.Input[str],
                 default_lookup: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] lookup_tables: List of entries of the lookup table using `key,value` format.
        :param pulumi.Input[str] source: Name of the log attribute to parse.
        :param pulumi.Input[str] target: Name of the attribute that contains the result of the arithmetic operation.
        :param pulumi.Input[str] default_lookup: Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "lookup_tables", lookup_tables)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)
        if default_lookup is not None:
            pulumi.set(__self__, "default_lookup", default_lookup)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="lookupTables")
    def lookup_tables(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of entries of the lookup table using `key,value` format.
        """
        return pulumi.get(self, "lookup_tables")

    @lookup_tables.setter
    def lookup_tables(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "lookup_tables", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        Name of the log attribute to parse.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Name of the attribute that contains the result of the arithmetic operation.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="defaultLookup")
    def default_lookup(self) -> Optional[pulumi.Input[str]]:
        """
        Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
        """
        return pulumi.get(self, "default_lookup")

    @default_lookup.setter
    def default_lookup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_lookup", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorMessageRemapperArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sources: List of source attributes or tags.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of source attributes or tags.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineArgs:
    def __init__(__self__, *,
                 filters: pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorPipelineFilterArgs']]],
                 name: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 processors: Optional[pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Your pipeline name.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        """
        pulumi.set(__self__, "filters", filters)
        pulumi.set(__self__, "name", name)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if processors is not None:
            pulumi.set(__self__, "processors", processors)

    @property
    @pulumi.getter
    def filters(self) -> pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorPipelineFilterArgs']]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorPipelineFilterArgs']]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def processors(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorArgs']]]]:
        return pulumi.get(self, "processors")

    @processors.setter
    def processors(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorArgs']]]]):
        pulumi.set(self, "processors", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Filter criteria of the category.
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Filter criteria of the category.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorArgs:
    def __init__(__self__, *,
                 arithmetic_processor: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessorArgs']] = None,
                 attribute_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorAttributeRemapperArgs']] = None,
                 category_processor: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorArgs']] = None,
                 date_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorDateRemapperArgs']] = None,
                 geo_ip_parser: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorGeoIpParserArgs']] = None,
                 grok_parser: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorGrokParserArgs']] = None,
                 lookup_processor: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorLookupProcessorArgs']] = None,
                 message_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorMessageRemapperArgs']] = None,
                 reference_table_lookup_processor: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorReferenceTableLookupProcessorArgs']] = None,
                 service_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorServiceRemapperArgs']] = None,
                 status_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorStatusRemapperArgs']] = None,
                 string_builder_processor: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessorArgs']] = None,
                 trace_id_remapper: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapperArgs']] = None,
                 url_parser: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorUrlParserArgs']] = None,
                 user_agent_parser: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorUserAgentParserArgs']] = None):
        """
        :param pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessorArgs'] arithmetic_processor: Arithmetic Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#arithmetic-processor)
        :param pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorAttributeRemapperArgs'] attribute_remapper: Attribute Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#remapper)
        :param pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorArgs'] category_processor: Category Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#category-processor)
        :param pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorDateRemapperArgs'] date_remapper: Date Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-date-remapper)
        :param pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorGeoIpParserArgs'] geo_ip_parser: Date GeoIP Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#geoip-parser)
        :param pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorGrokParserArgs'] grok_parser: Grok Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#grok-parser)
        :param pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorLookupProcessorArgs'] lookup_processor: Lookup Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
        :param pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorMessageRemapperArgs'] message_remapper: Message Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-message-remapper)
        :param pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorReferenceTableLookupProcessorArgs'] reference_table_lookup_processor: Reference Table Lookup Processor. Reference Tables are in public beta. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
        :param pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorServiceRemapperArgs'] service_remapper: Service Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#service-remapper)
        :param pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorStatusRemapperArgs'] status_remapper: Status Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-status-remapper)
        :param pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessorArgs'] string_builder_processor: String Builder Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#string-builder-processor)
        :param pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapperArgs'] trace_id_remapper: Trace ID Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#trace-remapper)
        :param pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorUrlParserArgs'] url_parser: URL Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#url-parser)
        :param pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorUserAgentParserArgs'] user_agent_parser: User-Agent Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#user-agent-parser)
        """
        if arithmetic_processor is not None:
            pulumi.set(__self__, "arithmetic_processor", arithmetic_processor)
        if attribute_remapper is not None:
            pulumi.set(__self__, "attribute_remapper", attribute_remapper)
        if category_processor is not None:
            pulumi.set(__self__, "category_processor", category_processor)
        if date_remapper is not None:
            pulumi.set(__self__, "date_remapper", date_remapper)
        if geo_ip_parser is not None:
            pulumi.set(__self__, "geo_ip_parser", geo_ip_parser)
        if grok_parser is not None:
            pulumi.set(__self__, "grok_parser", grok_parser)
        if lookup_processor is not None:
            pulumi.set(__self__, "lookup_processor", lookup_processor)
        if message_remapper is not None:
            pulumi.set(__self__, "message_remapper", message_remapper)
        if reference_table_lookup_processor is not None:
            pulumi.set(__self__, "reference_table_lookup_processor", reference_table_lookup_processor)
        if service_remapper is not None:
            pulumi.set(__self__, "service_remapper", service_remapper)
        if status_remapper is not None:
            pulumi.set(__self__, "status_remapper", status_remapper)
        if string_builder_processor is not None:
            pulumi.set(__self__, "string_builder_processor", string_builder_processor)
        if trace_id_remapper is not None:
            pulumi.set(__self__, "trace_id_remapper", trace_id_remapper)
        if url_parser is not None:
            pulumi.set(__self__, "url_parser", url_parser)
        if user_agent_parser is not None:
            pulumi.set(__self__, "user_agent_parser", user_agent_parser)

    @property
    @pulumi.getter(name="arithmeticProcessor")
    def arithmetic_processor(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessorArgs']]:
        """
        Arithmetic Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#arithmetic-processor)
        """
        return pulumi.get(self, "arithmetic_processor")

    @arithmetic_processor.setter
    def arithmetic_processor(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessorArgs']]):
        pulumi.set(self, "arithmetic_processor", value)

    @property
    @pulumi.getter(name="attributeRemapper")
    def attribute_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorAttributeRemapperArgs']]:
        """
        Attribute Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#remapper)
        """
        return pulumi.get(self, "attribute_remapper")

    @attribute_remapper.setter
    def attribute_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorAttributeRemapperArgs']]):
        pulumi.set(self, "attribute_remapper", value)

    @property
    @pulumi.getter(name="categoryProcessor")
    def category_processor(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorArgs']]:
        """
        Category Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#category-processor)
        """
        return pulumi.get(self, "category_processor")

    @category_processor.setter
    def category_processor(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorArgs']]):
        pulumi.set(self, "category_processor", value)

    @property
    @pulumi.getter(name="dateRemapper")
    def date_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorDateRemapperArgs']]:
        """
        Date Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-date-remapper)
        """
        return pulumi.get(self, "date_remapper")

    @date_remapper.setter
    def date_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorDateRemapperArgs']]):
        pulumi.set(self, "date_remapper", value)

    @property
    @pulumi.getter(name="geoIpParser")
    def geo_ip_parser(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorGeoIpParserArgs']]:
        """
        Date GeoIP Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#geoip-parser)
        """
        return pulumi.get(self, "geo_ip_parser")

    @geo_ip_parser.setter
    def geo_ip_parser(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorGeoIpParserArgs']]):
        pulumi.set(self, "geo_ip_parser", value)

    @property
    @pulumi.getter(name="grokParser")
    def grok_parser(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorGrokParserArgs']]:
        """
        Grok Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#grok-parser)
        """
        return pulumi.get(self, "grok_parser")

    @grok_parser.setter
    def grok_parser(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorGrokParserArgs']]):
        pulumi.set(self, "grok_parser", value)

    @property
    @pulumi.getter(name="lookupProcessor")
    def lookup_processor(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorLookupProcessorArgs']]:
        """
        Lookup Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
        """
        return pulumi.get(self, "lookup_processor")

    @lookup_processor.setter
    def lookup_processor(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorLookupProcessorArgs']]):
        pulumi.set(self, "lookup_processor", value)

    @property
    @pulumi.getter(name="messageRemapper")
    def message_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorMessageRemapperArgs']]:
        """
        Message Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-message-remapper)
        """
        return pulumi.get(self, "message_remapper")

    @message_remapper.setter
    def message_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorMessageRemapperArgs']]):
        pulumi.set(self, "message_remapper", value)

    @property
    @pulumi.getter(name="referenceTableLookupProcessor")
    def reference_table_lookup_processor(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorReferenceTableLookupProcessorArgs']]:
        """
        Reference Table Lookup Processor. Reference Tables are in public beta. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#lookup-processor)
        """
        return pulumi.get(self, "reference_table_lookup_processor")

    @reference_table_lookup_processor.setter
    def reference_table_lookup_processor(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorReferenceTableLookupProcessorArgs']]):
        pulumi.set(self, "reference_table_lookup_processor", value)

    @property
    @pulumi.getter(name="serviceRemapper")
    def service_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorServiceRemapperArgs']]:
        """
        Service Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#service-remapper)
        """
        return pulumi.get(self, "service_remapper")

    @service_remapper.setter
    def service_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorServiceRemapperArgs']]):
        pulumi.set(self, "service_remapper", value)

    @property
    @pulumi.getter(name="statusRemapper")
    def status_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorStatusRemapperArgs']]:
        """
        Status Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#log-status-remapper)
        """
        return pulumi.get(self, "status_remapper")

    @status_remapper.setter
    def status_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorStatusRemapperArgs']]):
        pulumi.set(self, "status_remapper", value)

    @property
    @pulumi.getter(name="stringBuilderProcessor")
    def string_builder_processor(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessorArgs']]:
        """
        String Builder Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#string-builder-processor)
        """
        return pulumi.get(self, "string_builder_processor")

    @string_builder_processor.setter
    def string_builder_processor(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessorArgs']]):
        pulumi.set(self, "string_builder_processor", value)

    @property
    @pulumi.getter(name="traceIdRemapper")
    def trace_id_remapper(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapperArgs']]:
        """
        Trace ID Remapper Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#trace-remapper)
        """
        return pulumi.get(self, "trace_id_remapper")

    @trace_id_remapper.setter
    def trace_id_remapper(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapperArgs']]):
        pulumi.set(self, "trace_id_remapper", value)

    @property
    @pulumi.getter(name="urlParser")
    def url_parser(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorUrlParserArgs']]:
        """
        URL Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#url-parser)
        """
        return pulumi.get(self, "url_parser")

    @url_parser.setter
    def url_parser(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorUrlParserArgs']]):
        pulumi.set(self, "url_parser", value)

    @property
    @pulumi.getter(name="userAgentParser")
    def user_agent_parser(self) -> Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorUserAgentParserArgs']]:
        """
        User-Agent Parser Processor. More information can be found in the [official docs](https://docs.datadoghq.com/logs/processing/processors/?tab=ui#user-agent-parser)
        """
        return pulumi.get(self, "user_agent_parser")

    @user_agent_parser.setter
    def user_agent_parser(self, value: Optional[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorUserAgentParserArgs']]):
        pulumi.set(self, "user_agent_parser", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessorArgs:
    def __init__(__self__, *,
                 expression: pulumi.Input[str],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 is_replace_missing: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] expression: Arithmetic operation between one or more log attributes.
        :param pulumi.Input[str] target: Name of the attribute that contains the result of the arithmetic operation.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[bool] is_replace_missing: If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_replace_missing is not None:
            pulumi.set(__self__, "is_replace_missing", is_replace_missing)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        Arithmetic operation between one or more log attributes.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Name of the attribute that contains the result of the arithmetic operation.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="isReplaceMissing")
    def is_replace_missing(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
        """
        return pulumi.get(self, "is_replace_missing")

    @is_replace_missing.setter
    def is_replace_missing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_replace_missing", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorAttributeRemapperArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 target: pulumi.Input[str],
                 target_type: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 override_on_conflict: Optional[pulumi.Input[bool]] = None,
                 preserve_source: Optional[pulumi.Input[bool]] = None,
                 target_format: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] source_type: Defines where the sources are from (log `attribute` or `tag`).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sources: List of source attributes or tags.
        :param pulumi.Input[str] target: Name of the attribute that contains the result of the arithmetic operation.
        :param pulumi.Input[str] target_type: Defines if the target is a log `attribute` or `tag`.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        :param pulumi.Input[bool] override_on_conflict: Override the target element if already set.
        :param pulumi.Input[bool] preserve_source: Remove or preserve the remapped source element.
        :param pulumi.Input[str] target_format: If the `target_type` of the remapper is `attribute`, try to cast the value to a new specific type. If the cast is not possible, the original type is kept. `string`, `integer`, or `double` are the possible types. If the `target_type` is `tag`, this parameter may not be specified.
        """
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "target_type", target_type)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_on_conflict is not None:
            pulumi.set(__self__, "override_on_conflict", override_on_conflict)
        if preserve_source is not None:
            pulumi.set(__self__, "preserve_source", preserve_source)
        if target_format is not None:
            pulumi.set(__self__, "target_format", target_format)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        """
        Defines where the sources are from (log `attribute` or `tag`).
        """
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of source attributes or tags.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Name of the attribute that contains the result of the arithmetic operation.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="targetType")
    def target_type(self) -> pulumi.Input[str]:
        """
        Defines if the target is a log `attribute` or `tag`.
        """
        return pulumi.get(self, "target_type")

    @target_type.setter
    def target_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "target_type", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="overrideOnConflict")
    def override_on_conflict(self) -> Optional[pulumi.Input[bool]]:
        """
        Override the target element if already set.
        """
        return pulumi.get(self, "override_on_conflict")

    @override_on_conflict.setter
    def override_on_conflict(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "override_on_conflict", value)

    @property
    @pulumi.getter(name="preserveSource")
    def preserve_source(self) -> Optional[pulumi.Input[bool]]:
        """
        Remove or preserve the remapped source element.
        """
        return pulumi.get(self, "preserve_source")

    @preserve_source.setter
    def preserve_source(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_source", value)

    @property
    @pulumi.getter(name="targetFormat")
    def target_format(self) -> Optional[pulumi.Input[str]]:
        """
        If the `target_type` of the remapper is `attribute`, try to cast the value to a new specific type. If the cast is not possible, the original type is kept. `string`, `integer`, or `double` are the possible types. If the `target_type` is `tag`, this parameter may not be specified.
        """
        return pulumi.get(self, "target_format")

    @target_format.setter
    def target_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_format", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorArgs:
    def __init__(__self__, *,
                 categories: pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryArgs']]],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryArgs']]] categories: List of filters to match or exclude a log with their corresponding name to assign a custom value to the log.
        :param pulumi.Input[str] target: Name of the attribute that contains the result of the arithmetic operation.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def categories(self) -> pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryArgs']]]:
        """
        List of filters to match or exclude a log with their corresponding name to assign a custom value to the log.
        """
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: pulumi.Input[Sequence[pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryArgs']]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Name of the attribute that contains the result of the arithmetic operation.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryArgs:
    def __init__(__self__, *,
                 filter: pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilterArgs'],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "filter", filter)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def filter(self) -> pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilterArgs']:
        return pulumi.get(self, "filter")

    @filter.setter
    def filter(self, value: pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilterArgs']):
        pulumi.set(self, "filter", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Filter criteria of the category.
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Filter criteria of the category.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorDateRemapperArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sources: List of source attributes or tags.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of source attributes or tags.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorGeoIpParserArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sources: List of source attributes or tags.
        :param pulumi.Input[str] target: Name of the attribute that contains the result of the arithmetic operation.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of source attributes or tags.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Name of the attribute that contains the result of the arithmetic operation.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorGrokParserArgs:
    def __init__(__self__, *,
                 grok: pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorGrokParserGrokArgs'],
                 source: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 samples: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] source: Name of the log attribute to parse.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] samples: List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
        """
        pulumi.set(__self__, "grok", grok)
        pulumi.set(__self__, "source", source)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if samples is not None:
            pulumi.set(__self__, "samples", samples)

    @property
    @pulumi.getter
    def grok(self) -> pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorGrokParserGrokArgs']:
        return pulumi.get(self, "grok")

    @grok.setter
    def grok(self, value: pulumi.Input['LogsCustomPipelineProcessorPipelineProcessorGrokParserGrokArgs']):
        pulumi.set(self, "grok", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        Name of the log attribute to parse.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def samples(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
        """
        return pulumi.get(self, "samples")

    @samples.setter
    def samples(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "samples", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorGrokParserGrokArgs:
    def __init__(__self__, *,
                 match_rules: pulumi.Input[str],
                 support_rules: pulumi.Input[str]):
        """
        :param pulumi.Input[str] match_rules: Match rules for your grok parser.
        :param pulumi.Input[str] support_rules: Support rules for your grok parser.
        """
        pulumi.set(__self__, "match_rules", match_rules)
        pulumi.set(__self__, "support_rules", support_rules)

    @property
    @pulumi.getter(name="matchRules")
    def match_rules(self) -> pulumi.Input[str]:
        """
        Match rules for your grok parser.
        """
        return pulumi.get(self, "match_rules")

    @match_rules.setter
    def match_rules(self, value: pulumi.Input[str]):
        pulumi.set(self, "match_rules", value)

    @property
    @pulumi.getter(name="supportRules")
    def support_rules(self) -> pulumi.Input[str]:
        """
        Support rules for your grok parser.
        """
        return pulumi.get(self, "support_rules")

    @support_rules.setter
    def support_rules(self, value: pulumi.Input[str]):
        pulumi.set(self, "support_rules", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorLookupProcessorArgs:
    def __init__(__self__, *,
                 lookup_tables: pulumi.Input[Sequence[pulumi.Input[str]]],
                 source: pulumi.Input[str],
                 target: pulumi.Input[str],
                 default_lookup: Optional[pulumi.Input[str]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] lookup_tables: List of entries of the lookup table using `key,value` format.
        :param pulumi.Input[str] source: Name of the log attribute to parse.
        :param pulumi.Input[str] target: Name of the attribute that contains the result of the arithmetic operation.
        :param pulumi.Input[str] default_lookup: Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "lookup_tables", lookup_tables)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)
        if default_lookup is not None:
            pulumi.set(__self__, "default_lookup", default_lookup)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="lookupTables")
    def lookup_tables(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of entries of the lookup table using `key,value` format.
        """
        return pulumi.get(self, "lookup_tables")

    @lookup_tables.setter
    def lookup_tables(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "lookup_tables", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        Name of the log attribute to parse.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Name of the attribute that contains the result of the arithmetic operation.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="defaultLookup")
    def default_lookup(self) -> Optional[pulumi.Input[str]]:
        """
        Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
        """
        return pulumi.get(self, "default_lookup")

    @default_lookup.setter
    def default_lookup(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_lookup", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorMessageRemapperArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sources: List of source attributes or tags.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of source attributes or tags.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorReferenceTableLookupProcessorArgs:
    def __init__(__self__, *,
                 lookup_enrichment_table: pulumi.Input[str],
                 source: pulumi.Input[str],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] lookup_enrichment_table: Name of the Reference Table for the source attribute and their associated target attribute values.
        :param pulumi.Input[str] source: Name of the log attribute to parse.
        :param pulumi.Input[str] target: Name of the attribute that contains the result of the arithmetic operation.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "lookup_enrichment_table", lookup_enrichment_table)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="lookupEnrichmentTable")
    def lookup_enrichment_table(self) -> pulumi.Input[str]:
        """
        Name of the Reference Table for the source attribute and their associated target attribute values.
        """
        return pulumi.get(self, "lookup_enrichment_table")

    @lookup_enrichment_table.setter
    def lookup_enrichment_table(self, value: pulumi.Input[str]):
        pulumi.set(self, "lookup_enrichment_table", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        Name of the log attribute to parse.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Name of the attribute that contains the result of the arithmetic operation.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorServiceRemapperArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sources: List of source attributes or tags.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of source attributes or tags.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorStatusRemapperArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sources: List of source attributes or tags.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of source attributes or tags.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessorArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[str],
                 template: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 is_replace_missing: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] target: Name of the attribute that contains the result of the arithmetic operation.
        :param pulumi.Input[str] template: The formula with one or more attributes and raw text.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[bool] is_replace_missing: If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "template", template)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_replace_missing is not None:
            pulumi.set(__self__, "is_replace_missing", is_replace_missing)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Name of the attribute that contains the result of the arithmetic operation.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def template(self) -> pulumi.Input[str]:
        """
        The formula with one or more attributes and raw text.
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: pulumi.Input[str]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="isReplaceMissing")
    def is_replace_missing(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
        """
        return pulumi.get(self, "is_replace_missing")

    @is_replace_missing.setter
    def is_replace_missing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_replace_missing", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapperArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sources: List of source attributes or tags.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of source attributes or tags.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorUrlParserArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 normalize_ending_slashes: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sources: List of source attributes or tags.
        :param pulumi.Input[str] target: Name of the attribute that contains the result of the arithmetic operation.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        :param pulumi.Input[bool] normalize_ending_slashes: Normalize the ending slashes or not.
        """
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if normalize_ending_slashes is not None:
            pulumi.set(__self__, "normalize_ending_slashes", normalize_ending_slashes)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of source attributes or tags.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Name of the attribute that contains the result of the arithmetic operation.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="normalizeEndingSlashes")
    def normalize_ending_slashes(self) -> Optional[pulumi.Input[bool]]:
        """
        Normalize the ending slashes or not.
        """
        return pulumi.get(self, "normalize_ending_slashes")

    @normalize_ending_slashes.setter
    def normalize_ending_slashes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "normalize_ending_slashes", value)


@pulumi.input_type
class LogsCustomPipelineProcessorPipelineProcessorUserAgentParserArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 is_encoded: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sources: List of source attributes or tags.
        :param pulumi.Input[str] target: Name of the attribute that contains the result of the arithmetic operation.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[bool] is_encoded: If the source attribute is URL encoded or not.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_encoded is not None:
            pulumi.set(__self__, "is_encoded", is_encoded)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of source attributes or tags.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Name of the attribute that contains the result of the arithmetic operation.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="isEncoded")
    def is_encoded(self) -> Optional[pulumi.Input[bool]]:
        """
        If the source attribute is URL encoded or not.
        """
        return pulumi.get(self, "is_encoded")

    @is_encoded.setter
    def is_encoded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_encoded", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorReferenceTableLookupProcessorArgs:
    def __init__(__self__, *,
                 lookup_enrichment_table: pulumi.Input[str],
                 source: pulumi.Input[str],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] lookup_enrichment_table: Name of the Reference Table for the source attribute and their associated target attribute values.
        :param pulumi.Input[str] source: Name of the log attribute to parse.
        :param pulumi.Input[str] target: Name of the attribute that contains the result of the arithmetic operation.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "lookup_enrichment_table", lookup_enrichment_table)
        pulumi.set(__self__, "source", source)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="lookupEnrichmentTable")
    def lookup_enrichment_table(self) -> pulumi.Input[str]:
        """
        Name of the Reference Table for the source attribute and their associated target attribute values.
        """
        return pulumi.get(self, "lookup_enrichment_table")

    @lookup_enrichment_table.setter
    def lookup_enrichment_table(self, value: pulumi.Input[str]):
        pulumi.set(self, "lookup_enrichment_table", value)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[str]:
        """
        Name of the log attribute to parse.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[str]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Name of the attribute that contains the result of the arithmetic operation.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorServiceRemapperArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sources: List of source attributes or tags.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of source attributes or tags.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorStatusRemapperArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sources: List of source attributes or tags.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of source attributes or tags.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorStringBuilderProcessorArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[str],
                 template: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 is_replace_missing: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] target: Name of the attribute that contains the result of the arithmetic operation.
        :param pulumi.Input[str] template: The formula with one or more attributes and raw text.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[bool] is_replace_missing: If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "template", template)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_replace_missing is not None:
            pulumi.set(__self__, "is_replace_missing", is_replace_missing)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Name of the attribute that contains the result of the arithmetic operation.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def template(self) -> pulumi.Input[str]:
        """
        The formula with one or more attributes and raw text.
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: pulumi.Input[str]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="isReplaceMissing")
    def is_replace_missing(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, it replaces all missing attributes of expression by 0, false skips the operation if an attribute is missing.
        """
        return pulumi.get(self, "is_replace_missing")

    @is_replace_missing.setter
    def is_replace_missing(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_replace_missing", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorTraceIdRemapperArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sources: List of source attributes or tags.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "sources", sources)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of source attributes or tags.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsCustomPipelineProcessorUrlParserArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 normalize_ending_slashes: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sources: List of source attributes or tags.
        :param pulumi.Input[str] target: Name of the attribute that contains the result of the arithmetic operation.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[str] name: Your pipeline name.
        :param pulumi.Input[bool] normalize_ending_slashes: Normalize the ending slashes or not.
        """
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if normalize_ending_slashes is not None:
            pulumi.set(__self__, "normalize_ending_slashes", normalize_ending_slashes)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of source attributes or tags.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Name of the attribute that contains the result of the arithmetic operation.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="normalizeEndingSlashes")
    def normalize_ending_slashes(self) -> Optional[pulumi.Input[bool]]:
        """
        Normalize the ending slashes or not.
        """
        return pulumi.get(self, "normalize_ending_slashes")

    @normalize_ending_slashes.setter
    def normalize_ending_slashes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "normalize_ending_slashes", value)


@pulumi.input_type
class LogsCustomPipelineProcessorUserAgentParserArgs:
    def __init__(__self__, *,
                 sources: pulumi.Input[Sequence[pulumi.Input[str]]],
                 target: pulumi.Input[str],
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 is_encoded: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] sources: List of source attributes or tags.
        :param pulumi.Input[str] target: Name of the attribute that contains the result of the arithmetic operation.
        :param pulumi.Input[bool] is_enabled: Boolean value to enable your pipeline.
        :param pulumi.Input[bool] is_encoded: If the source attribute is URL encoded or not.
        :param pulumi.Input[str] name: Your pipeline name.
        """
        pulumi.set(__self__, "sources", sources)
        pulumi.set(__self__, "target", target)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if is_encoded is not None:
            pulumi.set(__self__, "is_encoded", is_encoded)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def sources(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of source attributes or tags.
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[str]:
        """
        Name of the attribute that contains the result of the arithmetic operation.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[str]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Boolean value to enable your pipeline.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="isEncoded")
    def is_encoded(self) -> Optional[pulumi.Input[bool]]:
        """
        If the source attribute is URL encoded or not.
        """
        return pulumi.get(self, "is_encoded")

    @is_encoded.setter
    def is_encoded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_encoded", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Your pipeline name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsIndexExclusionFilterArgs:
    def __init__(__self__, *,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['LogsIndexExclusionFilterFilterArgs']]]] = None,
                 is_enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] is_enabled: A boolean stating if the exclusion is active or not.
        :param pulumi.Input[str] name: The name of the exclusion filter.
        """
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if is_enabled is not None:
            pulumi.set(__self__, "is_enabled", is_enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['LogsIndexExclusionFilterFilterArgs']]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['LogsIndexExclusionFilterFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean stating if the exclusion is active or not.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the exclusion filter.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class LogsIndexExclusionFilterFilterArgs:
    def __init__(__self__, *,
                 query: Optional[pulumi.Input[str]] = None,
                 sample_rate: Optional[pulumi.Input[float]] = None):
        """
        :param pulumi.Input[str] query: Logs filter criteria. Only logs matching this filter criteria are considered for this index.
        :param pulumi.Input[float] sample_rate: The fraction of logs excluded by the exclusion filter, when active.
        """
        if query is not None:
            pulumi.set(__self__, "query", query)
        if sample_rate is not None:
            pulumi.set(__self__, "sample_rate", sample_rate)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        Logs filter criteria. Only logs matching this filter criteria are considered for this index.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="sampleRate")
    def sample_rate(self) -> Optional[pulumi.Input[float]]:
        """
        The fraction of logs excluded by the exclusion filter, when active.
        """
        return pulumi.get(self, "sample_rate")

    @sample_rate.setter
    def sample_rate(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "sample_rate", value)


@pulumi.input_type
class LogsIndexFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Logs filter criteria. Only logs matching this filter criteria are considered for this index.
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Logs filter criteria. Only logs matching this filter criteria are considered for this index.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class LogsMetricComputeArgs:
    def __init__(__self__, *,
                 aggregation_type: pulumi.Input[str],
                 include_percentiles: Optional[pulumi.Input[bool]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation_type: The type of aggregation to use. This field can't be updated after creation. Valid values are `count`, `distribution`.
        :param pulumi.Input[bool] include_percentiles: Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have an `aggregation_type` of distribution.
        :param pulumi.Input[str] path: The path to the value the log-based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
        """
        pulumi.set(__self__, "aggregation_type", aggregation_type)
        if include_percentiles is not None:
            pulumi.set(__self__, "include_percentiles", include_percentiles)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="aggregationType")
    def aggregation_type(self) -> pulumi.Input[str]:
        """
        The type of aggregation to use. This field can't be updated after creation. Valid values are `count`, `distribution`.
        """
        return pulumi.get(self, "aggregation_type")

    @aggregation_type.setter
    def aggregation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation_type", value)

    @property
    @pulumi.getter(name="includePercentiles")
    def include_percentiles(self) -> Optional[pulumi.Input[bool]]:
        """
        Toggle to include/exclude percentiles for a distribution metric. Defaults to false. Can only be applied to metrics that have an `aggregation_type` of distribution.
        """
        return pulumi.get(self, "include_percentiles")

    @include_percentiles.setter
    def include_percentiles(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_percentiles", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the value the log-based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class LogsMetricFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: The search query - following the log search syntax.
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        The search query - following the log search syntax.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class LogsMetricGroupByArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 tag_name: pulumi.Input[str]):
        """
        :param pulumi.Input[str] path: The path to the value the log-based metric will be aggregated over.
        :param pulumi.Input[str] tag_name: Name of the tag that gets created.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "tag_name", tag_name)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The path to the value the log-based metric will be aggregated over.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> pulumi.Input[str]:
        """
        Name of the tag that gets created.
        """
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_name", value)


@pulumi.input_type
class MetricTagConfigurationAggregationArgs:
    def __init__(__self__, *,
                 space: pulumi.Input[str],
                 time: pulumi.Input[str]):
        """
        :param pulumi.Input[str] space: A space aggregation for use in query. Valid values are `avg`, `max`, `min`, `sum`.
        :param pulumi.Input[str] time: A time aggregation for use in query. Valid values are `avg`, `count`, `max`, `min`, `sum`.
        """
        pulumi.set(__self__, "space", space)
        pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter
    def space(self) -> pulumi.Input[str]:
        """
        A space aggregation for use in query. Valid values are `avg`, `max`, `min`, `sum`.
        """
        return pulumi.get(self, "space")

    @space.setter
    def space(self, value: pulumi.Input[str]):
        pulumi.set(self, "space", value)

    @property
    @pulumi.getter
    def time(self) -> pulumi.Input[str]:
        """
        A time aggregation for use in query. Valid values are `avg`, `count`, `max`, `min`, `sum`.
        """
        return pulumi.get(self, "time")

    @time.setter
    def time(self, value: pulumi.Input[str]):
        pulumi.set(self, "time", value)


@pulumi.input_type
class MonitorConfigPolicyTagPolicyArgs:
    def __init__(__self__, *,
                 tag_key: pulumi.Input[str],
                 tag_key_required: pulumi.Input[bool],
                 valid_tag_values: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] tag_key: The key of the tag
        :param pulumi.Input[bool] tag_key_required: If a tag key is required for monitor creation
        :param pulumi.Input[Sequence[pulumi.Input[str]]] valid_tag_values: Valid values for the tag
        """
        pulumi.set(__self__, "tag_key", tag_key)
        pulumi.set(__self__, "tag_key_required", tag_key_required)
        pulumi.set(__self__, "valid_tag_values", valid_tag_values)

    @property
    @pulumi.getter(name="tagKey")
    def tag_key(self) -> pulumi.Input[str]:
        """
        The key of the tag
        """
        return pulumi.get(self, "tag_key")

    @tag_key.setter
    def tag_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "tag_key", value)

    @property
    @pulumi.getter(name="tagKeyRequired")
    def tag_key_required(self) -> pulumi.Input[bool]:
        """
        If a tag key is required for monitor creation
        """
        return pulumi.get(self, "tag_key_required")

    @tag_key_required.setter
    def tag_key_required(self, value: pulumi.Input[bool]):
        pulumi.set(self, "tag_key_required", value)

    @property
    @pulumi.getter(name="validTagValues")
    def valid_tag_values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Valid values for the tag
        """
        return pulumi.get(self, "valid_tag_values")

    @valid_tag_values.setter
    def valid_tag_values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "valid_tag_values", value)


@pulumi.input_type
class MonitorMonitorThresholdWindowsArgs:
    def __init__(__self__, *,
                 recovery_window: Optional[pulumi.Input[str]] = None,
                 trigger_window: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] recovery_window: Describes how long an anomalous metric must be normal before the alert recovers.
        :param pulumi.Input[str] trigger_window: Describes how long a metric must be anomalous before an alert triggers.
        """
        if recovery_window is not None:
            pulumi.set(__self__, "recovery_window", recovery_window)
        if trigger_window is not None:
            pulumi.set(__self__, "trigger_window", trigger_window)

    @property
    @pulumi.getter(name="recoveryWindow")
    def recovery_window(self) -> Optional[pulumi.Input[str]]:
        """
        Describes how long an anomalous metric must be normal before the alert recovers.
        """
        return pulumi.get(self, "recovery_window")

    @recovery_window.setter
    def recovery_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_window", value)

    @property
    @pulumi.getter(name="triggerWindow")
    def trigger_window(self) -> Optional[pulumi.Input[str]]:
        """
        Describes how long a metric must be anomalous before an alert triggers.
        """
        return pulumi.get(self, "trigger_window")

    @trigger_window.setter
    def trigger_window(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_window", value)


@pulumi.input_type
class MonitorMonitorThresholdsArgs:
    def __init__(__self__, *,
                 critical: Optional[pulumi.Input[str]] = None,
                 critical_recovery: Optional[pulumi.Input[str]] = None,
                 ok: Optional[pulumi.Input[str]] = None,
                 unknown: Optional[pulumi.Input[str]] = None,
                 warning: Optional[pulumi.Input[str]] = None,
                 warning_recovery: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] critical: The monitor `CRITICAL` threshold. Must be a number.
        :param pulumi.Input[str] critical_recovery: The monitor `CRITICAL` recovery threshold. Must be a number.
        :param pulumi.Input[str] ok: The monitor `OK` threshold. Only supported in monitor type `service check`. Must be a number.
        :param pulumi.Input[str] unknown: The monitor `UNKNOWN` threshold. Only supported in monitor type `service check`. Must be a number.
        :param pulumi.Input[str] warning: The monitor `WARNING` threshold. Must be a number.
        :param pulumi.Input[str] warning_recovery: The monitor `WARNING` recovery threshold. Must be a number.
        """
        if critical is not None:
            pulumi.set(__self__, "critical", critical)
        if critical_recovery is not None:
            pulumi.set(__self__, "critical_recovery", critical_recovery)
        if ok is not None:
            pulumi.set(__self__, "ok", ok)
        if unknown is not None:
            pulumi.set(__self__, "unknown", unknown)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)
        if warning_recovery is not None:
            pulumi.set(__self__, "warning_recovery", warning_recovery)

    @property
    @pulumi.getter
    def critical(self) -> Optional[pulumi.Input[str]]:
        """
        The monitor `CRITICAL` threshold. Must be a number.
        """
        return pulumi.get(self, "critical")

    @critical.setter
    def critical(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "critical", value)

    @property
    @pulumi.getter(name="criticalRecovery")
    def critical_recovery(self) -> Optional[pulumi.Input[str]]:
        """
        The monitor `CRITICAL` recovery threshold. Must be a number.
        """
        return pulumi.get(self, "critical_recovery")

    @critical_recovery.setter
    def critical_recovery(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "critical_recovery", value)

    @property
    @pulumi.getter
    def ok(self) -> Optional[pulumi.Input[str]]:
        """
        The monitor `OK` threshold. Only supported in monitor type `service check`. Must be a number.
        """
        return pulumi.get(self, "ok")

    @ok.setter
    def ok(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ok", value)

    @property
    @pulumi.getter
    def unknown(self) -> Optional[pulumi.Input[str]]:
        """
        The monitor `UNKNOWN` threshold. Only supported in monitor type `service check`. Must be a number.
        """
        return pulumi.get(self, "unknown")

    @unknown.setter
    def unknown(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unknown", value)

    @property
    @pulumi.getter
    def warning(self) -> Optional[pulumi.Input[str]]:
        """
        The monitor `WARNING` threshold. Must be a number.
        """
        return pulumi.get(self, "warning")

    @warning.setter
    def warning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning", value)

    @property
    @pulumi.getter(name="warningRecovery")
    def warning_recovery(self) -> Optional[pulumi.Input[str]]:
        """
        The monitor `WARNING` recovery threshold. Must be a number.
        """
        return pulumi.get(self, "warning_recovery")

    @warning_recovery.setter
    def warning_recovery(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning_recovery", value)


@pulumi.input_type
class MonitorSchedulingOptionArgs:
    def __init__(__self__, *,
                 evaluation_windows: pulumi.Input[Sequence[pulumi.Input['MonitorSchedulingOptionEvaluationWindowArgs']]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['MonitorSchedulingOptionEvaluationWindowArgs']]] evaluation_windows: Configuration options for the evaluation window. If `hour_starts` is set, no other fields may be set. Otherwise, `day_starts` and `month_starts` must be set together.
        """
        pulumi.set(__self__, "evaluation_windows", evaluation_windows)

    @property
    @pulumi.getter(name="evaluationWindows")
    def evaluation_windows(self) -> pulumi.Input[Sequence[pulumi.Input['MonitorSchedulingOptionEvaluationWindowArgs']]]:
        """
        Configuration options for the evaluation window. If `hour_starts` is set, no other fields may be set. Otherwise, `day_starts` and `month_starts` must be set together.
        """
        return pulumi.get(self, "evaluation_windows")

    @evaluation_windows.setter
    def evaluation_windows(self, value: pulumi.Input[Sequence[pulumi.Input['MonitorSchedulingOptionEvaluationWindowArgs']]]):
        pulumi.set(self, "evaluation_windows", value)


@pulumi.input_type
class MonitorSchedulingOptionEvaluationWindowArgs:
    def __init__(__self__, *,
                 day_starts: Optional[pulumi.Input[str]] = None,
                 hour_starts: Optional[pulumi.Input[int]] = None,
                 month_starts: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] day_starts: The time of the day at which a one day cumulative evaluation window starts. Must be defined in UTC time in `HH:mm` format.
        :param pulumi.Input[int] hour_starts: The minute of the hour at which a one hour cumulative evaluation window starts. Must be between 0 and 59.
        :param pulumi.Input[int] month_starts: The day of the month at which a one month cumulative evaluation window starts. Must be a value of 1.
        """
        if day_starts is not None:
            pulumi.set(__self__, "day_starts", day_starts)
        if hour_starts is not None:
            pulumi.set(__self__, "hour_starts", hour_starts)
        if month_starts is not None:
            pulumi.set(__self__, "month_starts", month_starts)

    @property
    @pulumi.getter(name="dayStarts")
    def day_starts(self) -> Optional[pulumi.Input[str]]:
        """
        The time of the day at which a one day cumulative evaluation window starts. Must be defined in UTC time in `HH:mm` format.
        """
        return pulumi.get(self, "day_starts")

    @day_starts.setter
    def day_starts(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "day_starts", value)

    @property
    @pulumi.getter(name="hourStarts")
    def hour_starts(self) -> Optional[pulumi.Input[int]]:
        """
        The minute of the hour at which a one hour cumulative evaluation window starts. Must be between 0 and 59.
        """
        return pulumi.get(self, "hour_starts")

    @hour_starts.setter
    def hour_starts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "hour_starts", value)

    @property
    @pulumi.getter(name="monthStarts")
    def month_starts(self) -> Optional[pulumi.Input[int]]:
        """
        The day of the month at which a one month cumulative evaluation window starts. Must be a value of 1.
        """
        return pulumi.get(self, "month_starts")

    @month_starts.setter
    def month_starts(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "month_starts", value)


@pulumi.input_type
class MonitorVariablesArgs:
    def __init__(__self__, *,
                 event_queries: Optional[pulumi.Input[Sequence[pulumi.Input['MonitorVariablesEventQueryArgs']]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['MonitorVariablesEventQueryArgs']]] event_queries: A timeseries formula and functions events query.
        """
        if event_queries is not None:
            pulumi.set(__self__, "event_queries", event_queries)

    @property
    @pulumi.getter(name="eventQueries")
    def event_queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MonitorVariablesEventQueryArgs']]]]:
        """
        A timeseries formula and functions events query.
        """
        return pulumi.get(self, "event_queries")

    @event_queries.setter
    def event_queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MonitorVariablesEventQueryArgs']]]]):
        pulumi.set(self, "event_queries", value)


@pulumi.input_type
class MonitorVariablesEventQueryArgs:
    def __init__(__self__, *,
                 computes: pulumi.Input[Sequence[pulumi.Input['MonitorVariablesEventQueryComputeArgs']]],
                 data_source: pulumi.Input[str],
                 name: pulumi.Input[str],
                 search: pulumi.Input['MonitorVariablesEventQuerySearchArgs'],
                 group_bies: Optional[pulumi.Input[Sequence[pulumi.Input['MonitorVariablesEventQueryGroupByArgs']]]] = None,
                 indexes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input['MonitorVariablesEventQueryComputeArgs']]] computes: The compute options.
        :param pulumi.Input[str] data_source: The data source for event platform-based queries. Valid values are `rum`, `ci_pipelines`, `ci_tests`, `audit`, `events`, `logs`, `spans`.
        :param pulumi.Input[str] name: The name of query for use in formulas.
        :param pulumi.Input['MonitorVariablesEventQuerySearchArgs'] search: The search options.
        :param pulumi.Input[Sequence[pulumi.Input['MonitorVariablesEventQueryGroupByArgs']]] group_bies: Group by options.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] indexes: An array of index names to query in the stream.
        """
        pulumi.set(__self__, "computes", computes)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "search", search)
        if group_bies is not None:
            pulumi.set(__self__, "group_bies", group_bies)
        if indexes is not None:
            pulumi.set(__self__, "indexes", indexes)

    @property
    @pulumi.getter
    def computes(self) -> pulumi.Input[Sequence[pulumi.Input['MonitorVariablesEventQueryComputeArgs']]]:
        """
        The compute options.
        """
        return pulumi.get(self, "computes")

    @computes.setter
    def computes(self, value: pulumi.Input[Sequence[pulumi.Input['MonitorVariablesEventQueryComputeArgs']]]):
        pulumi.set(self, "computes", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        """
        The data source for event platform-based queries. Valid values are `rum`, `ci_pipelines`, `ci_tests`, `audit`, `events`, `logs`, `spans`.
        """
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of query for use in formulas.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def search(self) -> pulumi.Input['MonitorVariablesEventQuerySearchArgs']:
        """
        The search options.
        """
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: pulumi.Input['MonitorVariablesEventQuerySearchArgs']):
        pulumi.set(self, "search", value)

    @property
    @pulumi.getter(name="groupBies")
    def group_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MonitorVariablesEventQueryGroupByArgs']]]]:
        """
        Group by options.
        """
        return pulumi.get(self, "group_bies")

    @group_bies.setter
    def group_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MonitorVariablesEventQueryGroupByArgs']]]]):
        pulumi.set(self, "group_bies", value)

    @property
    @pulumi.getter
    def indexes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of index names to query in the stream.
        """
        return pulumi.get(self, "indexes")

    @indexes.setter
    def indexes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "indexes", value)


@pulumi.input_type
class MonitorVariablesEventQueryComputeArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 interval: Optional[pulumi.Input[int]] = None,
                 metric: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
        :param pulumi.Input[int] interval: A time interval in milliseconds.
        :param pulumi.Input[str] metric: The measurable attribute to compute.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        A time interval in milliseconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The measurable attribute to compute.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)


@pulumi.input_type
class MonitorVariablesEventQueryGroupByArgs:
    def __init__(__self__, *,
                 facet: pulumi.Input[str],
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input['MonitorVariablesEventQueryGroupBySortArgs']] = None):
        """
        :param pulumi.Input[str] facet: The event facet.
        :param pulumi.Input[int] limit: The number of groups to return.
        :param pulumi.Input['MonitorVariablesEventQueryGroupBySortArgs'] sort: The options for sorting group by results.
        """
        pulumi.set(__self__, "facet", facet)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter
    def facet(self) -> pulumi.Input[str]:
        """
        The event facet.
        """
        return pulumi.get(self, "facet")

    @facet.setter
    def facet(self, value: pulumi.Input[str]):
        pulumi.set(self, "facet", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        """
        The number of groups to return.
        """
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input['MonitorVariablesEventQueryGroupBySortArgs']]:
        """
        The options for sorting group by results.
        """
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input['MonitorVariablesEventQueryGroupBySortArgs']]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class MonitorVariablesEventQueryGroupBySortArgs:
    def __init__(__self__, *,
                 aggregation: pulumi.Input[str],
                 metric: Optional[pulumi.Input[str]] = None,
                 order: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation: The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
        :param pulumi.Input[str] metric: The measurable attribute to compute.
        :param pulumi.Input[str] order: Direction of sort. Valid values are `asc`, `desc`.
        """
        pulumi.set(__self__, "aggregation", aggregation)
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if order is not None:
            pulumi.set(__self__, "order", order)

    @property
    @pulumi.getter
    def aggregation(self) -> pulumi.Input[str]:
        """
        The aggregation methods for event platform queries. Valid values are `count`, `cardinality`, `median`, `pc75`, `pc90`, `pc95`, `pc98`, `pc99`, `sum`, `min`, `max`, `avg`.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The measurable attribute to compute.
        """
        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[str]]:
        """
        Direction of sort. Valid values are `asc`, `desc`.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order", value)


@pulumi.input_type
class MonitorVariablesEventQuerySearchArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: The events search string.
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        The events search string.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class OrganizationSettingsSettingsArgs:
    def __init__(__self__, *,
                 saml: pulumi.Input['OrganizationSettingsSettingsSamlArgs'],
                 saml_autocreate_users_domains: pulumi.Input['OrganizationSettingsSettingsSamlAutocreateUsersDomainsArgs'],
                 saml_idp_initiated_login: pulumi.Input['OrganizationSettingsSettingsSamlIdpInitiatedLoginArgs'],
                 saml_strict_mode: pulumi.Input['OrganizationSettingsSettingsSamlStrictModeArgs'],
                 private_widget_share: Optional[pulumi.Input[bool]] = None,
                 saml_autocreate_access_role: Optional[pulumi.Input[str]] = None,
                 saml_can_be_enabled: Optional[pulumi.Input[bool]] = None,
                 saml_idp_endpoint: Optional[pulumi.Input[str]] = None,
                 saml_idp_metadata_uploaded: Optional[pulumi.Input[bool]] = None,
                 saml_login_url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['OrganizationSettingsSettingsSamlArgs'] saml: SAML properties
        :param pulumi.Input['OrganizationSettingsSettingsSamlAutocreateUsersDomainsArgs'] saml_autocreate_users_domains: List of domains where the SAML automated user creation is enabled.
        :param pulumi.Input['OrganizationSettingsSettingsSamlIdpInitiatedLoginArgs'] saml_idp_initiated_login: Whether or not a SAML identity provider metadata file was provided to the Datadog organization.
        :param pulumi.Input['OrganizationSettingsSettingsSamlStrictModeArgs'] saml_strict_mode: Whether or not the SAML strict mode is enabled. If true, all users must log in with SAML.
        :param pulumi.Input[bool] private_widget_share: Whether or not the organization users can share widgets outside of Datadog.
        :param pulumi.Input[str] saml_autocreate_access_role: The access role of the user. Options are `st` (standard user), `adm` (admin user), or `ro` (read-only user). Allowed enum values: `st`, `adm` , `ro`, `ERROR`
        :param pulumi.Input[bool] saml_can_be_enabled: Whether or not SAML can be enabled for this organization.
        :param pulumi.Input[str] saml_idp_endpoint: Identity provider endpoint for SAML authentication.
        :param pulumi.Input[bool] saml_idp_metadata_uploaded: Whether or not a SAML identity provider metadata file was provided to the Datadog organization.
        :param pulumi.Input[str] saml_login_url: URL for SAML logging.
        """
        pulumi.set(__self__, "saml", saml)
        pulumi.set(__self__, "saml_autocreate_users_domains", saml_autocreate_users_domains)
        pulumi.set(__self__, "saml_idp_initiated_login", saml_idp_initiated_login)
        pulumi.set(__self__, "saml_strict_mode", saml_strict_mode)
        if private_widget_share is not None:
            pulumi.set(__self__, "private_widget_share", private_widget_share)
        if saml_autocreate_access_role is not None:
            pulumi.set(__self__, "saml_autocreate_access_role", saml_autocreate_access_role)
        if saml_can_be_enabled is not None:
            pulumi.set(__self__, "saml_can_be_enabled", saml_can_be_enabled)
        if saml_idp_endpoint is not None:
            pulumi.set(__self__, "saml_idp_endpoint", saml_idp_endpoint)
        if saml_idp_metadata_uploaded is not None:
            pulumi.set(__self__, "saml_idp_metadata_uploaded", saml_idp_metadata_uploaded)
        if saml_login_url is not None:
            pulumi.set(__self__, "saml_login_url", saml_login_url)

    @property
    @pulumi.getter
    def saml(self) -> pulumi.Input['OrganizationSettingsSettingsSamlArgs']:
        """
        SAML properties
        """
        return pulumi.get(self, "saml")

    @saml.setter
    def saml(self, value: pulumi.Input['OrganizationSettingsSettingsSamlArgs']):
        pulumi.set(self, "saml", value)

    @property
    @pulumi.getter(name="samlAutocreateUsersDomains")
    def saml_autocreate_users_domains(self) -> pulumi.Input['OrganizationSettingsSettingsSamlAutocreateUsersDomainsArgs']:
        """
        List of domains where the SAML automated user creation is enabled.
        """
        return pulumi.get(self, "saml_autocreate_users_domains")

    @saml_autocreate_users_domains.setter
    def saml_autocreate_users_domains(self, value: pulumi.Input['OrganizationSettingsSettingsSamlAutocreateUsersDomainsArgs']):
        pulumi.set(self, "saml_autocreate_users_domains", value)

    @property
    @pulumi.getter(name="samlIdpInitiatedLogin")
    def saml_idp_initiated_login(self) -> pulumi.Input['OrganizationSettingsSettingsSamlIdpInitiatedLoginArgs']:
        """
        Whether or not a SAML identity provider metadata file was provided to the Datadog organization.
        """
        return pulumi.get(self, "saml_idp_initiated_login")

    @saml_idp_initiated_login.setter
    def saml_idp_initiated_login(self, value: pulumi.Input['OrganizationSettingsSettingsSamlIdpInitiatedLoginArgs']):
        pulumi.set(self, "saml_idp_initiated_login", value)

    @property
    @pulumi.getter(name="samlStrictMode")
    def saml_strict_mode(self) -> pulumi.Input['OrganizationSettingsSettingsSamlStrictModeArgs']:
        """
        Whether or not the SAML strict mode is enabled. If true, all users must log in with SAML.
        """
        return pulumi.get(self, "saml_strict_mode")

    @saml_strict_mode.setter
    def saml_strict_mode(self, value: pulumi.Input['OrganizationSettingsSettingsSamlStrictModeArgs']):
        pulumi.set(self, "saml_strict_mode", value)

    @property
    @pulumi.getter(name="privateWidgetShare")
    def private_widget_share(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not the organization users can share widgets outside of Datadog.
        """
        return pulumi.get(self, "private_widget_share")

    @private_widget_share.setter
    def private_widget_share(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private_widget_share", value)

    @property
    @pulumi.getter(name="samlAutocreateAccessRole")
    def saml_autocreate_access_role(self) -> Optional[pulumi.Input[str]]:
        """
        The access role of the user. Options are `st` (standard user), `adm` (admin user), or `ro` (read-only user). Allowed enum values: `st`, `adm` , `ro`, `ERROR`
        """
        return pulumi.get(self, "saml_autocreate_access_role")

    @saml_autocreate_access_role.setter
    def saml_autocreate_access_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_autocreate_access_role", value)

    @property
    @pulumi.getter(name="samlCanBeEnabled")
    def saml_can_be_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not SAML can be enabled for this organization.
        """
        return pulumi.get(self, "saml_can_be_enabled")

    @saml_can_be_enabled.setter
    def saml_can_be_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "saml_can_be_enabled", value)

    @property
    @pulumi.getter(name="samlIdpEndpoint")
    def saml_idp_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        Identity provider endpoint for SAML authentication.
        """
        return pulumi.get(self, "saml_idp_endpoint")

    @saml_idp_endpoint.setter
    def saml_idp_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_idp_endpoint", value)

    @property
    @pulumi.getter(name="samlIdpMetadataUploaded")
    def saml_idp_metadata_uploaded(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not a SAML identity provider metadata file was provided to the Datadog organization.
        """
        return pulumi.get(self, "saml_idp_metadata_uploaded")

    @saml_idp_metadata_uploaded.setter
    def saml_idp_metadata_uploaded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "saml_idp_metadata_uploaded", value)

    @property
    @pulumi.getter(name="samlLoginUrl")
    def saml_login_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL for SAML logging.
        """
        return pulumi.get(self, "saml_login_url")

    @saml_login_url.setter
    def saml_login_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "saml_login_url", value)


@pulumi.input_type
class OrganizationSettingsSettingsSamlArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether or not SAML is enabled for this organization.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not SAML is enabled for this organization.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class OrganizationSettingsSettingsSamlAutocreateUsersDomainsArgs:
    def __init__(__self__, *,
                 domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] domains: List of domains where the SAML automated user creation is enabled.
        :param pulumi.Input[bool] enabled: Whether or not SAML is enabled for this organization.
        """
        if domains is not None:
            pulumi.set(__self__, "domains", domains)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of domains where the SAML automated user creation is enabled.
        """
        return pulumi.get(self, "domains")

    @domains.setter
    def domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "domains", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not SAML is enabled for this organization.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class OrganizationSettingsSettingsSamlIdpInitiatedLoginArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether or not SAML is enabled for this organization.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not SAML is enabled for this organization.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class OrganizationSettingsSettingsSamlStrictModeArgs:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] enabled: Whether or not SAML is enabled for this organization.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not SAML is enabled for this organization.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class RestrictionPolicyBindingArgs:
    def __init__(__self__, *,
                 principals: pulumi.Input[Sequence[pulumi.Input[str]]],
                 relation: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] principals: An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `org`. The org ID can be obtained through the api/v2/users API.
        :param pulumi.Input[str] relation: The role/level of access. See this page for more details https://docs.datadoghq.com/api/latest/restriction-policies/#supported-relations-for-resources
        """
        pulumi.set(__self__, "principals", principals)
        pulumi.set(__self__, "relation", relation)

    @property
    @pulumi.getter
    def principals(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        An array of principals. A principal is a subject or group of subjects. Each principal is formatted as `type:id`. Supported types: `role` and `org`. The org ID can be obtained through the api/v2/users API.
        """
        return pulumi.get(self, "principals")

    @principals.setter
    def principals(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "principals", value)

    @property
    @pulumi.getter
    def relation(self) -> pulumi.Input[str]:
        """
        The role/level of access. See this page for more details https://docs.datadoghq.com/api/latest/restriction-policies/#supported-relations-for-resources
        """
        return pulumi.get(self, "relation")

    @relation.setter
    def relation(self, value: pulumi.Input[str]):
        pulumi.set(self, "relation", value)


@pulumi.input_type
class RolePermissionArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] id: ID of the permission to assign.
        :param pulumi.Input[str] name: Name of the permission.
        """
        pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        """
        ID of the permission to assign.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the permission.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecurityMonitoringDefaultRuleCaseArgs:
    def __init__(__self__, *,
                 notifications: pulumi.Input[Sequence[pulumi.Input[str]]],
                 status: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifications: Notification targets for each rule case.
        :param pulumi.Input[str] status: Status of the rule case to match. Valid values are `info`, `low`, `medium`, `high`, `critical`.
        """
        pulumi.set(__self__, "notifications", notifications)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def notifications(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Notification targets for each rule case.
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "notifications", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the rule case to match. Valid values are `info`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class SecurityMonitoringDefaultRuleFilterArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] action: The type of filtering action. Allowed enum values: require, suppress Valid values are `require`, `suppress`.
        :param pulumi.Input[str] query: Query for selecting logs to apply the filtering action.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        The type of filtering action. Allowed enum values: require, suppress Valid values are `require`, `suppress`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for selecting logs to apply the filtering action.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SecurityMonitoringDefaultRuleOptionsArgs:
    def __init__(__self__, *,
                 decrease_criticality_based_on_env: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] decrease_criticality_based_on_env: If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with `staging`, `test`, or `dev`. Only available when the rule type is `log_detection`.
        """
        if decrease_criticality_based_on_env is not None:
            pulumi.set(__self__, "decrease_criticality_based_on_env", decrease_criticality_based_on_env)

    @property
    @pulumi.getter(name="decreaseCriticalityBasedOnEnv")
    def decrease_criticality_based_on_env(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with `staging`, `test`, or `dev`. Only available when the rule type is `log_detection`.
        """
        return pulumi.get(self, "decrease_criticality_based_on_env")

    @decrease_criticality_based_on_env.setter
    def decrease_criticality_based_on_env(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "decrease_criticality_based_on_env", value)


@pulumi.input_type
class SecurityMonitoringFilterExclusionFilterArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] name: Exclusion filter name.
        :param pulumi.Input[str] query: Exclusion filter query. Logs that match this query are excluded from the security filter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Exclusion filter name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Exclusion filter query. Logs that match this query are excluded from the security filter.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SecurityMonitoringRuleCaseArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 condition: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] status: Severity of the Security Signal. Valid values are `info`, `low`, `medium`, `high`, `critical`.
        :param pulumi.Input[str] condition: A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated based on the event counts in the previously defined queries.
        :param pulumi.Input[str] name: Name of the case.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notifications: Notification targets for each rule case.
        """
        pulumi.set(__self__, "status", status)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notifications is not None:
            pulumi.set(__self__, "notifications", notifications)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Severity of the Security Signal. Valid values are `info`, `low`, `medium`, `high`, `critical`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        A rule case contains logical operations (`>`,`>=`, `&&`, `||`) to determine if a signal should be generated based on the event counts in the previously defined queries.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the case.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def notifications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Notification targets for each rule case.
        """
        return pulumi.get(self, "notifications")

    @notifications.setter
    def notifications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "notifications", value)


@pulumi.input_type
class SecurityMonitoringRuleFilterArgs:
    def __init__(__self__, *,
                 action: pulumi.Input[str],
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] action: The type of filtering action. Valid values are `require`, `suppress`.
        :param pulumi.Input[str] query: Query for selecting logs to apply the filtering action.
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def action(self) -> pulumi.Input[str]:
        """
        The type of filtering action. Valid values are `require`, `suppress`.
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: pulumi.Input[str]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query for selecting logs to apply the filtering action.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SecurityMonitoringRuleOptionsArgs:
    def __init__(__self__, *,
                 keep_alive: pulumi.Input[int],
                 max_signal_duration: pulumi.Input[int],
                 decrease_criticality_based_on_env: Optional[pulumi.Input[bool]] = None,
                 detection_method: Optional[pulumi.Input[str]] = None,
                 evaluation_window: Optional[pulumi.Input[int]] = None,
                 impossible_travel_options: Optional[pulumi.Input['SecurityMonitoringRuleOptionsImpossibleTravelOptionsArgs']] = None,
                 new_value_options: Optional[pulumi.Input['SecurityMonitoringRuleOptionsNewValueOptionsArgs']] = None):
        """
        :param pulumi.Input[int] keep_alive: Once a signal is generated, the signal will remain “open” if a case is matched at least once within this keep alive window (in seconds). Valid values are `0`, `60`, `300`, `600`, `900`, `1800`, `3600`, `7200`, `10800`, `21600`.
        :param pulumi.Input[int] max_signal_duration: A signal will “close” regardless of the query being matched once the time exceeds the maximum duration (in seconds). This time is calculated from the first seen timestamp. Valid values are `0`, `60`, `300`, `600`, `900`, `1800`, `3600`, `7200`, `10800`, `21600`, `43200`, `86400`.
        :param pulumi.Input[bool] decrease_criticality_based_on_env: If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with `staging`, `test`, or `dev`. Only available when the rule type is `log_detection`.
        :param pulumi.Input[str] detection_method: The detection method. Valid values are `threshold`, `new_value`, `anomaly_detection`, `impossible_travel`, `hardcoded`, `third_party`.
        :param pulumi.Input[int] evaluation_window: A time window is specified to match when at least one of the cases matches true. This is a sliding window and evaluates in real time. Valid values are `0`, `60`, `300`, `600`, `900`, `1800`, `3600`, `7200`.
        :param pulumi.Input['SecurityMonitoringRuleOptionsImpossibleTravelOptionsArgs'] impossible_travel_options: Options for rules using the impossible travel detection method.
        :param pulumi.Input['SecurityMonitoringRuleOptionsNewValueOptionsArgs'] new_value_options: New value rules specific options.
        """
        pulumi.set(__self__, "keep_alive", keep_alive)
        pulumi.set(__self__, "max_signal_duration", max_signal_duration)
        if decrease_criticality_based_on_env is not None:
            pulumi.set(__self__, "decrease_criticality_based_on_env", decrease_criticality_based_on_env)
        if detection_method is not None:
            pulumi.set(__self__, "detection_method", detection_method)
        if evaluation_window is not None:
            pulumi.set(__self__, "evaluation_window", evaluation_window)
        if impossible_travel_options is not None:
            pulumi.set(__self__, "impossible_travel_options", impossible_travel_options)
        if new_value_options is not None:
            pulumi.set(__self__, "new_value_options", new_value_options)

    @property
    @pulumi.getter(name="keepAlive")
    def keep_alive(self) -> pulumi.Input[int]:
        """
        Once a signal is generated, the signal will remain “open” if a case is matched at least once within this keep alive window (in seconds). Valid values are `0`, `60`, `300`, `600`, `900`, `1800`, `3600`, `7200`, `10800`, `21600`.
        """
        return pulumi.get(self, "keep_alive")

    @keep_alive.setter
    def keep_alive(self, value: pulumi.Input[int]):
        pulumi.set(self, "keep_alive", value)

    @property
    @pulumi.getter(name="maxSignalDuration")
    def max_signal_duration(self) -> pulumi.Input[int]:
        """
        A signal will “close” regardless of the query being matched once the time exceeds the maximum duration (in seconds). This time is calculated from the first seen timestamp. Valid values are `0`, `60`, `300`, `600`, `900`, `1800`, `3600`, `7200`, `10800`, `21600`, `43200`, `86400`.
        """
        return pulumi.get(self, "max_signal_duration")

    @max_signal_duration.setter
    def max_signal_duration(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_signal_duration", value)

    @property
    @pulumi.getter(name="decreaseCriticalityBasedOnEnv")
    def decrease_criticality_based_on_env(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, signals in non-production environments have a lower severity than what is defined by the rule case, which can reduce noise. The decrement is applied when the environment tag of the signal starts with `staging`, `test`, or `dev`. Only available when the rule type is `log_detection`.
        """
        return pulumi.get(self, "decrease_criticality_based_on_env")

    @decrease_criticality_based_on_env.setter
    def decrease_criticality_based_on_env(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "decrease_criticality_based_on_env", value)

    @property
    @pulumi.getter(name="detectionMethod")
    def detection_method(self) -> Optional[pulumi.Input[str]]:
        """
        The detection method. Valid values are `threshold`, `new_value`, `anomaly_detection`, `impossible_travel`, `hardcoded`, `third_party`.
        """
        return pulumi.get(self, "detection_method")

    @detection_method.setter
    def detection_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detection_method", value)

    @property
    @pulumi.getter(name="evaluationWindow")
    def evaluation_window(self) -> Optional[pulumi.Input[int]]:
        """
        A time window is specified to match when at least one of the cases matches true. This is a sliding window and evaluates in real time. Valid values are `0`, `60`, `300`, `600`, `900`, `1800`, `3600`, `7200`.
        """
        return pulumi.get(self, "evaluation_window")

    @evaluation_window.setter
    def evaluation_window(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "evaluation_window", value)

    @property
    @pulumi.getter(name="impossibleTravelOptions")
    def impossible_travel_options(self) -> Optional[pulumi.Input['SecurityMonitoringRuleOptionsImpossibleTravelOptionsArgs']]:
        """
        Options for rules using the impossible travel detection method.
        """
        return pulumi.get(self, "impossible_travel_options")

    @impossible_travel_options.setter
    def impossible_travel_options(self, value: Optional[pulumi.Input['SecurityMonitoringRuleOptionsImpossibleTravelOptionsArgs']]):
        pulumi.set(self, "impossible_travel_options", value)

    @property
    @pulumi.getter(name="newValueOptions")
    def new_value_options(self) -> Optional[pulumi.Input['SecurityMonitoringRuleOptionsNewValueOptionsArgs']]:
        """
        New value rules specific options.
        """
        return pulumi.get(self, "new_value_options")

    @new_value_options.setter
    def new_value_options(self, value: Optional[pulumi.Input['SecurityMonitoringRuleOptionsNewValueOptionsArgs']]):
        pulumi.set(self, "new_value_options", value)


@pulumi.input_type
class SecurityMonitoringRuleOptionsImpossibleTravelOptionsArgs:
    def __init__(__self__, *,
                 baseline_user_locations: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[bool] baseline_user_locations: If true, signals are suppressed for the first 24 hours. During that time, Datadog learns the user's regular access locations. This can be helpful to reduce noise and infer VPN usage or credentialed API access.
        """
        if baseline_user_locations is not None:
            pulumi.set(__self__, "baseline_user_locations", baseline_user_locations)

    @property
    @pulumi.getter(name="baselineUserLocations")
    def baseline_user_locations(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, signals are suppressed for the first 24 hours. During that time, Datadog learns the user's regular access locations. This can be helpful to reduce noise and infer VPN usage or credentialed API access.
        """
        return pulumi.get(self, "baseline_user_locations")

    @baseline_user_locations.setter
    def baseline_user_locations(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "baseline_user_locations", value)


@pulumi.input_type
class SecurityMonitoringRuleOptionsNewValueOptionsArgs:
    def __init__(__self__, *,
                 forget_after: pulumi.Input[int],
                 learning_duration: Optional[pulumi.Input[int]] = None,
                 learning_method: Optional[pulumi.Input[str]] = None,
                 learning_threshold: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] forget_after: The duration in days after which a learned value is forgotten. Valid values are `1`, `2`, `7`, `14`, `21`, `28`.
        :param pulumi.Input[int] learning_duration: The duration in days during which values are learned, and after which signals will be generated for values that weren't learned. If set to 0, a signal will be generated for all new values after the first value is learned. Valid values are `0`, `1`, `7`.
        :param pulumi.Input[str] learning_method: The learning method used to determine when signals should be generated for values that weren't learned. Valid values are `duration`, `threshold`.
        :param pulumi.Input[int] learning_threshold: A number of occurrences after which signals are generated for values that weren't learned. Valid values are `0`, `1`.
        """
        pulumi.set(__self__, "forget_after", forget_after)
        if learning_duration is not None:
            pulumi.set(__self__, "learning_duration", learning_duration)
        if learning_method is not None:
            pulumi.set(__self__, "learning_method", learning_method)
        if learning_threshold is not None:
            pulumi.set(__self__, "learning_threshold", learning_threshold)

    @property
    @pulumi.getter(name="forgetAfter")
    def forget_after(self) -> pulumi.Input[int]:
        """
        The duration in days after which a learned value is forgotten. Valid values are `1`, `2`, `7`, `14`, `21`, `28`.
        """
        return pulumi.get(self, "forget_after")

    @forget_after.setter
    def forget_after(self, value: pulumi.Input[int]):
        pulumi.set(self, "forget_after", value)

    @property
    @pulumi.getter(name="learningDuration")
    def learning_duration(self) -> Optional[pulumi.Input[int]]:
        """
        The duration in days during which values are learned, and after which signals will be generated for values that weren't learned. If set to 0, a signal will be generated for all new values after the first value is learned. Valid values are `0`, `1`, `7`.
        """
        return pulumi.get(self, "learning_duration")

    @learning_duration.setter
    def learning_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "learning_duration", value)

    @property
    @pulumi.getter(name="learningMethod")
    def learning_method(self) -> Optional[pulumi.Input[str]]:
        """
        The learning method used to determine when signals should be generated for values that weren't learned. Valid values are `duration`, `threshold`.
        """
        return pulumi.get(self, "learning_method")

    @learning_method.setter
    def learning_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "learning_method", value)

    @property
    @pulumi.getter(name="learningThreshold")
    def learning_threshold(self) -> Optional[pulumi.Input[int]]:
        """
        A number of occurrences after which signals are generated for values that weren't learned. Valid values are `0`, `1`.
        """
        return pulumi.get(self, "learning_threshold")

    @learning_threshold.setter
    def learning_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "learning_threshold", value)


@pulumi.input_type
class SecurityMonitoringRuleQueryArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 agent_rules: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityMonitoringRuleQueryAgentRuleArgs']]]] = None,
                 aggregation: Optional[pulumi.Input[str]] = None,
                 distinct_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_by_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 metric: Optional[pulumi.Input[str]] = None,
                 metrics: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] query: Query to run on logs.
        :param pulumi.Input[Sequence[pulumi.Input['SecurityMonitoringRuleQueryAgentRuleArgs']]] agent_rules: **Deprecated**. It won't be applied anymore. **Deprecated.** `agent_rule` has been deprecated in favor of new Agent Rule resource.
        :param pulumi.Input[str] aggregation: The aggregation type. For Signal Correlation rules, it must be event_count. Valid values are `count`, `cardinality`, `sum`, `max`, `new_value`, `geo_data`, `event_count`, `none`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] distinct_fields: Field for which the cardinality is measured. Sent as an array.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_by_fields: Fields to group by.
        :param pulumi.Input[str] metric: The target field to aggregate over when using the `sum`, `max`, or `geo_data` aggregations. **Deprecated.** Configure `metrics` instead. This attribute will be removed in the next major version of the provider.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] metrics: Group of target fields to aggregate over when using the `sum`, `max`, `geo_data`, or `new_value` aggregations. The `sum`, `max`, and `geo_data` aggregations only accept one value in this list, whereas the `new_value` aggregation accepts up to five values.
        :param pulumi.Input[str] name: Name of the query. Not compatible with `new_value` aggregations.
        """
        pulumi.set(__self__, "query", query)
        if agent_rules is not None:
            warnings.warn("""`agent_rule` has been deprecated in favor of new Agent Rule resource.""", DeprecationWarning)
            pulumi.log.warn("""agent_rules is deprecated: `agent_rule` has been deprecated in favor of new Agent Rule resource.""")
        if agent_rules is not None:
            pulumi.set(__self__, "agent_rules", agent_rules)
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)
        if distinct_fields is not None:
            pulumi.set(__self__, "distinct_fields", distinct_fields)
        if group_by_fields is not None:
            pulumi.set(__self__, "group_by_fields", group_by_fields)
        if metric is not None:
            warnings.warn("""Configure `metrics` instead. This attribute will be removed in the next major version of the provider.""", DeprecationWarning)
            pulumi.log.warn("""metric is deprecated: Configure `metrics` instead. This attribute will be removed in the next major version of the provider.""")
        if metric is not None:
            pulumi.set(__self__, "metric", metric)
        if metrics is not None:
            pulumi.set(__self__, "metrics", metrics)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query to run on logs.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="agentRules")
    def agent_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SecurityMonitoringRuleQueryAgentRuleArgs']]]]:
        """
        **Deprecated**. It won't be applied anymore. **Deprecated.** `agent_rule` has been deprecated in favor of new Agent Rule resource.
        """
        warnings.warn("""`agent_rule` has been deprecated in favor of new Agent Rule resource.""", DeprecationWarning)
        pulumi.log.warn("""agent_rules is deprecated: `agent_rule` has been deprecated in favor of new Agent Rule resource.""")

        return pulumi.get(self, "agent_rules")

    @agent_rules.setter
    def agent_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SecurityMonitoringRuleQueryAgentRuleArgs']]]]):
        pulumi.set(self, "agent_rules", value)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation type. For Signal Correlation rules, it must be event_count. Valid values are `count`, `cardinality`, `sum`, `max`, `new_value`, `geo_data`, `event_count`, `none`.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter(name="distinctFields")
    def distinct_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Field for which the cardinality is measured. Sent as an array.
        """
        return pulumi.get(self, "distinct_fields")

    @distinct_fields.setter
    def distinct_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "distinct_fields", value)

    @property
    @pulumi.getter(name="groupByFields")
    def group_by_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Fields to group by.
        """
        return pulumi.get(self, "group_by_fields")

    @group_by_fields.setter
    def group_by_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_by_fields", value)

    @property
    @pulumi.getter
    def metric(self) -> Optional[pulumi.Input[str]]:
        """
        The target field to aggregate over when using the `sum`, `max`, or `geo_data` aggregations. **Deprecated.** Configure `metrics` instead. This attribute will be removed in the next major version of the provider.
        """
        warnings.warn("""Configure `metrics` instead. This attribute will be removed in the next major version of the provider.""", DeprecationWarning)
        pulumi.log.warn("""metric is deprecated: Configure `metrics` instead. This attribute will be removed in the next major version of the provider.""")

        return pulumi.get(self, "metric")

    @metric.setter
    def metric(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "metric", value)

    @property
    @pulumi.getter
    def metrics(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Group of target fields to aggregate over when using the `sum`, `max`, `geo_data`, or `new_value` aggregations. The `sum`, `max`, and `geo_data` aggregations only accept one value in this list, whereas the `new_value` aggregation accepts up to five values.
        """
        return pulumi.get(self, "metrics")

    @metrics.setter
    def metrics(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "metrics", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the query. Not compatible with `new_value` aggregations.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SecurityMonitoringRuleQueryAgentRuleArgs:
    def __init__(__self__, *,
                 agent_rule_id: pulumi.Input[str],
                 expression: pulumi.Input[str]):
        """
        :param pulumi.Input[str] agent_rule_id: **Deprecated**. It won't be applied anymore.
        :param pulumi.Input[str] expression: **Deprecated**. It won't be applied anymore.
        """
        pulumi.set(__self__, "agent_rule_id", agent_rule_id)
        pulumi.set(__self__, "expression", expression)

    @property
    @pulumi.getter(name="agentRuleId")
    def agent_rule_id(self) -> pulumi.Input[str]:
        """
        **Deprecated**. It won't be applied anymore.
        """
        return pulumi.get(self, "agent_rule_id")

    @agent_rule_id.setter
    def agent_rule_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "agent_rule_id", value)

    @property
    @pulumi.getter
    def expression(self) -> pulumi.Input[str]:
        """
        **Deprecated**. It won't be applied anymore.
        """
        return pulumi.get(self, "expression")

    @expression.setter
    def expression(self, value: pulumi.Input[str]):
        pulumi.set(self, "expression", value)


@pulumi.input_type
class SecurityMonitoringRuleSignalQueryArgs:
    def __init__(__self__, *,
                 rule_id: pulumi.Input[str],
                 aggregation: Optional[pulumi.Input[str]] = None,
                 correlated_by_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 correlated_query_index: Optional[pulumi.Input[str]] = None,
                 default_rule_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] rule_id: Rule ID of the signal to correlate.
        :param pulumi.Input[str] aggregation: The aggregation type. For Signal Correlation rules, it must be event_count. Valid values are `count`, `cardinality`, `sum`, `max`, `new_value`, `geo_data`, `event_count`, `none`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] correlated_by_fields: Fields to correlate by.
        :param pulumi.Input[str] correlated_query_index: Index of the rule query used to retrieve the correlated field. An empty string applies correlation on the non-projected per query attributes of the rule.
        :param pulumi.Input[str] default_rule_id: Default Rule ID of the signal to correlate. This value is READ-ONLY.
        :param pulumi.Input[str] name: Name of the query. Not compatible with `new_value` aggregations.
        """
        pulumi.set(__self__, "rule_id", rule_id)
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)
        if correlated_by_fields is not None:
            pulumi.set(__self__, "correlated_by_fields", correlated_by_fields)
        if correlated_query_index is not None:
            pulumi.set(__self__, "correlated_query_index", correlated_query_index)
        if default_rule_id is not None:
            pulumi.set(__self__, "default_rule_id", default_rule_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Input[str]:
        """
        Rule ID of the signal to correlate.
        """
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[pulumi.Input[str]]:
        """
        The aggregation type. For Signal Correlation rules, it must be event_count. Valid values are `count`, `cardinality`, `sum`, `max`, `new_value`, `geo_data`, `event_count`, `none`.
        """
        return pulumi.get(self, "aggregation")

    @aggregation.setter
    def aggregation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aggregation", value)

    @property
    @pulumi.getter(name="correlatedByFields")
    def correlated_by_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Fields to correlate by.
        """
        return pulumi.get(self, "correlated_by_fields")

    @correlated_by_fields.setter
    def correlated_by_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "correlated_by_fields", value)

    @property
    @pulumi.getter(name="correlatedQueryIndex")
    def correlated_query_index(self) -> Optional[pulumi.Input[str]]:
        """
        Index of the rule query used to retrieve the correlated field. An empty string applies correlation on the non-projected per query attributes of the rule.
        """
        return pulumi.get(self, "correlated_query_index")

    @correlated_query_index.setter
    def correlated_query_index(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "correlated_query_index", value)

    @property
    @pulumi.getter(name="defaultRuleId")
    def default_rule_id(self) -> Optional[pulumi.Input[str]]:
        """
        Default Rule ID of the signal to correlate. This value is READ-ONLY.
        """
        return pulumi.get(self, "default_rule_id")

    @default_rule_id.setter
    def default_rule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_rule_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the query. Not compatible with `new_value` aggregations.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SensitiveDataScannerGroupFilterArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str]):
        """
        :param pulumi.Input[str] query: Query to filter the events.
        """
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        """
        Query to filter the events.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SensitiveDataScannerRuleTextReplacementArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 number_of_chars: Optional[pulumi.Input[int]] = None,
                 replacement_string: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Type of the replacement text. None means no replacement. hash means the data will be stubbed. replacement*string means that one can chose a text to replace the data. partial*replacement*from*beginning allows a user to partially replace the data from the beginning, and partial*replacement*from_end on the other hand, allows to replace data from the end. Valid values are `none`, `hash`, `replacement_string`, `partial_replacement_from_beginning`, `partial_replacement_from_end`.
        :param pulumi.Input[int] number_of_chars: Required if type == 'partial*replacement*from*beginning' or 'partial*replacement*from*end'. It must be > 0.
        :param pulumi.Input[str] replacement_string: Required if type == 'replacement_string'.
        """
        pulumi.set(__self__, "type", type)
        if number_of_chars is not None:
            pulumi.set(__self__, "number_of_chars", number_of_chars)
        if replacement_string is not None:
            pulumi.set(__self__, "replacement_string", replacement_string)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the replacement text. None means no replacement. hash means the data will be stubbed. replacement*string means that one can chose a text to replace the data. partial*replacement*from*beginning allows a user to partially replace the data from the beginning, and partial*replacement*from_end on the other hand, allows to replace data from the end. Valid values are `none`, `hash`, `replacement_string`, `partial_replacement_from_beginning`, `partial_replacement_from_end`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="numberOfChars")
    def number_of_chars(self) -> Optional[pulumi.Input[int]]:
        """
        Required if type == 'partial*replacement*from*beginning' or 'partial*replacement*from*end'. It must be > 0.
        """
        return pulumi.get(self, "number_of_chars")

    @number_of_chars.setter
    def number_of_chars(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_chars", value)

    @property
    @pulumi.getter(name="replacementString")
    def replacement_string(self) -> Optional[pulumi.Input[str]]:
        """
        Required if type == 'replacement_string'.
        """
        return pulumi.get(self, "replacement_string")

    @replacement_string.setter
    def replacement_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replacement_string", value)


@pulumi.input_type
class ServiceLevelObjectiveQueryArgs:
    def __init__(__self__, *,
                 denominator: pulumi.Input[str],
                 numerator: pulumi.Input[str]):
        """
        :param pulumi.Input[str] denominator: The sum of the `total` events.
        :param pulumi.Input[str] numerator: The sum of all the `good` events.
        """
        pulumi.set(__self__, "denominator", denominator)
        pulumi.set(__self__, "numerator", numerator)

    @property
    @pulumi.getter
    def denominator(self) -> pulumi.Input[str]:
        """
        The sum of the `total` events.
        """
        return pulumi.get(self, "denominator")

    @denominator.setter
    def denominator(self, value: pulumi.Input[str]):
        pulumi.set(self, "denominator", value)

    @property
    @pulumi.getter
    def numerator(self) -> pulumi.Input[str]:
        """
        The sum of all the `good` events.
        """
        return pulumi.get(self, "numerator")

    @numerator.setter
    def numerator(self, value: pulumi.Input[str]):
        pulumi.set(self, "numerator", value)


@pulumi.input_type
class ServiceLevelObjectiveThresholdArgs:
    def __init__(__self__, *,
                 target: pulumi.Input[float],
                 timeframe: pulumi.Input[str],
                 target_display: Optional[pulumi.Input[str]] = None,
                 warning: Optional[pulumi.Input[float]] = None,
                 warning_display: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[float] target: The objective's target in `(0,100)`.
        :param pulumi.Input[str] timeframe: The time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API documentation page. Valid values are `7d`, `30d`, `90d`, `custom`.
        :param pulumi.Input[str] target_display: A string representation of the target that indicates its precision. It uses trailing zeros to show significant decimal places (e.g. `98.00`).
        :param pulumi.Input[float] warning: The objective's warning value in `(0,100)`. This must be greater than the target value.
        :param pulumi.Input[str] warning_display: A string representation of the warning target (see the description of the target_display field for details).
        """
        pulumi.set(__self__, "target", target)
        pulumi.set(__self__, "timeframe", timeframe)
        if target_display is not None:
            pulumi.set(__self__, "target_display", target_display)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)
        if warning_display is not None:
            pulumi.set(__self__, "warning_display", warning_display)

    @property
    @pulumi.getter
    def target(self) -> pulumi.Input[float]:
        """
        The objective's target in `(0,100)`.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: pulumi.Input[float]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def timeframe(self) -> pulumi.Input[str]:
        """
        The time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API documentation page. Valid values are `7d`, `30d`, `90d`, `custom`.
        """
        return pulumi.get(self, "timeframe")

    @timeframe.setter
    def timeframe(self, value: pulumi.Input[str]):
        pulumi.set(self, "timeframe", value)

    @property
    @pulumi.getter(name="targetDisplay")
    def target_display(self) -> Optional[pulumi.Input[str]]:
        """
        A string representation of the target that indicates its precision. It uses trailing zeros to show significant decimal places (e.g. `98.00`).
        """
        return pulumi.get(self, "target_display")

    @target_display.setter
    def target_display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_display", value)

    @property
    @pulumi.getter
    def warning(self) -> Optional[pulumi.Input[float]]:
        """
        The objective's warning value in `(0,100)`. This must be greater than the target value.
        """
        return pulumi.get(self, "warning")

    @warning.setter
    def warning(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "warning", value)

    @property
    @pulumi.getter(name="warningDisplay")
    def warning_display(self) -> Optional[pulumi.Input[str]]:
        """
        A string representation of the warning target (see the description of the target_display field for details).
        """
        return pulumi.get(self, "warning_display")

    @warning_display.setter
    def warning_display(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning_display", value)


@pulumi.input_type
class SpansMetricComputeArgs:
    def __init__(__self__, *,
                 aggregation_type: pulumi.Input[str],
                 include_percentiles: Optional[pulumi.Input[bool]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] aggregation_type: The type of aggregation to use. This field can't be updated after creation.
        :param pulumi.Input[bool] include_percentiles: Toggle to include or exclude percentile aggregations for distribution metrics. Only present when the `aggregation_type` is `distribution`.
        :param pulumi.Input[str] path: The path to the value the span-based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
        """
        pulumi.set(__self__, "aggregation_type", aggregation_type)
        if include_percentiles is not None:
            pulumi.set(__self__, "include_percentiles", include_percentiles)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="aggregationType")
    def aggregation_type(self) -> pulumi.Input[str]:
        """
        The type of aggregation to use. This field can't be updated after creation.
        """
        return pulumi.get(self, "aggregation_type")

    @aggregation_type.setter
    def aggregation_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "aggregation_type", value)

    @property
    @pulumi.getter(name="includePercentiles")
    def include_percentiles(self) -> Optional[pulumi.Input[bool]]:
        """
        Toggle to include or exclude percentile aggregations for distribution metrics. Only present when the `aggregation_type` is `distribution`.
        """
        return pulumi.get(self, "include_percentiles")

    @include_percentiles.setter
    def include_percentiles(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_percentiles", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The path to the value the span-based metric will aggregate on (only used if the aggregation type is a "distribution"). This field can't be updated after creation.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


@pulumi.input_type
class SpansMetricFilterArgs:
    def __init__(__self__, *,
                 query: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] query: The search query - following the span search syntax.
        """
        if query is not None:
            pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        """
        The search query - following the span search syntax.
        """
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SpansMetricGroupByArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 tag_name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] path: The path to the value the span-based metric will be aggregated over.
        :param pulumi.Input[str] tag_name: Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.
        """
        pulumi.set(__self__, "path", path)
        if tag_name is not None:
            pulumi.set(__self__, "tag_name", tag_name)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The path to the value the span-based metric will be aggregated over.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="tagName")
    def tag_name(self) -> Optional[pulumi.Input[str]]:
        """
        Eventual name of the tag that gets created. By default, the path attribute is used as the tag name.
        """
        return pulumi.get(self, "tag_name")

    @tag_name.setter
    def tag_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag_name", value)


@pulumi.input_type
class SyntheticsGlobalVariableOptionsArgs:
    def __init__(__self__, *,
                 totp_parameters: Optional[pulumi.Input['SyntheticsGlobalVariableOptionsTotpParametersArgs']] = None):
        """
        :param pulumi.Input['SyntheticsGlobalVariableOptionsTotpParametersArgs'] totp_parameters: Parameters needed for MFA/TOTP.
        """
        if totp_parameters is not None:
            pulumi.set(__self__, "totp_parameters", totp_parameters)

    @property
    @pulumi.getter(name="totpParameters")
    def totp_parameters(self) -> Optional[pulumi.Input['SyntheticsGlobalVariableOptionsTotpParametersArgs']]:
        """
        Parameters needed for MFA/TOTP.
        """
        return pulumi.get(self, "totp_parameters")

    @totp_parameters.setter
    def totp_parameters(self, value: Optional[pulumi.Input['SyntheticsGlobalVariableOptionsTotpParametersArgs']]):
        pulumi.set(self, "totp_parameters", value)


@pulumi.input_type
class SyntheticsGlobalVariableOptionsTotpParametersArgs:
    def __init__(__self__, *,
                 digits: pulumi.Input[int],
                 refresh_interval: pulumi.Input[int]):
        """
        :param pulumi.Input[int] digits: Number of digits for the OTP.
        :param pulumi.Input[int] refresh_interval: Interval for which to refresh the token (in seconds).
        """
        pulumi.set(__self__, "digits", digits)
        pulumi.set(__self__, "refresh_interval", refresh_interval)

    @property
    @pulumi.getter
    def digits(self) -> pulumi.Input[int]:
        """
        Number of digits for the OTP.
        """
        return pulumi.get(self, "digits")

    @digits.setter
    def digits(self, value: pulumi.Input[int]):
        pulumi.set(self, "digits", value)

    @property
    @pulumi.getter(name="refreshInterval")
    def refresh_interval(self) -> pulumi.Input[int]:
        """
        Interval for which to refresh the token (in seconds).
        """
        return pulumi.get(self, "refresh_interval")

    @refresh_interval.setter
    def refresh_interval(self, value: pulumi.Input[int]):
        pulumi.set(self, "refresh_interval", value)


@pulumi.input_type
class SyntheticsGlobalVariableParseTestOptionsArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 field: Optional[pulumi.Input[str]] = None,
                 local_variable_name: Optional[pulumi.Input[str]] = None,
                 parser: Optional[pulumi.Input['SyntheticsGlobalVariableParseTestOptionsParserArgs']] = None):
        """
        :param pulumi.Input[str] type: Defines the source to use to extract the value. Valid values are `http_body`, `http_header`, `local_variable`.
        :param pulumi.Input[str] field: Required when type = `http_header`. Defines the header to use to extract the value
        :param pulumi.Input[str] local_variable_name: When type is `local_variable`, name of the local variable to use to extract the value.
        """
        pulumi.set(__self__, "type", type)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if local_variable_name is not None:
            pulumi.set(__self__, "local_variable_name", local_variable_name)
        if parser is not None:
            pulumi.set(__self__, "parser", parser)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Defines the source to use to extract the value. Valid values are `http_body`, `http_header`, `local_variable`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input[str]]:
        """
        Required when type = `http_header`. Defines the header to use to extract the value
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter(name="localVariableName")
    def local_variable_name(self) -> Optional[pulumi.Input[str]]:
        """
        When type is `local_variable`, name of the local variable to use to extract the value.
        """
        return pulumi.get(self, "local_variable_name")

    @local_variable_name.setter
    def local_variable_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_variable_name", value)

    @property
    @pulumi.getter
    def parser(self) -> Optional[pulumi.Input['SyntheticsGlobalVariableParseTestOptionsParserArgs']]:
        return pulumi.get(self, "parser")

    @parser.setter
    def parser(self, value: Optional[pulumi.Input['SyntheticsGlobalVariableParseTestOptionsParserArgs']]):
        pulumi.set(self, "parser", value)


@pulumi.input_type
class SyntheticsGlobalVariableParseTestOptionsParserArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Type of parser to extract the value. Valid values are `raw`, `json_path`, `regex`, `x_path`.
        :param pulumi.Input[str] value: Value for the parser to use, required for type `json_path` or `regex`.
        """
        pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of parser to extract the value. Valid values are `raw`, `json_path`, `regex`, `x_path`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value for the parser to use, required for type `json_path` or `regex`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SyntheticsPrivateLocationMetadataArgs:
    def __init__(__self__, *,
                 restricted_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] restricted_roles: A list of role identifiers pulled from the Roles API to restrict read and write access.
        """
        if restricted_roles is not None:
            pulumi.set(__self__, "restricted_roles", restricted_roles)

    @property
    @pulumi.getter(name="restrictedRoles")
    def restricted_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of role identifiers pulled from the Roles API to restrict read and write access.
        """
        return pulumi.get(self, "restricted_roles")

    @restricted_roles.setter
    def restricted_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "restricted_roles", value)


@pulumi.input_type
class SyntheticsTestApiStepArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 allow_failure: Optional[pulumi.Input[bool]] = None,
                 assertions: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestApiStepAssertionArgs']]]] = None,
                 extracted_values: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestApiStepExtractedValueArgs']]]] = None,
                 is_critical: Optional[pulumi.Input[bool]] = None,
                 request_basicauth: Optional[pulumi.Input['SyntheticsTestApiStepRequestBasicauthArgs']] = None,
                 request_client_certificate: Optional[pulumi.Input['SyntheticsTestApiStepRequestClientCertificateArgs']] = None,
                 request_definition: Optional[pulumi.Input['SyntheticsTestApiStepRequestDefinitionArgs']] = None,
                 request_headers: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 request_proxy: Optional[pulumi.Input['SyntheticsTestApiStepRequestProxyArgs']] = None,
                 request_query: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 retry: Optional[pulumi.Input['SyntheticsTestApiStepRetryArgs']] = None,
                 subtype: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The name of the step.
        :param pulumi.Input[bool] allow_failure: Determines whether or not to continue with test if this step fails.
        :param pulumi.Input[Sequence[pulumi.Input['SyntheticsTestApiStepAssertionArgs']]] assertions: Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
        :param pulumi.Input[Sequence[pulumi.Input['SyntheticsTestApiStepExtractedValueArgs']]] extracted_values: Values to parse and save as variables from the response.
        :param pulumi.Input[bool] is_critical: Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
        :param pulumi.Input['SyntheticsTestApiStepRequestBasicauthArgs'] request_basicauth: The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
        :param pulumi.Input['SyntheticsTestApiStepRequestClientCertificateArgs'] request_client_certificate: Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
        :param pulumi.Input['SyntheticsTestApiStepRequestDefinitionArgs'] request_definition: The request for the api step.
        :param pulumi.Input[Mapping[str, Any]] request_headers: Header name and value map.
        :param pulumi.Input['SyntheticsTestApiStepRequestProxyArgs'] request_proxy: The proxy to perform the test.
        :param pulumi.Input[Mapping[str, Any]] request_query: Query arguments name and value map.
        :param pulumi.Input[str] subtype: The subtype of the Synthetic multistep API test step. Valid values are `http`.
        """
        pulumi.set(__self__, "name", name)
        if allow_failure is not None:
            pulumi.set(__self__, "allow_failure", allow_failure)
        if assertions is not None:
            pulumi.set(__self__, "assertions", assertions)
        if extracted_values is not None:
            pulumi.set(__self__, "extracted_values", extracted_values)
        if is_critical is not None:
            pulumi.set(__self__, "is_critical", is_critical)
        if request_basicauth is not None:
            pulumi.set(__self__, "request_basicauth", request_basicauth)
        if request_client_certificate is not None:
            pulumi.set(__self__, "request_client_certificate", request_client_certificate)
        if request_definition is not None:
            pulumi.set(__self__, "request_definition", request_definition)
        if request_headers is not None:
            pulumi.set(__self__, "request_headers", request_headers)
        if request_proxy is not None:
            pulumi.set(__self__, "request_proxy", request_proxy)
        if request_query is not None:
            pulumi.set(__self__, "request_query", request_query)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if subtype is not None:
            pulumi.set(__self__, "subtype", subtype)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the step.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="allowFailure")
    def allow_failure(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether or not to continue with test if this step fails.
        """
        return pulumi.get(self, "allow_failure")

    @allow_failure.setter
    def allow_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_failure", value)

    @property
    @pulumi.getter
    def assertions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestApiStepAssertionArgs']]]]:
        """
        Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
        """
        return pulumi.get(self, "assertions")

    @assertions.setter
    def assertions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestApiStepAssertionArgs']]]]):
        pulumi.set(self, "assertions", value)

    @property
    @pulumi.getter(name="extractedValues")
    def extracted_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestApiStepExtractedValueArgs']]]]:
        """
        Values to parse and save as variables from the response.
        """
        return pulumi.get(self, "extracted_values")

    @extracted_values.setter
    def extracted_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SyntheticsTestApiStepExtractedValueArgs']]]]):
        pulumi.set(self, "extracted_values", value)

    @property
    @pulumi.getter(name="isCritical")
    def is_critical(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
        """
        return pulumi.get(self, "is_critical")

    @is_critical.setter
    def is_critical(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_critical", value)

    @property
    @pulumi.getter(name="requestBasicauth")
    def request_basicauth(self) -> Optional[pulumi.Input['SyntheticsTestApiStepRequestBasicauthArgs']]:
        """
        The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
        """
        return pulumi.get(self, "request_basicauth")

    @request_basicauth.setter
    def request_basicauth(self, value: Optional[pulumi.Input['SyntheticsTestApiStepRequestBasicauthArgs']]):
        pulumi.set(self, "request_basicauth", value)

    @property
    @pulumi.getter(name="requestClientCertificate")
    def request_client_certificate(self) -> Optional[pulumi.Input['SyntheticsTestApiStepRequestClientCertificateArgs']]:
        """
        Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
        """
        return pulumi.get(self, "request_client_certificate")

    @request_client_certificate.setter
    def request_client_certificate(self, value: Optional[pulumi.Input['SyntheticsTestApiStepRequestClientCertificateArgs']]):
        pulumi.set(self, "request_client_certificate", value)

    @property
    @pulumi.getter(name="requestDefinition")
    def request_definition(self) -> Optional[pulumi.Input['SyntheticsTestApiStepRequestDefinitionArgs']]:
        """
        The request for the api step.
        """
        return pulumi.get(self, "request_definition")

    @request_definition.setter
    def request_definition(self, value: Optional[pulumi.Input['SyntheticsTestApiStepRequestDefinitionArgs']]):
        pulumi.set(self, "request_definition", value)

    @property
    @pulumi.getter(name="requestHeaders")
    def request_headers(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Header name and value map.
        """
        return pulumi.get(self, "request_headers")

    @request_headers.setter
    def request_headers(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "request_headers", value)

    @property
    @pulumi.getter(name="requestProxy")
    def request_proxy(self) -> Optional[pulumi.Input['SyntheticsTestApiStepRequestProxyArgs']]:
        """
        The proxy to perform the test.
        """
        return pulumi.get(self, "request_proxy")

    @request_proxy.setter
    def request_proxy(self, value: Optional[pulumi.Input['SyntheticsTestApiStepRequestProxyArgs']]):
        pulumi.set(self, "request_proxy", value)

    @property
    @pulumi.getter(name="requestQuery")
    def request_query(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Query arguments name and value map.
        """
        return pulumi.get(self, "request_query")

    @request_query.setter
    def request_query(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "request_query", value)

    @property
    @pulumi.getter
    def retry(self) -> Optional[pulumi.Input['SyntheticsTestApiStepRetryArgs']]:
        return pulumi.get(self, "retry")

    @retry.setter
    def retry(self, value: Optional[pulumi.Input['SyntheticsTestApiStepRetryArgs']]):
        pulumi.set(self, "retry", value)

    @property
    @pulumi.getter
    def subtype(self) -> Optional[pulumi.Input[str]]:
        """
        The subtype of the Synthetic multistep API test step. Valid values are `http`.
        """
        return pulumi.get(self, "subtype")

    @subtype.setter
    def subtype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtype", value)


@pulumi.input_type
class SyntheticsTestApiStepAssertionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 type: pulumi.Input[str],
                 property: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 targetjsonpath: Optional[pulumi.Input['SyntheticsTestApiStepAssertionTargetjsonpathArgs']] = None,
                 targetxpath: Optional[pulumi.Input['SyntheticsTestApiStepAssertionTargetxpathArgs']] = None):
        """
        :param pulumi.Input[str] operator: Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
        :param pulumi.Input[str] type: Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
        :param pulumi.Input[str] property: If assertion type is `header`, this is the header name.
        :param pulumi.Input[str] target: Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
        :param pulumi.Input['SyntheticsTestApiStepAssertionTargetjsonpathArgs'] targetjsonpath: Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
        :param pulumi.Input['SyntheticsTestApiStepAssertionTargetxpathArgs'] targetxpath: Expected structure if `operator` is `validatesXPath`. Exactly one nested block is allowed with the structure below.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "type", type)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if targetjsonpath is not None:
            pulumi.set(__self__, "targetjsonpath", targetjsonpath)
        if targetxpath is not None:
            pulumi.set(__self__, "targetxpath", targetxpath)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def targetjsonpath(self) -> Optional[pulumi.Input['SyntheticsTestApiStepAssertionTargetjsonpathArgs']]:
        """
        Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
        """
        return pulumi.get(self, "targetjsonpath")

    @targetjsonpath.setter
    def targetjsonpath(self, value: Optional[pulumi.Input['SyntheticsTestApiStepAssertionTargetjsonpathArgs']]):
        pulumi.set(self, "targetjsonpath", value)

    @property
    @pulumi.getter
    def targetxpath(self) -> Optional[pulumi.Input['SyntheticsTestApiStepAssertionTargetxpathArgs']]:
        """
        Expected structure if `operator` is `validatesXPath`. Exactly one nested block is allowed with the structure below.
        """
        return pulumi.get(self, "targetxpath")

    @targetxpath.setter
    def targetxpath(self, value: Optional[pulumi.Input['SyntheticsTestApiStepAssertionTargetxpathArgs']]):
        pulumi.set(self, "targetxpath", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[str]]:
        """
        If assertion type is `header`, this is the header name.
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class SyntheticsTestApiStepAssertionTargetjsonpathArgs:
    def __init__(__self__, *,
                 jsonpath: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 targetvalue: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] jsonpath: The JSON path to assert.
        :param pulumi.Input[str] operator: Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
        :param pulumi.Input[str] targetvalue: Expected matching value.
        """
        pulumi.set(__self__, "jsonpath", jsonpath)
        pulumi.set(__self__, "operator", operator)
        if targetvalue is not None:
            pulumi.set(__self__, "targetvalue", targetvalue)

    @property
    @pulumi.getter
    def jsonpath(self) -> pulumi.Input[str]:
        """
        The JSON path to assert.
        """
        return pulumi.get(self, "jsonpath")

    @jsonpath.setter
    def jsonpath(self, value: pulumi.Input[str]):
        pulumi.set(self, "jsonpath", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def targetvalue(self) -> Optional[pulumi.Input[str]]:
        """
        Expected matching value.
        """
        return pulumi.get(self, "targetvalue")

    @targetvalue.setter
    def targetvalue(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "targetvalue", value)


@pulumi.input_type
class SyntheticsTestApiStepAssertionTargetxpathArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 xpath: pulumi.Input[str],
                 targetvalue: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] operator: Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
        :param pulumi.Input[str] xpath: The xpath to assert.
        :param pulumi.Input[str] targetvalue: Expected matching value.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "xpath", xpath)
        if targetvalue is not None:
            pulumi.set(__self__, "targetvalue", targetvalue)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def xpath(self) -> pulumi.Input[str]:
        """
        The xpath to assert.
        """
        return pulumi.get(self, "xpath")

    @xpath.setter
    def xpath(self, value: pulumi.Input[str]):
        pulumi.set(self, "xpath", value)

    @property
    @pulumi.getter
    def targetvalue(self) -> Optional[pulumi.Input[str]]:
        """
        Expected matching value.
        """
        return pulumi.get(self, "targetvalue")

    @targetvalue.setter
    def targetvalue(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "targetvalue", value)


@pulumi.input_type
class SyntheticsTestApiStepExtractedValueArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 parser: pulumi.Input['SyntheticsTestApiStepExtractedValueParserArgs'],
                 type: pulumi.Input[str],
                 field: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] type: Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
        :param pulumi.Input[str] field: When type is `http_header`, name of the header to use to extract the value.
        :param pulumi.Input[bool] secure: Determines whether or not the extracted value will be obfuscated.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "parser", parser)
        pulumi.set(__self__, "type", type)
        if field is not None:
            pulumi.set(__self__, "field", field)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def parser(self) -> pulumi.Input['SyntheticsTestApiStepExtractedValueParserArgs']:
        return pulumi.get(self, "parser")

    @parser.setter
    def parser(self, value: pulumi.Input['SyntheticsTestApiStepExtractedValueParserArgs']):
        pulumi.set(self, "parser", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def field(self) -> Optional[pulumi.Input[str]]:
        """
        When type is `http_header`, name of the header to use to extract the value.
        """
        return pulumi.get(self, "field")

    @field.setter
    def field(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether or not the extracted value will be obfuscated.
        """
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)


@pulumi.input_type
class SyntheticsTestApiStepExtractedValueParserArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
        :param pulumi.Input[str] value: Regex or JSON path used for the parser. Not used with type `raw`.
        """
        pulumi.set(__self__, "type", type)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Regex or JSON path used for the parser. Not used with type `raw`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SyntheticsTestApiStepRequestBasicauthArgs:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[str]] = None,
                 access_token_url: Optional[pulumi.Input[str]] = None,
                 audience: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 session_token: Optional[pulumi.Input[str]] = None,
                 token_api_authentication: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 workstation: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_key: Access key for `SIGV4` authentication.
        :param pulumi.Input[str] access_token_url: Access token url for `oauth-client` or `oauth-rop` authentication.
        :param pulumi.Input[str] audience: Audience for `oauth-client` or `oauth-rop` authentication.
        :param pulumi.Input[str] client_id: Client ID for `oauth-client` or `oauth-rop` authentication.
        :param pulumi.Input[str] client_secret: Client secret for `oauth-client` or `oauth-rop` authentication.
        :param pulumi.Input[str] domain: Domain for `ntlm` authentication.
        :param pulumi.Input[str] password: Password for authentication.
        :param pulumi.Input[str] region: Region for `SIGV4` authentication.
        :param pulumi.Input[str] resource: Resource for `oauth-client` or `oauth-rop` authentication.
        :param pulumi.Input[str] scope: Scope for `oauth-client` or `oauth-rop` authentication.
        :param pulumi.Input[str] secret_key: Secret key for `SIGV4` authentication.
        :param pulumi.Input[str] service_name: Service name for `SIGV4` authentication.
        :param pulumi.Input[str] session_token: Session token for `SIGV4` authentication.
        :param pulumi.Input[str] token_api_authentication: Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.
        :param pulumi.Input[str] type: Type of basic authentication to use when performing the test.
        :param pulumi.Input[str] username: Username for authentication.
        :param pulumi.Input[str] workstation: Workstation for `ntlm` authentication.
        """
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if access_token_url is not None:
            pulumi.set(__self__, "access_token_url", access_token_url)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if session_token is not None:
            pulumi.set(__self__, "session_token", session_token)
        if token_api_authentication is not None:
            pulumi.set(__self__, "token_api_authentication", token_api_authentication)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if workstation is not None:
            pulumi.set(__self__, "workstation", workstation)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        Access key for `SIGV4` authentication.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="accessTokenUrl")
    def access_token_url(self) -> Optional[pulumi.Input[str]]:
        """
        Access token url for `oauth-client` or `oauth-rop` authentication.
        """
        return pulumi.get(self, "access_token_url")

    @access_token_url.setter
    def access_token_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_url", value)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        """
        Audience for `oauth-client` or `oauth-rop` authentication.
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Client ID for `oauth-client` or `oauth-rop` authentication.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Client secret for `oauth-client` or `oauth-rop` authentication.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain for `ntlm` authentication.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for authentication.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region for `SIGV4` authentication.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        """
        Resource for `oauth-client` or `oauth-rop` authentication.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        Scope for `oauth-client` or `oauth-rop` authentication.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        Secret key for `SIGV4` authentication.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name for `SIGV4` authentication.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="sessionToken")
    def session_token(self) -> Optional[pulumi.Input[str]]:
        """
        Session token for `SIGV4` authentication.
        """
        return pulumi.get(self, "session_token")

    @session_token.setter
    def session_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_token", value)

    @property
    @pulumi.getter(name="tokenApiAuthentication")
    def token_api_authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.
        """
        return pulumi.get(self, "token_api_authentication")

    @token_api_authentication.setter
    def token_api_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_api_authentication", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of basic authentication to use when performing the test.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def workstation(self) -> Optional[pulumi.Input[str]]:
        """
        Workstation for `ntlm` authentication.
        """
        return pulumi.get(self, "workstation")

    @workstation.setter
    def workstation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workstation", value)


@pulumi.input_type
class SyntheticsTestApiStepRequestClientCertificateArgs:
    def __init__(__self__, *,
                 cert: pulumi.Input['SyntheticsTestApiStepRequestClientCertificateCertArgs'],
                 key: pulumi.Input['SyntheticsTestApiStepRequestClientCertificateKeyArgs']):
        pulumi.set(__self__, "cert", cert)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def cert(self) -> pulumi.Input['SyntheticsTestApiStepRequestClientCertificateCertArgs']:
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: pulumi.Input['SyntheticsTestApiStepRequestClientCertificateCertArgs']):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input['SyntheticsTestApiStepRequestClientCertificateKeyArgs']:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input['SyntheticsTestApiStepRequestClientCertificateKeyArgs']):
        pulumi.set(self, "key", value)


@pulumi.input_type
class SyntheticsTestApiStepRequestClientCertificateCertArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 filename: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content: Content of the certificate.
        :param pulumi.Input[str] filename: File name for the certificate.
        """
        pulumi.set(__self__, "content", content)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        Content of the certificate.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        """
        File name for the certificate.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)


@pulumi.input_type
class SyntheticsTestApiStepRequestClientCertificateKeyArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 filename: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content: Content of the certificate.
        :param pulumi.Input[str] filename: File name for the certificate.
        """
        pulumi.set(__self__, "content", content)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        Content of the certificate.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        """
        File name for the certificate.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)


@pulumi.input_type
class SyntheticsTestApiStepRequestDefinitionArgs:
    def __init__(__self__, *,
                 allow_insecure: Optional[pulumi.Input[bool]] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 body_type: Optional[pulumi.Input[str]] = None,
                 call_type: Optional[pulumi.Input[str]] = None,
                 certificate_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_server: Optional[pulumi.Input[str]] = None,
                 dns_server_port: Optional[pulumi.Input[int]] = None,
                 follow_redirects: Optional[pulumi.Input[bool]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 no_saving_response_body: Optional[pulumi.Input[bool]] = None,
                 number_of_packets: Optional[pulumi.Input[int]] = None,
                 persist_cookies: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 servername: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 should_track_hops: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] allow_insecure: Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
        :param pulumi.Input[str] body: The request body.
        :param pulumi.Input[str] body_type: Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.
        :param pulumi.Input[str] call_type: The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] certificate_domains: By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificate_domains`.
        :param pulumi.Input[str] dns_server: DNS server to use for DNS tests (`subtype = "dns"`).
        :param pulumi.Input[int] dns_server_port: DNS server port to use for DNS tests.
        :param pulumi.Input[bool] follow_redirects: Determines whether or not the API HTTP test should follow redirects.
        :param pulumi.Input[str] host: Host name to perform the test with.
        :param pulumi.Input[str] message: For UDP and websocket tests, message to send with the request.
        :param pulumi.Input[str] method: Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.
        :param pulumi.Input[bool] no_saving_response_body: Determines whether or not to save the response body.
        :param pulumi.Input[int] number_of_packets: Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
        :param pulumi.Input[bool] persist_cookies: Persist cookies across redirects.
        :param pulumi.Input[int] port: Port to use when performing the test.
        :param pulumi.Input[str] servername: For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
        :param pulumi.Input[str] service: The gRPC service on which you want to perform the gRPC call.
        :param pulumi.Input[bool] should_track_hops: This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
        :param pulumi.Input[int] timeout: Timeout in seconds for the test. Defaults to `60`.
        :param pulumi.Input[str] url: The URL to send the request to.
        """
        if allow_insecure is not None:
            pulumi.set(__self__, "allow_insecure", allow_insecure)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if body_type is not None:
            pulumi.set(__self__, "body_type", body_type)
        if call_type is not None:
            pulumi.set(__self__, "call_type", call_type)
        if certificate_domains is not None:
            pulumi.set(__self__, "certificate_domains", certificate_domains)
        if dns_server is not None:
            pulumi.set(__self__, "dns_server", dns_server)
        if dns_server_port is not None:
            pulumi.set(__self__, "dns_server_port", dns_server_port)
        if follow_redirects is not None:
            pulumi.set(__self__, "follow_redirects", follow_redirects)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if no_saving_response_body is not None:
            pulumi.set(__self__, "no_saving_response_body", no_saving_response_body)
        if number_of_packets is not None:
            pulumi.set(__self__, "number_of_packets", number_of_packets)
        if persist_cookies is not None:
            pulumi.set(__self__, "persist_cookies", persist_cookies)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if servername is not None:
            pulumi.set(__self__, "servername", servername)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if should_track_hops is not None:
            pulumi.set(__self__, "should_track_hops", should_track_hops)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="allowInsecure")
    def allow_insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
        """
        return pulumi.get(self, "allow_insecure")

    @allow_insecure.setter
    def allow_insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_insecure", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        The request body.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="bodyType")
    def body_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.
        """
        return pulumi.get(self, "body_type")

    @body_type.setter
    def body_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body_type", value)

    @property
    @pulumi.getter(name="callType")
    def call_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.
        """
        return pulumi.get(self, "call_type")

    @call_type.setter
    def call_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "call_type", value)

    @property
    @pulumi.getter(name="certificateDomains")
    def certificate_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificate_domains`.
        """
        return pulumi.get(self, "certificate_domains")

    @certificate_domains.setter
    def certificate_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "certificate_domains", value)

    @property
    @pulumi.getter(name="dnsServer")
    def dns_server(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server to use for DNS tests (`subtype = "dns"`).
        """
        return pulumi.get(self, "dns_server")

    @dns_server.setter
    def dns_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server", value)

    @property
    @pulumi.getter(name="dnsServerPort")
    def dns_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        DNS server port to use for DNS tests.
        """
        return pulumi.get(self, "dns_server_port")

    @dns_server_port.setter
    def dns_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dns_server_port", value)

    @property
    @pulumi.getter(name="followRedirects")
    def follow_redirects(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether or not the API HTTP test should follow redirects.
        """
        return pulumi.get(self, "follow_redirects")

    @follow_redirects.setter
    def follow_redirects(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "follow_redirects", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to perform the test with.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        For UDP and websocket tests, message to send with the request.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        """
        Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="noSavingResponseBody")
    def no_saving_response_body(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether or not to save the response body.
        """
        return pulumi.get(self, "no_saving_response_body")

    @no_saving_response_body.setter
    def no_saving_response_body(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_saving_response_body", value)

    @property
    @pulumi.getter(name="numberOfPackets")
    def number_of_packets(self) -> Optional[pulumi.Input[int]]:
        """
        Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
        """
        return pulumi.get(self, "number_of_packets")

    @number_of_packets.setter
    def number_of_packets(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_packets", value)

    @property
    @pulumi.getter(name="persistCookies")
    def persist_cookies(self) -> Optional[pulumi.Input[bool]]:
        """
        Persist cookies across redirects.
        """
        return pulumi.get(self, "persist_cookies")

    @persist_cookies.setter
    def persist_cookies(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "persist_cookies", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port to use when performing the test.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def servername(self) -> Optional[pulumi.Input[str]]:
        """
        For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
        """
        return pulumi.get(self, "servername")

    @servername.setter
    def servername(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "servername", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        The gRPC service on which you want to perform the gRPC call.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="shouldTrackHops")
    def should_track_hops(self) -> Optional[pulumi.Input[bool]]:
        """
        This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
        """
        return pulumi.get(self, "should_track_hops")

    @should_track_hops.setter
    def should_track_hops(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_track_hops", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout in seconds for the test. Defaults to `60`.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to send the request to.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SyntheticsTestApiStepRequestProxyArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 headers: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input[str] url: URL of the proxy to perform the test.
        :param pulumi.Input[Mapping[str, Any]] headers: Header name and value map.
        """
        pulumi.set(__self__, "url", url)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        URL of the proxy to perform the test.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Header name and value map.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "headers", value)


@pulumi.input_type
class SyntheticsTestApiStepRetryArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] count: Number of retries needed to consider a location as failed before sending a notification alert.
        :param pulumi.Input[int] interval: Interval between a failed test and the next retry in milliseconds.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of retries needed to consider a location as failed before sending a notification alert.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval between a failed test and the next retry in milliseconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class SyntheticsTestAssertionArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 type: pulumi.Input[str],
                 property: Optional[pulumi.Input[str]] = None,
                 target: Optional[pulumi.Input[str]] = None,
                 targetjsonpath: Optional[pulumi.Input['SyntheticsTestAssertionTargetjsonpathArgs']] = None,
                 targetxpath: Optional[pulumi.Input['SyntheticsTestAssertionTargetxpathArgs']] = None):
        """
        :param pulumi.Input[str] operator: Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
        :param pulumi.Input[str] type: Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
        :param pulumi.Input[str] property: If assertion type is `header`, this is the header name.
        :param pulumi.Input[str] target: Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
        :param pulumi.Input['SyntheticsTestAssertionTargetjsonpathArgs'] targetjsonpath: Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
        :param pulumi.Input['SyntheticsTestAssertionTargetxpathArgs'] targetxpath: Expected structure if `operator` is `validatesXPath`. Exactly one nested block is allowed with the structure below.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "type", type)
        if property is not None:
            pulumi.set(__self__, "property", property)
        if target is not None:
            pulumi.set(__self__, "target", target)
        if targetjsonpath is not None:
            pulumi.set(__self__, "targetjsonpath", targetjsonpath)
        if targetxpath is not None:
            pulumi.set(__self__, "targetxpath", targetxpath)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def target(self) -> Optional[pulumi.Input[str]]:
        """
        Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
        """
        return pulumi.get(self, "target")

    @target.setter
    def target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target", value)

    @property
    @pulumi.getter
    def targetjsonpath(self) -> Optional[pulumi.Input['SyntheticsTestAssertionTargetjsonpathArgs']]:
        """
        Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
        """
        return pulumi.get(self, "targetjsonpath")

    @targetjsonpath.setter
    def targetjsonpath(self, value: Optional[pulumi.Input['SyntheticsTestAssertionTargetjsonpathArgs']]):
        pulumi.set(self, "targetjsonpath", value)

    @property
    @pulumi.getter
    def targetxpath(self) -> Optional[pulumi.Input['SyntheticsTestAssertionTargetxpathArgs']]:
        """
        Expected structure if `operator` is `validatesXPath`. Exactly one nested block is allowed with the structure below.
        """
        return pulumi.get(self, "targetxpath")

    @targetxpath.setter
    def targetxpath(self, value: Optional[pulumi.Input['SyntheticsTestAssertionTargetxpathArgs']]):
        pulumi.set(self, "targetxpath", value)

    @property
    @pulumi.getter
    def property(self) -> Optional[pulumi.Input[str]]:
        """
        If assertion type is `header`, this is the header name.
        """
        return pulumi.get(self, "property")

    @property.setter
    def property(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "property", value)


@pulumi.input_type
class SyntheticsTestAssertionTargetjsonpathArgs:
    def __init__(__self__, *,
                 jsonpath: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 targetvalue: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] jsonpath: The JSON path to assert.
        :param pulumi.Input[str] operator: Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
        :param pulumi.Input[str] targetvalue: Expected matching value.
        """
        pulumi.set(__self__, "jsonpath", jsonpath)
        pulumi.set(__self__, "operator", operator)
        if targetvalue is not None:
            pulumi.set(__self__, "targetvalue", targetvalue)

    @property
    @pulumi.getter
    def jsonpath(self) -> pulumi.Input[str]:
        """
        The JSON path to assert.
        """
        return pulumi.get(self, "jsonpath")

    @jsonpath.setter
    def jsonpath(self, value: pulumi.Input[str]):
        pulumi.set(self, "jsonpath", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def targetvalue(self) -> Optional[pulumi.Input[str]]:
        """
        Expected matching value.
        """
        return pulumi.get(self, "targetvalue")

    @targetvalue.setter
    def targetvalue(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "targetvalue", value)


@pulumi.input_type
class SyntheticsTestAssertionTargetxpathArgs:
    def __init__(__self__, *,
                 operator: pulumi.Input[str],
                 xpath: pulumi.Input[str],
                 targetvalue: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] operator: Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
        :param pulumi.Input[str] xpath: The xpath to assert.
        :param pulumi.Input[str] targetvalue: Expected matching value.
        """
        pulumi.set(__self__, "operator", operator)
        pulumi.set(__self__, "xpath", xpath)
        if targetvalue is not None:
            pulumi.set(__self__, "targetvalue", targetvalue)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def xpath(self) -> pulumi.Input[str]:
        """
        The xpath to assert.
        """
        return pulumi.get(self, "xpath")

    @xpath.setter
    def xpath(self, value: pulumi.Input[str]):
        pulumi.set(self, "xpath", value)

    @property
    @pulumi.getter
    def targetvalue(self) -> Optional[pulumi.Input[str]]:
        """
        Expected matching value.
        """
        return pulumi.get(self, "targetvalue")

    @targetvalue.setter
    def targetvalue(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "targetvalue", value)


@pulumi.input_type
class SyntheticsTestBrowserStepArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 params: pulumi.Input['SyntheticsTestBrowserStepParamsArgs'],
                 type: pulumi.Input[str],
                 allow_failure: Optional[pulumi.Input[bool]] = None,
                 force_element_update: Optional[pulumi.Input[bool]] = None,
                 is_critical: Optional[pulumi.Input[bool]] = None,
                 no_screenshot: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] name: Name of the step.
        :param pulumi.Input['SyntheticsTestBrowserStepParamsArgs'] params: Parameters for the step.
        :param pulumi.Input[str] type: Type of the step. Valid values are `assertCurrentUrl`, `assertElementAttribute`, `assertElementContent`, `assertElementPresent`, `assertEmail`, `assertFileDownload`, `assertFromJavascript`, `assertPageContains`, `assertPageLacks`, `click`, `extractFromJavascript`, `extractVariable`, `goToEmailLink`, `goToUrl`, `goToUrlAndMeasureTti`, `hover`, `playSubTest`, `pressKey`, `refresh`, `runApiTest`, `scroll`, `selectOption`, `typeText`, `uploadFiles`, `wait`.
        :param pulumi.Input[bool] allow_failure: Determines if the step should be allowed to fail.
        :param pulumi.Input[bool] force_element_update: Force update of the "element" parameter for the step
        :param pulumi.Input[bool] is_critical: Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
        :param pulumi.Input[bool] no_screenshot: Prevents saving screenshots of the step.
        :param pulumi.Input[int] timeout: Used to override the default timeout of a step.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "params", params)
        pulumi.set(__self__, "type", type)
        if allow_failure is not None:
            pulumi.set(__self__, "allow_failure", allow_failure)
        if force_element_update is not None:
            pulumi.set(__self__, "force_element_update", force_element_update)
        if is_critical is not None:
            pulumi.set(__self__, "is_critical", is_critical)
        if no_screenshot is not None:
            pulumi.set(__self__, "no_screenshot", no_screenshot)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the step.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def params(self) -> pulumi.Input['SyntheticsTestBrowserStepParamsArgs']:
        """
        Parameters for the step.
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: pulumi.Input['SyntheticsTestBrowserStepParamsArgs']):
        pulumi.set(self, "params", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the step. Valid values are `assertCurrentUrl`, `assertElementAttribute`, `assertElementContent`, `assertElementPresent`, `assertEmail`, `assertFileDownload`, `assertFromJavascript`, `assertPageContains`, `assertPageLacks`, `click`, `extractFromJavascript`, `extractVariable`, `goToEmailLink`, `goToUrl`, `goToUrlAndMeasureTti`, `hover`, `playSubTest`, `pressKey`, `refresh`, `runApiTest`, `scroll`, `selectOption`, `typeText`, `uploadFiles`, `wait`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="allowFailure")
    def allow_failure(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines if the step should be allowed to fail.
        """
        return pulumi.get(self, "allow_failure")

    @allow_failure.setter
    def allow_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_failure", value)

    @property
    @pulumi.getter(name="forceElementUpdate")
    def force_element_update(self) -> Optional[pulumi.Input[bool]]:
        """
        Force update of the "element" parameter for the step
        """
        return pulumi.get(self, "force_element_update")

    @force_element_update.setter
    def force_element_update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_element_update", value)

    @property
    @pulumi.getter(name="isCritical")
    def is_critical(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
        """
        return pulumi.get(self, "is_critical")

    @is_critical.setter
    def is_critical(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_critical", value)

    @property
    @pulumi.getter(name="noScreenshot")
    def no_screenshot(self) -> Optional[pulumi.Input[bool]]:
        """
        Prevents saving screenshots of the step.
        """
        return pulumi.get(self, "no_screenshot")

    @no_screenshot.setter
    def no_screenshot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_screenshot", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Used to override the default timeout of a step.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)


@pulumi.input_type
class SyntheticsTestBrowserStepParamsArgs:
    def __init__(__self__, *,
                 attribute: Optional[pulumi.Input[str]] = None,
                 check: Optional[pulumi.Input[str]] = None,
                 click_type: Optional[pulumi.Input[str]] = None,
                 code: Optional[pulumi.Input[str]] = None,
                 delay: Optional[pulumi.Input[int]] = None,
                 element: Optional[pulumi.Input[str]] = None,
                 element_user_locator: Optional[pulumi.Input['SyntheticsTestBrowserStepParamsElementUserLocatorArgs']] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 file: Optional[pulumi.Input[str]] = None,
                 files: Optional[pulumi.Input[str]] = None,
                 modifiers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 playing_tab_id: Optional[pulumi.Input[str]] = None,
                 request: Optional[pulumi.Input[str]] = None,
                 subtest_public_id: Optional[pulumi.Input[str]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 variable: Optional[pulumi.Input['SyntheticsTestBrowserStepParamsVariableArgs']] = None,
                 with_click: Optional[pulumi.Input[bool]] = None,
                 x: Optional[pulumi.Input[int]] = None,
                 y: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] attribute: Name of the attribute to use for an "assert attribute" step.
        :param pulumi.Input[str] check: Check type to use for an assertion step. Valid values are `equals`, `notEquals`, `contains`, `notContains`, `startsWith`, `notStartsWith`, `greater`, `lower`, `greaterEquals`, `lowerEquals`, `matchRegex`, `between`, `isEmpty`, `notIsEmpty`.
        :param pulumi.Input[str] click_type: Type of click to use for a "click" step.
        :param pulumi.Input[str] code: Javascript code to use for the step.
        :param pulumi.Input[int] delay: Delay between each key stroke for a "type test" step.
        :param pulumi.Input[str] element: Element to use for the step, json encoded string.
        :param pulumi.Input['SyntheticsTestBrowserStepParamsElementUserLocatorArgs'] element_user_locator: Custom user selector to use for the step.
        :param pulumi.Input[str] email: Details of the email for an "assert email" step.
        :param pulumi.Input[str] file: For an "assert download" step.
        :param pulumi.Input[str] files: Details of the files for an "upload files" step, json encoded string.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] modifiers: Modifier to use for a "press key" step.
        :param pulumi.Input[str] playing_tab_id: ID of the tab to play the subtest.
        :param pulumi.Input[str] request: Request for an API step.
        :param pulumi.Input[str] subtest_public_id: ID of the Synthetics test to use as subtest.
        :param pulumi.Input[str] value: Regex or JSON path used for the parser. Not used with type `raw`.
        :param pulumi.Input['SyntheticsTestBrowserStepParamsVariableArgs'] variable: Details of the variable to extract.
        :param pulumi.Input[bool] with_click: For "file upload" steps.
        :param pulumi.Input[int] x: X coordinates for a "scroll step".
        :param pulumi.Input[int] y: Y coordinates for a "scroll step".
        """
        if attribute is not None:
            pulumi.set(__self__, "attribute", attribute)
        if check is not None:
            pulumi.set(__self__, "check", check)
        if click_type is not None:
            pulumi.set(__self__, "click_type", click_type)
        if code is not None:
            pulumi.set(__self__, "code", code)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if element is not None:
            pulumi.set(__self__, "element", element)
        if element_user_locator is not None:
            pulumi.set(__self__, "element_user_locator", element_user_locator)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if file is not None:
            pulumi.set(__self__, "file", file)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if modifiers is not None:
            pulumi.set(__self__, "modifiers", modifiers)
        if playing_tab_id is not None:
            pulumi.set(__self__, "playing_tab_id", playing_tab_id)
        if request is not None:
            pulumi.set(__self__, "request", request)
        if subtest_public_id is not None:
            pulumi.set(__self__, "subtest_public_id", subtest_public_id)
        if value is not None:
            pulumi.set(__self__, "value", value)
        if variable is not None:
            pulumi.set(__self__, "variable", variable)
        if with_click is not None:
            pulumi.set(__self__, "with_click", with_click)
        if x is not None:
            pulumi.set(__self__, "x", x)
        if y is not None:
            pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter
    def attribute(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the attribute to use for an "assert attribute" step.
        """
        return pulumi.get(self, "attribute")

    @attribute.setter
    def attribute(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute", value)

    @property
    @pulumi.getter
    def check(self) -> Optional[pulumi.Input[str]]:
        """
        Check type to use for an assertion step. Valid values are `equals`, `notEquals`, `contains`, `notContains`, `startsWith`, `notStartsWith`, `greater`, `lower`, `greaterEquals`, `lowerEquals`, `matchRegex`, `between`, `isEmpty`, `notIsEmpty`.
        """
        return pulumi.get(self, "check")

    @check.setter
    def check(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "check", value)

    @property
    @pulumi.getter(name="clickType")
    def click_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of click to use for a "click" step.
        """
        return pulumi.get(self, "click_type")

    @click_type.setter
    def click_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "click_type", value)

    @property
    @pulumi.getter
    def code(self) -> Optional[pulumi.Input[str]]:
        """
        Javascript code to use for the step.
        """
        return pulumi.get(self, "code")

    @code.setter
    def code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "code", value)

    @property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input[int]]:
        """
        Delay between each key stroke for a "type test" step.
        """
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delay", value)

    @property
    @pulumi.getter
    def element(self) -> Optional[pulumi.Input[str]]:
        """
        Element to use for the step, json encoded string.
        """
        return pulumi.get(self, "element")

    @element.setter
    def element(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "element", value)

    @property
    @pulumi.getter(name="elementUserLocator")
    def element_user_locator(self) -> Optional[pulumi.Input['SyntheticsTestBrowserStepParamsElementUserLocatorArgs']]:
        """
        Custom user selector to use for the step.
        """
        return pulumi.get(self, "element_user_locator")

    @element_user_locator.setter
    def element_user_locator(self, value: Optional[pulumi.Input['SyntheticsTestBrowserStepParamsElementUserLocatorArgs']]):
        pulumi.set(self, "element_user_locator", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Details of the email for an "assert email" step.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def file(self) -> Optional[pulumi.Input[str]]:
        """
        For an "assert download" step.
        """
        return pulumi.get(self, "file")

    @file.setter
    def file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file", value)

    @property
    @pulumi.getter
    def files(self) -> Optional[pulumi.Input[str]]:
        """
        Details of the files for an "upload files" step, json encoded string.
        """
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter
    def modifiers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Modifier to use for a "press key" step.
        """
        return pulumi.get(self, "modifiers")

    @modifiers.setter
    def modifiers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "modifiers", value)

    @property
    @pulumi.getter(name="playingTabId")
    def playing_tab_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the tab to play the subtest.
        """
        return pulumi.get(self, "playing_tab_id")

    @playing_tab_id.setter
    def playing_tab_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "playing_tab_id", value)

    @property
    @pulumi.getter
    def request(self) -> Optional[pulumi.Input[str]]:
        """
        Request for an API step.
        """
        return pulumi.get(self, "request")

    @request.setter
    def request(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "request", value)

    @property
    @pulumi.getter(name="subtestPublicId")
    def subtest_public_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the Synthetics test to use as subtest.
        """
        return pulumi.get(self, "subtest_public_id")

    @subtest_public_id.setter
    def subtest_public_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subtest_public_id", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Regex or JSON path used for the parser. Not used with type `raw`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def variable(self) -> Optional[pulumi.Input['SyntheticsTestBrowserStepParamsVariableArgs']]:
        """
        Details of the variable to extract.
        """
        return pulumi.get(self, "variable")

    @variable.setter
    def variable(self, value: Optional[pulumi.Input['SyntheticsTestBrowserStepParamsVariableArgs']]):
        pulumi.set(self, "variable", value)

    @property
    @pulumi.getter(name="withClick")
    def with_click(self) -> Optional[pulumi.Input[bool]]:
        """
        For "file upload" steps.
        """
        return pulumi.get(self, "with_click")

    @with_click.setter
    def with_click(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "with_click", value)

    @property
    @pulumi.getter
    def x(self) -> Optional[pulumi.Input[int]]:
        """
        X coordinates for a "scroll step".
        """
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter
    def y(self) -> Optional[pulumi.Input[int]]:
        """
        Y coordinates for a "scroll step".
        """
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "y", value)


@pulumi.input_type
class SyntheticsTestBrowserStepParamsElementUserLocatorArgs:
    def __init__(__self__, *,
                 value: pulumi.Input['SyntheticsTestBrowserStepParamsElementUserLocatorValueArgs'],
                 fail_test_on_cannot_locate: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input['SyntheticsTestBrowserStepParamsElementUserLocatorValueArgs'] value: Regex or JSON path used for the parser. Not used with type `raw`.
        """
        pulumi.set(__self__, "value", value)
        if fail_test_on_cannot_locate is not None:
            pulumi.set(__self__, "fail_test_on_cannot_locate", fail_test_on_cannot_locate)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input['SyntheticsTestBrowserStepParamsElementUserLocatorValueArgs']:
        """
        Regex or JSON path used for the parser. Not used with type `raw`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input['SyntheticsTestBrowserStepParamsElementUserLocatorValueArgs']):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="failTestOnCannotLocate")
    def fail_test_on_cannot_locate(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fail_test_on_cannot_locate")

    @fail_test_on_cannot_locate.setter
    def fail_test_on_cannot_locate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_test_on_cannot_locate", value)


@pulumi.input_type
class SyntheticsTestBrowserStepParamsElementUserLocatorValueArgs:
    def __init__(__self__, *,
                 value: pulumi.Input[str],
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] value: Regex or JSON path used for the parser. Not used with type `raw`.
        :param pulumi.Input[str] type: Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
        """
        pulumi.set(__self__, "value", value)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        Regex or JSON path used for the parser. Not used with type `raw`.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`, `grpcHealthcheckStatus`, `grpcMetadata`, `grpcProto`, `connection`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SyntheticsTestBrowserStepParamsVariableArgs:
    def __init__(__self__, *,
                 example: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] example: Example of the extracted variable.
        """
        if example is not None:
            pulumi.set(__self__, "example", example)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def example(self) -> Optional[pulumi.Input[str]]:
        """
        Example of the extracted variable.
        """
        return pulumi.get(self, "example")

    @example.setter
    def example(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "example", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SyntheticsTestBrowserVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 example: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: Name of the variable.
        :param pulumi.Input[str] type: Type of browser test variable. Valid values are `element`, `email`, `global`, `javascript`, `text`.
        :param pulumi.Input[str] example: Example for the variable.
        :param pulumi.Input[str] id: ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type `global`.
        :param pulumi.Input[str] pattern: Pattern of the variable.
        :param pulumi.Input[bool] secure: Determines whether or not the browser test variable is obfuscated. Can only be used with a browser variable of type `text`
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if example is not None:
            pulumi.set(__self__, "example", example)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of browser test variable. Valid values are `element`, `email`, `global`, `javascript`, `text`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def example(self) -> Optional[pulumi.Input[str]]:
        """
        Example for the variable.
        """
        return pulumi.get(self, "example")

    @example.setter
    def example(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "example", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type `global`.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Pattern of the variable.
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether or not the browser test variable is obfuscated. Can only be used with a browser variable of type `text`
        """
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)


@pulumi.input_type
class SyntheticsTestConfigVariableArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 type: pulumi.Input[str],
                 example: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 pattern: Optional[pulumi.Input[str]] = None,
                 secure: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] name: Name of the variable.
        :param pulumi.Input[str] type: Type of test configuration variable. Valid values are `global`, `text`.
        :param pulumi.Input[str] id: When type = `global`, ID of the global variable to use.
        :param pulumi.Input[bool] secure: Whether the value of this variable will be obfuscated in test results.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if example is not None:
            pulumi.set(__self__, "example", example)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)
        if secure is not None:
            pulumi.set(__self__, "secure", secure)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the variable.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of test configuration variable. Valid values are `global`, `text`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def example(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "example")

    @example.setter
    def example(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "example", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        When type = `global`, ID of the global variable to use.
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)

    @property
    @pulumi.getter
    def secure(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the value of this variable will be obfuscated in test results.
        """
        return pulumi.get(self, "secure")

    @secure.setter
    def secure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "secure", value)


@pulumi.input_type
class SyntheticsTestOptionsListArgs:
    def __init__(__self__, *,
                 tick_every: pulumi.Input[int],
                 accept_self_signed: Optional[pulumi.Input[bool]] = None,
                 allow_insecure: Optional[pulumi.Input[bool]] = None,
                 check_certificate_revocation: Optional[pulumi.Input[bool]] = None,
                 ci: Optional[pulumi.Input['SyntheticsTestOptionsListCiArgs']] = None,
                 disable_cors: Optional[pulumi.Input[bool]] = None,
                 disable_csp: Optional[pulumi.Input[bool]] = None,
                 follow_redirects: Optional[pulumi.Input[bool]] = None,
                 http_version: Optional[pulumi.Input[str]] = None,
                 ignore_server_certificate_error: Optional[pulumi.Input[bool]] = None,
                 initial_navigation_timeout: Optional[pulumi.Input[int]] = None,
                 min_failure_duration: Optional[pulumi.Input[int]] = None,
                 min_location_failed: Optional[pulumi.Input[int]] = None,
                 monitor_name: Optional[pulumi.Input[str]] = None,
                 monitor_options: Optional[pulumi.Input['SyntheticsTestOptionsListMonitorOptionsArgs']] = None,
                 monitor_priority: Optional[pulumi.Input[int]] = None,
                 no_screenshot: Optional[pulumi.Input[bool]] = None,
                 restricted_roles: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 retry: Optional[pulumi.Input['SyntheticsTestOptionsListRetryArgs']] = None,
                 rum_settings: Optional[pulumi.Input['SyntheticsTestOptionsListRumSettingsArgs']] = None,
                 scheduling: Optional[pulumi.Input['SyntheticsTestOptionsListSchedulingArgs']] = None):
        """
        :param pulumi.Input[int] tick_every: How often the test should run (in seconds).
        :param pulumi.Input[bool] accept_self_signed: For SSL test, whether or not the test should allow self signed certificates.
        :param pulumi.Input[bool] allow_insecure: Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
        :param pulumi.Input[bool] check_certificate_revocation: For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.
        :param pulumi.Input['SyntheticsTestOptionsListCiArgs'] ci: CI/CD options for a Synthetic test.
        :param pulumi.Input[bool] disable_cors: Disable Cross-Origin Resource Sharing for browser tests.
        :param pulumi.Input[bool] disable_csp: Disable Content Security Policy for browser tests.
        :param pulumi.Input[bool] follow_redirects: Determines whether or not the API HTTP test should follow redirects.
        :param pulumi.Input[str] http_version: HTTP version to use for a Synthetics API test. Valid values are `http1`, `http2`, `any`.
        :param pulumi.Input[bool] ignore_server_certificate_error: Ignore server certificate error for browser tests.
        :param pulumi.Input[int] initial_navigation_timeout: Timeout before declaring the initial step as failed (in seconds) for browser tests.
        :param pulumi.Input[int] min_failure_duration: Minimum amount of time in failure required to trigger an alert (in seconds). Default is `0`.
        :param pulumi.Input[int] min_location_failed: Minimum number of locations in failure required to trigger an alert. Default is `1`.
        :param pulumi.Input[str] monitor_name: The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
        :param pulumi.Input[bool] no_screenshot: Prevents saving screenshots of the steps.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] restricted_roles: A list of role identifiers pulled from the Roles API to restrict read and write access.
        :param pulumi.Input['SyntheticsTestOptionsListRumSettingsArgs'] rum_settings: The RUM data collection settings for the Synthetic browser test.
        :param pulumi.Input['SyntheticsTestOptionsListSchedulingArgs'] scheduling: Object containing timeframes and timezone used for advanced scheduling.
        """
        pulumi.set(__self__, "tick_every", tick_every)
        if accept_self_signed is not None:
            pulumi.set(__self__, "accept_self_signed", accept_self_signed)
        if allow_insecure is not None:
            pulumi.set(__self__, "allow_insecure", allow_insecure)
        if check_certificate_revocation is not None:
            pulumi.set(__self__, "check_certificate_revocation", check_certificate_revocation)
        if ci is not None:
            pulumi.set(__self__, "ci", ci)
        if disable_cors is not None:
            pulumi.set(__self__, "disable_cors", disable_cors)
        if disable_csp is not None:
            pulumi.set(__self__, "disable_csp", disable_csp)
        if follow_redirects is not None:
            pulumi.set(__self__, "follow_redirects", follow_redirects)
        if http_version is not None:
            pulumi.set(__self__, "http_version", http_version)
        if ignore_server_certificate_error is not None:
            pulumi.set(__self__, "ignore_server_certificate_error", ignore_server_certificate_error)
        if initial_navigation_timeout is not None:
            pulumi.set(__self__, "initial_navigation_timeout", initial_navigation_timeout)
        if min_failure_duration is not None:
            pulumi.set(__self__, "min_failure_duration", min_failure_duration)
        if min_location_failed is not None:
            pulumi.set(__self__, "min_location_failed", min_location_failed)
        if monitor_name is not None:
            pulumi.set(__self__, "monitor_name", monitor_name)
        if monitor_options is not None:
            pulumi.set(__self__, "monitor_options", monitor_options)
        if monitor_priority is not None:
            pulumi.set(__self__, "monitor_priority", monitor_priority)
        if no_screenshot is not None:
            pulumi.set(__self__, "no_screenshot", no_screenshot)
        if restricted_roles is not None:
            pulumi.set(__self__, "restricted_roles", restricted_roles)
        if retry is not None:
            pulumi.set(__self__, "retry", retry)
        if rum_settings is not None:
            pulumi.set(__self__, "rum_settings", rum_settings)
        if scheduling is not None:
            pulumi.set(__self__, "scheduling", scheduling)

    @property
    @pulumi.getter(name="tickEvery")
    def tick_every(self) -> pulumi.Input[int]:
        """
        How often the test should run (in seconds).
        """
        return pulumi.get(self, "tick_every")

    @tick_every.setter
    def tick_every(self, value: pulumi.Input[int]):
        pulumi.set(self, "tick_every", value)

    @property
    @pulumi.getter(name="acceptSelfSigned")
    def accept_self_signed(self) -> Optional[pulumi.Input[bool]]:
        """
        For SSL test, whether or not the test should allow self signed certificates.
        """
        return pulumi.get(self, "accept_self_signed")

    @accept_self_signed.setter
    def accept_self_signed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "accept_self_signed", value)

    @property
    @pulumi.getter(name="allowInsecure")
    def allow_insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows loading insecure content for an HTTP request in an API test or in a multistep API test step.
        """
        return pulumi.get(self, "allow_insecure")

    @allow_insecure.setter
    def allow_insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_insecure", value)

    @property
    @pulumi.getter(name="checkCertificateRevocation")
    def check_certificate_revocation(self) -> Optional[pulumi.Input[bool]]:
        """
        For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.
        """
        return pulumi.get(self, "check_certificate_revocation")

    @check_certificate_revocation.setter
    def check_certificate_revocation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "check_certificate_revocation", value)

    @property
    @pulumi.getter
    def ci(self) -> Optional[pulumi.Input['SyntheticsTestOptionsListCiArgs']]:
        """
        CI/CD options for a Synthetic test.
        """
        return pulumi.get(self, "ci")

    @ci.setter
    def ci(self, value: Optional[pulumi.Input['SyntheticsTestOptionsListCiArgs']]):
        pulumi.set(self, "ci", value)

    @property
    @pulumi.getter(name="disableCors")
    def disable_cors(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable Cross-Origin Resource Sharing for browser tests.
        """
        return pulumi.get(self, "disable_cors")

    @disable_cors.setter
    def disable_cors(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_cors", value)

    @property
    @pulumi.getter(name="disableCsp")
    def disable_csp(self) -> Optional[pulumi.Input[bool]]:
        """
        Disable Content Security Policy for browser tests.
        """
        return pulumi.get(self, "disable_csp")

    @disable_csp.setter
    def disable_csp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_csp", value)

    @property
    @pulumi.getter(name="followRedirects")
    def follow_redirects(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether or not the API HTTP test should follow redirects.
        """
        return pulumi.get(self, "follow_redirects")

    @follow_redirects.setter
    def follow_redirects(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "follow_redirects", value)

    @property
    @pulumi.getter(name="httpVersion")
    def http_version(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP version to use for a Synthetics API test. Valid values are `http1`, `http2`, `any`.
        """
        return pulumi.get(self, "http_version")

    @http_version.setter
    def http_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_version", value)

    @property
    @pulumi.getter(name="ignoreServerCertificateError")
    def ignore_server_certificate_error(self) -> Optional[pulumi.Input[bool]]:
        """
        Ignore server certificate error for browser tests.
        """
        return pulumi.get(self, "ignore_server_certificate_error")

    @ignore_server_certificate_error.setter
    def ignore_server_certificate_error(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_server_certificate_error", value)

    @property
    @pulumi.getter(name="initialNavigationTimeout")
    def initial_navigation_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout before declaring the initial step as failed (in seconds) for browser tests.
        """
        return pulumi.get(self, "initial_navigation_timeout")

    @initial_navigation_timeout.setter
    def initial_navigation_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_navigation_timeout", value)

    @property
    @pulumi.getter(name="minFailureDuration")
    def min_failure_duration(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum amount of time in failure required to trigger an alert (in seconds). Default is `0`.
        """
        return pulumi.get(self, "min_failure_duration")

    @min_failure_duration.setter
    def min_failure_duration(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_failure_duration", value)

    @property
    @pulumi.getter(name="minLocationFailed")
    def min_location_failed(self) -> Optional[pulumi.Input[int]]:
        """
        Minimum number of locations in failure required to trigger an alert. Default is `1`.
        """
        return pulumi.get(self, "min_location_failed")

    @min_location_failed.setter
    def min_location_failed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_location_failed", value)

    @property
    @pulumi.getter(name="monitorName")
    def monitor_name(self) -> Optional[pulumi.Input[str]]:
        """
        The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
        """
        return pulumi.get(self, "monitor_name")

    @monitor_name.setter
    def monitor_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "monitor_name", value)

    @property
    @pulumi.getter(name="monitorOptions")
    def monitor_options(self) -> Optional[pulumi.Input['SyntheticsTestOptionsListMonitorOptionsArgs']]:
        return pulumi.get(self, "monitor_options")

    @monitor_options.setter
    def monitor_options(self, value: Optional[pulumi.Input['SyntheticsTestOptionsListMonitorOptionsArgs']]):
        pulumi.set(self, "monitor_options", value)

    @property
    @pulumi.getter(name="monitorPriority")
    def monitor_priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "monitor_priority")

    @monitor_priority.setter
    def monitor_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "monitor_priority", value)

    @property
    @pulumi.getter(name="noScreenshot")
    def no_screenshot(self) -> Optional[pulumi.Input[bool]]:
        """
        Prevents saving screenshots of the steps.
        """
        return pulumi.get(self, "no_screenshot")

    @no_screenshot.setter
    def no_screenshot(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_screenshot", value)

    @property
    @pulumi.getter(name="restrictedRoles")
    def restricted_roles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of role identifiers pulled from the Roles API to restrict read and write access.
        """
        return pulumi.get(self, "restricted_roles")

    @restricted_roles.setter
    def restricted_roles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "restricted_roles", value)

    @property
    @pulumi.getter
    def retry(self) -> Optional[pulumi.Input['SyntheticsTestOptionsListRetryArgs']]:
        return pulumi.get(self, "retry")

    @retry.setter
    def retry(self, value: Optional[pulumi.Input['SyntheticsTestOptionsListRetryArgs']]):
        pulumi.set(self, "retry", value)

    @property
    @pulumi.getter(name="rumSettings")
    def rum_settings(self) -> Optional[pulumi.Input['SyntheticsTestOptionsListRumSettingsArgs']]:
        """
        The RUM data collection settings for the Synthetic browser test.
        """
        return pulumi.get(self, "rum_settings")

    @rum_settings.setter
    def rum_settings(self, value: Optional[pulumi.Input['SyntheticsTestOptionsListRumSettingsArgs']]):
        pulumi.set(self, "rum_settings", value)

    @property
    @pulumi.getter
    def scheduling(self) -> Optional[pulumi.Input['SyntheticsTestOptionsListSchedulingArgs']]:
        """
        Object containing timeframes and timezone used for advanced scheduling.
        """
        return pulumi.get(self, "scheduling")

    @scheduling.setter
    def scheduling(self, value: Optional[pulumi.Input['SyntheticsTestOptionsListSchedulingArgs']]):
        pulumi.set(self, "scheduling", value)


@pulumi.input_type
class SyntheticsTestOptionsListCiArgs:
    def __init__(__self__, *,
                 execution_rule: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] execution_rule: Execution rule for a Synthetics test. Valid values are `blocking`, `non_blocking`, `skipped`.
        """
        if execution_rule is not None:
            pulumi.set(__self__, "execution_rule", execution_rule)

    @property
    @pulumi.getter(name="executionRule")
    def execution_rule(self) -> Optional[pulumi.Input[str]]:
        """
        Execution rule for a Synthetics test. Valid values are `blocking`, `non_blocking`, `skipped`.
        """
        return pulumi.get(self, "execution_rule")

    @execution_rule.setter
    def execution_rule(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "execution_rule", value)


@pulumi.input_type
class SyntheticsTestOptionsListMonitorOptionsArgs:
    def __init__(__self__, *,
                 renotify_interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] renotify_interval: Specify a renotification frequency in minutes. Values available by default are `0`, `10`, `20`, `30`, `40`, `50`, `60`, `90`, `120`, `180`, `240`, `300`, `360`, `720`, `1440`.
        """
        if renotify_interval is not None:
            pulumi.set(__self__, "renotify_interval", renotify_interval)

    @property
    @pulumi.getter(name="renotifyInterval")
    def renotify_interval(self) -> Optional[pulumi.Input[int]]:
        """
        Specify a renotification frequency in minutes. Values available by default are `0`, `10`, `20`, `30`, `40`, `50`, `60`, `90`, `120`, `180`, `240`, `300`, `360`, `720`, `1440`.
        """
        return pulumi.get(self, "renotify_interval")

    @renotify_interval.setter
    def renotify_interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "renotify_interval", value)


@pulumi.input_type
class SyntheticsTestOptionsListRetryArgs:
    def __init__(__self__, *,
                 count: Optional[pulumi.Input[int]] = None,
                 interval: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] count: Number of retries needed to consider a location as failed before sending a notification alert.
        :param pulumi.Input[int] interval: Interval between a failed test and the next retry in milliseconds.
        """
        if count is not None:
            pulumi.set(__self__, "count", count)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)

    @property
    @pulumi.getter
    def count(self) -> Optional[pulumi.Input[int]]:
        """
        Number of retries needed to consider a location as failed before sending a notification alert.
        """
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        """
        Interval between a failed test and the next retry in milliseconds.
        """
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)


@pulumi.input_type
class SyntheticsTestOptionsListRumSettingsArgs:
    def __init__(__self__, *,
                 is_enabled: pulumi.Input[bool],
                 application_id: Optional[pulumi.Input[str]] = None,
                 client_token_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] is_enabled: Determines whether RUM data is collected during test runs.
        :param pulumi.Input[str] application_id: RUM application ID used to collect RUM data for the browser test.
        :param pulumi.Input[int] client_token_id: RUM application API key ID used to collect RUM data for the browser test.
        """
        pulumi.set(__self__, "is_enabled", is_enabled)
        if application_id is not None:
            pulumi.set(__self__, "application_id", application_id)
        if client_token_id is not None:
            pulumi.set(__self__, "client_token_id", client_token_id)

    @property
    @pulumi.getter(name="isEnabled")
    def is_enabled(self) -> pulumi.Input[bool]:
        """
        Determines whether RUM data is collected during test runs.
        """
        return pulumi.get(self, "is_enabled")

    @is_enabled.setter
    def is_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_enabled", value)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> Optional[pulumi.Input[str]]:
        """
        RUM application ID used to collect RUM data for the browser test.
        """
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="clientTokenId")
    def client_token_id(self) -> Optional[pulumi.Input[int]]:
        """
        RUM application API key ID used to collect RUM data for the browser test.
        """
        return pulumi.get(self, "client_token_id")

    @client_token_id.setter
    def client_token_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "client_token_id", value)


@pulumi.input_type
class SyntheticsTestOptionsListSchedulingArgs:
    def __init__(__self__, *,
                 timeframes: pulumi.Input[Sequence[pulumi.Input['SyntheticsTestOptionsListSchedulingTimeframeArgs']]],
                 timezone: pulumi.Input[str]):
        """
        :param pulumi.Input[Sequence[pulumi.Input['SyntheticsTestOptionsListSchedulingTimeframeArgs']]] timeframes: Array containing objects describing the scheduling pattern to apply to each day.
        :param pulumi.Input[str] timezone: Timezone in which the timeframe is based.
        """
        pulumi.set(__self__, "timeframes", timeframes)
        pulumi.set(__self__, "timezone", timezone)

    @property
    @pulumi.getter
    def timeframes(self) -> pulumi.Input[Sequence[pulumi.Input['SyntheticsTestOptionsListSchedulingTimeframeArgs']]]:
        """
        Array containing objects describing the scheduling pattern to apply to each day.
        """
        return pulumi.get(self, "timeframes")

    @timeframes.setter
    def timeframes(self, value: pulumi.Input[Sequence[pulumi.Input['SyntheticsTestOptionsListSchedulingTimeframeArgs']]]):
        pulumi.set(self, "timeframes", value)

    @property
    @pulumi.getter
    def timezone(self) -> pulumi.Input[str]:
        """
        Timezone in which the timeframe is based.
        """
        return pulumi.get(self, "timezone")

    @timezone.setter
    def timezone(self, value: pulumi.Input[str]):
        pulumi.set(self, "timezone", value)


@pulumi.input_type
class SyntheticsTestOptionsListSchedulingTimeframeArgs:
    def __init__(__self__, *,
                 day: pulumi.Input[int],
                 from_: pulumi.Input[str],
                 to: pulumi.Input[str]):
        """
        :param pulumi.Input[int] day: Number representing the day of the week
        :param pulumi.Input[str] from_: The hour of the day on which scheduling starts.
        :param pulumi.Input[str] to: The hour of the day on which scheduling ends.
        """
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "to", to)

    @property
    @pulumi.getter
    def day(self) -> pulumi.Input[int]:
        """
        Number representing the day of the week
        """
        return pulumi.get(self, "day")

    @day.setter
    def day(self, value: pulumi.Input[int]):
        pulumi.set(self, "day", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> pulumi.Input[str]:
        """
        The hour of the day on which scheduling starts.
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def to(self) -> pulumi.Input[str]:
        """
        The hour of the day on which scheduling ends.
        """
        return pulumi.get(self, "to")

    @to.setter
    def to(self, value: pulumi.Input[str]):
        pulumi.set(self, "to", value)


@pulumi.input_type
class SyntheticsTestRequestBasicauthArgs:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[str]] = None,
                 access_token_url: Optional[pulumi.Input[str]] = None,
                 audience: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 resource: Optional[pulumi.Input[str]] = None,
                 scope: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 service_name: Optional[pulumi.Input[str]] = None,
                 session_token: Optional[pulumi.Input[str]] = None,
                 token_api_authentication: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 workstation: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] access_key: Access key for `SIGV4` authentication.
        :param pulumi.Input[str] access_token_url: Access token url for `oauth-client` or `oauth-rop` authentication.
        :param pulumi.Input[str] audience: Audience for `oauth-client` or `oauth-rop` authentication.
        :param pulumi.Input[str] client_id: Client ID for `oauth-client` or `oauth-rop` authentication.
        :param pulumi.Input[str] client_secret: Client secret for `oauth-client` or `oauth-rop` authentication.
        :param pulumi.Input[str] domain: Domain for `ntlm` authentication.
        :param pulumi.Input[str] password: Password for authentication.
        :param pulumi.Input[str] region: Region for `SIGV4` authentication.
        :param pulumi.Input[str] resource: Resource for `oauth-client` or `oauth-rop` authentication.
        :param pulumi.Input[str] scope: Scope for `oauth-client` or `oauth-rop` authentication.
        :param pulumi.Input[str] secret_key: Secret key for `SIGV4` authentication.
        :param pulumi.Input[str] service_name: Service name for `SIGV4` authentication.
        :param pulumi.Input[str] session_token: Session token for `SIGV4` authentication.
        :param pulumi.Input[str] token_api_authentication: Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.
        :param pulumi.Input[str] type: Type of basic authentication to use when performing the test.
        :param pulumi.Input[str] username: Username for authentication.
        :param pulumi.Input[str] workstation: Workstation for `ntlm` authentication.
        """
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if access_token_url is not None:
            pulumi.set(__self__, "access_token_url", access_token_url)
        if audience is not None:
            pulumi.set(__self__, "audience", audience)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource is not None:
            pulumi.set(__self__, "resource", resource)
        if scope is not None:
            pulumi.set(__self__, "scope", scope)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if session_token is not None:
            pulumi.set(__self__, "session_token", session_token)
        if token_api_authentication is not None:
            pulumi.set(__self__, "token_api_authentication", token_api_authentication)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if workstation is not None:
            pulumi.set(__self__, "workstation", workstation)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        Access key for `SIGV4` authentication.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="accessTokenUrl")
    def access_token_url(self) -> Optional[pulumi.Input[str]]:
        """
        Access token url for `oauth-client` or `oauth-rop` authentication.
        """
        return pulumi.get(self, "access_token_url")

    @access_token_url.setter
    def access_token_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token_url", value)

    @property
    @pulumi.getter
    def audience(self) -> Optional[pulumi.Input[str]]:
        """
        Audience for `oauth-client` or `oauth-rop` authentication.
        """
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        Client ID for `oauth-client` or `oauth-rop` authentication.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        Client secret for `oauth-client` or `oauth-rop` authentication.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        """
        Domain for `ntlm` authentication.
        """
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Password for authentication.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        Region for `SIGV4` authentication.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def resource(self) -> Optional[pulumi.Input[str]]:
        """
        Resource for `oauth-client` or `oauth-rop` authentication.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def scope(self) -> Optional[pulumi.Input[str]]:
        """
        Scope for `oauth-client` or `oauth-rop` authentication.
        """
        return pulumi.get(self, "scope")

    @scope.setter
    def scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        Secret key for `SIGV4` authentication.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[pulumi.Input[str]]:
        """
        Service name for `SIGV4` authentication.
        """
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="sessionToken")
    def session_token(self) -> Optional[pulumi.Input[str]]:
        """
        Session token for `SIGV4` authentication.
        """
        return pulumi.get(self, "session_token")

    @session_token.setter
    def session_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_token", value)

    @property
    @pulumi.getter(name="tokenApiAuthentication")
    def token_api_authentication(self) -> Optional[pulumi.Input[str]]:
        """
        Token API Authentication for `oauth-client` or `oauth-rop` authentication. Valid values are `header`, `body`.
        """
        return pulumi.get(self, "token_api_authentication")

    @token_api_authentication.setter
    def token_api_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_api_authentication", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of basic authentication to use when performing the test.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        Username for authentication.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def workstation(self) -> Optional[pulumi.Input[str]]:
        """
        Workstation for `ntlm` authentication.
        """
        return pulumi.get(self, "workstation")

    @workstation.setter
    def workstation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workstation", value)


@pulumi.input_type
class SyntheticsTestRequestClientCertificateArgs:
    def __init__(__self__, *,
                 cert: pulumi.Input['SyntheticsTestRequestClientCertificateCertArgs'],
                 key: pulumi.Input['SyntheticsTestRequestClientCertificateKeyArgs']):
        pulumi.set(__self__, "cert", cert)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def cert(self) -> pulumi.Input['SyntheticsTestRequestClientCertificateCertArgs']:
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: pulumi.Input['SyntheticsTestRequestClientCertificateCertArgs']):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input['SyntheticsTestRequestClientCertificateKeyArgs']:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input['SyntheticsTestRequestClientCertificateKeyArgs']):
        pulumi.set(self, "key", value)


@pulumi.input_type
class SyntheticsTestRequestClientCertificateCertArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 filename: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content: Content of the certificate.
        :param pulumi.Input[str] filename: File name for the certificate.
        """
        pulumi.set(__self__, "content", content)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        Content of the certificate.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        """
        File name for the certificate.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)


@pulumi.input_type
class SyntheticsTestRequestClientCertificateKeyArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 filename: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content: Content of the certificate.
        :param pulumi.Input[str] filename: File name for the certificate.
        """
        pulumi.set(__self__, "content", content)
        if filename is not None:
            pulumi.set(__self__, "filename", filename)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        Content of the certificate.
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def filename(self) -> Optional[pulumi.Input[str]]:
        """
        File name for the certificate.
        """
        return pulumi.get(self, "filename")

    @filename.setter
    def filename(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filename", value)


@pulumi.input_type
class SyntheticsTestRequestDefinitionArgs:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 body_type: Optional[pulumi.Input[str]] = None,
                 call_type: Optional[pulumi.Input[str]] = None,
                 certificate_domains: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_server: Optional[pulumi.Input[str]] = None,
                 dns_server_port: Optional[pulumi.Input[int]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 no_saving_response_body: Optional[pulumi.Input[bool]] = None,
                 number_of_packets: Optional[pulumi.Input[int]] = None,
                 persist_cookies: Optional[pulumi.Input[bool]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 servername: Optional[pulumi.Input[str]] = None,
                 service: Optional[pulumi.Input[str]] = None,
                 should_track_hops: Optional[pulumi.Input[bool]] = None,
                 timeout: Optional[pulumi.Input[int]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] body: The request body.
        :param pulumi.Input[str] body_type: Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.
        :param pulumi.Input[str] call_type: The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] certificate_domains: By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificate_domains`.
        :param pulumi.Input[str] dns_server: DNS server to use for DNS tests (`subtype = "dns"`).
        :param pulumi.Input[int] dns_server_port: DNS server port to use for DNS tests.
        :param pulumi.Input[str] host: Host name to perform the test with.
        :param pulumi.Input[str] message: For UDP and websocket tests, message to send with the request.
        :param pulumi.Input[str] method: Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.
        :param pulumi.Input[bool] no_saving_response_body: Determines whether or not to save the response body.
        :param pulumi.Input[int] number_of_packets: Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
        :param pulumi.Input[bool] persist_cookies: Persist cookies across redirects.
        :param pulumi.Input[int] port: Port to use when performing the test.
        :param pulumi.Input[str] servername: For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
        :param pulumi.Input[str] service: The gRPC service on which you want to perform the gRPC call.
        :param pulumi.Input[bool] should_track_hops: This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
        :param pulumi.Input[int] timeout: Timeout in seconds for the test. Defaults to `60`.
        :param pulumi.Input[str] url: The URL to send the request to.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if body_type is not None:
            pulumi.set(__self__, "body_type", body_type)
        if call_type is not None:
            pulumi.set(__self__, "call_type", call_type)
        if certificate_domains is not None:
            pulumi.set(__self__, "certificate_domains", certificate_domains)
        if dns_server is not None:
            pulumi.set(__self__, "dns_server", dns_server)
        if dns_server_port is not None:
            pulumi.set(__self__, "dns_server_port", dns_server_port)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if no_saving_response_body is not None:
            pulumi.set(__self__, "no_saving_response_body", no_saving_response_body)
        if number_of_packets is not None:
            pulumi.set(__self__, "number_of_packets", number_of_packets)
        if persist_cookies is not None:
            pulumi.set(__self__, "persist_cookies", persist_cookies)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if servername is not None:
            pulumi.set(__self__, "servername", servername)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if should_track_hops is not None:
            pulumi.set(__self__, "should_track_hops", should_track_hops)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        The request body.
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="bodyType")
    def body_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the request body. Valid values are `text/plain`, `application/json`, `text/xml`, `text/html`, `application/x-www-form-urlencoded`, `graphql`.
        """
        return pulumi.get(self, "body_type")

    @body_type.setter
    def body_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body_type", value)

    @property
    @pulumi.getter(name="callType")
    def call_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of gRPC call to perform. Valid values are `healthcheck`, `unary`.
        """
        return pulumi.get(self, "call_type")

    @call_type.setter
    def call_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "call_type", value)

    @property
    @pulumi.getter(name="certificateDomains")
    def certificate_domains(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        By default, the client certificate is applied on the domain of the starting URL for browser tests. If you want your client certificate to be applied on other domains instead, add them in `certificate_domains`.
        """
        return pulumi.get(self, "certificate_domains")

    @certificate_domains.setter
    def certificate_domains(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "certificate_domains", value)

    @property
    @pulumi.getter(name="dnsServer")
    def dns_server(self) -> Optional[pulumi.Input[str]]:
        """
        DNS server to use for DNS tests (`subtype = "dns"`).
        """
        return pulumi.get(self, "dns_server")

    @dns_server.setter
    def dns_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_server", value)

    @property
    @pulumi.getter(name="dnsServerPort")
    def dns_server_port(self) -> Optional[pulumi.Input[int]]:
        """
        DNS server port to use for DNS tests.
        """
        return pulumi.get(self, "dns_server_port")

    @dns_server_port.setter
    def dns_server_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dns_server_port", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Host name to perform the test with.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        For UDP and websocket tests, message to send with the request.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        """
        Either the HTTP method/verb to use or a gRPC method available on the service set in the `service` field. Required if `subtype` is `HTTP` or if `subtype` is `grpc` and `callType` is `unary`.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="noSavingResponseBody")
    def no_saving_response_body(self) -> Optional[pulumi.Input[bool]]:
        """
        Determines whether or not to save the response body.
        """
        return pulumi.get(self, "no_saving_response_body")

    @no_saving_response_body.setter
    def no_saving_response_body(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_saving_response_body", value)

    @property
    @pulumi.getter(name="numberOfPackets")
    def number_of_packets(self) -> Optional[pulumi.Input[int]]:
        """
        Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
        """
        return pulumi.get(self, "number_of_packets")

    @number_of_packets.setter
    def number_of_packets(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "number_of_packets", value)

    @property
    @pulumi.getter(name="persistCookies")
    def persist_cookies(self) -> Optional[pulumi.Input[bool]]:
        """
        Persist cookies across redirects.
        """
        return pulumi.get(self, "persist_cookies")

    @persist_cookies.setter
    def persist_cookies(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "persist_cookies", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        """
        Port to use when performing the test.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def servername(self) -> Optional[pulumi.Input[str]]:
        """
        For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
        """
        return pulumi.get(self, "servername")

    @servername.setter
    def servername(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "servername", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[str]]:
        """
        The gRPC service on which you want to perform the gRPC call.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="shouldTrackHops")
    def should_track_hops(self) -> Optional[pulumi.Input[bool]]:
        """
        This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
        """
        return pulumi.get(self, "should_track_hops")

    @should_track_hops.setter
    def should_track_hops(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_track_hops", value)

    @property
    @pulumi.getter
    def timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Timeout in seconds for the test. Defaults to `60`.
        """
        return pulumi.get(self, "timeout")

    @timeout.setter
    def timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "timeout", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL to send the request to.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SyntheticsTestRequestProxyArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[str],
                 headers: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input[str] url: URL of the proxy to perform the test.
        :param pulumi.Input[Mapping[str, Any]] headers: Header name and value map.
        """
        pulumi.set(__self__, "url", url)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        URL of the proxy to perform the test.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Header name and value map.
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "headers", value)


