[tool.poetry]
name = "dndfog"
version = "0.6.4"
description = "DND battle map with fog of war"
authors = [
    "Matti Lamppu <lamppu.matti.akseli@gmail.com>",
]
packages = [
    { include = "dndfog" },
]
license = "MIT"
readme = "README.md"
homepage = "https://mrthearman.github.io/dndfog/"
repository = "https://github.com/MrThearMan/dndfog"
keywords = [
    "dnd",
    "fog",
    "war",
    "map",
    "combat",
    "infinite",
    "gird",
]
classifiers = [
    "Natural Language :: English",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: Microsoft :: Windows :: Windows 11",
    "Intended Audience :: End Users/Desktop",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
include = [
    "README.md",
    "LICENSE",
]
exclude = [
    "tests",
]

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
pywin32 = ">=306"
pygame-ce = ">=2.3.0"

[tool.poetry.group.test.dependencies]
pytest = "7.4.3"
coverage = "7.3.2"
pre-commit = "3.5.0"
tox = "4.11.3"
tox-gh-actions = "3.1.3"
pyinstaller = "5.13.0"

[tool.poetry.group.docs.dependencies]
mkdocs = "1.5.3"
pymdown-extensions = "10.3.1"
mkdocs-mermaid2-plugin = "1.1.1"

[tool.poetry.group.lint.dependencies]
mypy = "1.6.1"

[tool.poetry.scripts]
dndfog = "dndfog.main:start"

[tool.ruff]
fix = true
target-version = "py312"
line-length = 120
extend-exclude = [
    "tests",
]
select = [
    "A",        # flake8-builtins
    "ANN",      # flake8-annotations
    "ARG",      # flake8-unused-arguments
    "B",        # flake8-bugbear
    "BLE",      # flake8-blind-except
    "C90",      # mccabe
    "C4",       # flake8-comprehensions
    "COM",      # flake8-commas
    "D200",     # pydocstyle: One-line docstring should fit on one line
    "D201",     # pydocstyle: No blank lines allowed before function docstring (found {num_lines})
    "D202",     # pydocstyle: No blank lines allowed after function docstring (found {num_lines})
    "D209",     # pydocstyle: Multi-line docstring closing quotes should be on a separate line
    "D213",     # pydocstyle: Multi-line docstring summary should start at the second line
    "DTZ",      # flake8-datetimez
    "E",        # pycodestyle errors
    "EM",       # flake8-errmsg
    "F",        # pyflakes
    "FBT",      # flake8-boolean-trap
    "I",        # isort
    "INP",      # flake8-no-pep420
    "ISC",      # flake8-implicit-str-concat
    "N",        # pep8-naming
    "PERF",     # perflint
    "PGH",      # pygrep-hooks
    "PIE",      # flake8-pie
    "PL",       # pylint
    "PT",       # flake8-pytest-style
    "PTH",      # flake8-use-pathlib
    "PYI",      # flake8-pyi
    "Q",        # flake8-quotes
    "RET",      # flake8-return
    "RSE",      # flake8-raise
    "RUF",      # ruff-specific rules
    "S",        # flake8-bandit
    "SIM",      # flake8-simplify
    "T20",      # flake8-print
    "TCH",      # flake8-type-checking
    "TRY",      # tryceratops
    "W",        # pycodestyle warnings
]
extend-ignore = [
    # TEMP
    "PTH",      # pathlib
    "ANN",      # Missing annotations
    #
    "A003",     # Class attribute shadowing a Python builtin
    "ARG001",   # Unused function argument
    "PLR0913",  # Too many arguments in function definition
    "S311",     # Standard pseudo-random generators are not suitable for cryptographic purposes
    "ANN101",   # Missing type annotation for `self` in method
    "ANN102",   # Missing type annotation for `cls` in method
    "ANN401",   # Any-typing allowed
    "FBT001",   # Boolean positional argument in function definition
    "FBT002",   # Boolean positional argument in method definition
    #
    # Conflicting with ruff-format
    #
    "COM812",   # missing-trailing-comma
    "COM819",   # prohibited-trailing-comma
    "D206",     # indent-with-spaces
    "D300",     # triple-single-quotes
    "E111",     # indentation-with-invalid-multiple
    "E114",     # indentation-with-invalid-multiple-comment
    "E117",     # over-indented
    "ISC001",   # single-line-implicit-string-concatenation
    "ISC002",   # multi-line-implicit-string-concatenation
    "Q000",     # bad-quotes-inline-string
    "Q001",     # bad-quotes-multiline-string
    "Q002",     # bad-quotes-docstring
    "Q003",     # avoidable-escaped-quote
    "W191",     # tab-indentation
]

[tool.mypy]
python_version = "3.12"
warn_return_any = "True"
warn_unused_configs = "True"

[tool.coverage.run]
relative_files = true

[tool.coverage.report]
omit = [
    "tests/*",
    "docs/*",
    ".venv/*",
    ".tox/*",
]
exclude_lines = [
    "if TYPE_CHECKING:",
    "except ImportError:",
    "pragma: no cover",
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py311
isolated_build = true

[gh-actions]
python =
    3.11: py311

[testenv]
allowlist_externals =
    poetry
setenv =
    PYTHONPATH = {toxinidir}
commands =
    poetry install
    poetry run coverage run -m pytest -vv -s --log-cli-level=INFO
"""

[build-system]
requires = ["poetry-core>=1.5.0"]
build-backend = "poetry.core.masonry.api"
