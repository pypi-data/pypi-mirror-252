# coding: utf-8

"""
    scibec

    scibec  # noqa: E501

    The version of the OpenAPI document: 1.14.0
    Contact: klaus.wakonig@psi.ch
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from py_scibec_openapi_client import schemas  # noqa: F401


class FunctionalAccountIncludeFilterItems(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class relation(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "accessConfig": "ACCESS_CONFIG",
                    }
                
                @schemas.classproperty
                def ACCESS_CONFIG(cls):
                    return cls("accessConfig")
        
            @staticmethod
            def scope() -> typing.Type['FunctionalAccountScopeFilter']:
                return FunctionalAccountScopeFilter
            __annotations__ = {
                "relation": relation,
                "scope": scope,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relation"]) -> MetaOapg.properties.relation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scope"]) -> 'FunctionalAccountScopeFilter': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["relation", "scope", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relation"]) -> typing.Union[MetaOapg.properties.relation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scope"]) -> typing.Union['FunctionalAccountScopeFilter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["relation", "scope", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        relation: typing.Union[MetaOapg.properties.relation, str, schemas.Unset] = schemas.unset,
        scope: typing.Union['FunctionalAccountScopeFilter', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FunctionalAccountIncludeFilterItems':
        return super().__new__(
            cls,
            *_args,
            relation=relation,
            scope=scope,
            _configuration=_configuration,
            **kwargs,
        )

from py_scibec_openapi_client.model.functional_account_scope_filter import FunctionalAccountScopeFilter
