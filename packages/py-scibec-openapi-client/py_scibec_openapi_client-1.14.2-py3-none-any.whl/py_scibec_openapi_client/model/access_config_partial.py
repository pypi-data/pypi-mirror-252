# coding: utf-8

"""
    scibec

    scibec  # noqa: E501

    The version of the OpenAPI document: 1.14.0
    Contact: klaus.wakonig@psi.ch
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from py_scibec_openapi_client import schemas  # noqa: F401


class AccessConfigPartial(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    (tsType: Partial<AccessConfig>, schemaOptions: { partial: true })
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            
            
            class readACL(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'readACL':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class writeACL(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'writeACL':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class owner(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'owner':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            createdAt = schemas.DateTimeSchema
            createdBy = schemas.StrSchema
            targetAccount = schemas.StrSchema
            beamlineId = schemas.StrSchema
            authEnabled = schemas.BoolSchema
            
            
            class activeAccounts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'activeAccounts':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            usePasswords = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "readACL": readACL,
                "writeACL": writeACL,
                "owner": owner,
                "createdAt": createdAt,
                "createdBy": createdBy,
                "targetAccount": targetAccount,
                "beamlineId": beamlineId,
                "authEnabled": authEnabled,
                "activeAccounts": activeAccounts,
                "usePasswords": usePasswords,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readACL"]) -> MetaOapg.properties.readACL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["writeACL"]) -> MetaOapg.properties.writeACL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetAccount"]) -> MetaOapg.properties.targetAccount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamlineId"]) -> MetaOapg.properties.beamlineId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authEnabled"]) -> MetaOapg.properties.authEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activeAccounts"]) -> MetaOapg.properties.activeAccounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usePasswords"]) -> MetaOapg.properties.usePasswords: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["readACL"], typing_extensions.Literal["writeACL"], typing_extensions.Literal["owner"], typing_extensions.Literal["createdAt"], typing_extensions.Literal["createdBy"], typing_extensions.Literal["targetAccount"], typing_extensions.Literal["beamlineId"], typing_extensions.Literal["authEnabled"], typing_extensions.Literal["activeAccounts"], typing_extensions.Literal["usePasswords"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readACL"]) -> typing.Union[MetaOapg.properties.readACL, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["writeACL"]) -> typing.Union[MetaOapg.properties.writeACL, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union[MetaOapg.properties.createdBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetAccount"]) -> typing.Union[MetaOapg.properties.targetAccount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamlineId"]) -> typing.Union[MetaOapg.properties.beamlineId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authEnabled"]) -> typing.Union[MetaOapg.properties.authEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activeAccounts"]) -> typing.Union[MetaOapg.properties.activeAccounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usePasswords"]) -> typing.Union[MetaOapg.properties.usePasswords, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["readACL"], typing_extensions.Literal["writeACL"], typing_extensions.Literal["owner"], typing_extensions.Literal["createdAt"], typing_extensions.Literal["createdBy"], typing_extensions.Literal["targetAccount"], typing_extensions.Literal["beamlineId"], typing_extensions.Literal["authEnabled"], typing_extensions.Literal["activeAccounts"], typing_extensions.Literal["usePasswords"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        readACL: typing.Union[MetaOapg.properties.readACL, list, tuple, schemas.Unset] = schemas.unset,
        writeACL: typing.Union[MetaOapg.properties.writeACL, list, tuple, schemas.Unset] = schemas.unset,
        owner: typing.Union[MetaOapg.properties.owner, list, tuple, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, schemas.Unset] = schemas.unset,
        createdBy: typing.Union[MetaOapg.properties.createdBy, str, schemas.Unset] = schemas.unset,
        targetAccount: typing.Union[MetaOapg.properties.targetAccount, str, schemas.Unset] = schemas.unset,
        beamlineId: typing.Union[MetaOapg.properties.beamlineId, str, schemas.Unset] = schemas.unset,
        authEnabled: typing.Union[MetaOapg.properties.authEnabled, bool, schemas.Unset] = schemas.unset,
        activeAccounts: typing.Union[MetaOapg.properties.activeAccounts, list, tuple, schemas.Unset] = schemas.unset,
        usePasswords: typing.Union[MetaOapg.properties.usePasswords, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'AccessConfigPartial':
        return super().__new__(
            cls,
            *_args,
            id=id,
            readACL=readACL,
            writeACL=writeACL,
            owner=owner,
            createdAt=createdAt,
            createdBy=createdBy,
            targetAccount=targetAccount,
            beamlineId=beamlineId,
            authEnabled=authEnabled,
            activeAccounts=activeAccounts,
            usePasswords=usePasswords,
            _configuration=_configuration,
        )
