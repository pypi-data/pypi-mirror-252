# coding: utf-8

"""
    scibec

    scibec  # noqa: E501

    The version of the OpenAPI document: 1.14.0
    Contact: klaus.wakonig@psi.ch
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from py_scibec_openapi_client import schemas  # noqa: F401


class DeviceFilter1(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class offset(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 0
            
            
            class limit(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 1
            
            
            class skip(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_minimum = 0
            
            
            class order(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    one_of_0 = schemas.StrSchema
                    
                    
                    class one_of_1(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'one_of_1':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'order':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class where(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.AnyTypeSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                ) -> 'where':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class fields(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class one_of_0(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                id = schemas.BoolSchema
                                readACL = schemas.BoolSchema
                                writeACL = schemas.BoolSchema
                                owner = schemas.BoolSchema
                                createdAt = schemas.BoolSchema
                                createdBy = schemas.BoolSchema
                                name = schemas.BoolSchema
                                description = schemas.BoolSchema
                                parentId = schemas.BoolSchema
                                sessionId = schemas.BoolSchema
                                enabled = schemas.BoolSchema
                                readOnly = schemas.BoolSchema
                                softwareTrigger = schemas.BoolSchema
                                deviceClass = schemas.BoolSchema
                                deviceTags = schemas.BoolSchema
                                deviceConfig = schemas.BoolSchema
                                readoutPriority = schemas.BoolSchema
                                onFailure = schemas.BoolSchema
                                userParameter = schemas.BoolSchema
                                __annotations__ = {
                                    "id": id,
                                    "readACL": readACL,
                                    "writeACL": writeACL,
                                    "owner": owner,
                                    "createdAt": createdAt,
                                    "createdBy": createdBy,
                                    "name": name,
                                    "description": description,
                                    "parentId": parentId,
                                    "sessionId": sessionId,
                                    "enabled": enabled,
                                    "readOnly": readOnly,
                                    "softwareTrigger": softwareTrigger,
                                    "deviceClass": deviceClass,
                                    "deviceTags": deviceTags,
                                    "deviceConfig": deviceConfig,
                                    "readoutPriority": readoutPriority,
                                    "onFailure": onFailure,
                                    "userParameter": userParameter,
                                }
                            additional_properties = schemas.NotAnyTypeSchema
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["readACL"]) -> MetaOapg.properties.readACL: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["writeACL"]) -> MetaOapg.properties.writeACL: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["parentId"]) -> MetaOapg.properties.parentId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["sessionId"]) -> MetaOapg.properties.sessionId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["readOnly"]) -> MetaOapg.properties.readOnly: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["softwareTrigger"]) -> MetaOapg.properties.softwareTrigger: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["deviceClass"]) -> MetaOapg.properties.deviceClass: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["deviceTags"]) -> MetaOapg.properties.deviceTags: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["deviceConfig"]) -> MetaOapg.properties.deviceConfig: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["readoutPriority"]) -> MetaOapg.properties.readoutPriority: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["onFailure"]) -> MetaOapg.properties.onFailure: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["userParameter"]) -> MetaOapg.properties.userParameter: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["readACL"], typing_extensions.Literal["writeACL"], typing_extensions.Literal["owner"], typing_extensions.Literal["createdAt"], typing_extensions.Literal["createdBy"], typing_extensions.Literal["name"], typing_extensions.Literal["description"], typing_extensions.Literal["parentId"], typing_extensions.Literal["sessionId"], typing_extensions.Literal["enabled"], typing_extensions.Literal["readOnly"], typing_extensions.Literal["softwareTrigger"], typing_extensions.Literal["deviceClass"], typing_extensions.Literal["deviceTags"], typing_extensions.Literal["deviceConfig"], typing_extensions.Literal["readoutPriority"], typing_extensions.Literal["onFailure"], typing_extensions.Literal["userParameter"], ]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["readACL"]) -> typing.Union[MetaOapg.properties.readACL, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["writeACL"]) -> typing.Union[MetaOapg.properties.writeACL, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union[MetaOapg.properties.createdBy, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["parentId"]) -> typing.Union[MetaOapg.properties.parentId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["sessionId"]) -> typing.Union[MetaOapg.properties.sessionId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> typing.Union[MetaOapg.properties.enabled, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["readOnly"]) -> typing.Union[MetaOapg.properties.readOnly, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["softwareTrigger"]) -> typing.Union[MetaOapg.properties.softwareTrigger, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["deviceClass"]) -> typing.Union[MetaOapg.properties.deviceClass, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["deviceTags"]) -> typing.Union[MetaOapg.properties.deviceTags, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["deviceConfig"]) -> typing.Union[MetaOapg.properties.deviceConfig, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["readoutPriority"]) -> typing.Union[MetaOapg.properties.readoutPriority, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["onFailure"]) -> typing.Union[MetaOapg.properties.onFailure, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["userParameter"]) -> typing.Union[MetaOapg.properties.userParameter, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["readACL"], typing_extensions.Literal["writeACL"], typing_extensions.Literal["owner"], typing_extensions.Literal["createdAt"], typing_extensions.Literal["createdBy"], typing_extensions.Literal["name"], typing_extensions.Literal["description"], typing_extensions.Literal["parentId"], typing_extensions.Literal["sessionId"], typing_extensions.Literal["enabled"], typing_extensions.Literal["readOnly"], typing_extensions.Literal["softwareTrigger"], typing_extensions.Literal["deviceClass"], typing_extensions.Literal["deviceTags"], typing_extensions.Literal["deviceConfig"], typing_extensions.Literal["readoutPriority"], typing_extensions.Literal["onFailure"], typing_extensions.Literal["userParameter"], ]):
                            return super().get_item_oapg(name)
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            id: typing.Union[MetaOapg.properties.id, bool, schemas.Unset] = schemas.unset,
                            readACL: typing.Union[MetaOapg.properties.readACL, bool, schemas.Unset] = schemas.unset,
                            writeACL: typing.Union[MetaOapg.properties.writeACL, bool, schemas.Unset] = schemas.unset,
                            owner: typing.Union[MetaOapg.properties.owner, bool, schemas.Unset] = schemas.unset,
                            createdAt: typing.Union[MetaOapg.properties.createdAt, bool, schemas.Unset] = schemas.unset,
                            createdBy: typing.Union[MetaOapg.properties.createdBy, bool, schemas.Unset] = schemas.unset,
                            name: typing.Union[MetaOapg.properties.name, bool, schemas.Unset] = schemas.unset,
                            description: typing.Union[MetaOapg.properties.description, bool, schemas.Unset] = schemas.unset,
                            parentId: typing.Union[MetaOapg.properties.parentId, bool, schemas.Unset] = schemas.unset,
                            sessionId: typing.Union[MetaOapg.properties.sessionId, bool, schemas.Unset] = schemas.unset,
                            enabled: typing.Union[MetaOapg.properties.enabled, bool, schemas.Unset] = schemas.unset,
                            readOnly: typing.Union[MetaOapg.properties.readOnly, bool, schemas.Unset] = schemas.unset,
                            softwareTrigger: typing.Union[MetaOapg.properties.softwareTrigger, bool, schemas.Unset] = schemas.unset,
                            deviceClass: typing.Union[MetaOapg.properties.deviceClass, bool, schemas.Unset] = schemas.unset,
                            deviceTags: typing.Union[MetaOapg.properties.deviceTags, bool, schemas.Unset] = schemas.unset,
                            deviceConfig: typing.Union[MetaOapg.properties.deviceConfig, bool, schemas.Unset] = schemas.unset,
                            readoutPriority: typing.Union[MetaOapg.properties.readoutPriority, bool, schemas.Unset] = schemas.unset,
                            onFailure: typing.Union[MetaOapg.properties.onFailure, bool, schemas.Unset] = schemas.unset,
                            userParameter: typing.Union[MetaOapg.properties.userParameter, bool, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'one_of_0':
                            return super().__new__(
                                cls,
                                *_args,
                                id=id,
                                readACL=readACL,
                                writeACL=writeACL,
                                owner=owner,
                                createdAt=createdAt,
                                createdBy=createdBy,
                                name=name,
                                description=description,
                                parentId=parentId,
                                sessionId=sessionId,
                                enabled=enabled,
                                readOnly=readOnly,
                                softwareTrigger=softwareTrigger,
                                deviceClass=deviceClass,
                                deviceTags=deviceTags,
                                deviceConfig=deviceConfig,
                                readoutPriority=readoutPriority,
                                onFailure=onFailure,
                                userParameter=userParameter,
                                _configuration=_configuration,
                            )
                    
                    
                    class one_of_1(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            unique_items = True
                            
                            
                            class items(
                                schemas.EnumBase,
                                schemas.StrSchema
                            ):
                            
                            
                                class MetaOapg:
                                    enum_value_to_name = {
                                        "id": "ID",
                                        "readACL": "READ_ACL",
                                        "writeACL": "WRITE_ACL",
                                        "owner": "OWNER",
                                        "createdAt": "CREATED_AT",
                                        "createdBy": "CREATED_BY",
                                        "name": "NAME",
                                        "description": "DESCRIPTION",
                                        "parentId": "PARENT_ID",
                                        "sessionId": "SESSION_ID",
                                        "enabled": "ENABLED",
                                        "readOnly": "READ_ONLY",
                                        "softwareTrigger": "SOFTWARE_TRIGGER",
                                        "deviceClass": "DEVICE_CLASS",
                                        "deviceTags": "DEVICE_TAGS",
                                        "deviceConfig": "DEVICE_CONFIG",
                                        "readoutPriority": "READOUT_PRIORITY",
                                        "onFailure": "ON_FAILURE",
                                        "userParameter": "USER_PARAMETER",
                                    }
                                
                                @schemas.classproperty
                                def ID(cls):
                                    return cls("id")
                                
                                @schemas.classproperty
                                def READ_ACL(cls):
                                    return cls("readACL")
                                
                                @schemas.classproperty
                                def WRITE_ACL(cls):
                                    return cls("writeACL")
                                
                                @schemas.classproperty
                                def OWNER(cls):
                                    return cls("owner")
                                
                                @schemas.classproperty
                                def CREATED_AT(cls):
                                    return cls("createdAt")
                                
                                @schemas.classproperty
                                def CREATED_BY(cls):
                                    return cls("createdBy")
                                
                                @schemas.classproperty
                                def NAME(cls):
                                    return cls("name")
                                
                                @schemas.classproperty
                                def DESCRIPTION(cls):
                                    return cls("description")
                                
                                @schemas.classproperty
                                def PARENT_ID(cls):
                                    return cls("parentId")
                                
                                @schemas.classproperty
                                def SESSION_ID(cls):
                                    return cls("sessionId")
                                
                                @schemas.classproperty
                                def ENABLED(cls):
                                    return cls("enabled")
                                
                                @schemas.classproperty
                                def READ_ONLY(cls):
                                    return cls("readOnly")
                                
                                @schemas.classproperty
                                def SOFTWARE_TRIGGER(cls):
                                    return cls("softwareTrigger")
                                
                                @schemas.classproperty
                                def DEVICE_CLASS(cls):
                                    return cls("deviceClass")
                                
                                @schemas.classproperty
                                def DEVICE_TAGS(cls):
                                    return cls("deviceTags")
                                
                                @schemas.classproperty
                                def DEVICE_CONFIG(cls):
                                    return cls("deviceConfig")
                                
                                @schemas.classproperty
                                def READOUT_PRIORITY(cls):
                                    return cls("readoutPriority")
                                
                                @schemas.classproperty
                                def ON_FAILURE(cls):
                                    return cls("onFailure")
                                
                                @schemas.classproperty
                                def USER_PARAMETER(cls):
                                    return cls("userParameter")
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'one_of_1':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'fields':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class include(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            any_of_1 = schemas.StrSchema
                            
                            @classmethod
                            @functools.lru_cache()
                            def any_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    DeviceIncludeFilterItems,
                                    cls.any_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'include':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "offset": offset,
                "limit": limit,
                "skip": skip,
                "order": order,
                "where": where,
                "fields": fields,
                "include": include,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["offset"]) -> MetaOapg.properties.offset: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limit"]) -> MetaOapg.properties.limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skip"]) -> MetaOapg.properties.skip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["order"]) -> MetaOapg.properties.order: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["where"]) -> MetaOapg.properties.where: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fields"]) -> MetaOapg.properties.fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["include"]) -> MetaOapg.properties.include: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["offset"], typing_extensions.Literal["limit"], typing_extensions.Literal["skip"], typing_extensions.Literal["order"], typing_extensions.Literal["where"], typing_extensions.Literal["fields"], typing_extensions.Literal["include"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["offset"]) -> typing.Union[MetaOapg.properties.offset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limit"]) -> typing.Union[MetaOapg.properties.limit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skip"]) -> typing.Union[MetaOapg.properties.skip, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["order"]) -> typing.Union[MetaOapg.properties.order, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["where"]) -> typing.Union[MetaOapg.properties.where, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fields"]) -> typing.Union[MetaOapg.properties.fields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["include"]) -> typing.Union[MetaOapg.properties.include, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["offset"], typing_extensions.Literal["limit"], typing_extensions.Literal["skip"], typing_extensions.Literal["order"], typing_extensions.Literal["where"], typing_extensions.Literal["fields"], typing_extensions.Literal["include"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        offset: typing.Union[MetaOapg.properties.offset, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        limit: typing.Union[MetaOapg.properties.limit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        skip: typing.Union[MetaOapg.properties.skip, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        order: typing.Union[MetaOapg.properties.order, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        where: typing.Union[MetaOapg.properties.where, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        fields: typing.Union[MetaOapg.properties.fields, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        include: typing.Union[MetaOapg.properties.include, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'DeviceFilter1':
        return super().__new__(
            cls,
            *_args,
            offset=offset,
            limit=limit,
            skip=skip,
            order=order,
            where=where,
            fields=fields,
            include=include,
            _configuration=_configuration,
        )

from py_scibec_openapi_client.model.device_include_filter_items import DeviceIncludeFilterItems
