# coding: utf-8

"""
    scibec

    scibec  # noqa: E501

    The version of the OpenAPI document: 1.14.0
    Contact: klaus.wakonig@psi.ch
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from py_scibec_openapi_client import schemas  # noqa: F401


class ScanPartial(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    (tsType: Partial<Scan>, schemaOptions: { partial: true })
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            
            
            class readACL(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'readACL':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class writeACL(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'writeACL':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class owner(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'owner':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            createdAt = schemas.DateTimeSchema
            createdBy = schemas.StrSchema
            scanType = schemas.StrSchema
            scanParameter = schemas.DictSchema
            userParameter = schemas.DictSchema
            scanId = schemas.StrSchema
            requestId = schemas.StrSchema
            queueId = schemas.StrSchema
            exitStatus = schemas.StrSchema
            scanNumber = schemas.NumberSchema
            metadata = schemas.DictSchema
            files = schemas.DictSchema
            sessionId = schemas.StrSchema
            datasetId = schemas.StrSchema
            experimentId = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "readACL": readACL,
                "writeACL": writeACL,
                "owner": owner,
                "createdAt": createdAt,
                "createdBy": createdBy,
                "scanType": scanType,
                "scanParameter": scanParameter,
                "userParameter": userParameter,
                "scanId": scanId,
                "requestId": requestId,
                "queueId": queueId,
                "exitStatus": exitStatus,
                "scanNumber": scanNumber,
                "metadata": metadata,
                "files": files,
                "sessionId": sessionId,
                "datasetId": datasetId,
                "experimentId": experimentId,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readACL"]) -> MetaOapg.properties.readACL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["writeACL"]) -> MetaOapg.properties.writeACL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scanType"]) -> MetaOapg.properties.scanType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scanParameter"]) -> MetaOapg.properties.scanParameter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userParameter"]) -> MetaOapg.properties.userParameter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scanId"]) -> MetaOapg.properties.scanId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestId"]) -> MetaOapg.properties.requestId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["queueId"]) -> MetaOapg.properties.queueId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exitStatus"]) -> MetaOapg.properties.exitStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scanNumber"]) -> MetaOapg.properties.scanNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["files"]) -> MetaOapg.properties.files: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sessionId"]) -> MetaOapg.properties.sessionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datasetId"]) -> MetaOapg.properties.datasetId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["experimentId"]) -> MetaOapg.properties.experimentId: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["readACL"], typing_extensions.Literal["writeACL"], typing_extensions.Literal["owner"], typing_extensions.Literal["createdAt"], typing_extensions.Literal["createdBy"], typing_extensions.Literal["scanType"], typing_extensions.Literal["scanParameter"], typing_extensions.Literal["userParameter"], typing_extensions.Literal["scanId"], typing_extensions.Literal["requestId"], typing_extensions.Literal["queueId"], typing_extensions.Literal["exitStatus"], typing_extensions.Literal["scanNumber"], typing_extensions.Literal["metadata"], typing_extensions.Literal["files"], typing_extensions.Literal["sessionId"], typing_extensions.Literal["datasetId"], typing_extensions.Literal["experimentId"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readACL"]) -> typing.Union[MetaOapg.properties.readACL, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["writeACL"]) -> typing.Union[MetaOapg.properties.writeACL, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union[MetaOapg.properties.createdBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scanType"]) -> typing.Union[MetaOapg.properties.scanType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scanParameter"]) -> typing.Union[MetaOapg.properties.scanParameter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userParameter"]) -> typing.Union[MetaOapg.properties.userParameter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scanId"]) -> typing.Union[MetaOapg.properties.scanId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestId"]) -> typing.Union[MetaOapg.properties.requestId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["queueId"]) -> typing.Union[MetaOapg.properties.queueId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exitStatus"]) -> typing.Union[MetaOapg.properties.exitStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scanNumber"]) -> typing.Union[MetaOapg.properties.scanNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["files"]) -> typing.Union[MetaOapg.properties.files, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sessionId"]) -> typing.Union[MetaOapg.properties.sessionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datasetId"]) -> typing.Union[MetaOapg.properties.datasetId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["experimentId"]) -> typing.Union[MetaOapg.properties.experimentId, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["readACL"], typing_extensions.Literal["writeACL"], typing_extensions.Literal["owner"], typing_extensions.Literal["createdAt"], typing_extensions.Literal["createdBy"], typing_extensions.Literal["scanType"], typing_extensions.Literal["scanParameter"], typing_extensions.Literal["userParameter"], typing_extensions.Literal["scanId"], typing_extensions.Literal["requestId"], typing_extensions.Literal["queueId"], typing_extensions.Literal["exitStatus"], typing_extensions.Literal["scanNumber"], typing_extensions.Literal["metadata"], typing_extensions.Literal["files"], typing_extensions.Literal["sessionId"], typing_extensions.Literal["datasetId"], typing_extensions.Literal["experimentId"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        readACL: typing.Union[MetaOapg.properties.readACL, list, tuple, schemas.Unset] = schemas.unset,
        writeACL: typing.Union[MetaOapg.properties.writeACL, list, tuple, schemas.Unset] = schemas.unset,
        owner: typing.Union[MetaOapg.properties.owner, list, tuple, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, schemas.Unset] = schemas.unset,
        createdBy: typing.Union[MetaOapg.properties.createdBy, str, schemas.Unset] = schemas.unset,
        scanType: typing.Union[MetaOapg.properties.scanType, str, schemas.Unset] = schemas.unset,
        scanParameter: typing.Union[MetaOapg.properties.scanParameter, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        userParameter: typing.Union[MetaOapg.properties.userParameter, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        scanId: typing.Union[MetaOapg.properties.scanId, str, schemas.Unset] = schemas.unset,
        requestId: typing.Union[MetaOapg.properties.requestId, str, schemas.Unset] = schemas.unset,
        queueId: typing.Union[MetaOapg.properties.queueId, str, schemas.Unset] = schemas.unset,
        exitStatus: typing.Union[MetaOapg.properties.exitStatus, str, schemas.Unset] = schemas.unset,
        scanNumber: typing.Union[MetaOapg.properties.scanNumber, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        files: typing.Union[MetaOapg.properties.files, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        sessionId: typing.Union[MetaOapg.properties.sessionId, str, schemas.Unset] = schemas.unset,
        datasetId: typing.Union[MetaOapg.properties.datasetId, str, schemas.Unset] = schemas.unset,
        experimentId: typing.Union[MetaOapg.properties.experimentId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ScanPartial':
        return super().__new__(
            cls,
            *_args,
            id=id,
            readACL=readACL,
            writeACL=writeACL,
            owner=owner,
            createdAt=createdAt,
            createdBy=createdBy,
            scanType=scanType,
            scanParameter=scanParameter,
            userParameter=userParameter,
            scanId=scanId,
            requestId=requestId,
            queueId=queueId,
            exitStatus=exitStatus,
            scanNumber=scanNumber,
            metadata=metadata,
            files=files,
            sessionId=sessionId,
            datasetId=datasetId,
            experimentId=experimentId,
            _configuration=_configuration,
        )
