# coding: utf-8

"""
    scibec

    scibec  # noqa: E501

    The version of the OpenAPI document: 1.14.0
    Contact: klaus.wakonig@psi.ch
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from py_scibec_openapi_client import schemas  # noqa: F401


class NewDevice(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    (tsType: Omit<Device, 'id'>, schemaOptions: { title: 'NewDevice', exclude: [ 'id' ] })
    """


    class MetaOapg:
        required = {
            "deviceConfig",
            "readoutPriority",
            "name",
            "deviceClass",
            "enabled",
        }
        
        class properties:
            name = schemas.StrSchema
            enabled = schemas.BoolSchema
            deviceClass = schemas.StrSchema
            deviceConfig = schemas.DictSchema
            
            
            class readoutPriority(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "on_request": "ON_REQUEST",
                        "baseline": "BASELINE",
                        "monitored": "MONITORED",
                        "async": "ASYNC",
                        "continuous": "CONTINUOUS",
                    }
                
                @schemas.classproperty
                def ON_REQUEST(cls):
                    return cls("on_request")
                
                @schemas.classproperty
                def BASELINE(cls):
                    return cls("baseline")
                
                @schemas.classproperty
                def MONITORED(cls):
                    return cls("monitored")
                
                @schemas.classproperty
                def ASYNC(cls):
                    return cls("async")
                
                @schemas.classproperty
                def CONTINUOUS(cls):
                    return cls("continuous")
            
            
            class readACL(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'readACL':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class writeACL(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'writeACL':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class owner(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'owner':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            createdAt = schemas.DateTimeSchema
            createdBy = schemas.StrSchema
            description = schemas.StrSchema
            parentId = schemas.StrSchema
            sessionId = schemas.StrSchema
            readOnly = schemas.BoolSchema
            softwareTrigger = schemas.BoolSchema
            
            
            class deviceTags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'deviceTags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class onFailure(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "raise": "RAISE",
                        "retry": "RETRY",
                        "buffer": "BUFFER",
                    }
                
                @schemas.classproperty
                def RAISE(cls):
                    return cls("raise")
                
                @schemas.classproperty
                def RETRY(cls):
                    return cls("retry")
                
                @schemas.classproperty
                def BUFFER(cls):
                    return cls("buffer")
            userParameter = schemas.DictSchema
            __annotations__ = {
                "name": name,
                "enabled": enabled,
                "deviceClass": deviceClass,
                "deviceConfig": deviceConfig,
                "readoutPriority": readoutPriority,
                "readACL": readACL,
                "writeACL": writeACL,
                "owner": owner,
                "createdAt": createdAt,
                "createdBy": createdBy,
                "description": description,
                "parentId": parentId,
                "sessionId": sessionId,
                "readOnly": readOnly,
                "softwareTrigger": softwareTrigger,
                "deviceTags": deviceTags,
                "onFailure": onFailure,
                "userParameter": userParameter,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    deviceConfig: MetaOapg.properties.deviceConfig
    readoutPriority: MetaOapg.properties.readoutPriority
    name: MetaOapg.properties.name
    deviceClass: MetaOapg.properties.deviceClass
    enabled: MetaOapg.properties.enabled
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deviceConfig"]) -> MetaOapg.properties.deviceConfig: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readoutPriority"]) -> MetaOapg.properties.readoutPriority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deviceClass"]) -> MetaOapg.properties.deviceClass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readACL"]) -> MetaOapg.properties.readACL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["writeACL"]) -> MetaOapg.properties.writeACL: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdBy"]) -> MetaOapg.properties.createdBy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentId"]) -> MetaOapg.properties.parentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sessionId"]) -> MetaOapg.properties.sessionId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readOnly"]) -> MetaOapg.properties.readOnly: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["softwareTrigger"]) -> MetaOapg.properties.softwareTrigger: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deviceTags"]) -> MetaOapg.properties.deviceTags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onFailure"]) -> MetaOapg.properties.onFailure: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userParameter"]) -> MetaOapg.properties.userParameter: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["deviceConfig"], typing_extensions.Literal["readoutPriority"], typing_extensions.Literal["name"], typing_extensions.Literal["deviceClass"], typing_extensions.Literal["enabled"], typing_extensions.Literal["readACL"], typing_extensions.Literal["writeACL"], typing_extensions.Literal["owner"], typing_extensions.Literal["createdAt"], typing_extensions.Literal["createdBy"], typing_extensions.Literal["description"], typing_extensions.Literal["parentId"], typing_extensions.Literal["sessionId"], typing_extensions.Literal["readOnly"], typing_extensions.Literal["softwareTrigger"], typing_extensions.Literal["deviceTags"], typing_extensions.Literal["onFailure"], typing_extensions.Literal["userParameter"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deviceConfig"]) -> MetaOapg.properties.deviceConfig: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readoutPriority"]) -> MetaOapg.properties.readoutPriority: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deviceClass"]) -> MetaOapg.properties.deviceClass: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readACL"]) -> typing.Union[MetaOapg.properties.readACL, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["writeACL"]) -> typing.Union[MetaOapg.properties.writeACL, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdBy"]) -> typing.Union[MetaOapg.properties.createdBy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentId"]) -> typing.Union[MetaOapg.properties.parentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sessionId"]) -> typing.Union[MetaOapg.properties.sessionId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readOnly"]) -> typing.Union[MetaOapg.properties.readOnly, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["softwareTrigger"]) -> typing.Union[MetaOapg.properties.softwareTrigger, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deviceTags"]) -> typing.Union[MetaOapg.properties.deviceTags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onFailure"]) -> typing.Union[MetaOapg.properties.onFailure, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userParameter"]) -> typing.Union[MetaOapg.properties.userParameter, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["deviceConfig"], typing_extensions.Literal["readoutPriority"], typing_extensions.Literal["name"], typing_extensions.Literal["deviceClass"], typing_extensions.Literal["enabled"], typing_extensions.Literal["readACL"], typing_extensions.Literal["writeACL"], typing_extensions.Literal["owner"], typing_extensions.Literal["createdAt"], typing_extensions.Literal["createdBy"], typing_extensions.Literal["description"], typing_extensions.Literal["parentId"], typing_extensions.Literal["sessionId"], typing_extensions.Literal["readOnly"], typing_extensions.Literal["softwareTrigger"], typing_extensions.Literal["deviceTags"], typing_extensions.Literal["onFailure"], typing_extensions.Literal["userParameter"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        deviceConfig: typing.Union[MetaOapg.properties.deviceConfig, dict, frozendict.frozendict, ],
        readoutPriority: typing.Union[MetaOapg.properties.readoutPriority, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        deviceClass: typing.Union[MetaOapg.properties.deviceClass, str, ],
        enabled: typing.Union[MetaOapg.properties.enabled, bool, ],
        readACL: typing.Union[MetaOapg.properties.readACL, list, tuple, schemas.Unset] = schemas.unset,
        writeACL: typing.Union[MetaOapg.properties.writeACL, list, tuple, schemas.Unset] = schemas.unset,
        owner: typing.Union[MetaOapg.properties.owner, list, tuple, schemas.Unset] = schemas.unset,
        createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, schemas.Unset] = schemas.unset,
        createdBy: typing.Union[MetaOapg.properties.createdBy, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        parentId: typing.Union[MetaOapg.properties.parentId, str, schemas.Unset] = schemas.unset,
        sessionId: typing.Union[MetaOapg.properties.sessionId, str, schemas.Unset] = schemas.unset,
        readOnly: typing.Union[MetaOapg.properties.readOnly, bool, schemas.Unset] = schemas.unset,
        softwareTrigger: typing.Union[MetaOapg.properties.softwareTrigger, bool, schemas.Unset] = schemas.unset,
        deviceTags: typing.Union[MetaOapg.properties.deviceTags, list, tuple, schemas.Unset] = schemas.unset,
        onFailure: typing.Union[MetaOapg.properties.onFailure, str, schemas.Unset] = schemas.unset,
        userParameter: typing.Union[MetaOapg.properties.userParameter, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'NewDevice':
        return super().__new__(
            cls,
            *_args,
            deviceConfig=deviceConfig,
            readoutPriority=readoutPriority,
            name=name,
            deviceClass=deviceClass,
            enabled=enabled,
            readACL=readACL,
            writeACL=writeACL,
            owner=owner,
            createdAt=createdAt,
            createdBy=createdBy,
            description=description,
            parentId=parentId,
            sessionId=sessionId,
            readOnly=readOnly,
            softwareTrigger=softwareTrigger,
            deviceTags=deviceTags,
            onFailure=onFailure,
            userParameter=userParameter,
            _configuration=_configuration,
        )
