# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WebhooksConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    endpoint: Optional[StrictStr] = Field(default=None, description="You can send your events to https://webhooks.fivetran.com/webhooks/{endpoint}")
    bucket_service: Optional[Dict[str, Any]] = Field(default=None, description="Whether to store the events in Fivetran's container service or your S3 bucket. Default value: `Fivetran`.")
    auth_method: Optional[Dict[str, Any]] = Field(default=None, description="The authentication mechanism you want to use")
    sync_format: Optional[Dict[str, Any]] = Field(default=None, description="The webhooks sync format.  Default value: `Unpacked`. Unpacked messages must be valid JSON.")
    gcs_bucket: Optional[StrictStr] = Field(default=None, description="The GCS bucket name. Required if `bucket_service` is set to `GCS`.")
    s3_role_arn: Optional[SecretStr] = Field(default=None, description="The Role ARN required for authentication. Required if `bucket_service` is set to `S3`.")
    blob_sas_url: Optional[SecretStr] = Field(default=None, description="The blob SAS URL of your Azure container. Required if `bucket_service` is set to `AZURE`.")
    s3_bucket: Optional[StrictStr] = Field(default=None, description="The S3 bucket name. Required if `bucket_service` is set to `S3`.")
    table: Optional[StrictStr] = Field(default=None, description="Destination table. Table is permanent and cannot be changed after connection creation")
    __properties: ClassVar[List[str]] = ["schema", "endpoint", "bucket_service", "auth_method", "sync_format", "gcs_bucket", "s3_role_arn", "blob_sas_url", "s3_bucket", "table"]

    @field_validator('bucket_service')
    def bucket_service_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('S3', 'AZURE', 'GCS', 'Fivetran'):
            raise ValueError("must be one of enum values ('S3', 'AZURE', 'GCS', 'Fivetran')")
        return value

    @field_validator('auth_method')
    def auth_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('HMAC', 'TOKEN_BASED', 'NONE'):
            raise ValueError("must be one of enum values ('HMAC', 'TOKEN_BASED', 'NONE')")
        return value

    @field_validator('sync_format')
    def sync_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Packed', 'Unpacked'):
            raise ValueError("must be one of enum values ('Packed', 'Unpacked')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebhooksConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebhooksConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schema": obj.get("schema"),
            "endpoint": obj.get("endpoint"),
            "bucket_service": obj.get("bucket_service"),
            "auth_method": obj.get("auth_method"),
            "sync_format": obj.get("sync_format"),
            "gcs_bucket": obj.get("gcs_bucket"),
            "s3_role_arn": obj.get("s3_role_arn"),
            "blob_sas_url": obj.get("blob_sas_url"),
            "s3_bucket": obj.get("s3_bucket"),
            "table": obj.get("table")
        })
        return _obj


