# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleDriveConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    service_account: Optional[StrictStr] = Field(default=None, description="Share the folder with the email address")
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    append_file_option: Optional[Dict[str, Any]] = Field(default=None, description="If you know that the source completely over-writes the same file with new data, you can append the changes instead of upserting based on filename and line number.")
    prefix: Optional[StrictStr] = Field(default=None, description="All files and folders under this folder path will be searched for files to sync, this can be the entire drive link or a folder URL")
    pattern: Optional[StrictStr] = Field(default=None, description="All files in your search path matching this regular expression will be synced.")
    escape_char: Optional[StrictStr] = Field(default=None, description="If your CSV generator follows non-standard rules for escaping quotation marks, you can set the escape character here.")
    json_delivery_mode: Optional[Dict[str, Any]] = Field(default=None, description="Control how your JSON data is delivered into your destination")
    skip_after: Optional[StrictInt] = Field(default=None, description="We will skip over the number of lines specified at the end so as to not introduce aberrant data into your destination.")
    line_separator: Optional[StrictStr] = Field(default=None, description="You can specify the custom line separator for your CSV files. The line separator is used in files to separate one row from the next.")
    skip_before: Optional[StrictInt] = Field(default=None, description="We will skip over the number of lines specified before syncing data.")
    empty_header: Optional[StrictBool] = Field(default=None, description="<strong>Optional.</strong> If your CSV generating software doesn't provide header line for the documents, Fivetran can generate the generic column names and sync data rows with them.")
    null_sequence: Optional[StrictStr] = Field(default=None, description="If your CSVs use a special value indicating null, you can specify it here.")
    is_single_table_mode: Optional[StrictBool] = Field(default=None, description="Allows the creation of connector using Merge Mode strategy.")
    delimiter: Optional[StrictStr] = Field(default=None, description="You can specify the delimiter that your CSVs use here. Fivetran generally tries to infer the delimiter, but in some cases this is impossible.")
    file_type: Optional[Dict[str, Any]] = Field(default=None, description="If your files are saved with improper extensions, you can force them to be synced as the selected filetype.")
    on_error: Optional[Dict[str, Any]] = Field(default=None, description="If you know that your files contain some errors, you can choose to have poorly formatted lines skipped. We recommend leaving the value as fail unless you are certain that you have undesirable, malformed data.")
    folder_id: Optional[StrictStr] = Field(default=None, description="Folder URL")
    compression: Optional[Dict[str, Any]] = Field(default=None, description="The compression format is used to let Fivetran know that even files without a compression extension should be decompressed using the selected compression format.")
    archive_pattern: Optional[StrictStr] = Field(default=None, description="Files inside of compressed archives with filenames matching this regular expression will be synced.")
    table: Optional[StrictStr] = Field(default=None, description="Destination table. Table is permanent and cannot be changed after connection creation")
    __properties: ClassVar[List[str]] = ["service_account", "schema", "append_file_option", "prefix", "pattern", "escape_char", "json_delivery_mode", "skip_after", "line_separator", "skip_before", "empty_header", "null_sequence", "is_single_table_mode", "delimiter", "file_type", "on_error", "folder_id", "compression", "archive_pattern", "table"]

    @field_validator('append_file_option')
    def append_file_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('upsert_file', 'append_file'):
            raise ValueError("must be one of enum values ('upsert_file', 'append_file')")
        return value

    @field_validator('json_delivery_mode')
    def json_delivery_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Packed', 'Unpacked'):
            raise ValueError("must be one of enum values ('Packed', 'Unpacked')")
        return value

    @field_validator('file_type')
    def file_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('log', 'infer', 'tsv', 'xml', 'csv', 'json', 'jsonl', 'avro', 'parquet'):
            raise ValueError("must be one of enum values ('log', 'infer', 'tsv', 'xml', 'csv', 'json', 'jsonl', 'avro', 'parquet')")
        return value

    @field_validator('on_error')
    def on_error_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('fail', 'skip'):
            raise ValueError("must be one of enum values ('fail', 'skip')")
        return value

    @field_validator('compression')
    def compression_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('zip', 'gz', 'tar_gz', 'tar', 'infer', 'gzip', 'uncompressed', 'bz2', 'tar_bz2'):
            raise ValueError("must be one of enum values ('zip', 'gz', 'tar_gz', 'tar', 'infer', 'gzip', 'uncompressed', 'bz2', 'tar_bz2')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleDriveConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleDriveConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "service_account": obj.get("service_account"),
            "schema": obj.get("schema"),
            "append_file_option": obj.get("append_file_option"),
            "prefix": obj.get("prefix"),
            "pattern": obj.get("pattern"),
            "escape_char": obj.get("escape_char"),
            "json_delivery_mode": obj.get("json_delivery_mode"),
            "skip_after": obj.get("skip_after"),
            "line_separator": obj.get("line_separator"),
            "skip_before": obj.get("skip_before"),
            "empty_header": obj.get("empty_header"),
            "null_sequence": obj.get("null_sequence"),
            "is_single_table_mode": obj.get("is_single_table_mode"),
            "delimiter": obj.get("delimiter"),
            "file_type": obj.get("file_type"),
            "on_error": obj.get("on_error"),
            "folder_id": obj.get("folder_id"),
            "compression": obj.get("compression"),
            "archive_pattern": obj.get("archive_pattern"),
            "table": obj.get("table")
        })
        return _obj


