# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PinterestAdsConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    sync_mode: Optional[Dict[str, Any]] = Field(default=None, description="Whether to sync all advertisers or specific advertisers.")
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    view_attribution_window: Optional[Dict[str, Any]] = Field(default=None, description="The number of days to use as the conversion attribution window for a 'view' action.")
    refresh_token_expires_at: Optional[datetime] = Field(default=None, description="The expiration date of the refresh token. Unix timestamp in seconds")
    timeframe_months: Optional[Dict[str, Any]] = Field(default=None, description="Number of months' worth of reporting data you'd like to include in your initial sync. This cannot be modified once the connector is created. Default value: `THREE`.")
    advertisers: Optional[List[StrictStr]] = Field(default=None, description="Specific Advertisers to sync.  Must be populated if `sync_mode` is set to `SpecificAdvertisers`.")
    conversion_report_time: Optional[Dict[str, Any]] = Field(default=None, description="The date that the user interacted with the ad OR completed a conversion event.")
    engagement_attribution_window: Optional[Dict[str, Any]] = Field(default=None, description="The number of days to use as the conversion attribution window for an engagement (i.e. closeup or save) action.")
    click_attribution_window: Optional[Dict[str, Any]] = Field(default=None, description="The number of days to use as the conversion attribution window for a 'click' action.")
    __properties: ClassVar[List[str]] = ["sync_mode", "schema", "view_attribution_window", "refresh_token_expires_at", "timeframe_months", "advertisers", "conversion_report_time", "engagement_attribution_window", "click_attribution_window"]

    @field_validator('sync_mode')
    def sync_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SpecificAdvertisers', 'AllAdvertisers'):
            raise ValueError("must be one of enum values ('SpecificAdvertisers', 'AllAdvertisers')")
        return value

    @field_validator('view_attribution_window')
    def view_attribution_window_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ZERO', 'THIRTY', 'SIXTY', 'FOURTEEN', 'ONE', 'SEVEN'):
            raise ValueError("must be one of enum values ('ZERO', 'THIRTY', 'SIXTY', 'FOURTEEN', 'ONE', 'SEVEN')")
        return value

    @field_validator('timeframe_months')
    def timeframe_months_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('TWENTY_FOUR', 'SIX', 'ALL_TIME', 'TWELVE', 'THREE'):
            raise ValueError("must be one of enum values ('TWENTY_FOUR', 'SIX', 'ALL_TIME', 'TWELVE', 'THREE')")
        return value

    @field_validator('conversion_report_time')
    def conversion_report_time_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('CONVERSION_EVENT', 'AD_EVENT'):
            raise ValueError("must be one of enum values ('CONVERSION_EVENT', 'AD_EVENT')")
        return value

    @field_validator('engagement_attribution_window')
    def engagement_attribution_window_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ZERO', 'THIRTY', 'SIXTY', 'FOURTEEN', 'ONE', 'SEVEN'):
            raise ValueError("must be one of enum values ('ZERO', 'THIRTY', 'SIXTY', 'FOURTEEN', 'ONE', 'SEVEN')")
        return value

    @field_validator('click_attribution_window')
    def click_attribution_window_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ZERO', 'THIRTY', 'SIXTY', 'FOURTEEN', 'ONE', 'SEVEN'):
            raise ValueError("must be one of enum values ('ZERO', 'THIRTY', 'SIXTY', 'FOURTEEN', 'ONE', 'SEVEN')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PinterestAdsConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PinterestAdsConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sync_mode": obj.get("sync_mode"),
            "schema": obj.get("schema"),
            "view_attribution_window": obj.get("view_attribution_window"),
            "refresh_token_expires_at": obj.get("refresh_token_expires_at"),
            "timeframe_months": obj.get("timeframe_months"),
            "advertisers": obj.get("advertisers"),
            "conversion_report_time": obj.get("conversion_report_time"),
            "engagement_attribution_window": obj.get("engagement_attribution_window"),
            "click_attribution_window": obj.get("click_attribution_window")
        })
        return _obj


