# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DoubleClickCampaignManagerConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    conversion_dimensions: Optional[List[StrictStr]] = Field(default=None, description="Conversion Dimensions.")
    report_type: Optional[Dict[str, Any]] = Field(default=None, description="Type of reporting data to sync. Default value: `STANDARD`.")
    per_interaction_dimensions: Optional[List[StrictStr]] = Field(default=None, description="Per Interaction Dimensions.")
    sync_mode: Optional[Dict[str, Any]] = Field(default=None, description="Whether to sync all user profiles or specific ones. Default value: `AllAccounts`.")
    report_configuration_ids: Optional[List[StrictStr]] = Field(default=None, description="You can select only one Floodlight Configuration ID per account.")
    enable_all_dimension_combinations: Optional[StrictBool] = Field(default=None, description="Whether to enable all reach dimension combinations in the report. Default value: `false`")
    custom_floodlight_variables: Optional[List[StrictStr]] = Field(default=None, description="Custom Floodlight variables enable you to capture information beyond the basics (visits and revenue) that you can collect with standard parameters in your tags.")
    timeframe_months: Optional[Dict[str, Any]] = Field(default=None, description="Number of months' worth of reporting data you'd like to include in your initial sync. A change of this value will trigger a re-sync for enabled reports during the next connector sync. Default value: `TWELVE`.")
    user_profiles: Optional[List[StrictStr]] = Field(default=None, description="IDs of specific User Profiles to sync. Must be populated if `sync_mode` is set to `SpecificAccounts`.")
    metrics: Optional[List[StrictStr]] = Field(default=None, description="Report metrics to include into a sync.")
    table: Optional[StrictStr] = Field(default=None, description="Destination table. Table is permanent and cannot be changed after connection creation")
    dimensions: Optional[List[StrictStr]] = Field(default=None, description="Report dimensions to include into a sync. The `date` dimension is mandatory for all the report types. The `advertiser` dimension is mandatory for `REACH` report type")
    __properties: ClassVar[List[str]] = ["schema", "conversion_dimensions", "report_type", "per_interaction_dimensions", "sync_mode", "report_configuration_ids", "enable_all_dimension_combinations", "custom_floodlight_variables", "timeframe_months", "user_profiles", "metrics", "table", "dimensions"]

    @field_validator('report_type')
    def report_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('REACH', 'FLOODLIGHT', 'PATH_TO_CONVERSION', 'STANDARD'):
            raise ValueError("must be one of enum values ('REACH', 'FLOODLIGHT', 'PATH_TO_CONVERSION', 'STANDARD')")
        return value

    @field_validator('sync_mode')
    def sync_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SPECIFIC_PROFILES', 'ALL_PROFILES'):
            raise ValueError("must be one of enum values ('SPECIFIC_PROFILES', 'ALL_PROFILES')")
        return value

    @field_validator('timeframe_months')
    def timeframe_months_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('TWENTY_FOUR', 'SIX', 'ALL_TIME', 'TWELVE', 'THREE'):
            raise ValueError("must be one of enum values ('TWENTY_FOUR', 'SIX', 'ALL_TIME', 'TWELVE', 'THREE')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DoubleClickCampaignManagerConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DoubleClickCampaignManagerConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schema": obj.get("schema"),
            "conversion_dimensions": obj.get("conversion_dimensions"),
            "report_type": obj.get("report_type"),
            "per_interaction_dimensions": obj.get("per_interaction_dimensions"),
            "sync_mode": obj.get("sync_mode"),
            "report_configuration_ids": obj.get("report_configuration_ids"),
            "enable_all_dimension_combinations": obj.get("enable_all_dimension_combinations"),
            "custom_floodlight_variables": obj.get("custom_floodlight_variables"),
            "timeframe_months": obj.get("timeframe_months"),
            "user_profiles": obj.get("user_profiles"),
            "metrics": obj.get("metrics"),
            "table": obj.get("table"),
            "dimensions": obj.get("dimensions")
        })
        return _obj


