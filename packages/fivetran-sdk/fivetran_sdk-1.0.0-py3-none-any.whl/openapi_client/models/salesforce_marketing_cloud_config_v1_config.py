# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SalesforceMarketingCloudConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    sftp_is_key_pair: Optional[StrictBool] = None
    sftp_user: Optional[StrictStr] = None
    instance: Optional[Dict[str, Any]] = Field(default=None, description="The Salesforce Marketing Cloud instance ID")
    sftp_port: Optional[StrictInt] = None
    sftp_host: Optional[StrictStr] = None
    client_id: Optional[StrictStr] = Field(default=None, description="The Salesforce Marketing Cloud client ID.")
    is_new_package: Optional[StrictBool] = Field(default=None, description="Indicates that that your installed package uses OAuth 2.0. Default value: `false`")
    sync_mode: Optional[Dict[str, Any]] = Field(default=None, description="Select the sync mode.")
    sftp_public_key: Optional[StrictStr] = None
    sub_domain: Optional[StrictStr] = Field(default=None, description="Your Salesforce Marketing Cloud subdomain.")
    enable_data_extensions_syncing: Optional[StrictBool] = None
    client_secret: Optional[SecretStr] = Field(default=None, description="The Salesforce Marketing Cloud client secret.")
    selected_event_types: Optional[List[StrictStr]] = Field(default=None, description="Select event types to be synced.")
    sftp_password: Optional[SecretStr] = None
    __properties: ClassVar[List[str]] = ["schema", "sftp_is_key_pair", "sftp_user", "instance", "sftp_port", "sftp_host", "client_id", "is_new_package", "sync_mode", "sftp_public_key", "sub_domain", "enable_data_extensions_syncing", "client_secret", "selected_event_types", "sftp_password"]

    @field_validator('instance')
    def instance_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('s4', 's5', 's11', 's6', 's10', 's7', 's8', 's12', 's1', 's51', 's50'):
            raise ValueError("must be one of enum values ('s4', 's5', 's11', 's6', 's10', 's7', 's8', 's12', 's1', 's51', 's50')")
        return value

    @field_validator('sync_mode')
    def sync_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SelectedEvents', 'AllEvents'):
            raise ValueError("must be one of enum values ('SelectedEvents', 'AllEvents')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SalesforceMarketingCloudConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SalesforceMarketingCloudConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schema": obj.get("schema"),
            "sftp_is_key_pair": obj.get("sftp_is_key_pair"),
            "sftp_user": obj.get("sftp_user"),
            "instance": obj.get("instance"),
            "sftp_port": obj.get("sftp_port"),
            "sftp_host": obj.get("sftp_host"),
            "client_id": obj.get("client_id"),
            "is_new_package": obj.get("is_new_package"),
            "sync_mode": obj.get("sync_mode"),
            "sftp_public_key": obj.get("sftp_public_key"),
            "sub_domain": obj.get("sub_domain"),
            "enable_data_extensions_syncing": obj.get("enable_data_extensions_syncing"),
            "client_secret": obj.get("client_secret"),
            "selected_event_types": obj.get("selected_event_types"),
            "sftp_password": obj.get("sftp_password")
        })
        return _obj


