# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WorkdayConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    password: Optional[SecretStr] = Field(default=None, description="Workday password.")
    primary_keys: Optional[List[StrictStr]] = Field(default=None, description="Primary Keys")
    user_name: Optional[StrictStr] = Field(default=None, description="Workday username.")
    report_url: Optional[StrictStr] = Field(default=None, description="URL for a live custom report.")
    report_format_type: Optional[Dict[str, Any]] = Field(default=None, description="This is to select report format from JSON and CSV. By default, report format is JSON.")
    support_nested_columns: Optional[StrictBool] = Field(default=None, description="This option is to unpack the nested columns and sync them separately. By default, we sync the nested columns as JSON objects.")
    table: Optional[StrictStr] = Field(default=None, description="Destination table. Table is permanent and cannot be changed after connection creation")
    __properties: ClassVar[List[str]] = ["schema", "password", "primary_keys", "user_name", "report_url", "report_format_type", "support_nested_columns", "table"]

    @field_validator('report_format_type')
    def report_format_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('csv', 'json'):
            raise ValueError("must be one of enum values ('csv', 'json')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkdayConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkdayConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schema": obj.get("schema"),
            "password": obj.get("password"),
            "primary_keys": obj.get("primary_keys"),
            "user_name": obj.get("user_name"),
            "report_url": obj.get("report_url"),
            "report_format_type": obj.get("report_format_type"),
            "support_nested_columns": obj.get("support_nested_columns"),
            "table": obj.get("table")
        })
        return _obj


