# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.transformation_schedule import TransformationSchedule
from typing import Optional, Set
from typing_extensions import Self

class TransformationResponse(BaseModel):
    """
    TransformationResponse
    """ # noqa: E501
    id: StrictStr = Field(description="The unique identifier for the dbt Model within the Fivetran system.")
    status: StrictStr = Field(description="The status of dbt Transformation.")
    schedule: Optional[TransformationSchedule] = None
    paused: Optional[StrictBool] = Field(default=None, description="The field indicates whether transformation is in paused state.")
    last_run: Optional[datetime] = Field(default=None, description="The timestamp of last dbt Transformation run.")
    run_tests: Optional[StrictBool] = Field(default=None, description="The field indicates whether the tests have been configured for dbt Transformation.")
    output_model_name: Optional[StrictStr] = Field(default=None, description="The dbt Model name.")
    dbt_project_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the dbt Project within the Fivetran system.")
    dbt_model_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the dbt Model within the Fivetran system.")
    next_run: Optional[datetime] = Field(default=None, description="The timestamp of next dbt Transformation run.")
    __properties: ClassVar[List[str]] = ["id", "status", "schedule", "paused", "last_run", "run_tests", "output_model_name", "dbt_project_id", "dbt_model_id", "next_run"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('SUCCEEDED', 'RUNNING', 'FAILED', 'PENDING'):
            raise ValueError("must be one of enum values ('SUCCEEDED', 'RUNNING', 'FAILED', 'PENDING')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransformationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of schedule
        if self.schedule:
            _dict['schedule'] = self.schedule.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransformationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "status": obj.get("status"),
            "schedule": TransformationSchedule.from_dict(obj["schedule"]) if obj.get("schedule") is not None else None,
            "paused": obj.get("paused"),
            "last_run": obj.get("last_run"),
            "run_tests": obj.get("run_tests"),
            "output_model_name": obj.get("output_model_name"),
            "dbt_project_id": obj.get("dbt_project_id"),
            "dbt_model_id": obj.get("dbt_model_id"),
            "next_run": obj.get("next_run")
        })
        return _obj


