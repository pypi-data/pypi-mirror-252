# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.setup_test_result_response import SetupTestResultResponse
from typing import Optional, Set
from typing_extensions import Self

class DestinationResponse(BaseModel):
    """
    DestinationResponse
    """ # noqa: E501
    id: StrictStr = Field(description="The unique identifier for the destination within the Fivetran system")
    service: StrictStr = Field(description="The name for the destination type within the Fivetran system.")
    region: StrictStr = Field(description="Data processing location. This is where Fivetran will operate and run computation on data.")
    setup_status: StrictStr = Field(description="Destination setup status")
    group_id: StrictStr = Field(description="The unique identifier for the group within the Fivetran system.")
    time_zone_offset: StrictStr = Field(description="Determines the time zone for the Fivetran sync schedule.")
    setup_tests: Optional[List[SetupTestResultResponse]] = Field(default=None, description="Setup tests results for this destination")
    __properties: ClassVar[List[str]] = ["id", "service", "region", "setup_status", "group_id", "time_zone_offset", "setup_tests"]

    @field_validator('region')
    def region_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('GCP_US_EAST4', 'GCP_US_WEST1', 'GCP_EUROPE_WEST3', 'GCP_AUSTRALIA_SOUTHEAST1', 'GCP_NORTHAMERICA_NORTHEAST1', 'GCP_EUROPE_WEST2', 'GCP_ASIA_SOUTHEAST1', 'AWS_US_EAST_1', 'AWS_US_EAST_2', 'AWS_US_WEST_2', 'AWS_AP_SOUTHEAST_2', 'AWS_EU_CENTRAL_1', 'AWS_EU_WEST_1', 'AWS_EU_WEST_2', 'AZURE_EASTUS2', 'AZURE_AUSTRALIAEAST', 'GCP_ASIA_SOUTH1'):
            raise ValueError("must be one of enum values ('GCP_US_EAST4', 'GCP_US_WEST1', 'GCP_EUROPE_WEST3', 'GCP_AUSTRALIA_SOUTHEAST1', 'GCP_NORTHAMERICA_NORTHEAST1', 'GCP_EUROPE_WEST2', 'GCP_ASIA_SOUTHEAST1', 'AWS_US_EAST_1', 'AWS_US_EAST_2', 'AWS_US_WEST_2', 'AWS_AP_SOUTHEAST_2', 'AWS_EU_CENTRAL_1', 'AWS_EU_WEST_1', 'AWS_EU_WEST_2', 'AZURE_EASTUS2', 'AZURE_AUSTRALIAEAST', 'GCP_ASIA_SOUTH1')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'service'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'adls': 'AdlsDestinationResponse','aiven_kafka_wh': 'AivenKafkaWhDestinationResponse','aurora_postgres_warehouse': 'AuroraPostgresWarehouseDestinationResponse','aurora_warehouse': 'AuroraWarehouseDestinationResponse','aws_msk_wh': 'AwsMskWhDestinationResponse','azure_postgres_warehouse': 'AzurePostgresWarehouseDestinationResponse','azure_sql_data_warehouse': 'AzureSqlDataWarehouseDestinationResponse','azure_sql_database': 'AzureSqlDatabaseDestinationResponse','azure_sql_managed_db_warehouse': 'AzureSqlManagedDbWarehouseDestinationResponse','big_query': 'BigQueryDestinationResponse','big_query_dts': 'BigQueryDtsDestinationResponse','confluent_cloud_wh': 'ConfluentCloudWhDestinationResponse','databricks': 'DatabricksDestinationResponse','managed_big_query': 'ManagedBigQueryDestinationResponse','maria_rds_warehouse': 'MariaRdsWarehouseDestinationResponse','maria_warehouse': 'MariaWarehouseDestinationResponse','mysql_rds_warehouse': 'MysqlRdsWarehouseDestinationResponse','mysql_warehouse': 'MysqlWarehouseDestinationResponse','new_s3_datalake': 'NewS3DatalakeDestinationResponse','onelake': 'OnelakeDestinationResponse','panoply': 'PanoplyDestinationResponse','periscope_warehouse': 'PeriscopeWarehouseDestinationResponse','postgres_gcp_warehouse': 'PostgresGcpWarehouseDestinationResponse','postgres_rds_warehouse': 'PostgresRdsWarehouseDestinationResponse','postgres_warehouse': 'PostgresWarehouseDestinationResponse','redshift': 'RedshiftDestinationResponse','snowflake': 'SnowflakeDestinationResponse','sql_server_rds_warehouse': 'SqlServerRdsWarehouseDestinationResponse','sql_server_warehouse': 'SqlServerWarehouseDestinationResponse'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]]:
        """Create an instance of DestinationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in setup_tests (list)
        _items = []
        if self.setup_tests:
            for _item in self.setup_tests:
                if _item:
                    _items.append(_item.to_dict())
            _dict['setup_tests'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]]:
        """Create an instance of DestinationResponse from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("DestinationResponse failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from openapi_client.models.adls_destination_response import AdlsDestinationResponse
from openapi_client.models.aiven_kafka_wh_destination_response import AivenKafkaWhDestinationResponse
from openapi_client.models.aurora_postgres_warehouse_destination_response import AuroraPostgresWarehouseDestinationResponse
from openapi_client.models.aurora_warehouse_destination_response import AuroraWarehouseDestinationResponse
from openapi_client.models.aws_msk_wh_destination_response import AwsMskWhDestinationResponse
from openapi_client.models.azure_postgres_warehouse_destination_response import AzurePostgresWarehouseDestinationResponse
from openapi_client.models.azure_sql_data_warehouse_destination_response import AzureSqlDataWarehouseDestinationResponse
from openapi_client.models.azure_sql_database_destination_response import AzureSqlDatabaseDestinationResponse
from openapi_client.models.azure_sql_managed_db_warehouse_destination_response import AzureSqlManagedDbWarehouseDestinationResponse
from openapi_client.models.big_query_destination_response import BigQueryDestinationResponse
from openapi_client.models.big_query_dts_destination_response import BigQueryDtsDestinationResponse
from openapi_client.models.confluent_cloud_wh_destination_response import ConfluentCloudWhDestinationResponse
from openapi_client.models.databricks_destination_response import DatabricksDestinationResponse
from openapi_client.models.managed_big_query_destination_response import ManagedBigQueryDestinationResponse
from openapi_client.models.maria_rds_warehouse_destination_response import MariaRdsWarehouseDestinationResponse
from openapi_client.models.maria_warehouse_destination_response import MariaWarehouseDestinationResponse
from openapi_client.models.mysql_rds_warehouse_destination_response import MysqlRdsWarehouseDestinationResponse
from openapi_client.models.mysql_warehouse_destination_response import MysqlWarehouseDestinationResponse
from openapi_client.models.new_s3_datalake_destination_response import NewS3DatalakeDestinationResponse
from openapi_client.models.onelake_destination_response import OnelakeDestinationResponse
from openapi_client.models.panoply_destination_response import PanoplyDestinationResponse
from openapi_client.models.periscope_warehouse_destination_response import PeriscopeWarehouseDestinationResponse
from openapi_client.models.postgres_gcp_warehouse_destination_response import PostgresGcpWarehouseDestinationResponse
from openapi_client.models.postgres_rds_warehouse_destination_response import PostgresRdsWarehouseDestinationResponse
from openapi_client.models.postgres_warehouse_destination_response import PostgresWarehouseDestinationResponse
from openapi_client.models.redshift_destination_response import RedshiftDestinationResponse
from openapi_client.models.snowflake_destination_response import SnowflakeDestinationResponse
from openapi_client.models.sql_server_rds_warehouse_destination_response import SqlServerRdsWarehouseDestinationResponse
from openapi_client.models.sql_server_warehouse_destination_response import SqlServerWarehouseDestinationResponse
# TODO: Rewrite to not use raise_errors
DestinationResponse.model_rebuild(raise_errors=False)

