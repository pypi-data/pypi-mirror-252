# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DbtProjectDetailsResponse(BaseModel):
    """
    DbtProjectDetailsResponse
    """ # noqa: E501
    id: StrictStr = Field(description="The unique identifier for the dbt Model within the Fivetran system.")
    threads: Optional[StrictInt] = None
    type: StrictStr = Field(description="Project type. Now only `GIT` project type is supported. Default value is `GIT`.")
    status: StrictStr = Field(description="Dbt Project Status. Possible values: NOT_READY, ERROR, READY.")
    errors: Optional[List[StrictStr]] = Field(default=None, description="List of errors occurred while project processing and setup.")
    target_name: StrictStr = Field(description="Target name to set or override the value from the deployment.yaml.")
    git_remote_url: StrictStr = Field(description="(Deprecated) Git remote url.")
    group_id: StrictStr = Field(description="The unique identifier for the Group within the Fivetran system.")
    public_key: StrictStr = Field(description="Public key to grant Fivetran SSH access to git repository.")
    folder_path: StrictStr = Field(description="(Deprecated) Folder in Git repo.")
    created_at: datetime = Field(description="The timestamp when dbt project was created.")
    environment_vars: Optional[List[StrictStr]] = Field(default=None, description="List of environment variables defined as key-value pairs in the raw string format using `=` as a separator. The variable name should have the `DBT_` prefix and can contain A-Z, 0-9, dash, underscore, or dot characters.  Example: `\"DBT_VARIABLE=variable_value\"`")
    default_schema: StrictStr = Field(description="Default schema in destination.")
    project_config: Optional[Dict[str, Any]] = None
    dbt_version: StrictStr = Field(description="The version of dbt that should run the project.")
    created_by_id: StrictStr = Field(description="The unique identifier for the User within the Fivetran system.")
    git_branch: StrictStr = Field(description="(Deprecated) Git branch.")
    __properties: ClassVar[List[str]] = ["id", "threads", "type", "status", "errors", "target_name", "git_remote_url", "group_id", "public_key", "folder_path", "created_at", "environment_vars", "default_schema", "project_config", "dbt_version", "created_by_id", "git_branch"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('GIT'):
            raise ValueError("must be one of enum values ('GIT')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('NOT_READY', 'READY', 'ERROR'):
            raise ValueError("must be one of enum values ('NOT_READY', 'READY', 'ERROR')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DbtProjectDetailsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DbtProjectDetailsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "threads": obj.get("threads"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "errors": obj.get("errors"),
            "target_name": obj.get("target_name"),
            "git_remote_url": obj.get("git_remote_url"),
            "group_id": obj.get("group_id"),
            "public_key": obj.get("public_key"),
            "folder_path": obj.get("folder_path"),
            "created_at": obj.get("created_at"),
            "environment_vars": obj.get("environment_vars"),
            "default_schema": obj.get("default_schema"),
            "project_config": obj.get("project_config"),
            "dbt_version": obj.get("dbt_version"),
            "created_by_id": obj.get("created_by_id"),
            "git_branch": obj.get("git_branch")
        })
        return _obj


