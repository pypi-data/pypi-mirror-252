# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.aws_lambda_config_v1_config_custom_payloads_inner import AwsLambdaConfigV1ConfigCustomPayloadsInner
from openapi_client.models.azure_function_config_v1_config_secrets_list_inner import AzureFunctionConfigV1ConfigSecretsListInner
from typing import Optional, Set
from typing_extensions import Self

class AzureFunctionConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    function_app: Optional[StrictStr] = Field(default=None, description="Function app name in Azure portal.")
    custom_payloads: Optional[List[AwsLambdaConfigV1ConfigCustomPayloadsInner]] = Field(default=None, description="The list of key-value pairs that can be used to specify custom information to the function at runtime.")
    function_key: Optional[SecretStr] = Field(default=None, description="Function key used for authorization.")
    secrets_list: Optional[List[AzureFunctionConfigV1ConfigSecretsListInner]] = Field(default=None, description="The list of secrets that should be passed to the function at runtime.")
    function_name: Optional[StrictStr] = Field(default=None, description="Name of the function to be triggered.")
    external_id: Optional[StrictStr] = Field(default=None, description="External ID.")
    secrets: Optional[SecretStr] = Field(default=None, description="The secrets that should be passed to the function at runtime.")
    connection_method: Optional[Dict[str, Any]] = Field(default=None, description="Connection Method. Possible values:  `DIRECT`: Fivetran will connect directly to your function, `PRIVATE_LINK`: Fivetran will connect to your storage container using PrivateLink.")
    __properties: ClassVar[List[str]] = ["schema", "function_app", "custom_payloads", "function_key", "secrets_list", "function_name", "external_id", "secrets", "connection_method"]

    @field_validator('connection_method')
    def connection_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DIRECT', 'PRIVATE_LINK'):
            raise ValueError("must be one of enum values ('DIRECT', 'PRIVATE_LINK')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzureFunctionConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_payloads (list)
        _items = []
        if self.custom_payloads:
            for _item in self.custom_payloads:
                if _item:
                    _items.append(_item.to_dict())
            _dict['custom_payloads'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in secrets_list (list)
        _items = []
        if self.secrets_list:
            for _item in self.secrets_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['secrets_list'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzureFunctionConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schema": obj.get("schema"),
            "function_app": obj.get("function_app"),
            "custom_payloads": [AwsLambdaConfigV1ConfigCustomPayloadsInner.from_dict(_item) for _item in obj["custom_payloads"]] if obj.get("custom_payloads") is not None else None,
            "function_key": obj.get("function_key"),
            "secrets_list": [AzureFunctionConfigV1ConfigSecretsListInner.from_dict(_item) for _item in obj["secrets_list"]] if obj.get("secrets_list") is not None else None,
            "function_name": obj.get("function_name"),
            "external_id": obj.get("external_id"),
            "secrets": obj.get("secrets"),
            "connection_method": obj.get("connection_method")
        })
        return _obj


