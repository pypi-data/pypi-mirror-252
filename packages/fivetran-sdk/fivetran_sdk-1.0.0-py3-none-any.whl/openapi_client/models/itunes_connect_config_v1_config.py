# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ItunesConnectConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    app_specific_password: Optional[SecretStr] = Field(default=None, description="Your app-specific password")
    sales_accounts: Optional[List[StrictStr]] = Field(default=None, description="Specific sales account to sync. Must be populated if `sales_account_sync_mode` is set to `SpecificSalesAccounts`.")
    app_sync_mode: Optional[Dict[str, Any]] = Field(default=None, description="Whether to sync all apps or specific apps.")
    account_sync_mode: Optional[Dict[str, Any]] = Field(default=None, description="Account Sync Mode")
    password: Optional[SecretStr] = Field(default=None, description="Your password")
    finance_account_sync_mode: Optional[Dict[str, Any]] = Field(default=None, description="Whether to sync all finance accounts or specific finance accounts.")
    timeframe_months: Optional[Dict[str, Any]] = Field(default=None, description="Historical sync time frame in months.")
    finance_accounts: Optional[List[StrictStr]] = Field(default=None, description="Specific finance accounts to sync. Must be populated if `finance_account_sync_mode` is set to `SpecificFinanceAccounts`.")
    phone_number: Optional[StrictStr] = Field(default=None, description="Register the number on AppleId Account Page for 2FA")
    accounts: Optional[List[StrictStr]] = Field(default=None, description="Accounts")
    sales_account_sync_mode: Optional[Dict[str, Any]] = Field(default=None, description="Whether to sync all sales accounts or specific sales accounts.")
    username: Optional[StrictStr] = Field(default=None, description="Your Apple ID")
    apps: Optional[List[StrictInt]] = Field(default=None, description="Specific apps to sync. Must be populated if `app_sync_mode` is set to `SpecificApps`.")
    __properties: ClassVar[List[str]] = ["schema", "app_specific_password", "sales_accounts", "app_sync_mode", "account_sync_mode", "password", "finance_account_sync_mode", "timeframe_months", "finance_accounts", "phone_number", "accounts", "sales_account_sync_mode", "username", "apps"]

    @field_validator('app_sync_mode')
    def app_sync_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AllApps', 'SpecificApps'):
            raise ValueError("must be one of enum values ('AllApps', 'SpecificApps')")
        return value

    @field_validator('account_sync_mode')
    def account_sync_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AllAccounts', 'SpecificAccounts'):
            raise ValueError("must be one of enum values ('AllAccounts', 'SpecificAccounts')")
        return value

    @field_validator('finance_account_sync_mode')
    def finance_account_sync_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AllFinanceAccounts', 'SpecificFinanceAccounts'):
            raise ValueError("must be one of enum values ('AllFinanceAccounts', 'SpecificFinanceAccounts')")
        return value

    @field_validator('timeframe_months')
    def timeframe_months_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('TWENTY_FOUR', 'SIX', 'ALL_TIME', 'TWELVE', 'THREE'):
            raise ValueError("must be one of enum values ('TWENTY_FOUR', 'SIX', 'ALL_TIME', 'TWELVE', 'THREE')")
        return value

    @field_validator('sales_account_sync_mode')
    def sales_account_sync_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AllSalesAccounts', 'SpecificSalesAccounts'):
            raise ValueError("must be one of enum values ('AllSalesAccounts', 'SpecificSalesAccounts')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItunesConnectConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItunesConnectConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schema": obj.get("schema"),
            "app_specific_password": obj.get("app_specific_password"),
            "sales_accounts": obj.get("sales_accounts"),
            "app_sync_mode": obj.get("app_sync_mode"),
            "account_sync_mode": obj.get("account_sync_mode"),
            "password": obj.get("password"),
            "finance_account_sync_mode": obj.get("finance_account_sync_mode"),
            "timeframe_months": obj.get("timeframe_months"),
            "finance_accounts": obj.get("finance_accounts"),
            "phone_number": obj.get("phone_number"),
            "accounts": obj.get("accounts"),
            "sales_account_sync_mode": obj.get("sales_account_sync_mode"),
            "username": obj.get("username"),
            "apps": obj.get("apps")
        })
        return _obj


