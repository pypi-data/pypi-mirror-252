# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AdobeAnalyticsConfigV1ConfigAdobeAnalyticsConfigurationsInner(BaseModel):
    """
    The list of configurations of tables you want to sync. The number of tables and their configurations is limited to 5. Required for connector creation.
    """ # noqa: E501
    report_suites: Optional[List[StrictStr]] = Field(default=None, description="Specific report suites to sync. Must be populated if `sync_mode` is set to `SpecificReportSuites`.")
    sync_mode: Optional[Dict[str, Any]] = Field(default=None, description="Whether to sync all report suites or specific report suites. Default value: `AllReportSuites` .")
    elements: Optional[List[StrictStr]] = Field(default=None, description="The elements that you want to sync.")
    metrics: Optional[List[StrictStr]] = Field(default=None, description="The metrics that you want to sync.")
    table: Optional[StrictStr] = Field(default=None, description="The table name unique within the schema to which connector will sync the data. Required for connector creation.")
    calculated_metrics: Optional[List[StrictStr]] = Field(default=None, description="The calculated_metrics that you want to sync.")
    segments: Optional[List[StrictStr]] = Field(default=None, description="The segments that you want to sync.")
    __properties: ClassVar[List[str]] = ["report_suites", "sync_mode", "elements", "metrics", "table", "calculated_metrics", "segments"]

    @field_validator('sync_mode')
    def sync_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SpecificReportSuites', 'AllReportSuites'):
            raise ValueError("must be one of enum values ('SpecificReportSuites', 'AllReportSuites')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdobeAnalyticsConfigV1ConfigAdobeAnalyticsConfigurationsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdobeAnalyticsConfigV1ConfigAdobeAnalyticsConfigurationsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "report_suites": obj.get("report_suites"),
            "sync_mode": obj.get("sync_mode"),
            "elements": obj.get("elements"),
            "metrics": obj.get("metrics"),
            "table": obj.get("table"),
            "calculated_metrics": obj.get("calculated_metrics"),
            "segments": obj.get("segments")
        })
        return _obj


