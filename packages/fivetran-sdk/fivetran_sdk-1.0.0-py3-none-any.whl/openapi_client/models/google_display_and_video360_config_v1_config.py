# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleDisplayAndVideo360ConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    query_id: Optional[StrictStr] = Field(default=None, description="The ID of the query whose configuration you want to reuse. This is a required parameter when `config_method` is set to `REUSE_EXISTING`.")
    config_method: Optional[Dict[str, Any]] = Field(default=None, description="The report configuration method. Specifies whether a new configuration is defined manually or an existing configuration is reused. The default value is `CREATE_NEW`.")
    partners: Optional[List[StrictStr]] = Field(default=None, description="The list of partners to include into a sync. This parameter only takes effect when `config_method` is set to `CREATE_NEW`.")
    update_config_on_each_sync: Optional[StrictBool] = Field(default=None, description="Specifies whether the configuration is updated before each sync or only when the connector settings are saved. This parameter only takes effect when `config_method` is set to `REUSE_EXISTING`. The default value is `true`.")
    advertisers: Optional[List[StrictStr]] = Field(default=None, description="The list of advertisers to include into a sync. This parameter only takes effect when `config_method` is set to `CREATE_NEW`.")
    timeframe_months: Optional[Dict[str, Any]] = Field(default=None, description="Number of months' worth of reporting data you'd like to include in your initial sync. A change of this value will trigger a re-sync for enabled reports during the next connector sync. <br> <strong>NOTE:</strong> The more months of reporting data you sync, the longer your initial sync will take.")
    metrics: Optional[List[StrictStr]] = Field(default=None, description="The report metrics to include into a sync. The metric names are provided in the API format. This is a required parameter when `config_method` is set to `CREATE_NEW`.")
    report_type: Optional[Dict[str, Any]] = Field(default=None, description="The type of the report to create. This is a required parameter when `config_method` is set to `CREATE_NEW`.")
    table: Optional[StrictStr] = Field(default=None, description="Destination table. Table is permanent and cannot be changed after connection creation")
    dimensions: Optional[List[StrictStr]] = Field(default=None, description="The report dimensions (filters) to include into a sync. The dimension names are provided in the API format. This is a required parameter when `config_method` is set to `CREATE_NEW`.")
    __properties: ClassVar[List[str]] = ["schema", "query_id", "config_method", "partners", "update_config_on_each_sync", "advertisers", "timeframe_months", "metrics", "report_type", "table", "dimensions"]

    @field_validator('config_method')
    def config_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('CREATE_NEW', 'REUSE_EXISTING'):
            raise ValueError("must be one of enum values ('CREATE_NEW', 'REUSE_EXISTING')")
        return value

    @field_validator('timeframe_months')
    def timeframe_months_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('TWENTY_FOUR', 'SIX', 'ALL_TIME', 'TWELVE', 'THREE'):
            raise ValueError("must be one of enum values ('TWENTY_FOUR', 'SIX', 'ALL_TIME', 'TWELVE', 'THREE')")
        return value

    @field_validator('report_type')
    def report_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('REACH', 'FLOODLIGHT', 'FULL_PATH', 'INVENTORY_AVAILABILITY', 'REPORT_TYPE_UNSPECIFIED', 'GRP', 'PATH_ATTRIBUTION', 'UNIQUE_REACH_AUDIENCE', 'YOUTUBE_PROGRAMMATIC_GUARANTEED', 'YOUTUBE', 'STANDARD', 'AUDIENCE_COMPOSITION'):
            raise ValueError("must be one of enum values ('REACH', 'FLOODLIGHT', 'FULL_PATH', 'INVENTORY_AVAILABILITY', 'REPORT_TYPE_UNSPECIFIED', 'GRP', 'PATH_ATTRIBUTION', 'UNIQUE_REACH_AUDIENCE', 'YOUTUBE_PROGRAMMATIC_GUARANTEED', 'YOUTUBE', 'STANDARD', 'AUDIENCE_COMPOSITION')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleDisplayAndVideo360ConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleDisplayAndVideo360ConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schema": obj.get("schema"),
            "query_id": obj.get("query_id"),
            "config_method": obj.get("config_method"),
            "partners": obj.get("partners"),
            "update_config_on_each_sync": obj.get("update_config_on_each_sync"),
            "advertisers": obj.get("advertisers"),
            "timeframe_months": obj.get("timeframe_months"),
            "metrics": obj.get("metrics"),
            "report_type": obj.get("report_type"),
            "table": obj.get("table"),
            "dimensions": obj.get("dimensions")
        })
        return _obj


