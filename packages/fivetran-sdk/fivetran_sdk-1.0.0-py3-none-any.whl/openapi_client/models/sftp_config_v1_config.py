# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SftpConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    public_key: Optional[StrictStr] = Field(default=None, description="Public Key")
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    prefix: Optional[StrictStr] = Field(default=None, description="All files and folders under this folder path will be searched for files to sync.")
    pattern: Optional[StrictStr] = Field(default=None, description="All files in your search path matching this regular expression will be synced.")
    json_delivery_mode: Optional[Dict[str, Any]] = Field(default=None, description="Control how your JSON data is delivered into your destination")
    skip_after: Optional[StrictInt] = Field(default=None, description="We will skip over the number of lines specified at the end so as to not introduce aberrant data into your destination.")
    empty_header: Optional[StrictBool] = Field(default=None, description="<strong>Optional.</strong> If your CSV generating software doesn't provide header line for the documents, Fivetran can generate the generic column names and sync data rows with them.")
    use_pgp_encryption_options: Optional[StrictBool] = Field(default=None, description="Set to `true` if files present in SFTP server are encrypted using PGP. Default value: `false`.")
    password: Optional[SecretStr] = Field(default=None, description="SFTP password.")
    skip_before: Optional[StrictInt] = Field(default=None, description="We will skip over the number of lines specified before syncing data.")
    tunnel_port: Optional[StrictInt] = Field(default=None, description="Tunnel port, specify only to connect via SSH tunnel.")
    signer_public_key: Optional[StrictStr] = Field(default=None, description="The contents of the signer's public key file. Must be populated if `use_pgp_encryption_options` is set to `true` and PGP encrypted files are signed.")
    delimiter: Optional[StrictStr] = Field(default=None, description="You can specify your the delimiter that your CSVs use here. Fivetran generally tries to infer the delimiter, but in some cases this is impossible.")
    file_type: Optional[Dict[str, Any]] = Field(default=None, description="If your files are saved with improper extensions, you can force them to by synced as the selected file type.")
    host: Optional[StrictStr] = Field(default=None, description="SFTP host address.")
    on_error: Optional[Dict[str, Any]] = Field(default=None, description="If you know that your files contain some errors, you can choose to have poorly formatted lines skipped. We recommend leaving the value as fail unless you are certain that you have undesirable, malformed data.")
    table: Optional[StrictStr] = Field(default=None, description="Destination table. Table is permanent and cannot be changed after connection creation")
    archive_pattern: Optional[StrictStr] = Field(default=None, description="Files inside of compressed archives with filenames matching this regular expression will be synced.")
    pgp_secret_key: Optional[SecretStr] = Field(default=None, description="The contents of your PGP secret key file. Must be populated if `use_pgp_encryption_options` is set to `true`.")
    append_file_option: Optional[Dict[str, Any]] = Field(default=None, description="If you know that the source completely over-writes the same file with new data, you can append the changes instead of upserting based on filename and line number.")
    escape_char: Optional[StrictStr] = Field(default=None, description="If your CSV generator follows non-standard rules for escaping quotation marks, you can set the escape character here.")
    connection_method: Optional[Dict[str, Any]] = Field(default=None, description="The connection method used to connect to SFTP Server.")
    tunnel_user: Optional[StrictStr] = Field(default=None, description="Tunnel user, specify only to connect via SSH tunnel.")
    line_separator: Optional[StrictStr] = Field(default=None, description="You can specify the custom line separator for your CSV files. The line separator is used in files to separate one row from the next.")
    null_sequence: Optional[StrictStr] = Field(default=None, description="If your CSVs use a special value indicating null, you can specify it here.")
    port: Optional[StrictInt] = Field(default=None, description="SFTP port.")
    tunnel_host: Optional[StrictStr] = Field(default=None, description="Tunnel host address, specify only to connect via SSH tunnel.")
    is_keypair: Optional[StrictBool] = Field(default=None, description="Whether to use a key pair for authentication.  When `true`, do not use `password`.")
    compression: Optional[Dict[str, Any]] = Field(default=None, description="The secrets that should be passed to the function at runtime.")
    user: Optional[StrictStr] = Field(default=None, description="SFTP user.")
    pgp_pass_phrase: Optional[SecretStr] = Field(default=None, description="The PGP passphrase used to create the key. Must be populated if `use_pgp_encryption_options` is set to `true`.")
    __properties: ClassVar[List[str]] = ["public_key", "schema", "prefix", "pattern", "json_delivery_mode", "skip_after", "empty_header", "use_pgp_encryption_options", "password", "skip_before", "tunnel_port", "signer_public_key", "delimiter", "file_type", "host", "on_error", "table", "archive_pattern", "pgp_secret_key", "append_file_option", "escape_char", "connection_method", "tunnel_user", "line_separator", "null_sequence", "port", "tunnel_host", "is_keypair", "compression", "user", "pgp_pass_phrase"]

    @field_validator('json_delivery_mode')
    def json_delivery_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Packed', 'Unpacked'):
            raise ValueError("must be one of enum values ('Packed', 'Unpacked')")
        return value

    @field_validator('file_type')
    def file_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('log', 'infer', 'tsv', 'xml', 'csv', 'json', 'jsonl', 'avro', 'parquet'):
            raise ValueError("must be one of enum values ('log', 'infer', 'tsv', 'xml', 'csv', 'json', 'jsonl', 'avro', 'parquet')")
        return value

    @field_validator('on_error')
    def on_error_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('fail', 'skip'):
            raise ValueError("must be one of enum values ('fail', 'skip')")
        return value

    @field_validator('append_file_option')
    def append_file_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('upsert_file', 'append_file'):
            raise ValueError("must be one of enum values ('upsert_file', 'append_file')")
        return value

    @field_validator('connection_method')
    def connection_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('sshtunnel', 'direct'):
            raise ValueError("must be one of enum values ('sshtunnel', 'direct')")
        return value

    @field_validator('compression')
    def compression_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('zip', 'gz', 'tar_gz', 'tar', 'infer', 'gzip', 'uncompressed', 'bz2', 'tar_bz2'):
            raise ValueError("must be one of enum values ('zip', 'gz', 'tar_gz', 'tar', 'infer', 'gzip', 'uncompressed', 'bz2', 'tar_bz2')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SftpConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SftpConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "public_key": obj.get("public_key"),
            "schema": obj.get("schema"),
            "prefix": obj.get("prefix"),
            "pattern": obj.get("pattern"),
            "json_delivery_mode": obj.get("json_delivery_mode"),
            "skip_after": obj.get("skip_after"),
            "empty_header": obj.get("empty_header"),
            "use_pgp_encryption_options": obj.get("use_pgp_encryption_options"),
            "password": obj.get("password"),
            "skip_before": obj.get("skip_before"),
            "tunnel_port": obj.get("tunnel_port"),
            "signer_public_key": obj.get("signer_public_key"),
            "delimiter": obj.get("delimiter"),
            "file_type": obj.get("file_type"),
            "host": obj.get("host"),
            "on_error": obj.get("on_error"),
            "table": obj.get("table"),
            "archive_pattern": obj.get("archive_pattern"),
            "pgp_secret_key": obj.get("pgp_secret_key"),
            "append_file_option": obj.get("append_file_option"),
            "escape_char": obj.get("escape_char"),
            "connection_method": obj.get("connection_method"),
            "tunnel_user": obj.get("tunnel_user"),
            "line_separator": obj.get("line_separator"),
            "null_sequence": obj.get("null_sequence"),
            "port": obj.get("port"),
            "tunnel_host": obj.get("tunnel_host"),
            "is_keypair": obj.get("is_keypair"),
            "compression": obj.get("compression"),
            "user": obj.get("user"),
            "pgp_pass_phrase": obj.get("pgp_pass_phrase")
        })
        return _obj


