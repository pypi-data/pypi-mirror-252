# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateConnectorRequest(BaseModel):
    """
    UpdateConnectorRequest
    """ # noqa: E501
    config: Optional[Any] = Field(default=None, description="The connector setup configuration. Check possible config formats in [create method](/openapi/reference/v1/operation/create_connector/)")
    auth: Optional[Any] = Field(default=None, description="The connector authorization settings. Check possible config formats in [create method](/openapi/reference/v1/operation/create_connector/)")
    paused: Optional[StrictBool] = Field(default=None, description="Specifies whether the connector is paused")
    trust_certificates: Optional[StrictBool] = Field(default=None, description="Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).")
    trust_fingerprints: Optional[StrictBool] = Field(default=None, description="Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).")
    daily_sync_time: Optional[StrictStr] = Field(default=None, description="The connector daily sync start time that we return only when the sync frequency is set to 1440 (which means 24 hours) and the daily_sync_time parameter was set using the Create a Connector or Modify a Connector request")
    run_setup_tests: Optional[StrictBool] = Field(default=None, description="Specifies whether the setup tests should be run automatically. The default value is TRUE.")
    sync_frequency: Optional[StrictInt] = Field(default=None, description="The connector sync frequency in minutes")
    data_delay_threshold: Optional[StrictInt] = None
    pause_after_trial: Optional[StrictBool] = Field(default=None, description="Specifies whether the connector should be paused after the free trial period has ended")
    is_historical_sync: Optional[StrictBool] = Field(default=None, description="The boolean specifying whether the connector should be triggered to re-sync all historical data. If you set this parameter to TRUE, the next scheduled sync will be historical. If the value is FALSE or not specified, the connector will not re-sync historical data. NOTE: When the value is TRUE, only the next scheduled sync will be historical, all subsequent ones will be incremental. This parameter is set to FALSE once the historical sync is completed.")
    data_delay_sensitivity: Optional[StrictStr] = None
    schema_status: Optional[StrictStr] = Field(default=None, description="Schema status")
    schedule_type: Optional[StrictStr] = Field(default=None, description="The connector schedule configuration type. Supported values: auto, manual")
    __properties: ClassVar[List[str]] = ["config", "auth", "paused", "trust_certificates", "trust_fingerprints", "daily_sync_time", "run_setup_tests", "sync_frequency", "data_delay_threshold", "pause_after_trial", "is_historical_sync", "data_delay_sensitivity", "schema_status", "schedule_type"]

    @field_validator('sync_frequency')
    def sync_frequency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (5, 15, 30, 60, 120, 180, 360, 480, 720, 1440):
            raise ValueError("must be one of enum values (5, 15, 30, 60, 120, 180, 360, 480, 720, 1440)")
        return value

    @field_validator('data_delay_sensitivity')
    def data_delay_sensitivity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('LOW', 'NORMAL', 'HIGH', 'CUSTOM'):
            raise ValueError("must be one of enum values ('LOW', 'NORMAL', 'HIGH', 'CUSTOM')")
        return value

    @field_validator('schedule_type')
    def schedule_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('auto', 'manual'):
            raise ValueError("must be one of enum values ('auto', 'manual')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateConnectorRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if config (nullable) is None
        # and model_fields_set contains the field
        if self.config is None and "config" in self.model_fields_set:
            _dict['config'] = None

        # set to None if auth (nullable) is None
        # and model_fields_set contains the field
        if self.auth is None and "auth" in self.model_fields_set:
            _dict['auth'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateConnectorRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "config": obj.get("config"),
            "auth": obj.get("auth"),
            "paused": obj.get("paused"),
            "trust_certificates": obj.get("trust_certificates"),
            "trust_fingerprints": obj.get("trust_fingerprints"),
            "daily_sync_time": obj.get("daily_sync_time"),
            "run_setup_tests": obj.get("run_setup_tests"),
            "sync_frequency": obj.get("sync_frequency"),
            "data_delay_threshold": obj.get("data_delay_threshold"),
            "pause_after_trial": obj.get("pause_after_trial"),
            "is_historical_sync": obj.get("is_historical_sync"),
            "data_delay_sensitivity": obj.get("data_delay_sensitivity"),
            "schema_status": obj.get("schema_status"),
            "schedule_type": obj.get("schedule_type")
        })
        return _obj


