# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UpdateDestinationRequest(BaseModel):
    """
    UpdateDestinationRequest
    """ # noqa: E501
    region: Optional[StrictStr] = Field(default=None, description="Data processing location. This is where Fivetran will operate and run computation on data.")
    config: Optional[Any] = Field(default=None, description="The connector setup configuration. Check possible config formats in [create method](/openapi/reference/v1/operation/create_destination/)")
    trust_certificates: Optional[StrictBool] = Field(default=None, description="Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).")
    trust_fingerprints: Optional[StrictBool] = Field(default=None, description="Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).")
    run_setup_tests: Optional[StrictBool] = Field(default=None, description="Specifies whether setup tests should be run automatically.")
    time_zone_offset: Optional[StrictStr] = Field(default=None, description="Determines the time zone for the Fivetran sync schedule.")
    __properties: ClassVar[List[str]] = ["region", "config", "trust_certificates", "trust_fingerprints", "run_setup_tests", "time_zone_offset"]

    @field_validator('region')
    def region_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('GCP_US_EAST4', 'GCP_US_WEST1', 'GCP_EUROPE_WEST3', 'GCP_AUSTRALIA_SOUTHEAST1', 'GCP_NORTHAMERICA_NORTHEAST1', 'GCP_EUROPE_WEST2', 'GCP_ASIA_SOUTHEAST1', 'AWS_US_EAST_1', 'AWS_US_EAST_2', 'AWS_US_WEST_2', 'AWS_AP_SOUTHEAST_2', 'AWS_EU_CENTRAL_1', 'AWS_EU_WEST_1', 'AWS_EU_WEST_2', 'AZURE_EASTUS2', 'AZURE_AUSTRALIAEAST', 'GCP_ASIA_SOUTH1'):
            raise ValueError("must be one of enum values ('GCP_US_EAST4', 'GCP_US_WEST1', 'GCP_EUROPE_WEST3', 'GCP_AUSTRALIA_SOUTHEAST1', 'GCP_NORTHAMERICA_NORTHEAST1', 'GCP_EUROPE_WEST2', 'GCP_ASIA_SOUTHEAST1', 'AWS_US_EAST_1', 'AWS_US_EAST_2', 'AWS_US_WEST_2', 'AWS_AP_SOUTHEAST_2', 'AWS_EU_CENTRAL_1', 'AWS_EU_WEST_1', 'AWS_EU_WEST_2', 'AZURE_EASTUS2', 'AZURE_AUSTRALIAEAST', 'GCP_ASIA_SOUTH1')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdateDestinationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if config (nullable) is None
        # and model_fields_set contains the field
        if self.config is None and "config" in self.model_fields_set:
            _dict['config'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdateDestinationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "region": obj.get("region"),
            "config": obj.get("config"),
            "trust_certificates": obj.get("trust_certificates"),
            "trust_fingerprints": obj.get("trust_fingerprints"),
            "run_setup_tests": obj.get("run_setup_tests"),
            "time_zone_offset": obj.get("time_zone_offset")
        })
        return _obj


