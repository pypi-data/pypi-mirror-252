# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.connect_card_config import ConnectCardConfig
from openapi_client.models.gongio_config_v1_config import GongioConfigV1Config
from openapi_client.models.new_connector_request_v1 import NewConnectorRequestV1
from typing import Optional, Set
from typing_extensions import Self

class GongioNewConnectorRequestV1(NewConnectorRequestV1):
    """
    GongioNewConnectorRequestV1
    """ # noqa: E501
    config: Optional[GongioConfigV1Config] = None
    __properties: ClassVar[List[str]] = ["group_id", "service", "trust_certificates", "trust_fingerprints", "run_setup_tests", "paused", "pause_after_trial", "sync_frequency", "data_delay_sensitivity", "data_delay_threshold", "daily_sync_time", "schedule_type", "connect_card_config", "config"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GongioNewConnectorRequestV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of connect_card_config
        if self.connect_card_config:
            _dict['connect_card_config'] = self.connect_card_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GongioNewConnectorRequestV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "group_id": obj.get("group_id"),
            "service": obj.get("service"),
            "trust_certificates": obj.get("trust_certificates"),
            "trust_fingerprints": obj.get("trust_fingerprints"),
            "run_setup_tests": obj.get("run_setup_tests"),
            "paused": obj.get("paused"),
            "pause_after_trial": obj.get("pause_after_trial"),
            "sync_frequency": obj.get("sync_frequency"),
            "data_delay_sensitivity": obj.get("data_delay_sensitivity"),
            "data_delay_threshold": obj.get("data_delay_threshold"),
            "daily_sync_time": obj.get("daily_sync_time"),
            "schedule_type": obj.get("schedule_type"),
            "connect_card_config": ConnectCardConfig.from_dict(obj["connect_card_config"]) if obj.get("connect_card_config") is not None else None,
            "config": GongioConfigV1Config.from_dict(obj["config"]) if obj.get("config") is not None else None
        })
        return _obj


