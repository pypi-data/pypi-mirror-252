# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.reddit_ads_config_v1_config_accounts_inner import RedditAdsConfigV1ConfigAccountsInner
from openapi_client.models.reddit_ads_config_v1_config_custom_reports_inner import RedditAdsConfigV1ConfigCustomReportsInner
from typing import Optional, Set
from typing_extensions import Self

class RedditAdsConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    sync_mode: Optional[Dict[str, Any]] = Field(default=None, description="Whether to sync all accounts or specific accounts.")
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    timeframe_months: Optional[Dict[str, Any]] = Field(default=None, description="Number of months' worth of reporting data you'd like to include in your initial sync. This cannot be modified once the connector is created. Default value: `TWELVE`.")
    sync_multiple_accounts: Optional[StrictBool] = Field(default=None, description="When this parameter is set to `true`, we sync the data of the additional linked accounts. When this parameter is set to `false`, we sync only the data from the main account that was used for authorization")
    accounts: Optional[List[RedditAdsConfigV1ConfigAccountsInner]] = Field(default=None, description="Accounts")
    business_accounts: Optional[List[StrictStr]] = Field(default=None, description="Specific Accounts to sync.  Must be populated if `sync_mode` is set to `SpecificAccounts`.")
    custom_reports: Optional[List[RedditAdsConfigV1ConfigCustomReportsInner]] = Field(default=None, description="The list of custom report configurations. Each report corresponds to a table within the schema to which connector will sync the data.")
    __properties: ClassVar[List[str]] = ["sync_mode", "schema", "timeframe_months", "sync_multiple_accounts", "accounts", "business_accounts", "custom_reports"]

    @field_validator('sync_mode')
    def sync_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AllAccounts', 'SpecificAccounts'):
            raise ValueError("must be one of enum values ('AllAccounts', 'SpecificAccounts')")
        return value

    @field_validator('timeframe_months')
    def timeframe_months_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('TWENTY_FOUR', 'SIX', 'ALL_TIME', 'TWELVE', 'THREE'):
            raise ValueError("must be one of enum values ('TWENTY_FOUR', 'SIX', 'ALL_TIME', 'TWELVE', 'THREE')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RedditAdsConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in accounts (list)
        _items = []
        if self.accounts:
            for _item in self.accounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_reports (list)
        _items = []
        if self.custom_reports:
            for _item in self.custom_reports:
                if _item:
                    _items.append(_item.to_dict())
            _dict['custom_reports'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RedditAdsConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sync_mode": obj.get("sync_mode"),
            "schema": obj.get("schema"),
            "timeframe_months": obj.get("timeframe_months"),
            "sync_multiple_accounts": obj.get("sync_multiple_accounts"),
            "accounts": [RedditAdsConfigV1ConfigAccountsInner.from_dict(_item) for _item in obj["accounts"]] if obj.get("accounts") is not None else None,
            "business_accounts": obj.get("business_accounts"),
            "custom_reports": [RedditAdsConfigV1ConfigCustomReportsInner.from_dict(_item) for _item in obj["custom_reports"]] if obj.get("custom_reports") is not None else None
        })
        return _obj


