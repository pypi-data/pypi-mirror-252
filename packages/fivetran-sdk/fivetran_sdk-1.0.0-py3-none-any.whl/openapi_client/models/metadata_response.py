# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MetadataResponse(BaseModel):
    """
    MetadataResponse
    """ # noqa: E501
    id: StrictStr = Field(description="The connector type identifier within the Fivetran system")
    name: StrictStr = Field(description="The connector service name within the Fivetran system")
    type: StrictStr = Field(description="The connector service type")
    description: Optional[StrictStr] = Field(default=None, description="The description characterizing the purpose of the connector")
    icons: Optional[List[StrictStr]] = Field(default=None, description="The set of additional icon resource URLs in different formats (.svg, .png). Updating this list is not a breaking change. The set of icon URLs or the icons themselves may be changed")
    config: Optional[Dict[str, Any]] = Field(default=None, description="Metadata for configuration fields")
    auth: Optional[Dict[str, Any]] = Field(default=None, description="Metadata for authorization fields (optional)")
    link_to_docs: Optional[StrictStr] = Field(default=None, description="The link to the connector documentation")
    connector_class: Optional[StrictStr] = None
    link_to_erd: Optional[StrictStr] = Field(default=None, description="The link to the connector ERD (entityâ€“relationship diagram)")
    service_status: Optional[StrictStr] = None
    icon_url: Optional[StrictStr] = Field(default=None, description="The icon resource URL")
    __properties: ClassVar[List[str]] = ["id", "name", "type", "description", "icons", "config", "auth", "link_to_docs", "connector_class", "link_to_erd", "service_status", "icon_url"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('API', 'Dbt', 'Marketing', 'HumanResources', 'Finance', 'Productivity', 'Engineering', 'Support', 'Sales', 'Security', 'SuperConnectorTest', 'Free', 'File', 'Database', 'Events', 'Function', 'BITool', 'Warehouse', 'Log', 'Hvr'):
            raise ValueError("must be one of enum values ('API', 'Dbt', 'Marketing', 'HumanResources', 'Finance', 'Productivity', 'Engineering', 'Support', 'Sales', 'Security', 'SuperConnectorTest', 'Free', 'File', 'Database', 'Events', 'Function', 'BITool', 'Warehouse', 'Log', 'Hvr')")
        return value

    @field_validator('connector_class')
    def connector_class_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('standard', 'lite', 'partner-built'):
            raise ValueError("must be one of enum values ('standard', 'lite', 'partner-built')")
        return value

    @field_validator('service_status')
    def service_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('development', 'private_preview', 'beta', 'general_availability', 'sunset'):
            raise ValueError("must be one of enum values ('development', 'private_preview', 'beta', 'general_availability', 'sunset')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MetadataResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MetadataResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "description": obj.get("description"),
            "icons": obj.get("icons"),
            "config": obj.get("config"),
            "auth": obj.get("auth"),
            "link_to_docs": obj.get("link_to_docs"),
            "connector_class": obj.get("connector_class"),
            "link_to_erd": obj.get("link_to_erd"),
            "service_status": obj.get("service_status"),
            "icon_url": obj.get("icon_url")
        })
        return _obj


