# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CosmosConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    enable_distributed_connector_mode: Optional[StrictBool] = Field(default=None, description="Enable to allow the connector to join a cluster of connectors forming a Distributed Connector Cluster. This cluster allows parallel syncs from the same source to the same destination using multiple connectors.")
    sync_pack_mode: Optional[Dict[str, Any]] = Field(default=None, description="The packing mode type. Supported values:<br>`STANDARD_UNPACKED_MODE`- Unpacks _one_ layer of nested fields and infers types.<br>`PACKED_MODE`- Delivers packed data as a single destination column value.<br>Learn more in our [Cosmos DB Sync Pack Mode Options documentation](/docs/databases/cosmos#packmodeoptions).")
    data_access_method: Optional[Dict[str, Any]] = Field(default=None, description="The source data access method. Supported values:<br>`ACCOUNT_KEY`- Data access method that uses account keys to authenticate to the source database. It comes in both read-write and read-only variants.<br>`RESOURCE_TOKEN`- Fine-grained permission model based on native Azure Cosmos DB users and permissions.<br> Learn more in our [Cosmos DB Data Access Methods documentation](/docs/databases/cosmos#dataaccessmethods).")
    account_key: Optional[SecretStr] = Field(default=None, description="The read-only primary or secondary account key for the database account. Required for the `ACCOUNT_KEY` data access method.")
    distributed_connector_cluster_size: Optional[StrictInt] = Field(default=None, description="Specifies the total number of connectors in the Distributed Connector Cluster running in parallel.")
    token_authenticated_database: Optional[StrictStr] = Field(default=None, description="The database name. Required for the `RESOURCE_TOKEN` data access method.")
    resource_token: Optional[SecretStr] = Field(default=None, description="A token that provides access to a specific Cosmos DB resource. Required for the `RESOURCE_TOKEN` data access method.")
    schema_prefix: Optional[StrictStr] = Field(default=None, description="Destination schema prefix. Prefix for each replicated schema. For example with prefix 'x', source schemas 'foo' and 'bar' get replicated as 'x_foo' and 'x_bar'. The prefix is permanent and cannot be changed after connection creation")
    token_authenticated_container: Optional[StrictStr] = Field(default=None, description="The container name. Required for the `RESOURCE_TOKEN` data access method.")
    uri: Optional[StrictStr] = Field(default=None, description="Cosmos resource instance address.")
    __properties: ClassVar[List[str]] = ["enable_distributed_connector_mode", "sync_pack_mode", "data_access_method", "account_key", "distributed_connector_cluster_size", "token_authenticated_database", "resource_token", "schema_prefix", "token_authenticated_container", "uri"]

    @field_validator('sync_pack_mode')
    def sync_pack_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('STANDARD_UNPACKED_MODE', 'PACKED_MODE'):
            raise ValueError("must be one of enum values ('STANDARD_UNPACKED_MODE', 'PACKED_MODE')")
        return value

    @field_validator('data_access_method')
    def data_access_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ACCOUNT_KEY', 'RESOURCE_TOKEN'):
            raise ValueError("must be one of enum values ('ACCOUNT_KEY', 'RESOURCE_TOKEN')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CosmosConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CosmosConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enable_distributed_connector_mode": obj.get("enable_distributed_connector_mode"),
            "sync_pack_mode": obj.get("sync_pack_mode"),
            "data_access_method": obj.get("data_access_method"),
            "account_key": obj.get("account_key"),
            "distributed_connector_cluster_size": obj.get("distributed_connector_cluster_size"),
            "token_authenticated_database": obj.get("token_authenticated_database"),
            "resource_token": obj.get("resource_token"),
            "schema_prefix": obj.get("schema_prefix"),
            "token_authenticated_container": obj.get("token_authenticated_container"),
            "uri": obj.get("uri")
        })
        return _obj


