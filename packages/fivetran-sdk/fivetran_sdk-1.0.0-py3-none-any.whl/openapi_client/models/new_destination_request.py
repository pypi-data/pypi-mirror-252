# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class NewDestinationRequest(BaseModel):
    """
    NewDestinationRequest
    """ # noqa: E501
    group_id: StrictStr = Field(description="The unique identifier for the group within the Fivetran system.")
    service: StrictStr = Field(description="The name for the destination type within the Fivetran system.")
    region: Optional[StrictStr] = Field(default=None, description="Data processing location. This is where Fivetran will operate and run computation on data.")
    time_zone_offset: StrictStr = Field(description="Determines the time zone for the Fivetran sync schedule.")
    trust_certificates: Optional[StrictBool] = Field(default=None, description="Specifies whether we should trust the certificate automatically. The default value is FALSE. If a certificate is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination certificate](https://fivetran.com/docs/rest-api/certificates#approveadestinationcertificate).")
    trust_fingerprints: Optional[StrictBool] = Field(default=None, description="Specifies whether we should trust the SSH fingerprint automatically. The default value is FALSE. If a fingerprint is not trusted automatically, it has to be approved with [Certificates Management API Approve a destination fingerprint](https://fivetran.com/docs/rest-api/certificates#approveadestinationfingerprint).")
    run_setup_tests: Optional[StrictBool] = Field(default=None, description="Specifies whether setup tests should be run automatically.")
    __properties: ClassVar[List[str]] = ["group_id", "service", "region", "time_zone_offset", "trust_certificates", "trust_fingerprints", "run_setup_tests"]

    @field_validator('region')
    def region_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('GCP_US_EAST4', 'GCP_US_WEST1', 'GCP_EUROPE_WEST3', 'GCP_AUSTRALIA_SOUTHEAST1', 'GCP_NORTHAMERICA_NORTHEAST1', 'GCP_EUROPE_WEST2', 'GCP_ASIA_SOUTHEAST1', 'AWS_US_EAST_1', 'AWS_US_EAST_2', 'AWS_US_WEST_2', 'AWS_AP_SOUTHEAST_2', 'AWS_EU_CENTRAL_1', 'AWS_EU_WEST_1', 'AWS_EU_WEST_2', 'AZURE_EASTUS2', 'AZURE_AUSTRALIAEAST', 'GCP_ASIA_SOUTH1'):
            raise ValueError("must be one of enum values ('GCP_US_EAST4', 'GCP_US_WEST1', 'GCP_EUROPE_WEST3', 'GCP_AUSTRALIA_SOUTHEAST1', 'GCP_NORTHAMERICA_NORTHEAST1', 'GCP_EUROPE_WEST2', 'GCP_ASIA_SOUTHEAST1', 'AWS_US_EAST_1', 'AWS_US_EAST_2', 'AWS_US_WEST_2', 'AWS_AP_SOUTHEAST_2', 'AWS_EU_CENTRAL_1', 'AWS_EU_WEST_1', 'AWS_EU_WEST_2', 'AZURE_EASTUS2', 'AZURE_AUSTRALIAEAST', 'GCP_ASIA_SOUTH1')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'service'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'adls': 'AdlsNewDestinationRequest','aiven_kafka_wh': 'AivenKafkaWhNewDestinationRequest','aurora_postgres_warehouse': 'AuroraPostgresWarehouseNewDestinationRequest','aurora_warehouse': 'AuroraWarehouseNewDestinationRequest','aws_msk_wh': 'AwsMskWhNewDestinationRequest','azure_postgres_warehouse': 'AzurePostgresWarehouseNewDestinationRequest','azure_sql_data_warehouse': 'AzureSqlDataWarehouseNewDestinationRequest','azure_sql_database': 'AzureSqlDatabaseNewDestinationRequest','azure_sql_managed_db_warehouse': 'AzureSqlManagedDbWarehouseNewDestinationRequest','big_query': 'BigQueryNewDestinationRequest','big_query_dts': 'BigQueryDtsNewDestinationRequest','confluent_cloud_wh': 'ConfluentCloudWhNewDestinationRequest','databricks': 'DatabricksNewDestinationRequest','managed_big_query': 'ManagedBigQueryNewDestinationRequest','maria_rds_warehouse': 'MariaRdsWarehouseNewDestinationRequest','maria_warehouse': 'MariaWarehouseNewDestinationRequest','mysql_rds_warehouse': 'MysqlRdsWarehouseNewDestinationRequest','mysql_warehouse': 'MysqlWarehouseNewDestinationRequest','new_s3_datalake': 'NewS3DatalakeNewDestinationRequest','onelake': 'OnelakeNewDestinationRequest','panoply': 'PanoplyNewDestinationRequest','periscope_warehouse': 'PeriscopeWarehouseNewDestinationRequest','postgres_gcp_warehouse': 'PostgresGcpWarehouseNewDestinationRequest','postgres_rds_warehouse': 'PostgresRdsWarehouseNewDestinationRequest','postgres_warehouse': 'PostgresWarehouseNewDestinationRequest','redshift': 'RedshiftNewDestinationRequest','snowflake': 'SnowflakeNewDestinationRequest','sql_server_rds_warehouse': 'SqlServerRdsWarehouseNewDestinationRequest','sql_server_warehouse': 'SqlServerWarehouseNewDestinationRequest'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]]:
        """Create an instance of NewDestinationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self, Self]]:
        """Create an instance of NewDestinationRequest from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("NewDestinationRequest failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from openapi_client.models.adls_new_destination_request import AdlsNewDestinationRequest
from openapi_client.models.aiven_kafka_wh_new_destination_request import AivenKafkaWhNewDestinationRequest
from openapi_client.models.aurora_postgres_warehouse_new_destination_request import AuroraPostgresWarehouseNewDestinationRequest
from openapi_client.models.aurora_warehouse_new_destination_request import AuroraWarehouseNewDestinationRequest
from openapi_client.models.aws_msk_wh_new_destination_request import AwsMskWhNewDestinationRequest
from openapi_client.models.azure_postgres_warehouse_new_destination_request import AzurePostgresWarehouseNewDestinationRequest
from openapi_client.models.azure_sql_data_warehouse_new_destination_request import AzureSqlDataWarehouseNewDestinationRequest
from openapi_client.models.azure_sql_database_new_destination_request import AzureSqlDatabaseNewDestinationRequest
from openapi_client.models.azure_sql_managed_db_warehouse_new_destination_request import AzureSqlManagedDbWarehouseNewDestinationRequest
from openapi_client.models.big_query_dts_new_destination_request import BigQueryDtsNewDestinationRequest
from openapi_client.models.big_query_new_destination_request import BigQueryNewDestinationRequest
from openapi_client.models.confluent_cloud_wh_new_destination_request import ConfluentCloudWhNewDestinationRequest
from openapi_client.models.databricks_new_destination_request import DatabricksNewDestinationRequest
from openapi_client.models.managed_big_query_new_destination_request import ManagedBigQueryNewDestinationRequest
from openapi_client.models.maria_rds_warehouse_new_destination_request import MariaRdsWarehouseNewDestinationRequest
from openapi_client.models.maria_warehouse_new_destination_request import MariaWarehouseNewDestinationRequest
from openapi_client.models.mysql_rds_warehouse_new_destination_request import MysqlRdsWarehouseNewDestinationRequest
from openapi_client.models.mysql_warehouse_new_destination_request import MysqlWarehouseNewDestinationRequest
from openapi_client.models.new_s3_datalake_new_destination_request import NewS3DatalakeNewDestinationRequest
from openapi_client.models.onelake_new_destination_request import OnelakeNewDestinationRequest
from openapi_client.models.panoply_new_destination_request import PanoplyNewDestinationRequest
from openapi_client.models.periscope_warehouse_new_destination_request import PeriscopeWarehouseNewDestinationRequest
from openapi_client.models.postgres_gcp_warehouse_new_destination_request import PostgresGcpWarehouseNewDestinationRequest
from openapi_client.models.postgres_rds_warehouse_new_destination_request import PostgresRdsWarehouseNewDestinationRequest
from openapi_client.models.postgres_warehouse_new_destination_request import PostgresWarehouseNewDestinationRequest
from openapi_client.models.redshift_new_destination_request import RedshiftNewDestinationRequest
from openapi_client.models.snowflake_new_destination_request import SnowflakeNewDestinationRequest
from openapi_client.models.sql_server_rds_warehouse_new_destination_request import SqlServerRdsWarehouseNewDestinationRequest
from openapi_client.models.sql_server_warehouse_new_destination_request import SqlServerWarehouseNewDestinationRequest
# TODO: Rewrite to not use raise_errors
NewDestinationRequest.model_rebuild(raise_errors=False)

