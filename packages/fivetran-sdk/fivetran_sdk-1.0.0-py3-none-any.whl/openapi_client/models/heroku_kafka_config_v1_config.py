# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HerokuKafkaConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    consumer_group: Optional[StrictStr] = Field(default=None, description="Heroku Kafka consumer group name.")
    servers: Optional[List[StrictStr]] = Field(default=None, description="Comma-separated list of Heroku Kafka servers in the format `server:port`.")
    sync_type: Optional[Dict[str, Any]] = Field(default=None, description="Heroku Kafka sync type.  Unpacked messages must be valid JSON.")
    client_cert: Optional[SecretStr] = Field(default=None, description="Heroku Kafka client certificate. Required for `TLS` security protocol.")
    key_store_type: Optional[StrictStr] = Field(default=None, description="Key Store Type")
    trust_store_type: Optional[StrictStr] = Field(default=None, description="Trust Store Type")
    security_protocol: Optional[Dict[str, Any]] = Field(default=None, description="Security protocol for Heroku Kafka interaction.")
    client_cert_key: Optional[SecretStr] = Field(default=None, description="Heroku Kafka client certificate key.  Required for `TLS` security protocol.")
    message_type: Optional[Dict[str, Any]] = Field(default=None, description="Heroku Kafka message type.")
    trusted_cert: Optional[SecretStr] = Field(default=None, description="Heroku Kafka trusted certificate. Required for `TLS` security protocol.")
    __properties: ClassVar[List[str]] = ["schema", "consumer_group", "servers", "sync_type", "client_cert", "key_store_type", "trust_store_type", "security_protocol", "client_cert_key", "message_type", "trusted_cert"]

    @field_validator('sync_type')
    def sync_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Packed', 'Unpacked'):
            raise ValueError("must be one of enum values ('Packed', 'Unpacked')")
        return value

    @field_validator('security_protocol')
    def security_protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('PLAINTEXT', 'TLS'):
            raise ValueError("must be one of enum values ('PLAINTEXT', 'TLS')")
        return value

    @field_validator('message_type')
    def message_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Text', 'Json'):
            raise ValueError("must be one of enum values ('Text', 'Json')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HerokuKafkaConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HerokuKafkaConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schema": obj.get("schema"),
            "consumer_group": obj.get("consumer_group"),
            "servers": obj.get("servers"),
            "sync_type": obj.get("sync_type"),
            "client_cert": obj.get("client_cert"),
            "key_store_type": obj.get("key_store_type"),
            "trust_store_type": obj.get("trust_store_type"),
            "security_protocol": obj.get("security_protocol"),
            "client_cert_key": obj.get("client_cert_key"),
            "message_type": obj.get("message_type"),
            "trusted_cert": obj.get("trusted_cert")
        })
        return _obj


