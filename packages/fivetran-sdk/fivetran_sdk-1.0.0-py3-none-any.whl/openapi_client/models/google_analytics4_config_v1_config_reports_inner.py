# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalytics4ConfigV1ConfigReportsInner(BaseModel):
    """
    The list of reports. Each report corresponds to a table within the schema to which connector will sync the data.
    """ # noqa: E501
    rollback_window: Optional[StrictInt] = Field(default=None, description="The custom window size for rollback syncs.")
    filter_value: Optional[StrictStr] = None
    filter_type: Optional[Dict[str, Any]] = Field(default=None, description="Filter type for reports request. Possible values are INCLUDE and EXCLUDE")
    prebuilt_report: Optional[Dict[str, Any]] = Field(default=None, description="The name of the Prebuilt Report from which the connector will sync the data.")
    filter_field_name: Optional[StrictStr] = Field(default=None, description="The dimension name to filter on.")
    metrics: Optional[List[StrictStr]] = Field(default=None, description="The report metrics to include into a sync.")
    config_type: Optional[Dict[str, Any]] = Field(default=None, description="Whether to use the Prebuilt Reports or Custom Reports.")
    time_aggregation_granularity: Optional[Dict[str, Any]] = Field(default=None, description="The report data aggregation time granularity.")
    table: Optional[StrictStr] = Field(default=None, description="The table name within the schema to which connector will sync the data of the specific report.")
    dimensions: Optional[List[StrictStr]] = Field(default=None, description="The report dimensions to include into a sync.")
    __properties: ClassVar[List[str]] = ["rollback_window", "filter_value", "filter_type", "prebuilt_report", "filter_field_name", "metrics", "config_type", "time_aggregation_granularity", "table", "dimensions"]

    @field_validator('filter_type')
    def filter_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('EXCLUDE', 'INCLUDE'):
            raise ValueError("must be one of enum values ('EXCLUDE', 'INCLUDE')")
        return value

    @field_validator('prebuilt_report')
    def prebuilt_report_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ECOMMERCE_PURCHASES_ITEM_CATEGORY_5_REPORT', 'TRAFFIC_ACQUISITION_SESSION_SOURCE_PLATFORM_REPORT', 'USER_ACQUISITION_FIRST_USER_GOOGLE_ADS_AD_GROUP_NAME_REPORT', 'ECOMMERCE_PURCHASES_ITEM_CATEGORY_REPORT', 'USER_ACQUISITION_FIRST_USER_GOOGLE_ADS_NETWORK_TYPE_REPORT', 'USER_ACQUISITION_FIRST_USER_CAMPAIGN_REPORT', 'TECH_BROWSER_REPORT', 'AUDIENCES_REPORT', 'CONVERSIONS_REPORT', 'USER_ACQUISITION_FIRST_USER_MEDIUM_REPORT', 'ECOMMERCE_PURCHASES_ITEM_ID_REPORT', 'USER_ACQUISITION_FIRST_USER_SOURCE_PLATFORM_REPORT', 'TECH_SCREEN_RESOLUTION_REPORT', 'PAGES_PATH_REPORT', 'PAGES_TITLE_AND_SCREEN_NAME_REPORT', 'DEMOGRAPHIC_CITY_REPORT', 'DEMOGRAPHIC_LANGUAGE_REPORT', 'TRAFFIC_ACQUISITION_SESSION_DEFAULT_CHANNEL_GROUPING_REPORT', 'ECOMMERCE_PURCHASES_ITEM_CATEGORY_REPORT_COMBINED', 'TECH_OPERATING_SYSTEM_REPORT', 'DEMOGRAPHIC_AGE_REPORT', 'ECOMMERCE_PURCHASES_ITEM_CATEGORY_3_REPORT', 'TECH_OS_WITH_VERSION_REPORT', 'PAGES_TITLE_AND_SCREEN_CLASS_REPORT', 'DEMOGRAPHIC_REGION_REPORT', 'ECOMMERCE_PURCHASES_ITEM_BRAND_REPORT', 'TECH_PLATFORM_DEVICE_CATEGORY_REPORT', 'USER_ACQUISITION_FIRST_USER_SOURCE_REPORT', 'TRAFFIC_ACQUISITION_SESSION_CAMPAIGN_REPORT', 'EVENTS_REPORT', 'DEMOGRAPHIC_COUNTRY_REPORT', 'TRAFFIC_ACQUISITION_SESSION_SOURCE_REPORT', 'TRAFFIC_ACQUISITION_SESSION_SOURCE_MEDIUM_REPORT', 'DEMOGRAPHIC_GENDER_REPORT', 'TECH_DEVICE_CATEGORY_REPORT', 'PUBLISHER_ADS_PAGE_PATH_REPORT', 'USER_ACQUISITION_FIRST_USER_SOURCE_MEDIUM_REPORT', 'TRAFFIC_ACQUISITION_SESSION_MEDIUM_REPORT', 'TECH_DEVICE_MODEL_REPORT', 'PUBLISHER_ADS_AD_FORMAT_REPORT', 'TECH_PLATFORM_REPORT', 'TECH_OS_VERSION_REPORT', 'TECH_APP_VERSION_REPORT', 'DEMOGRAPHIC_INTERESTS_REPORT', 'ECOMMERCE_PURCHASES_ITEM_CATEGORY_2_REPORT', 'PUBLISHER_ADS_AD_SOURCE_REPORT', 'ECOMMERCE_PURCHASES_ITEM_NAME_REPORT', 'PUBLISHER_ADS_AD_UNIT_REPORT', 'ECOMMERCE_PURCHASES_ITEM_CATEGORY_4_REPORT', 'CONTENT_GROUP_REPORT'):
            raise ValueError("must be one of enum values ('ECOMMERCE_PURCHASES_ITEM_CATEGORY_5_REPORT', 'TRAFFIC_ACQUISITION_SESSION_SOURCE_PLATFORM_REPORT', 'USER_ACQUISITION_FIRST_USER_GOOGLE_ADS_AD_GROUP_NAME_REPORT', 'ECOMMERCE_PURCHASES_ITEM_CATEGORY_REPORT', 'USER_ACQUISITION_FIRST_USER_GOOGLE_ADS_NETWORK_TYPE_REPORT', 'USER_ACQUISITION_FIRST_USER_CAMPAIGN_REPORT', 'TECH_BROWSER_REPORT', 'AUDIENCES_REPORT', 'CONVERSIONS_REPORT', 'USER_ACQUISITION_FIRST_USER_MEDIUM_REPORT', 'ECOMMERCE_PURCHASES_ITEM_ID_REPORT', 'USER_ACQUISITION_FIRST_USER_SOURCE_PLATFORM_REPORT', 'TECH_SCREEN_RESOLUTION_REPORT', 'PAGES_PATH_REPORT', 'PAGES_TITLE_AND_SCREEN_NAME_REPORT', 'DEMOGRAPHIC_CITY_REPORT', 'DEMOGRAPHIC_LANGUAGE_REPORT', 'TRAFFIC_ACQUISITION_SESSION_DEFAULT_CHANNEL_GROUPING_REPORT', 'ECOMMERCE_PURCHASES_ITEM_CATEGORY_REPORT_COMBINED', 'TECH_OPERATING_SYSTEM_REPORT', 'DEMOGRAPHIC_AGE_REPORT', 'ECOMMERCE_PURCHASES_ITEM_CATEGORY_3_REPORT', 'TECH_OS_WITH_VERSION_REPORT', 'PAGES_TITLE_AND_SCREEN_CLASS_REPORT', 'DEMOGRAPHIC_REGION_REPORT', 'ECOMMERCE_PURCHASES_ITEM_BRAND_REPORT', 'TECH_PLATFORM_DEVICE_CATEGORY_REPORT', 'USER_ACQUISITION_FIRST_USER_SOURCE_REPORT', 'TRAFFIC_ACQUISITION_SESSION_CAMPAIGN_REPORT', 'EVENTS_REPORT', 'DEMOGRAPHIC_COUNTRY_REPORT', 'TRAFFIC_ACQUISITION_SESSION_SOURCE_REPORT', 'TRAFFIC_ACQUISITION_SESSION_SOURCE_MEDIUM_REPORT', 'DEMOGRAPHIC_GENDER_REPORT', 'TECH_DEVICE_CATEGORY_REPORT', 'PUBLISHER_ADS_PAGE_PATH_REPORT', 'USER_ACQUISITION_FIRST_USER_SOURCE_MEDIUM_REPORT', 'TRAFFIC_ACQUISITION_SESSION_MEDIUM_REPORT', 'TECH_DEVICE_MODEL_REPORT', 'PUBLISHER_ADS_AD_FORMAT_REPORT', 'TECH_PLATFORM_REPORT', 'TECH_OS_VERSION_REPORT', 'TECH_APP_VERSION_REPORT', 'DEMOGRAPHIC_INTERESTS_REPORT', 'ECOMMERCE_PURCHASES_ITEM_CATEGORY_2_REPORT', 'PUBLISHER_ADS_AD_SOURCE_REPORT', 'ECOMMERCE_PURCHASES_ITEM_NAME_REPORT', 'PUBLISHER_ADS_AD_UNIT_REPORT', 'ECOMMERCE_PURCHASES_ITEM_CATEGORY_4_REPORT', 'CONTENT_GROUP_REPORT')")
        return value

    @field_validator('config_type')
    def config_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('CUSTOM', 'PREBUILT'):
            raise ValueError("must be one of enum values ('CUSTOM', 'PREBUILT')")
        return value

    @field_validator('time_aggregation_granularity')
    def time_aggregation_granularity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('YEARLY', 'WEEKLY', 'DAILY', 'MONTHLY'):
            raise ValueError("must be one of enum values ('YEARLY', 'WEEKLY', 'DAILY', 'MONTHLY')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalytics4ConfigV1ConfigReportsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalytics4ConfigV1ConfigReportsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "rollback_window": obj.get("rollback_window"),
            "filter_value": obj.get("filter_value"),
            "filter_type": obj.get("filter_type"),
            "prebuilt_report": obj.get("prebuilt_report"),
            "filter_field_name": obj.get("filter_field_name"),
            "metrics": obj.get("metrics"),
            "config_type": obj.get("config_type"),
            "time_aggregation_granularity": obj.get("time_aggregation_granularity"),
            "table": obj.get("table"),
            "dimensions": obj.get("dimensions")
        })
        return _obj


