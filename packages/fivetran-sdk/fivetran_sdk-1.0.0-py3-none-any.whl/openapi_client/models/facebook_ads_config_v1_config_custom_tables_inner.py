# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FacebookAdsConfigV1ConfigCustomTablesInner(BaseModel):
    """
    List of custom tables. Each custom table corresponds to a table within the schema to which connector will sync the data.
    """ # noqa: E501
    prebuilt_report_name: Optional[Dict[str, Any]] = Field(default=None, description="The report name to which connector will sync the data. [Possible prebuilt_report values](/docs/applications/facebook-ads-insights/api-config#prebuiltreport).")
    view_attribution_window: Optional[Dict[str, Any]] = Field(default=None, description="Time period to attribute conversions based on views. [Possible view_attribution_window values](/docs/applications/facebook-ads-insights/api-config#viewattributionwindow).")
    use_unified_attribution_setting: Optional[StrictBool] = None
    level: Optional[Dict[str, Any]] = None
    breakdowns: Optional[List[Dict[str, Any]]] = Field(default=None, description="List of breakdowns which connector will sync. [Possible breakdowns values](/docs/applications/facebook-ads-insights/api-config#breakdowns).")
    action_breakdowns: Optional[List[Dict[str, Any]]] = Field(default=None, description="List of action_breakdowns which connector will sync. [Possible action_breakdowns values](/docs/applications/facebook-ads-insights/api-config#actionbreakdowns).")
    click_attribution_window: Optional[Dict[str, Any]] = Field(default=None, description="Time period to attribute conversions based on clicks. [Possible click_attribution_window values](/docs/applications/facebook-ads-insights/api-config#clickattributionwindow).")
    aggregation: Optional[Dict[str, Any]] = Field(default=None, description="Options to select aggregation duration. [Possible aggregation values](/docs/applications/facebook-ads-insights/api-config#aggregation).")
    config_type: Optional[Dict[str, Any]] = Field(default=None, description="Option to select Prebuilt Reports or Custom Reports. [Possible config_type values](/docs/applications/facebook-ads-insights/api-config#configtype).")
    fields: Optional[List[Dict[str, Any]]] = Field(default=None, description="List of fields which connector will sync. [Possible field values](/docs/applications/facebook-ads-insights/api-config#fields).")
    table_name: Optional[StrictStr] = Field(default=None, description="The table name within the schema to which the connector will sync the data. It must be unique within the connector and must comply with [Fivetran's naming conventions](/docs/getting-started/core-concepts#namingconventions).")
    action_report_time: Optional[Dict[str, Any]] = Field(default=None, description="The report time of action stats. [Possible action_report time values](/docs/applications/facebook-ads-insights/api-config#actionreporttime).")
    __properties: ClassVar[List[str]] = ["prebuilt_report_name", "view_attribution_window", "use_unified_attribution_setting", "level", "breakdowns", "action_breakdowns", "click_attribution_window", "aggregation", "config_type", "fields", "table_name", "action_report_time"]

    @field_validator('prebuilt_report_name')
    def prebuilt_report_name_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DELIVERY_PLATFORM_AND_DEVICE', 'DEMOGRAPHICS_GENDER', 'ACTION_REACTIONS', 'ACTION_VIDEO_VIEW_TYPE', 'BASIC_ALL_LEVELS', 'ACTION_CAROUSEL_CARD', 'DEMOGRAPHICS_AGE', 'DEMOGRAPHICS_DMA_REGION', 'BASIC_CAMPAIGN', 'DEMOGRAPHICS_REGION', 'DELIVERY_PURCHASE_ROAS', 'BASIC_AD_SET', 'ACTION_PRODUCT_ID', 'DEMOGRAPHICS_AGE_AND_GENDER', 'DELIVERY_PLATFORM', 'ACTION_VIDEO_SOUND', 'DEMOGRAPHICS_COUNTRY', 'ACTION_CANVAS_COMPONENT', 'BASIC_AD', 'DELIVERY_DEVICE', 'ACTION_CONVERSION_DEVICE'):
            raise ValueError("must be one of enum values ('DELIVERY_PLATFORM_AND_DEVICE', 'DEMOGRAPHICS_GENDER', 'ACTION_REACTIONS', 'ACTION_VIDEO_VIEW_TYPE', 'BASIC_ALL_LEVELS', 'ACTION_CAROUSEL_CARD', 'DEMOGRAPHICS_AGE', 'DEMOGRAPHICS_DMA_REGION', 'BASIC_CAMPAIGN', 'DEMOGRAPHICS_REGION', 'DELIVERY_PURCHASE_ROAS', 'BASIC_AD_SET', 'ACTION_PRODUCT_ID', 'DEMOGRAPHICS_AGE_AND_GENDER', 'DELIVERY_PLATFORM', 'ACTION_VIDEO_SOUND', 'DEMOGRAPHICS_COUNTRY', 'ACTION_CANVAS_COMPONENT', 'BASIC_AD', 'DELIVERY_DEVICE', 'ACTION_CONVERSION_DEVICE')")
        return value

    @field_validator('view_attribution_window')
    def view_attribution_window_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DAY_1', 'DAY_7', 'NONE', 'DAY_28'):
            raise ValueError("must be one of enum values ('DAY_1', 'DAY_7', 'NONE', 'DAY_28')")
        return value

    @field_validator('level')
    def level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ad', 'adset', 'campaign', 'none', 'account'):
            raise ValueError("must be one of enum values ('ad', 'adset', 'campaign', 'none', 'account')")
        return value

    @field_validator('breakdowns')
    def breakdowns_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('country', 'gender', 'hourly_stats_aggregated_by_advertiser_time_zone', 'skan_conversion_id', 'link_url_asset', 'title_asset', 'call_to_action_asset', 'image_asset', 'product_id', 'app_id', 'impression_device', 'body_asset', 'frequency_value', 'place_page_id', 'video_asset', 'hourly_stats_aggregated_by_audience_time_zone', 'ad_format_asset', 'platform_position', 'dma', 'device_platform', 'placement', 'publisher_platform', 'region', 'age', 'description_asset'):
                raise ValueError("each list item must be one of ('country', 'gender', 'hourly_stats_aggregated_by_advertiser_time_zone', 'skan_conversion_id', 'link_url_asset', 'title_asset', 'call_to_action_asset', 'image_asset', 'product_id', 'app_id', 'impression_device', 'body_asset', 'frequency_value', 'place_page_id', 'video_asset', 'hourly_stats_aggregated_by_audience_time_zone', 'ad_format_asset', 'platform_position', 'dma', 'device_platform', 'placement', 'publisher_platform', 'region', 'age', 'description_asset')")
        return value

    @field_validator('action_breakdowns')
    def action_breakdowns_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('action_canvas_component_name', 'action_carousel_card_id', 'action_video_sound', 'action_link_click_destination', 'action_type', 'action_video_type', 'action_carousel_card_name', 'action_target_id', 'action_destination', 'action_device', 'action_reaction'):
                raise ValueError("each list item must be one of ('action_canvas_component_name', 'action_carousel_card_id', 'action_video_sound', 'action_link_click_destination', 'action_type', 'action_video_type', 'action_carousel_card_name', 'action_target_id', 'action_destination', 'action_device', 'action_reaction')")
        return value

    @field_validator('click_attribution_window')
    def click_attribution_window_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DAY_1', 'DAY_7', 'NONE', 'DAY_28'):
            raise ValueError("must be one of enum values ('DAY_1', 'DAY_7', 'NONE', 'DAY_28')")
        return value

    @field_validator('aggregation')
    def aggregation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Month', 'Lifetime', 'Day', 'Week'):
            raise ValueError("must be one of enum values ('Month', 'Lifetime', 'Day', 'Week')")
        return value

    @field_validator('config_type')
    def config_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Prebuilt', 'Custom'):
            raise ValueError("must be one of enum values ('Prebuilt', 'Custom')")
        return value

    @field_validator('fields')
    def fields_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('cost_per_estimated_ad_recallers', 'optimization_goal', 'video_thruplay_watched_actions', 'reach', 'click_to_app_store', 'cost_per_unique_action_type', 'total_actions', 'website_clicks', 'social_impressions', 'buying_type', 'objective', 'video_30_sec_watched_actions', 'canvas_component_avg_pct_view', 'cost_per_thruplay', 'instant_experience_outbound_clicks', 'unique_clicks', 'unique_outbound_clicks', 'total_unique_actions', 'video_p75_watched_actions', 'cost_per_unique_inline_link_click', 'canvas_avg_view_time', 'social_clicks', 'inline_link_click_ctr', 'newsfeed_avg_position', 'ctr', 'deeplink_clicks', 'video_avg_time_watched_actions', 'unique_impressions', 'labels', 'newsfeed_impressions', 'unique_link_clicks_ctr', 'video_p95_watched_actions', 'ad_id', 'full_view_reach', 'catalog_segment_value', 'cost_per_unique_outbound_click', 'inline_post_engagement', 'actions', 'video_continuous_2_sec_watched_actions', 'unique_outbound_clicks_ctr', 'conversions', 'video_10_sec_watched_actions', 'estimated_ad_recall_rate', 'attribution_setting', 'cost_per_action_type', 'outbound_clicks_ctr', 'unique_inline_link_click_ctr', 'social_reach', 'account_name', 'unique_inline_link_clicks', 'video_p100_watched_actions', 'cost_per_conversion', 'video_p50_watched_actions', 'outbound_clicks', 'app_store_clicks', 'converted_product_quantity', 'unique_social_clicks', 'ad_name', 'impressions', 'full_view_impressions', 'cost_per_10_sec_video_view', 'account_id', 'website_purchase_roas', 'instant_experience_clicks_to_open', 'adset_name', 'social_spend', 'video_play_curve_actions', 'frequency', 'action_values', 'call_to_action_clicks', 'cpc', 'campaign_id', 'cpm', 'cpp', 'conversion_rate_ranking', 'click_to_app_deeplink', 'cost_per_inline_link_click', 'date_start', 'conversion_values', 'adset_id', 'purchase_roas', 'estimated_ad_recallers', 'cost_per_unique_click', 'account_currency', 'inline_link_clicks', 'video_15_sec_watched_actions', 'website_ctr', 'converted_product_value', 'campaign_name', 'cost_per_inline_post_engagement', 'unique_actions', 'click_to_website', 'video_avg_percent_watched_actions', 'spend', 'date_stop', 'video_play_actions', 'video_p25_watched_actions', 'cost_per_outbound_click', 'canvas_avg_view_percent', 'quality_ranking', 'total_action_value', 'unique_ctr', 'cost_per_total_action', 'instant_experience_clicks_to_start', 'relevance_score', 'newsfeed_clicks', 'clicks', 'engagement_rate_ranking', 'location', 'gender_targeting', 'mobile_app_purchase_roas'):
                raise ValueError("each list item must be one of ('cost_per_estimated_ad_recallers', 'optimization_goal', 'video_thruplay_watched_actions', 'reach', 'click_to_app_store', 'cost_per_unique_action_type', 'total_actions', 'website_clicks', 'social_impressions', 'buying_type', 'objective', 'video_30_sec_watched_actions', 'canvas_component_avg_pct_view', 'cost_per_thruplay', 'instant_experience_outbound_clicks', 'unique_clicks', 'unique_outbound_clicks', 'total_unique_actions', 'video_p75_watched_actions', 'cost_per_unique_inline_link_click', 'canvas_avg_view_time', 'social_clicks', 'inline_link_click_ctr', 'newsfeed_avg_position', 'ctr', 'deeplink_clicks', 'video_avg_time_watched_actions', 'unique_impressions', 'labels', 'newsfeed_impressions', 'unique_link_clicks_ctr', 'video_p95_watched_actions', 'ad_id', 'full_view_reach', 'catalog_segment_value', 'cost_per_unique_outbound_click', 'inline_post_engagement', 'actions', 'video_continuous_2_sec_watched_actions', 'unique_outbound_clicks_ctr', 'conversions', 'video_10_sec_watched_actions', 'estimated_ad_recall_rate', 'attribution_setting', 'cost_per_action_type', 'outbound_clicks_ctr', 'unique_inline_link_click_ctr', 'social_reach', 'account_name', 'unique_inline_link_clicks', 'video_p100_watched_actions', 'cost_per_conversion', 'video_p50_watched_actions', 'outbound_clicks', 'app_store_clicks', 'converted_product_quantity', 'unique_social_clicks', 'ad_name', 'impressions', 'full_view_impressions', 'cost_per_10_sec_video_view', 'account_id', 'website_purchase_roas', 'instant_experience_clicks_to_open', 'adset_name', 'social_spend', 'video_play_curve_actions', 'frequency', 'action_values', 'call_to_action_clicks', 'cpc', 'campaign_id', 'cpm', 'cpp', 'conversion_rate_ranking', 'click_to_app_deeplink', 'cost_per_inline_link_click', 'date_start', 'conversion_values', 'adset_id', 'purchase_roas', 'estimated_ad_recallers', 'cost_per_unique_click', 'account_currency', 'inline_link_clicks', 'video_15_sec_watched_actions', 'website_ctr', 'converted_product_value', 'campaign_name', 'cost_per_inline_post_engagement', 'unique_actions', 'click_to_website', 'video_avg_percent_watched_actions', 'spend', 'date_stop', 'video_play_actions', 'video_p25_watched_actions', 'cost_per_outbound_click', 'canvas_avg_view_percent', 'quality_ranking', 'total_action_value', 'unique_ctr', 'cost_per_total_action', 'instant_experience_clicks_to_start', 'relevance_score', 'newsfeed_clicks', 'clicks', 'engagement_rate_ranking', 'location', 'gender_targeting', 'mobile_app_purchase_roas')")
        return value

    @field_validator('action_report_time')
    def action_report_time_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('impression', 'mixed', 'conversion'):
            raise ValueError("must be one of enum values ('impression', 'mixed', 'conversion')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FacebookAdsConfigV1ConfigCustomTablesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FacebookAdsConfigV1ConfigCustomTablesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "prebuilt_report_name": obj.get("prebuilt_report_name"),
            "view_attribution_window": obj.get("view_attribution_window"),
            "use_unified_attribution_setting": obj.get("use_unified_attribution_setting"),
            "level": obj.get("level"),
            "breakdowns": obj.get("breakdowns"),
            "action_breakdowns": obj.get("action_breakdowns"),
            "click_attribution_window": obj.get("click_attribution_window"),
            "aggregation": obj.get("aggregation"),
            "config_type": obj.get("config_type"),
            "fields": obj.get("fields"),
            "table_name": obj.get("table_name"),
            "action_report_time": obj.get("action_report_time")
        })
        return _obj


