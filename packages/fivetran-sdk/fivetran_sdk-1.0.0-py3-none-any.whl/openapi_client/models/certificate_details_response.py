# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class CertificateDetailsResponse(BaseModel):
    """
    CertificateDetailsResponse
    """ # noqa: E501
    name: StrictStr = Field(description="The certificate name.")
    hash: StrictStr = Field(description="Hash of the certificate.")
    type: StrictStr = Field(description="Type of the certificate.")
    sha1: StrictStr = Field(description="SHA1 of certificate.")
    sha256: StrictStr = Field(description="SHA256 of certificate.")
    validated_date: datetime = Field(description="Date when certificate has been validated and approved.")
    validated_by: StrictStr = Field(description="The unique identified for the user who has approved the certificate.")
    public_key: StrictStr = Field(description="The certificate decoded public key.")
    __properties: ClassVar[List[str]] = ["name", "hash", "type", "sha1", "sha256", "validated_date", "validated_by", "public_key"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertificateDetailsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertificateDetailsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "hash": obj.get("hash"),
            "type": obj.get("type"),
            "sha1": obj.get("sha1"),
            "sha256": obj.get("sha256"),
            "validated_date": obj.get("validated_date"),
            "validated_by": obj.get("validated_by"),
            "public_key": obj.get("public_key")
        })
        return _obj


