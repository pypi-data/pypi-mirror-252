# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AddLogRequest(BaseModel):
    """
    AddLogRequest
    """ # noqa: E501
    group_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the group within the Fivetran system")
    service: Optional[StrictStr] = Field(default=None, description="The name of the log service type within the Fivetran system. We support the following log services: `azure_monitor_log`, `cloudwatch`, `datadog_log`, `splunkLog`, `new_relic_log`, `stackdriver` (Google Cloud Logging).")
    enabled: Optional[StrictBool] = Field(default=None, description="The boolean value specifying whether the log service is enabled.")
    __properties: ClassVar[List[str]] = ["group_id", "service", "enabled"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'service'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'azure_monitor_log': 'AzureMonitorLogAddLogRequest','cloudwatch': 'CloudwatchAddLogRequest','datadog_log': 'DatadogLogAddLogRequest','new_relic_log': 'NewRelicLogAddLogRequest','splunkLog': 'SplunkLogAddLogRequest','stackdriver': 'StackdriverAddLogRequest'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[Self, Self, Self, Self, Self, Self]]:
        """Create an instance of AddLogRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[Self, Self, Self, Self, Self, Self]]:
        """Create an instance of AddLogRequest from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("AddLogRequest failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from openapi_client.models.azure_monitor_log_add_log_request import AzureMonitorLogAddLogRequest
from openapi_client.models.cloudwatch_add_log_request import CloudwatchAddLogRequest
from openapi_client.models.datadog_log_add_log_request import DatadogLogAddLogRequest
from openapi_client.models.new_relic_log_add_log_request import NewRelicLogAddLogRequest
from openapi_client.models.splunk_log_add_log_request import SplunkLogAddLogRequest
from openapi_client.models.stackdriver_add_log_request import StackdriverAddLogRequest
# TODO: Rewrite to not use raise_errors
AddLogRequest.model_rebuild(raise_errors=False)

