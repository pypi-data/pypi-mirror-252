# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.schema_config_response import SchemaConfigResponse
from typing import Optional, Set
from typing_extensions import Self

class StandardConfigResponse(BaseModel):
    """
    StandardConfigResponse
    """ # noqa: E501
    enable_new_by_default: Optional[StrictBool] = Field(default=None, description="The boolean value specifying whether to enable new schemas, tables, and columns by default")
    schemas: Optional[Dict[str, SchemaConfigResponse]] = Field(default=None, description="The set of schemas within your connector schema config that are synced into the destination")
    schema_change_handling: StrictStr = Field(description="The possible values for the schema_change_handling parameter are as follows: <br /> ALLOW_ALL - all new schemas, tables, and columns which appear in the source after the initial setup are included in syncs <br /> ALLOW_COLUMNS - all new schemas and tables which appear in the source after the initial setup are excluded from syncs, but new columns are included <br /> BLOCK_ALL - all new schemas, tables, and columns which appear in the source after the initial setup are excluded from syncs")
    __properties: ClassVar[List[str]] = ["enable_new_by_default", "schemas", "schema_change_handling"]

    @field_validator('schema_change_handling')
    def schema_change_handling_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ALLOW_ALL', 'ALLOW_COLUMNS', 'BLOCK_ALL'):
            raise ValueError("must be one of enum values ('ALLOW_ALL', 'ALLOW_COLUMNS', 'BLOCK_ALL')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StandardConfigResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in schemas (dict)
        _field_dict = {}
        if self.schemas:
            for _key in self.schemas:
                if self.schemas[_key]:
                    _field_dict[_key] = self.schemas[_key].to_dict()
            _dict['schemas'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StandardConfigResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "enable_new_by_default": obj.get("enable_new_by_default"),
            "schemas": dict(
                (_k, SchemaConfigResponse.from_dict(_v))
                for _k, _v in obj["schemas"].items()
            )
            if obj.get("schemas") is not None
            else None,
            "schema_change_handling": obj.get("schema_change_handling")
        })
        return _obj


