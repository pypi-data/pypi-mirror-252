# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.aws_lambda_config_v1_config_custom_payloads_inner import AwsLambdaConfigV1ConfigCustomPayloadsInner
from openapi_client.models.aws_lambda_config_v1_config_secrets_list_inner import AwsLambdaConfigV1ConfigSecretsListInner
from typing import Optional, Set
from typing_extensions import Self

class AwsLambdaConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    bucket: Optional[StrictStr] = Field(default=None, description="S3 Bucket")
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    sync_method: Optional[Dict[str, Any]] = Field(default=None, description="Sync Method")
    role_arn: Optional[SecretStr] = Field(default=None, description="The Role ARN required for authentication.")
    connection_type: Optional[Dict[str, Any]] = Field(default=None, description="Connection method. Default value: `Directly`.")
    custom_payloads: Optional[List[AwsLambdaConfigV1ConfigCustomPayloadsInner]] = Field(default=None, description="The list of key-value pairs that can be used to specify custom information to the function at runtime.")
    secrets_list: Optional[List[AwsLambdaConfigV1ConfigSecretsListInner]] = Field(default=None, description="List of Secrets that should be passed to the function at runtime.")
    function: Optional[StrictStr] = Field(default=None, description="The name of your AWS Lambda Function.")
    external_id: Optional[StrictStr] = Field(default=None, description="The external ID is a string that designates who can assume the role.")
    region: Optional[Dict[str, Any]] = Field(default=None, description="The AWS region code for the DynamoDB instance.")
    secrets: Optional[SecretStr] = Field(default=None, description="The secrets that should be passed to the function at runtime.")
    is_private_link_required: Optional[StrictBool] = Field(default=None, description="We use PrivateLink by default if your AWS Lambda is in the same region as Fivetran. Turning on this toggle ensures that Fivetran always connects to AWS lambda over PrivateLink. Learn more in our [PrivateLink documentation](https://fivetran.com/docs/databases/connection-options#awsprivatelink).")
    __properties: ClassVar[List[str]] = ["bucket", "schema", "sync_method", "role_arn", "connection_type", "custom_payloads", "secrets_list", "function", "external_id", "region", "secrets", "is_private_link_required"]

    @field_validator('sync_method')
    def sync_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('CLOUD_STORAGE', 'DIRECT'):
            raise ValueError("must be one of enum values ('CLOUD_STORAGE', 'DIRECT')")
        return value

    @field_validator('connection_type')
    def connection_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Directly', 'PrivateLink', 'SshTunnel', 'ProxyAgent'):
            raise ValueError("must be one of enum values ('Directly', 'PrivateLink', 'SshTunnel', 'ProxyAgent')")
        return value

    @field_validator('region')
    def region_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ap-south-2', 'ap-south-1', 'eu-south-1', 'eu-south-2', 'us-gov-east-1', 'me-central-1', 'ca-central-1', 'eu-central-1', 'us-iso-west-1', 'eu-central-2', 'us-west-1', 'us-west-2', 'af-south-1', 'eu-west-3', 'eu-north-1', 'eu-west-2', 'eu-west-1', 'ap-northeast-3', 'ap-northeast-2', 'ap-northeast-1', 'me-south-1', 'sa-east-1', 'ap-east-1', 'cn-north-1', 'us-gov-west-1', 'ap-southeast-1', 'ap-southeast-2', 'us-iso-east-1', 'ap-southeast-3', 'ap-southeast-4', 'us-east-1', 'us-east-2', 'cn-northwest-1', 'us-isob-east-1'):
            raise ValueError("must be one of enum values ('ap-south-2', 'ap-south-1', 'eu-south-1', 'eu-south-2', 'us-gov-east-1', 'me-central-1', 'ca-central-1', 'eu-central-1', 'us-iso-west-1', 'eu-central-2', 'us-west-1', 'us-west-2', 'af-south-1', 'eu-west-3', 'eu-north-1', 'eu-west-2', 'eu-west-1', 'ap-northeast-3', 'ap-northeast-2', 'ap-northeast-1', 'me-south-1', 'sa-east-1', 'ap-east-1', 'cn-north-1', 'us-gov-west-1', 'ap-southeast-1', 'ap-southeast-2', 'us-iso-east-1', 'ap-southeast-3', 'ap-southeast-4', 'us-east-1', 'us-east-2', 'cn-northwest-1', 'us-isob-east-1')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AwsLambdaConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in custom_payloads (list)
        _items = []
        if self.custom_payloads:
            for _item in self.custom_payloads:
                if _item:
                    _items.append(_item.to_dict())
            _dict['custom_payloads'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in secrets_list (list)
        _items = []
        if self.secrets_list:
            for _item in self.secrets_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['secrets_list'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AwsLambdaConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bucket": obj.get("bucket"),
            "schema": obj.get("schema"),
            "sync_method": obj.get("sync_method"),
            "role_arn": obj.get("role_arn"),
            "connection_type": obj.get("connection_type"),
            "custom_payloads": [AwsLambdaConfigV1ConfigCustomPayloadsInner.from_dict(_item) for _item in obj["custom_payloads"]] if obj.get("custom_payloads") is not None else None,
            "secrets_list": [AwsLambdaConfigV1ConfigSecretsListInner.from_dict(_item) for _item in obj["secrets_list"]] if obj.get("secrets_list") is not None else None,
            "function": obj.get("function"),
            "external_id": obj.get("external_id"),
            "region": obj.get("region"),
            "secrets": obj.get("secrets"),
            "is_private_link_required": obj.get("is_private_link_required")
        })
        return _obj


