# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OpenExchangeRatesConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    base_currency: Optional[Dict[str, Any]] = Field(default=None, description="Your Open Exchange Rates Base Currency.")
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    app_id: Optional[SecretStr] = Field(default=None, description="Your Open Exchange Rates App Id.")
    __properties: ClassVar[List[str]] = ["base_currency", "schema", "app_id"]

    @field_validator('base_currency')
    def base_currency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('FJD', 'MXN', 'STD', 'SCR', 'CDF', 'BBD', 'HNL', 'UGX', 'ZAR', 'STN', 'CUC', 'STR', 'BSD', 'SDG', 'IQD', 'CUP', 'GMD', 'TWD', 'RSD', 'MYR', 'FKP', 'XOF', 'BTC', 'UYU', 'CVE', 'OMR', 'KES', 'SEK', 'BTN', 'GNF', 'MZN', 'BTS', 'SVC', 'ARS', 'PPC', 'QAR', 'IRR', 'XPD', 'THB', 'UZS', 'XPF', 'VEF_BLKMKT', 'BDT', 'XPM', 'LYD', 'KWD', 'XPT', 'RUB', 'ISK', 'NMC', 'MKD', 'VEF_DICOM', 'DZD', 'PAB', 'SGD', 'JEP', 'KGS', 'XAF', 'XAG', 'CHF', 'HRK', 'DJF', 'DOGE', 'TZS', 'VND', 'AUD', 'KHR', 'IDR', 'KYD', 'XRP', 'Gold (troy ounce)', 'BWP', 'SHP', 'TJS', 'AED', 'RWF', 'DKK', 'BGN', 'MMK', 'NOK', 'SYP', 'LKR', 'CZK', 'XCD', 'HTG', 'BHD', 'VEF_DIPRO', 'KZT', 'SZL', 'YER', 'AFN', 'AWG', 'NPR', 'MNT', 'GBP', 'BYN', 'HUF', 'BYR', 'BIF', 'XDR', 'BZD', 'MOP', 'NAD', 'PEN', 'WST', 'TMT', 'CLF', 'GTQ', 'CLP', 'TND', 'SLL', 'DOP', 'KMF', 'EAC', 'GEL', 'MAD', 'TOP', 'FTC', 'AZN', 'PGK', 'FCT', 'CNH', 'UAH', 'ERN', 'VTC', 'MRO', 'CNY', 'MRU', 'BMD', 'PHP', 'PYG', 'JMD', 'COP', 'USD', 'GGP', 'ETB', 'SOS', 'VUV', 'LAK', 'ETH', 'LD', 'BND', 'ZMK', 'NVC', 'LRD', 'ALL', 'MTL', 'VES', 'ZMW', 'DASH', 'ILS', 'GHS', 'GYD', 'KPW', 'BOB', 'MDL', 'AMD', 'TRY', 'LBP', 'JOD', 'HKD', 'EUR', 'LSL', 'CAD', 'EEK', 'MUR', 'IMP', 'GIP', 'RON', 'NGN', 'CRC', 'PKR', 'ANG', 'LTC', 'SRD', 'SAR', 'TTD', 'MVR', 'NXT', 'INR', 'KRW', 'JPY', 'AOA', 'PLN', 'SBD', 'MWK', 'MGA', 'BAM', 'EGP', 'SSP', 'NIO', 'NZD', 'XMR', 'BRL'):
            raise ValueError("must be one of enum values ('FJD', 'MXN', 'STD', 'SCR', 'CDF', 'BBD', 'HNL', 'UGX', 'ZAR', 'STN', 'CUC', 'STR', 'BSD', 'SDG', 'IQD', 'CUP', 'GMD', 'TWD', 'RSD', 'MYR', 'FKP', 'XOF', 'BTC', 'UYU', 'CVE', 'OMR', 'KES', 'SEK', 'BTN', 'GNF', 'MZN', 'BTS', 'SVC', 'ARS', 'PPC', 'QAR', 'IRR', 'XPD', 'THB', 'UZS', 'XPF', 'VEF_BLKMKT', 'BDT', 'XPM', 'LYD', 'KWD', 'XPT', 'RUB', 'ISK', 'NMC', 'MKD', 'VEF_DICOM', 'DZD', 'PAB', 'SGD', 'JEP', 'KGS', 'XAF', 'XAG', 'CHF', 'HRK', 'DJF', 'DOGE', 'TZS', 'VND', 'AUD', 'KHR', 'IDR', 'KYD', 'XRP', 'Gold (troy ounce)', 'BWP', 'SHP', 'TJS', 'AED', 'RWF', 'DKK', 'BGN', 'MMK', 'NOK', 'SYP', 'LKR', 'CZK', 'XCD', 'HTG', 'BHD', 'VEF_DIPRO', 'KZT', 'SZL', 'YER', 'AFN', 'AWG', 'NPR', 'MNT', 'GBP', 'BYN', 'HUF', 'BYR', 'BIF', 'XDR', 'BZD', 'MOP', 'NAD', 'PEN', 'WST', 'TMT', 'CLF', 'GTQ', 'CLP', 'TND', 'SLL', 'DOP', 'KMF', 'EAC', 'GEL', 'MAD', 'TOP', 'FTC', 'AZN', 'PGK', 'FCT', 'CNH', 'UAH', 'ERN', 'VTC', 'MRO', 'CNY', 'MRU', 'BMD', 'PHP', 'PYG', 'JMD', 'COP', 'USD', 'GGP', 'ETB', 'SOS', 'VUV', 'LAK', 'ETH', 'LD', 'BND', 'ZMK', 'NVC', 'LRD', 'ALL', 'MTL', 'VES', 'ZMW', 'DASH', 'ILS', 'GHS', 'GYD', 'KPW', 'BOB', 'MDL', 'AMD', 'TRY', 'LBP', 'JOD', 'HKD', 'EUR', 'LSL', 'CAD', 'EEK', 'MUR', 'IMP', 'GIP', 'RON', 'NGN', 'CRC', 'PKR', 'ANG', 'LTC', 'SRD', 'SAR', 'TTD', 'MVR', 'NXT', 'INR', 'KRW', 'JPY', 'AOA', 'PLN', 'SBD', 'MWK', 'MGA', 'BAM', 'EGP', 'SSP', 'NIO', 'NZD', 'XMR', 'BRL')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpenExchangeRatesConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpenExchangeRatesConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "base_currency": obj.get("base_currency"),
            "schema": obj.get("schema"),
            "app_id": obj.get("app_id")
        })
        return _obj


