# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleAnalyticsConfigV1ConfigReportsInner(BaseModel):
    """
    The list of reports. Each report corresponds to a table within the schema to which connector will sync the data.
    """ # noqa: E501
    filter: Optional[StrictStr] = Field(default=None, description="String parameter restricts the data returned for your report. To use the filter parameter, specify a dimension or metric on which to filter, followed by the filter expression")
    segment_ids: Optional[List[StrictStr]] = None
    prebuilt_report: Optional[Dict[str, Any]] = Field(default=None, description="The name of the Prebuilt Report from which the connector will sync the data.")
    metrics: Optional[List[StrictStr]] = Field(default=None, description="The report metrics to include into a sync.")
    config_type: Optional[Dict[str, Any]] = Field(default=None, description="Whether to use the [Prebuilt Reports or Custom Reports](/docs/applications/google-analytics#schemainformation).")
    table: Optional[StrictStr] = Field(default=None, description="The table name within the schema to which connector will sync the data of the specific report.")
    dimensions: Optional[List[StrictStr]] = Field(default=None, description="The report dimensions to include into a sync. The `date` dimension is mandatory for all the report types.")
    segments: Optional[List[StrictStr]] = Field(default=None, description="A segment is a subset of your Analytics data that is made up of one or more non-destructive filters (filters that do not alter the underlying data). Those filters isolate subsets of users, sessions, and hits.")
    __properties: ClassVar[List[str]] = ["filter", "segment_ids", "prebuilt_report", "metrics", "config_type", "table", "dimensions", "segments"]

    @field_validator('prebuilt_report')
    def prebuilt_report_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('TRAFFIC', 'CAMPAIGN_PERFORMANCE', 'SOCIAL_MEDIA_ACQUISITIONS', 'AUDIENCE_OVERVIEW', 'ADWORDS_HOURLY_STATS', 'BROWSER_AND_OPERATING_SYSTEM_OVERVIEW', 'ADWORDS_CAMPAIGNS', 'CHANNEL_TRAFFIC', 'EVENTS_OVERVIEW', 'ADWORDS_KEYWORD'):
            raise ValueError("must be one of enum values ('TRAFFIC', 'CAMPAIGN_PERFORMANCE', 'SOCIAL_MEDIA_ACQUISITIONS', 'AUDIENCE_OVERVIEW', 'ADWORDS_HOURLY_STATS', 'BROWSER_AND_OPERATING_SYSTEM_OVERVIEW', 'ADWORDS_CAMPAIGNS', 'CHANNEL_TRAFFIC', 'EVENTS_OVERVIEW', 'ADWORDS_KEYWORD')")
        return value

    @field_validator('config_type')
    def config_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Prebuilt', 'Custom'):
            raise ValueError("must be one of enum values ('Prebuilt', 'Custom')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsConfigV1ConfigReportsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleAnalyticsConfigV1ConfigReportsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "filter": obj.get("filter"),
            "segment_ids": obj.get("segment_ids"),
            "prebuilt_report": obj.get("prebuilt_report"),
            "metrics": obj.get("metrics"),
            "config_type": obj.get("config_type"),
            "table": obj.get("table"),
            "dimensions": obj.get("dimensions"),
            "segments": obj.get("segments")
        })
        return _obj


