# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class YahooDspConfigV1ConfigReportConfigsInner(BaseModel):
    """
    Specify the reports you want to sync. This is optional.
    """ # noqa: E501
    prebuilt_report_type: Optional[Dict[str, Any]] = Field(default=None, description="Specific report type to sync. Must be populated if `config_type` is set to `PREBUILT`.")
    use_advertiser_timezone: Optional[StrictBool] = Field(default=None, description="Use advertiser timezone to request report data.")
    currency: Optional[Dict[str, Any]] = Field(default=None, description="[Currency](https://developer.yahooinc.com/dsp/api/docs/reporting/payloadspec.html) used in a report. Default value: `USD`.")
    metrics: Optional[List[Dict[str, Any]]] = Field(default=None, description="[Metrics](https://developer.yahooinc.com/dsp/api/docs/reporting/metrics.html) used in a report. Must be populated if `config_type` is set to `CUSTOM`.")
    report_name: Optional[StrictStr] = Field(default=None, description="Table name in destination.")
    time_zone: Optional[Dict[str, Any]] = Field(default=None, description="Specify the time zone to be used to request report data")
    config_type: Optional[Dict[str, Any]] = Field(default=None, description="Set the value to `PREBUILT` if it's one of the preconfigured reports (see the `prebuilt_report_type` option). Otherwise, set to `CUSTOM`.")
    interval_type: Optional[Dict[str, Any]] = Field(default=None, description="The [granularity](https://developer.yahooinc.com/dsp/api/docs/reporting/range-examples.html#interval-type-id) of data in a report. Default value: `DAY`.")
    dimensions: Optional[List[Dict[str, Any]]] = Field(default=None, description="[Dimensions](https://developer.yahooinc.com/dsp/api/docs/reporting/dimensions.html) used in a report. Must be populated if `config_type` is set to `CUSTOM`.")
    __properties: ClassVar[List[str]] = ["prebuilt_report_type", "use_advertiser_timezone", "currency", "metrics", "report_name", "time_zone", "config_type", "interval_type", "dimensions"]

    @field_validator('prebuilt_report_type')
    def prebuilt_report_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('REPORT_CONVERSIONS', 'REPORT_SITE_DOMAIN_PERFORMANCE', 'REPORT_BASIC', 'REPORT_AUDIENCE_SEGMENT', 'REPORT_CAMPAIGN_PERFORMANCE', 'REPORT_AD_PERFORMANCE', 'REPORT_LINE_PERFORMANCE', 'REPORT_DYNAMIC_PRODUCT_ADS'):
            raise ValueError("must be one of enum values ('REPORT_CONVERSIONS', 'REPORT_SITE_DOMAIN_PERFORMANCE', 'REPORT_BASIC', 'REPORT_AUDIENCE_SEGMENT', 'REPORT_CAMPAIGN_PERFORMANCE', 'REPORT_AD_PERFORMANCE', 'REPORT_LINE_PERFORMANCE', 'REPORT_DYNAMIC_PRODUCT_ADS')")
        return value

    @field_validator('currency')
    def currency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SEAT', 'USD', 'ADVERTISER', 'CAMPAIGN'):
            raise ValueError("must be one of enum values ('SEAT', 'USD', 'ADVERTISER', 'CAMPAIGN')")
        return value

    @field_validator('metrics')
    def metrics_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('CTR', 'AD_SERVING_COST', 'IMPRESSION_DISTRIBUTION_NONMEASURABLE', 'BID_CPM_ADVERTISER_CURRENCY', 'SEAT_DATA_FEE', 'CLICK_THROUGH_CPA', 'AVAILABLE_BID_REQUESTS', 'COMPLETION_RATE_75', 'ROAS', 'YAHOO_NON_MEASURABLE_IMPRESSIONS', 'BID_PRICE_WITHOUT_MULTIPLIER_ADVERTISER_CURRENCY', 'VIEW_THROUGH_CONVERSION_RATE', 'COMPLETION_RATE_100', 'ADVERTISER_ECPM', 'YAHOO_VIEWABLE_IMPRESSIONS', 'VIEW_THROUGH_CONVERSION', 'NETWORK_ECPM', 'NETWORK_PROFIT_PERCENTAGE', 'VERY_FIRST_CONVERSION', 'AUDIENCE_IMPRESSIONS', 'MOAT_MEASURABLE_IMPRESSIONS', 'FILTERED_COMPANION_IMPRESSIONS', 'VERY_FIRST_CLICK_THROUGH_CONVERSION_VALUE', 'SEAT_MANAGEMENT_FEE', 'VCPM', 'MOAT_AVOC', 'ORDER_MANAGEMENT_FEE', 'DROP_RATE_AT_75', 'DYNAMIC_CONVERSION_VALUE', 'COMPLETIONS_75', 'ADVERTISER_SPENDING', 'CLICKS', 'UNIQUE_CLICK_THROUGH_CONVERTERS', 'CLICK_THROUGH_CONVERSION_VALUE', 'START_VIEWS', 'BID_PRICE_WITHOUT_MULTIPLIER_ORDER_CURRENCY', 'IMPRESSION_DISTRIBUTION_VIEWABLE', 'MOAT_AVFH', 'MAIL_AD_SAVES_RATE', 'YAHOO_MEASURABLE_IMPRESSIONS', 'AVERAGE_WIN_RATE', 'IMPRESSIONS', 'IMPRESSION_DISTRIBUTION_NONVIEWABLE', 'CONVERSION_VALUE', 'SEAT_TECH_FEE', 'MAIL_AD_OPENS', 'FILTERED_IMPRESSIONS', 'MAIL_AD_FORWARDS', 'TOTAL_VENDOR_FEE', 'OTHER_COST', 'MAIL_AD_FORM_SUBMITS', 'CPA', 'VIEWABIILITY_COST', 'CPC', 'MOAT_VIEWABLE_IMPRESSIONS', 'CNVR', 'MOAT_AVOC_RATE', 'ESTIMATED_NUMBER_OF_STORE_VISITS', 'YAHOO_VIEWABLE_RATE', 'TOTAL_VARIABLE_COST', 'NETWORK_PROFIT', 'BID_CPM_SEAT_CURRENCY', 'YAHOO_DATA_FEES', 'COMPLETIONS_50', 'DROP_RATE_AT_50', 'UNIQUE_CONVERTERS', 'COMPANION_CLICKS', 'UNIQUE_VIEW_THROUGH_CONVERTERS', 'COMPLETIONS_100', 'CLICK_THROUGH_CONVERSION', 'ESTIMATED_UNIQUE_STORE_VISITORS', 'MOAT_MEASURABILITY_RATE', 'CONVERSION', 'AVERAGE_FREQUENCY_PER_HOUSEHOLD', 'THIRD_PARTY_DATA_FEES', 'COMPLETION_RATE_25', 'ESTIMATED_STORE_VISIT_THROUGH_RATE_VTR', 'MAIL_AD_CLICK_OUTS_RATE', 'YAHOO_SEGMENT_FEE', 'THIRD_PARTY_SEGMENT_FEE', 'VIEW_THROUGH_CONVERSION_VALUE', 'VERY_FIRST_VIEW_THROUGH_CONVERSION', 'BID_CPM_ORDER_CURRENCY', 'YAHOO_MEASURABLE_RATE', 'BID_PRICE_WITHOUT_MULTIPLIER', 'VERY_FIRST_CLICK_THROUGH_CONVERSION', 'CPCV', 'BRAND_SAFETY_COST', 'UNIQUE_VIEWERS', 'COMPLETION_RATE_50', 'SKIPPED_ADS', 'ESTIMATED_COST_PER_STORE_VISIT_CPSV', 'BID_CPM', 'MAIL_AD_CLICK_OUTS', 'PUBLISHER_EARNINGS', 'AVERAGE_FREQUENCY', 'MULTIPLIED_ECPM', 'DROP_RATE_AT_25', 'MAIL_AD_FORWARD_RATE', 'NON_VIEWABLE_IMPRESSIONS', 'AVERAGE_IMPRESSION_MULTIPLIER', 'PUBLISHER_EARNINGS_PERCENTAGE', 'MAIL_AD_SUBMIT_RATE', 'FILTERED_COMPANION_CLICKS', 'AD_VERIFICATION_COST', 'MOAT_IMPRESSIONS_ANALYZED', 'COMPLETIONS_25', 'CROSS_DEVICE_CONVERSIONS', 'AUDIENCE_MEASUREMENT_COST', 'BID_RESPONSES', 'VIEW_THROUGH_CPA', 'COMPANION_IMPRESSIONS', 'ESTIMATED_BILLABLE_AMOUNT', 'MAIL_AD_SAVES', 'VERY_FIRST_VIEW_THROUGH_CONVERSION_VALUE', 'BID_PRICE_WITHOUT_MULTIPLIER_SEAT_CURRENCY', 'DROP_RATE_AT_0', 'AVERAGE_PEOPLE_FREQUENCY', 'INVENTORY_ECPM', 'CLICK_THROUGH_CONVERSION_RATE', 'MOAT_VIEWABLE_RATE', 'COST_PER_VALID_VIDEO_VIEW_CPV', 'FILTERED_CLICKS', 'QUALIFIED_BID_REQUESTS'):
                raise ValueError("each list item must be one of ('CTR', 'AD_SERVING_COST', 'IMPRESSION_DISTRIBUTION_NONMEASURABLE', 'BID_CPM_ADVERTISER_CURRENCY', 'SEAT_DATA_FEE', 'CLICK_THROUGH_CPA', 'AVAILABLE_BID_REQUESTS', 'COMPLETION_RATE_75', 'ROAS', 'YAHOO_NON_MEASURABLE_IMPRESSIONS', 'BID_PRICE_WITHOUT_MULTIPLIER_ADVERTISER_CURRENCY', 'VIEW_THROUGH_CONVERSION_RATE', 'COMPLETION_RATE_100', 'ADVERTISER_ECPM', 'YAHOO_VIEWABLE_IMPRESSIONS', 'VIEW_THROUGH_CONVERSION', 'NETWORK_ECPM', 'NETWORK_PROFIT_PERCENTAGE', 'VERY_FIRST_CONVERSION', 'AUDIENCE_IMPRESSIONS', 'MOAT_MEASURABLE_IMPRESSIONS', 'FILTERED_COMPANION_IMPRESSIONS', 'VERY_FIRST_CLICK_THROUGH_CONVERSION_VALUE', 'SEAT_MANAGEMENT_FEE', 'VCPM', 'MOAT_AVOC', 'ORDER_MANAGEMENT_FEE', 'DROP_RATE_AT_75', 'DYNAMIC_CONVERSION_VALUE', 'COMPLETIONS_75', 'ADVERTISER_SPENDING', 'CLICKS', 'UNIQUE_CLICK_THROUGH_CONVERTERS', 'CLICK_THROUGH_CONVERSION_VALUE', 'START_VIEWS', 'BID_PRICE_WITHOUT_MULTIPLIER_ORDER_CURRENCY', 'IMPRESSION_DISTRIBUTION_VIEWABLE', 'MOAT_AVFH', 'MAIL_AD_SAVES_RATE', 'YAHOO_MEASURABLE_IMPRESSIONS', 'AVERAGE_WIN_RATE', 'IMPRESSIONS', 'IMPRESSION_DISTRIBUTION_NONVIEWABLE', 'CONVERSION_VALUE', 'SEAT_TECH_FEE', 'MAIL_AD_OPENS', 'FILTERED_IMPRESSIONS', 'MAIL_AD_FORWARDS', 'TOTAL_VENDOR_FEE', 'OTHER_COST', 'MAIL_AD_FORM_SUBMITS', 'CPA', 'VIEWABIILITY_COST', 'CPC', 'MOAT_VIEWABLE_IMPRESSIONS', 'CNVR', 'MOAT_AVOC_RATE', 'ESTIMATED_NUMBER_OF_STORE_VISITS', 'YAHOO_VIEWABLE_RATE', 'TOTAL_VARIABLE_COST', 'NETWORK_PROFIT', 'BID_CPM_SEAT_CURRENCY', 'YAHOO_DATA_FEES', 'COMPLETIONS_50', 'DROP_RATE_AT_50', 'UNIQUE_CONVERTERS', 'COMPANION_CLICKS', 'UNIQUE_VIEW_THROUGH_CONVERTERS', 'COMPLETIONS_100', 'CLICK_THROUGH_CONVERSION', 'ESTIMATED_UNIQUE_STORE_VISITORS', 'MOAT_MEASURABILITY_RATE', 'CONVERSION', 'AVERAGE_FREQUENCY_PER_HOUSEHOLD', 'THIRD_PARTY_DATA_FEES', 'COMPLETION_RATE_25', 'ESTIMATED_STORE_VISIT_THROUGH_RATE_VTR', 'MAIL_AD_CLICK_OUTS_RATE', 'YAHOO_SEGMENT_FEE', 'THIRD_PARTY_SEGMENT_FEE', 'VIEW_THROUGH_CONVERSION_VALUE', 'VERY_FIRST_VIEW_THROUGH_CONVERSION', 'BID_CPM_ORDER_CURRENCY', 'YAHOO_MEASURABLE_RATE', 'BID_PRICE_WITHOUT_MULTIPLIER', 'VERY_FIRST_CLICK_THROUGH_CONVERSION', 'CPCV', 'BRAND_SAFETY_COST', 'UNIQUE_VIEWERS', 'COMPLETION_RATE_50', 'SKIPPED_ADS', 'ESTIMATED_COST_PER_STORE_VISIT_CPSV', 'BID_CPM', 'MAIL_AD_CLICK_OUTS', 'PUBLISHER_EARNINGS', 'AVERAGE_FREQUENCY', 'MULTIPLIED_ECPM', 'DROP_RATE_AT_25', 'MAIL_AD_FORWARD_RATE', 'NON_VIEWABLE_IMPRESSIONS', 'AVERAGE_IMPRESSION_MULTIPLIER', 'PUBLISHER_EARNINGS_PERCENTAGE', 'MAIL_AD_SUBMIT_RATE', 'FILTERED_COMPANION_CLICKS', 'AD_VERIFICATION_COST', 'MOAT_IMPRESSIONS_ANALYZED', 'COMPLETIONS_25', 'CROSS_DEVICE_CONVERSIONS', 'AUDIENCE_MEASUREMENT_COST', 'BID_RESPONSES', 'VIEW_THROUGH_CPA', 'COMPANION_IMPRESSIONS', 'ESTIMATED_BILLABLE_AMOUNT', 'MAIL_AD_SAVES', 'VERY_FIRST_VIEW_THROUGH_CONVERSION_VALUE', 'BID_PRICE_WITHOUT_MULTIPLIER_SEAT_CURRENCY', 'DROP_RATE_AT_0', 'AVERAGE_PEOPLE_FREQUENCY', 'INVENTORY_ECPM', 'CLICK_THROUGH_CONVERSION_RATE', 'MOAT_VIEWABLE_RATE', 'COST_PER_VALID_VIDEO_VIEW_CPV', 'FILTERED_CLICKS', 'QUALIFIED_BID_REQUESTS')")
        return value

    @field_validator('time_zone')
    def time_zone_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ASIA_JAKARTA', 'AMERICA_NEW_YORK', 'ASIA_DUBAI', 'ASIA_KARACHI', 'AMERICA_HALIFAX', 'ASIA_JERUSALEM', 'AMERICA_MEXICO_CITY', 'EUROPE_PARIS', 'PACIFIC_AUCKLAND', 'AMERICA_SAO_PAULO', 'ASIA_SHANGHAI', 'AMERICA_LIMA', 'ETC_GMT', 'ASIA_DHAKA', 'AMERICA_ARGENTINA_BUENOS_AIRES', 'AMERICA_EL_SALVADOR', 'AMERICA_DENVER', 'AMERICA_SANTIAGO', 'ASIA_TOKYO', 'AUSTRALIA_PERTH', 'AMERICA_LOS_ANGELES', 'AUSTRALIA_SYDNEY', 'AMERICA_CHICAGO', 'EUROPE_LONDON', 'AMERICA_BOGOTA', 'AMERICA_PUERTO_RICO'):
            raise ValueError("must be one of enum values ('ASIA_JAKARTA', 'AMERICA_NEW_YORK', 'ASIA_DUBAI', 'ASIA_KARACHI', 'AMERICA_HALIFAX', 'ASIA_JERUSALEM', 'AMERICA_MEXICO_CITY', 'EUROPE_PARIS', 'PACIFIC_AUCKLAND', 'AMERICA_SAO_PAULO', 'ASIA_SHANGHAI', 'AMERICA_LIMA', 'ETC_GMT', 'ASIA_DHAKA', 'AMERICA_ARGENTINA_BUENOS_AIRES', 'AMERICA_EL_SALVADOR', 'AMERICA_DENVER', 'AMERICA_SANTIAGO', 'ASIA_TOKYO', 'AUSTRALIA_PERTH', 'AMERICA_LOS_ANGELES', 'AUSTRALIA_SYDNEY', 'AMERICA_CHICAGO', 'EUROPE_LONDON', 'AMERICA_BOGOTA', 'AMERICA_PUERTO_RICO')")
        return value

    @field_validator('config_type')
    def config_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('CUSTOM', 'PREBUILT'):
            raise ValueError("must be one of enum values ('CUSTOM', 'PREBUILT')")
        return value

    @field_validator('interval_type')
    def interval_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('MONTH', 'HOUR', 'CUMULATIVE', 'WEEK', 'DAY'):
            raise ValueError("must be one of enum values ('MONTH', 'HOUR', 'CUMULATIVE', 'WEEK', 'DAY')")
        return value

    @field_validator('dimensions')
    def dimensions_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('CONNECTION_TYPE', 'PACKAGE_END_DATE', 'PACKAGE_BUDGET_DISTRIBUTOR', 'LINE_DAILY_BUDGET_SCHEDULE', 'APP_NAME', 'CONTENT_CHANNEL', 'LINE_SCHEDULE_NAME', 'CAMPAIGN_DAILY_BUDGET_SCHEDULE', 'DYNAMIC_CREATIVE_VARIATION', 'PACKAGE_SCHEDULE_START_DATE', 'LINE_BILLING_METHOD', 'NATIVE_TYPE', 'DAYS_TO_CONVERSION', 'GOAL_TYPE', 'PACKAGE_TOTAL_BUDGET', 'CHANNEL_TYPE', 'PACKAGE_SCHEDULE_NAME', 'CAMPAIGN_SCHEDULE_NAME', 'ADVERTISER', 'FREQUENCY_BUCKET_30D', 'AD', 'CONNECTED_TV_MODEL', 'CAMPAIGN_END_DATE', 'REGION', 'SUBDOMAIN', 'LINE_END_DATE', 'DESKTOP_OS', 'LINE_BUDGET_PACING', 'DOMAIN', 'CAMPAIGN_TOTAL_BUDGET', 'LAYOUT', 'LINE_DAILY_BUDGET', 'LINE_SCHEDULE_END_DATE', 'BROWSER_TYPE', 'INVENTORY_AUCTION_TYPE', 'DEAL_TYPE', 'ADVERTISER_SUB_CATEGORY', 'BUCKETED_AGE', 'ADVERTISER_CATEGORY_ID', 'PACKAGE_DAILY_BUDGET_SCHEDULE', 'OTHER_COST_NAME', 'POSTAL_CODE', 'CONTENT_SHOW', 'SITE_GROUP_NAME', 'LINE_START_DATE', 'CAMPAIGN', 'CONTENT_GENRE', 'CAMPAIGN_START_DATE', 'CREATIVE_CUSTOM_ID', 'ISP', 'LINE_TYPE', 'CITY', 'CREATIVE_FORMAT', 'PACKAGE_DAILY_BUDGET', 'VIDEO_AD_PLACEMENT', 'CAMPAIGN_DAILY_BUDGET', 'LINE_TOTAL_BUDGET', 'PUBLISHER', 'CAMPAIGN_CURRENT_SCHEDULE_TOTAL_BUDGET', 'AUDIENCE_MEASUREMENT_COST_NAME', 'CREATIVE', 'PIXEL_PARAMETER', 'PACKAGE_CURRENT_SCHEDULE_TOTAL_BUDGET', 'CONTENT_TITLE', 'SEAT_ID', 'SITE_NAME', 'LINE_FLIGHT', 'INVENTORY_TYPE', 'COUNTRY', 'PACKAGE', 'ADVERTISER_GROUP', 'AD_SERVING_COST_NAME', 'DEMO_VENDOR', 'CAMPAIGN_SCHEDULE_END_DATE', 'MARKET_AREA', 'LINE_PACING_ACCELERATION', 'DEVICE_TYPE', 'MOBILE_MAKE', 'FREQUENCY_BUCKET_7D', 'DEVICE_CATEGORY', 'VIDEO_CREATIVE_DURATION', 'CONNECTED_TV_DEVICE', 'DYNAMIC_CREATIVE_SET', 'DOT_RULE', 'CONNECTED_TV_MAKE', 'PACKAGE_BUDGET_SCHEDULE', 'PACKAGE_SCHEDULE_END_DATE', 'FREQUENCY_BUCKET_1D', 'WEATHER_CONDITION', 'LINE', 'EXCHANGE_DEAL_ID', 'GENDER', 'VIDEO_CONTENT_LENGTH', 'AGE', 'LINE_CURRENT_SCHEDULE_TOTAL_BUDGET', 'CONTENT_NETWORK', 'SUPPLY_GROUP', 'VIDEO_PLAYER_SIZE', 'TARGET_AUDIENCE_ID_GROUP_B', 'TARGET_AUDIENCE_ID_GROUP_A', 'MOBILE_OS', 'PIXEL', 'LINE_SCHEDULE_START_DATE', 'AD_POSITION', 'BID_REQUEST_AD_SIZE', 'ADS_TXT_DECLARATION', 'MOBILE_CARRIER', 'MOBILE_MODEL', 'PARENT_LINE'):
                raise ValueError("each list item must be one of ('CONNECTION_TYPE', 'PACKAGE_END_DATE', 'PACKAGE_BUDGET_DISTRIBUTOR', 'LINE_DAILY_BUDGET_SCHEDULE', 'APP_NAME', 'CONTENT_CHANNEL', 'LINE_SCHEDULE_NAME', 'CAMPAIGN_DAILY_BUDGET_SCHEDULE', 'DYNAMIC_CREATIVE_VARIATION', 'PACKAGE_SCHEDULE_START_DATE', 'LINE_BILLING_METHOD', 'NATIVE_TYPE', 'DAYS_TO_CONVERSION', 'GOAL_TYPE', 'PACKAGE_TOTAL_BUDGET', 'CHANNEL_TYPE', 'PACKAGE_SCHEDULE_NAME', 'CAMPAIGN_SCHEDULE_NAME', 'ADVERTISER', 'FREQUENCY_BUCKET_30D', 'AD', 'CONNECTED_TV_MODEL', 'CAMPAIGN_END_DATE', 'REGION', 'SUBDOMAIN', 'LINE_END_DATE', 'DESKTOP_OS', 'LINE_BUDGET_PACING', 'DOMAIN', 'CAMPAIGN_TOTAL_BUDGET', 'LAYOUT', 'LINE_DAILY_BUDGET', 'LINE_SCHEDULE_END_DATE', 'BROWSER_TYPE', 'INVENTORY_AUCTION_TYPE', 'DEAL_TYPE', 'ADVERTISER_SUB_CATEGORY', 'BUCKETED_AGE', 'ADVERTISER_CATEGORY_ID', 'PACKAGE_DAILY_BUDGET_SCHEDULE', 'OTHER_COST_NAME', 'POSTAL_CODE', 'CONTENT_SHOW', 'SITE_GROUP_NAME', 'LINE_START_DATE', 'CAMPAIGN', 'CONTENT_GENRE', 'CAMPAIGN_START_DATE', 'CREATIVE_CUSTOM_ID', 'ISP', 'LINE_TYPE', 'CITY', 'CREATIVE_FORMAT', 'PACKAGE_DAILY_BUDGET', 'VIDEO_AD_PLACEMENT', 'CAMPAIGN_DAILY_BUDGET', 'LINE_TOTAL_BUDGET', 'PUBLISHER', 'CAMPAIGN_CURRENT_SCHEDULE_TOTAL_BUDGET', 'AUDIENCE_MEASUREMENT_COST_NAME', 'CREATIVE', 'PIXEL_PARAMETER', 'PACKAGE_CURRENT_SCHEDULE_TOTAL_BUDGET', 'CONTENT_TITLE', 'SEAT_ID', 'SITE_NAME', 'LINE_FLIGHT', 'INVENTORY_TYPE', 'COUNTRY', 'PACKAGE', 'ADVERTISER_GROUP', 'AD_SERVING_COST_NAME', 'DEMO_VENDOR', 'CAMPAIGN_SCHEDULE_END_DATE', 'MARKET_AREA', 'LINE_PACING_ACCELERATION', 'DEVICE_TYPE', 'MOBILE_MAKE', 'FREQUENCY_BUCKET_7D', 'DEVICE_CATEGORY', 'VIDEO_CREATIVE_DURATION', 'CONNECTED_TV_DEVICE', 'DYNAMIC_CREATIVE_SET', 'DOT_RULE', 'CONNECTED_TV_MAKE', 'PACKAGE_BUDGET_SCHEDULE', 'PACKAGE_SCHEDULE_END_DATE', 'FREQUENCY_BUCKET_1D', 'WEATHER_CONDITION', 'LINE', 'EXCHANGE_DEAL_ID', 'GENDER', 'VIDEO_CONTENT_LENGTH', 'AGE', 'LINE_CURRENT_SCHEDULE_TOTAL_BUDGET', 'CONTENT_NETWORK', 'SUPPLY_GROUP', 'VIDEO_PLAYER_SIZE', 'TARGET_AUDIENCE_ID_GROUP_B', 'TARGET_AUDIENCE_ID_GROUP_A', 'MOBILE_OS', 'PIXEL', 'LINE_SCHEDULE_START_DATE', 'AD_POSITION', 'BID_REQUEST_AD_SIZE', 'ADS_TXT_DECLARATION', 'MOBILE_CARRIER', 'MOBILE_MODEL', 'PARENT_LINE')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of YahooDspConfigV1ConfigReportConfigsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of YahooDspConfigV1ConfigReportConfigsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "prebuilt_report_type": obj.get("prebuilt_report_type"),
            "use_advertiser_timezone": obj.get("use_advertiser_timezone"),
            "currency": obj.get("currency"),
            "metrics": obj.get("metrics"),
            "report_name": obj.get("report_name"),
            "time_zone": obj.get("time_zone"),
            "config_type": obj.get("config_type"),
            "interval_type": obj.get("interval_type"),
            "dimensions": obj.get("dimensions")
        })
        return _obj


