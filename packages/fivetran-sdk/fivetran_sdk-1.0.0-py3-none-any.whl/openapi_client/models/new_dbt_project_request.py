# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class NewDbtProjectRequest(BaseModel):
    """
    NewDbtProjectRequest
    """ # noqa: E501
    threads: Optional[StrictInt] = Field(default=None, description="The number of threads dbt will use.")
    type: Optional[StrictStr] = Field(default=None, description="Project type. Now only `GIT` project type is supported. Default value is `GIT`.")
    folder_path: Optional[StrictStr] = Field(default=None, description="(Deprecated) Folder in Git repo.")
    target_name: Optional[StrictStr] = Field(default=None, description="Target name to set or override the value from the deployment.yaml.")
    environment_vars: Optional[List[StrictStr]] = Field(default=None, description="List of environment variables defined as key-value pairs in the raw string format using `=` as a separator. The variable name should have the `DBT_` prefix and can contain A-Z, 0-9, dash, underscore, or dot characters.  Example: `\"DBT_VARIABLE=variable_value\"`")
    git_remote_url: Optional[StrictStr] = Field(default=None, description="(Deprecated) Git remote url.")
    default_schema: StrictStr = Field(description="Default schema in destination.")
    group_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the Group within the Fivetran system.")
    dbt_version: Optional[StrictStr] = Field(default=None, description="The version of dbt that should run the project.")
    git_branch: StrictStr = Field(description="(Deprecated) Git branch.")
    __properties: ClassVar[List[str]] = ["threads", "type", "folder_path", "target_name", "environment_vars", "git_remote_url", "default_schema", "group_id", "dbt_version", "git_branch"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('GIT'):
            raise ValueError("must be one of enum values ('GIT')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'GIT': 'GITNewDbtProjectRequest'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[Self]]:
        """Create an instance of NewDbtProjectRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[Self]]:
        """Create an instance of NewDbtProjectRequest from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type:
            klass = globals()[object_type]
            return klass.from_dict(obj)
        else:
            raise ValueError("NewDbtProjectRequest failed to lookup discriminator value from " +
                             json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                             ", mapping: " + json.dumps(cls.__discriminator_value_class_map))

from openapi_client.models.git_new_dbt_project_request import GITNewDbtProjectRequest
# TODO: Rewrite to not use raise_errors
NewDbtProjectRequest.model_rebuild(raise_errors=False)

