# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.connect_card_config import ConnectCardConfig
from openapi_client.models.connect_card_response import ConnectCardResponse
from openapi_client.models.connector_response_v1 import ConnectorResponseV1
from openapi_client.models.connector_status_response import ConnectorStatusResponse
from openapi_client.models.setup_test_result_response import SetupTestResultResponse
from openapi_client.models.vwo_config_v1_config import VwoConfigV1Config
from typing import Optional, Set
from typing_extensions import Self

class VwoConnectorResponseV1(ConnectorResponseV1):
    """
    VwoConnectorResponseV1
    """ # noqa: E501
    config: Optional[VwoConfigV1Config] = None
    __properties: ClassVar[List[str]] = ["id", "service", "schema", "paused", "status", "daily_sync_time", "succeeded_at", "connect_card", "sync_frequency", "pause_after_trial", "data_delay_threshold", "group_id", "connected_by", "setup_tests", "source_sync_details", "data_delay_sensitivity", "service_version", "created_at", "failed_at", "schedule_type", "connect_card_config", "config"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VwoConnectorResponseV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of status
        if self.status:
            _dict['status'] = self.status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of connect_card
        if self.connect_card:
            _dict['connect_card'] = self.connect_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in setup_tests (list)
        _items = []
        if self.setup_tests:
            for _item in self.setup_tests:
                if _item:
                    _items.append(_item.to_dict())
            _dict['setup_tests'] = _items
        # override the default output from pydantic by calling `to_dict()` of connect_card_config
        if self.connect_card_config:
            _dict['connect_card_config'] = self.connect_card_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VwoConnectorResponseV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "service": obj.get("service"),
            "schema": obj.get("schema"),
            "paused": obj.get("paused"),
            "status": ConnectorStatusResponse.from_dict(obj["status"]) if obj.get("status") is not None else None,
            "daily_sync_time": obj.get("daily_sync_time"),
            "succeeded_at": obj.get("succeeded_at"),
            "connect_card": ConnectCardResponse.from_dict(obj["connect_card"]) if obj.get("connect_card") is not None else None,
            "sync_frequency": obj.get("sync_frequency"),
            "pause_after_trial": obj.get("pause_after_trial"),
            "data_delay_threshold": obj.get("data_delay_threshold"),
            "group_id": obj.get("group_id"),
            "connected_by": obj.get("connected_by"),
            "setup_tests": [SetupTestResultResponse.from_dict(_item) for _item in obj["setup_tests"]] if obj.get("setup_tests") is not None else None,
            "source_sync_details": obj.get("source_sync_details"),
            "data_delay_sensitivity": obj.get("data_delay_sensitivity"),
            "service_version": obj.get("service_version"),
            "created_at": obj.get("created_at"),
            "failed_at": obj.get("failed_at"),
            "schedule_type": obj.get("schedule_type"),
            "connect_card_config": ConnectCardConfig.from_dict(obj["connect_card_config"]) if obj.get("connect_card_config") is not None else None,
            "config": VwoConfigV1Config.from_dict(obj["config"]) if obj.get("config") is not None else None
        })
        return _obj


