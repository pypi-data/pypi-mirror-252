# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.column_config_response import ColumnConfigResponse
from openapi_client.models.table_enabled_patch_settings import TableEnabledPatchSettings
from typing import Optional, Set
from typing_extensions import Self

class TableConfigResponse(BaseModel):
    """
    TableConfigResponse
    """ # noqa: E501
    sync_mode: Optional[StrictStr] = Field(default=None, description="This field appears in the response if the connector supports switching sync modes for tables")
    name_in_destination: StrictStr = Field(description="The schema name within your destination in accordance with Fivetran conventional rules")
    enabled: StrictBool = Field(description="The boolean value specifying whether the sync for the table into the destination is enabled.")
    columns: Optional[Dict[str, ColumnConfigResponse]] = Field(default=None, description="The set of columns within your table schema config that are synced into the destination")
    enabled_patch_settings: Optional[TableEnabledPatchSettings] = None
    __properties: ClassVar[List[str]] = ["sync_mode", "name_in_destination", "enabled", "columns", "enabled_patch_settings"]

    @field_validator('sync_mode')
    def sync_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SOFT_DELETE', 'HISTORY', 'LIVE'):
            raise ValueError("must be one of enum values ('SOFT_DELETE', 'HISTORY', 'LIVE')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TableConfigResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in columns (dict)
        _field_dict = {}
        if self.columns:
            for _key in self.columns:
                if self.columns[_key]:
                    _field_dict[_key] = self.columns[_key].to_dict()
            _dict['columns'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of enabled_patch_settings
        if self.enabled_patch_settings:
            _dict['enabled_patch_settings'] = self.enabled_patch_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TableConfigResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sync_mode": obj.get("sync_mode"),
            "name_in_destination": obj.get("name_in_destination"),
            "enabled": obj.get("enabled"),
            "columns": dict(
                (_k, ColumnConfigResponse.from_dict(_v))
                for _k, _v in obj["columns"].items()
            )
            if obj.get("columns") is not None
            else None,
            "enabled_patch_settings": TableEnabledPatchSettings.from_dict(obj["enabled_patch_settings"]) if obj.get("enabled_patch_settings") is not None else None
        })
        return _obj


