# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.column_enabled_patch_settings import ColumnEnabledPatchSettings
from typing import Optional, Set
from typing_extensions import Self

class ColumnConfigResponse(BaseModel):
    """
    ColumnConfigResponse
    """ # noqa: E501
    name_in_destination: StrictStr = Field(description="The schema name within your destination in accordance with Fivetran conventional rules")
    enabled: StrictBool = Field(description="The boolean value specifying whether the sync for the table into the destination is enabled.")
    hashed: StrictBool = Field(description="The boolean value specifying whether a column should be hashed")
    enabled_patch_settings: Optional[ColumnEnabledPatchSettings] = None
    is_primary_key: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["name_in_destination", "enabled", "hashed", "enabled_patch_settings", "is_primary_key"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ColumnConfigResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of enabled_patch_settings
        if self.enabled_patch_settings:
            _dict['enabled_patch_settings'] = self.enabled_patch_settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ColumnConfigResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name_in_destination": obj.get("name_in_destination"),
            "enabled": obj.get("enabled"),
            "hashed": obj.get("hashed"),
            "enabled_patch_settings": ColumnEnabledPatchSettings.from_dict(obj["enabled_patch_settings"]) if obj.get("enabled_patch_settings") is not None else None,
            "is_primary_key": obj.get("is_primary_key")
        })
        return _obj


