# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class KinesisConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    connection_type: Optional[Dict[str, Any]] = Field(default=None, description="Connection method. Default value: `Directly`.")
    prefix: Optional[StrictStr] = Field(default=None, description="Folder path to the Kinesis files within the bucket.")
    pattern: Optional[StrictStr] = Field(default=None, description="<strong>Optional.</strong> All files in your search path matching this regular expression will be synced. This parameter is optional.")
    escape_char: Optional[StrictStr] = Field(default=None, description="<strong>Optional.</strong> If your CSV generator follows non-standard rules for escaping quotation marks, you can set the escape character here.")
    external_id: Optional[StrictStr] = Field(default=None, description="The external ID is a string that designates who can assume the role. For more information, click <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html\">here</a>")
    json_delivery_mode: Optional[Dict[str, Any]] = Field(default=None, description="Control how your JSON data is delivered into your destination")
    skip_after: Optional[StrictInt] = Field(default=None, description="Enter 1 or greater")
    list_strategy: Optional[Dict[str, Any]] = Field(default=None, description="<strong>Optional.</strong> If you have a file structure where new files are always named in lexicographically increasing order such as files being named in increasing order of time, you can select <code>time_based_pattern_listing</code>.")
    bucket: Optional[StrictStr] = Field(default=None, description="The name of the Kinesis bucket.")
    line_separator: Optional[StrictStr] = Field(default=None, description="You can specify the custom line separator for your CSV files. The line separator is used in files to separate one row from the next.")
    empty_header: Optional[StrictBool] = Field(default=None, description="<strong>Optional.</strong> If your CSV generating software doesn't provide header line for the documents, Fivetran can generate the generic column names and sync data rows with them.")
    skip_before: Optional[StrictInt] = Field(default=None, description="Enter 1 or greater")
    null_sequence: Optional[StrictStr] = Field(default=None, description="<strong>Optional.</strong> If your CSVs use a special value indicating null, you can specify it here.")
    role_arn: Optional[SecretStr] = Field(default=None, description="The Role ARN required for authentication.")
    delimiter: Optional[StrictStr] = Field(default=None, description="<strong>Optional.</strong> You can specify your the delimiter that your CSVs use here. Fivetran generally tries to infer the delimiter, but in some cases this is impossible. If your files sync with the wrong number of columns, consider setting this value")
    is_public: Optional[StrictBool] = Field(default=None, description="Is the bucket public? (you don't need an AWS account for syncing public buckets!)")
    on_error: Optional[Dict[str, Any]] = Field(default=None, description="If you know that your files contain some errors, you can choose to have poorly formatted lines skipped. We recommend leaving the value as <strong>fail</strong> unless you are certain that you have undesirable, malformed data.")
    compression: Optional[Dict[str, Any]] = Field(default=None, description="If your files are compressed, but do not have extensions indicating the compression method, you can force them to be uncompressed according to the selected compression algorithm. Leave the value as <strong>infer</strong> if your files are saved with the correct compression extensions.")
    table: Optional[StrictStr] = Field(default=None, description="Destination table. Table is permanent and cannot be changed after connection creation")
    archive_pattern: Optional[StrictStr] = Field(default=None, description="<strong>Optional.</strong> Files inside of compressed archives with filenames matching this regular expression will be synced.")
    __properties: ClassVar[List[str]] = ["schema", "connection_type", "prefix", "pattern", "escape_char", "external_id", "json_delivery_mode", "skip_after", "list_strategy", "bucket", "line_separator", "empty_header", "skip_before", "null_sequence", "role_arn", "delimiter", "is_public", "on_error", "compression", "table", "archive_pattern"]

    @field_validator('connection_type')
    def connection_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Directly', 'PrivateLink', 'SshTunnel', 'ProxyAgent'):
            raise ValueError("must be one of enum values ('Directly', 'PrivateLink', 'SshTunnel', 'ProxyAgent')")
        return value

    @field_validator('json_delivery_mode')
    def json_delivery_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Packed', 'Unpacked'):
            raise ValueError("must be one of enum values ('Packed', 'Unpacked')")
        return value

    @field_validator('list_strategy')
    def list_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('complete_listing', 'time_based_pattern_listing'):
            raise ValueError("must be one of enum values ('complete_listing', 'time_based_pattern_listing')")
        return value

    @field_validator('on_error')
    def on_error_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('fail', 'skip'):
            raise ValueError("must be one of enum values ('fail', 'skip')")
        return value

    @field_validator('compression')
    def compression_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('zip', 'gz', 'tar_gz', 'tar', 'infer', 'gzip', 'uncompressed', 'bz2', 'tar_bz2'):
            raise ValueError("must be one of enum values ('zip', 'gz', 'tar_gz', 'tar', 'infer', 'gzip', 'uncompressed', 'bz2', 'tar_bz2')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KinesisConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KinesisConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schema": obj.get("schema"),
            "connection_type": obj.get("connection_type"),
            "prefix": obj.get("prefix"),
            "pattern": obj.get("pattern"),
            "escape_char": obj.get("escape_char"),
            "external_id": obj.get("external_id"),
            "json_delivery_mode": obj.get("json_delivery_mode"),
            "skip_after": obj.get("skip_after"),
            "list_strategy": obj.get("list_strategy"),
            "bucket": obj.get("bucket"),
            "line_separator": obj.get("line_separator"),
            "empty_header": obj.get("empty_header"),
            "skip_before": obj.get("skip_before"),
            "null_sequence": obj.get("null_sequence"),
            "role_arn": obj.get("role_arn"),
            "delimiter": obj.get("delimiter"),
            "is_public": obj.get("is_public"),
            "on_error": obj.get("on_error"),
            "compression": obj.get("compression"),
            "table": obj.get("table"),
            "archive_pattern": obj.get("archive_pattern")
        })
        return _obj


