# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OracleSapHvaNetweaverConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    agent_user: Optional[StrictStr] = Field(default=None, description="The agent's user.")
    instance_number: Optional[StrictStr] = Field(default=None, description="Two-digit number (00-97) of the SAP instance within its host.")
    connection_type: Optional[Dict[str, Any]] = Field(default=None, description="Possible values: `Directly`, `PrivateLink`, `SshTunnel`. `SshTunnel` is used as a value if this parameter is omitted in the request and any of the following parameter's values is specified: `tunnel_host`, `tunnel_port`, `tunnel_user`. Otherwise, `Directly` is used as a value if the parameter is omitted.")
    rfc_library_path: Optional[StrictStr] = Field(default=None, description="Directory path containing the SAP NetWeaver RFC SDK library files.")
    agent_password: Optional[SecretStr] = Field(default=None, description="The agent user's password. It must have a minimum length of 10 characters.")
    always_encrypted: Optional[StrictBool] = Field(default=None, description="Require TLS.")
    agent_public_cert: Optional[StrictStr] = Field(default=None, description="The agent public certificate.")
    client_id: Optional[StrictStr] = Field(default=None, description="Three-digit (000-999) identifier of the SAP client, which is sent to an AS ABAP upon logon.")
    tunnel_user: Optional[StrictStr] = Field(default=None, description="SSH user, specify only to connect via an SSH tunnel.")
    tunnel_port: Optional[StrictInt] = Field(default=None, description="SSH port, specify only to connect via an SSH tunnel.")
    password: Optional[SecretStr] = Field(default=None, description="The user's password.")
    host: Optional[StrictStr] = Field(default=None, description="DB instance host or IP address.")
    tunnel_host: Optional[StrictStr] = Field(default=None, description="SSH host, specify only to connect via an SSH tunnel (do not use a load balancer).")
    agent_port: Optional[StrictInt] = Field(default=None, description="The port number of the agent.")
    agent_host: Optional[StrictStr] = Field(default=None, description="The host of the agent. This is the same as the database host, since the agent must be installed on the same machine as the source database.")
    user: Optional[StrictStr] = Field(default=None, description="The username.")
    __properties: ClassVar[List[str]] = ["schema", "agent_user", "instance_number", "connection_type", "rfc_library_path", "agent_password", "always_encrypted", "agent_public_cert", "client_id", "tunnel_user", "tunnel_port", "password", "host", "tunnel_host", "agent_port", "agent_host", "user"]

    @field_validator('connection_type')
    def connection_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Directly', 'PrivateLink', 'SshTunnel'):
            raise ValueError("must be one of enum values ('Directly', 'PrivateLink', 'SshTunnel')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OracleSapHvaNetweaverConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OracleSapHvaNetweaverConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schema": obj.get("schema"),
            "agent_user": obj.get("agent_user"),
            "instance_number": obj.get("instance_number"),
            "connection_type": obj.get("connection_type"),
            "rfc_library_path": obj.get("rfc_library_path"),
            "agent_password": obj.get("agent_password"),
            "always_encrypted": obj.get("always_encrypted"),
            "agent_public_cert": obj.get("agent_public_cert"),
            "client_id": obj.get("client_id"),
            "tunnel_user": obj.get("tunnel_user"),
            "tunnel_port": obj.get("tunnel_port"),
            "password": obj.get("password"),
            "host": obj.get("host"),
            "tunnel_host": obj.get("tunnel_host"),
            "agent_port": obj.get("agent_port"),
            "agent_host": obj.get("agent_host"),
            "user": obj.get("user")
        })
        return _obj


