# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.appsflyer_config_v1_config_app_ids_inner import AppsflyerConfigV1ConfigAppIdsInner
from typing import Optional, Set
from typing_extensions import Self

class AppsflyerConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    access_key_id: Optional[SecretStr] = Field(default=None, description="Your AWS access key ID.")
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    api_token: Optional[SecretStr] = Field(default=None, description="API Token for AppsFlyer's PULL API.")
    app_ids: Optional[List[AppsflyerConfigV1ConfigAppIdsInner]] = Field(default=None, description="*  App ID(s)")
    home_folder: Optional[StrictStr] = Field(default=None, description="Your S3 home folder path of the Data Locker.")
    external_id: Optional[StrictStr] = Field(default=None, description="The external ID is a string that designates who can assume the role. For more information, click <a href=\"http://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-user_externalid.html\">here</a>")
    sync_data_locker: Optional[StrictBool] = Field(default=None, description="Sync AppsFlyer Data Locker. Default value is `true`, set it to `false` to sync AppsFlyer data using only webhooks.")
    sync_pull_api: Optional[StrictBool] = Field(default=None, description="These options are for Appsflyer's Pull API, and are only necessary for syncing events from Pull API.")
    use_customer_bucket: Optional[StrictBool] = Field(default=None, description="Use Custom Bucket. Set it to 'true' if the data is being synced to your S3 bucket instead of an AppsFlyer-managed bucket.")
    bucket: Optional[StrictStr] = Field(default=None, description="Customer S3 Bucket")
    connection_name: Optional[StrictStr] = Field(default=None, description="Your Data Locker Connection Name. Default value: `data-locker-hourly/")
    secret_key: Optional[SecretStr] = Field(default=None, description="Your AWS secret key.")
    webhook_endpoint: Optional[StrictStr] = Field(default=None, description="Webhook Url")
    role_arn: Optional[SecretStr] = Field(default=None, description="S3 Role ARN")
    __properties: ClassVar[List[str]] = ["access_key_id", "schema", "api_token", "app_ids", "home_folder", "external_id", "sync_data_locker", "sync_pull_api", "use_customer_bucket", "bucket", "connection_name", "secret_key", "webhook_endpoint", "role_arn"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AppsflyerConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in app_ids (list)
        _items = []
        if self.app_ids:
            for _item in self.app_ids:
                if _item:
                    _items.append(_item.to_dict())
            _dict['app_ids'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AppsflyerConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_key_id": obj.get("access_key_id"),
            "schema": obj.get("schema"),
            "api_token": obj.get("api_token"),
            "app_ids": [AppsflyerConfigV1ConfigAppIdsInner.from_dict(_item) for _item in obj["app_ids"]] if obj.get("app_ids") is not None else None,
            "home_folder": obj.get("home_folder"),
            "external_id": obj.get("external_id"),
            "sync_data_locker": obj.get("sync_data_locker"),
            "sync_pull_api": obj.get("sync_pull_api"),
            "use_customer_bucket": obj.get("use_customer_bucket"),
            "bucket": obj.get("bucket"),
            "connection_name": obj.get("connection_name"),
            "secret_key": obj.get("secret_key"),
            "webhook_endpoint": obj.get("webhook_endpoint"),
            "role_arn": obj.get("role_arn")
        })
        return _obj


