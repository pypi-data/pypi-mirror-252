# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AdobeAnalyticsDataFeedConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    ftp_password: Optional[SecretStr] = Field(default=None, description="FTP password.")
    sftp_is_key_pair: Optional[StrictBool] = Field(default=None, description="Log in with key pair or password")
    sftp_user: Optional[StrictStr] = Field(default=None, description="SFTP user.")
    ftp_port: Optional[StrictInt] = Field(default=None, description="FTP port.")
    sftp_port: Optional[StrictInt] = Field(default=None, description="SFTP port.")
    abs_container_address: Optional[StrictStr] = Field(default=None, description="Azure Blob Storage container address")
    abs_container_name: Optional[StrictStr] = Field(default=None, description="Azure Blob Storage container name.")
    sftp_host: Optional[StrictStr] = Field(default=None, description="SFTP host.")
    source: Optional[Dict[str, Any]] = Field(default=None, description="The data source.")
    ftp_host: Optional[StrictStr] = Field(default=None, description="FTP host.")
    is_ftps: Optional[StrictBool] = Field(default=None, description="Use Secure FTP (FTPS).")
    abs_public_key: Optional[StrictStr] = Field(default=None, description="Azure Blob Storage public key")
    abs_host_user: Optional[StrictStr] = Field(default=None, description="Azure Blob Storage username")
    ftp_user: Optional[StrictStr] = Field(default=None, description="FTP user.")
    sftp_public_key: Optional[StrictStr] = Field(default=None, description="Public Key")
    s3role_arn: Optional[SecretStr] = Field(default=None, description="The Role ARN required for authentication.")
    abs_connection_string: Optional[StrictStr] = Field(default=None, description="Azure Blob Storage connection string.")
    s3bucket: Optional[StrictStr] = Field(default=None, description="The S3 bucket name.")
    abs_connection_method: Optional[Dict[str, Any]] = Field(default=None, description="Azure Blob Storage connection method")
    abs_host_ip: Optional[StrictStr] = Field(default=None, description="Azure Blob Storage host IP")
    sftp_password: Optional[SecretStr] = Field(default=None, description="SFTP password required if sftp_is_key_pair is false")
    __properties: ClassVar[List[str]] = ["schema", "ftp_password", "sftp_is_key_pair", "sftp_user", "ftp_port", "sftp_port", "abs_container_address", "abs_container_name", "sftp_host", "source", "ftp_host", "is_ftps", "abs_public_key", "abs_host_user", "ftp_user", "sftp_public_key", "s3role_arn", "abs_connection_string", "s3bucket", "abs_connection_method", "abs_host_ip", "sftp_password"]

    @field_validator('source')
    def source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('S3', 'AZURE_BLOB_STORAGE', 'FTP', 'SFTP'):
            raise ValueError("must be one of enum values ('S3', 'AZURE_BLOB_STORAGE', 'FTP', 'SFTP')")
        return value

    @field_validator('abs_connection_method')
    def abs_connection_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SSH_TUNNEL', 'DIRECT', 'PRIVATE_LINK'):
            raise ValueError("must be one of enum values ('SSH_TUNNEL', 'DIRECT', 'PRIVATE_LINK')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdobeAnalyticsDataFeedConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdobeAnalyticsDataFeedConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schema": obj.get("schema"),
            "ftp_password": obj.get("ftp_password"),
            "sftp_is_key_pair": obj.get("sftp_is_key_pair"),
            "sftp_user": obj.get("sftp_user"),
            "ftp_port": obj.get("ftp_port"),
            "sftp_port": obj.get("sftp_port"),
            "abs_container_address": obj.get("abs_container_address"),
            "abs_container_name": obj.get("abs_container_name"),
            "sftp_host": obj.get("sftp_host"),
            "source": obj.get("source"),
            "ftp_host": obj.get("ftp_host"),
            "is_ftps": obj.get("is_ftps"),
            "abs_public_key": obj.get("abs_public_key"),
            "abs_host_user": obj.get("abs_host_user"),
            "ftp_user": obj.get("ftp_user"),
            "sftp_public_key": obj.get("sftp_public_key"),
            "s3role_arn": obj.get("s3role_arn"),
            "abs_connection_string": obj.get("abs_connection_string"),
            "s3bucket": obj.get("s3bucket"),
            "abs_connection_method": obj.get("abs_connection_method"),
            "abs_host_ip": obj.get("abs_host_ip"),
            "sftp_password": obj.get("sftp_password")
        })
        return _obj


