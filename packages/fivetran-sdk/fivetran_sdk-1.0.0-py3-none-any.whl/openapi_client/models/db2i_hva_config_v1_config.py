# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Db2iHvaConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    public_key: Optional[StrictStr] = Field(default=None, description="Public Key")
    agent_user: Optional[StrictStr] = Field(default=None, description="The agent user name.")
    connection_type: Optional[Dict[str, Any]] = Field(default=None, description="Possible values:`SshTunnel`. `SshTunnel` is used as a value if this parameter is omitted in the request and the following parameter's values are specified: `tunnel_host`, `tunnel_port`, `tunnel_user`.")
    agent_password: Optional[SecretStr] = Field(default=None, description="The agent password.")
    always_encrypted: Optional[StrictBool] = Field(default=None, description="Require TLS through Tunnel")
    log_journal: Optional[StrictStr] = Field(default=None, description="The log journal name.")
    log_journal_schema: Optional[StrictStr] = Field(default=None, description="The log journal schema.")
    agent_public_cert: Optional[StrictStr] = Field(default=None, description="The public certificate for the agent.")
    tunnel_user: Optional[StrictStr] = Field(default=None, description="SSH user, specify only to connect via an SSH tunnel. Required for connector creation.")
    tunnel_port: Optional[StrictInt] = Field(default=None, description="SSH port, only specify when connecting via an SSH tunnel. Required for connector creation.")
    database: Optional[StrictStr] = Field(default=None, description="The database name.")
    password: Optional[SecretStr] = Field(default=None, description="The user's password.")
    port: Optional[StrictInt] = Field(default=None, description="The port number.")
    host: Optional[StrictStr] = Field(default=None, description="A host address of the primary node. It should be a DB instance host/IP address with a port number.")
    tunnel_host: Optional[StrictStr] = Field(default=None, description="SSH host, only specify when connecting via an SSH tunnel (do not use a load balancer). Required for connector creation.")
    agent_port: Optional[StrictInt] = Field(default=None, description="The agent port.")
    schema_prefix: Optional[StrictStr] = Field(default=None, description="Destination schema prefix. Prefix for each replicated schema. For example with prefix 'x', source schemas 'foo' and 'bar' get replicated as 'x_foo' and 'x_bar'. The prefix is permanent and cannot be changed after connection creation")
    agent_host: Optional[StrictStr] = Field(default=None, description="The agent host.")
    user: Optional[StrictStr] = Field(default=None, description="The user name.")
    sap_schema: Optional[StrictStr] = Field(default=None, description="The SAP schema.")
    __properties: ClassVar[List[str]] = ["public_key", "agent_user", "connection_type", "agent_password", "always_encrypted", "log_journal", "log_journal_schema", "agent_public_cert", "tunnel_user", "tunnel_port", "database", "password", "port", "host", "tunnel_host", "agent_port", "schema_prefix", "agent_host", "user", "sap_schema"]

    @field_validator('connection_type')
    def connection_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Directly', 'SshTunnel'):
            raise ValueError("must be one of enum values ('Directly', 'SshTunnel')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Db2iHvaConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Db2iHvaConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "public_key": obj.get("public_key"),
            "agent_user": obj.get("agent_user"),
            "connection_type": obj.get("connection_type"),
            "agent_password": obj.get("agent_password"),
            "always_encrypted": obj.get("always_encrypted"),
            "log_journal": obj.get("log_journal"),
            "log_journal_schema": obj.get("log_journal_schema"),
            "agent_public_cert": obj.get("agent_public_cert"),
            "tunnel_user": obj.get("tunnel_user"),
            "tunnel_port": obj.get("tunnel_port"),
            "database": obj.get("database"),
            "password": obj.get("password"),
            "port": obj.get("port"),
            "host": obj.get("host"),
            "tunnel_host": obj.get("tunnel_host"),
            "agent_port": obj.get("agent_port"),
            "schema_prefix": obj.get("schema_prefix"),
            "agent_host": obj.get("agent_host"),
            "user": obj.get("user"),
            "sap_schema": obj.get("sap_schema")
        })
        return _obj


