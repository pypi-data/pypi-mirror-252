# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SpotifyAdsConfigV1ConfigReportListInner(BaseModel):
    """
    The list of reports. Each report corresponds to a table within the schema to which connector will sync the data.
    """ # noqa: E501
    granularity: Optional[Dict[str, Any]] = Field(default=None, description="The report granularity.")
    fields: Optional[List[Dict[str, Any]]] = Field(default=None, description="A list of the fields (metrics) to sync.")
    dimension: Optional[Dict[str, Any]] = Field(default=None, description="The dimension (entity_type) to sync.")
    table: Optional[StrictStr] = Field(default=None, description="The table name within the schema to which connector will sync the data of the specific report.")
    __properties: ClassVar[List[str]] = ["granularity", "fields", "dimension", "table"]

    @field_validator('granularity')
    def granularity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('HOUR', 'DAY'):
            raise ValueError("must be one of enum values ('HOUR', 'DAY')")
        return value

    @field_validator('fields')
    def fields_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('CTR', 'SKIPS', 'VIDEO_VIEWS', 'COMPLETES', 'STREAMS_PER_USER', 'E_CPCL', 'SPEND', 'THIRD_QUARTILES', 'CLICKS', 'NEW_LISTENER_CONVERSION_RATE', 'FREQUENCY', 'OFF_SPOTIFY_IMPRESSIONS', 'NEW_LISTENERS', 'PAID_LISTENS', 'IMPRESSIONS', 'CONVERSION_RATE', 'FIRST_QUARTILES', 'PAID_LISTENS_FREQUENCY', 'STREAMS_PER_NEW_LISTENER', 'PAID_LISTENS_REACH', 'LISTENERS', 'REACH', 'STARTS', 'NEW_LISTENER_STREAMS', 'STREAMS', 'INTENT_RATE', 'MIDPOINTS', 'E_CPM'):
                raise ValueError("each list item must be one of ('CTR', 'SKIPS', 'VIDEO_VIEWS', 'COMPLETES', 'STREAMS_PER_USER', 'E_CPCL', 'SPEND', 'THIRD_QUARTILES', 'CLICKS', 'NEW_LISTENER_CONVERSION_RATE', 'FREQUENCY', 'OFF_SPOTIFY_IMPRESSIONS', 'NEW_LISTENERS', 'PAID_LISTENS', 'IMPRESSIONS', 'CONVERSION_RATE', 'FIRST_QUARTILES', 'PAID_LISTENS_FREQUENCY', 'STREAMS_PER_NEW_LISTENER', 'PAID_LISTENS_REACH', 'LISTENERS', 'REACH', 'STARTS', 'NEW_LISTENER_STREAMS', 'STREAMS', 'INTENT_RATE', 'MIDPOINTS', 'E_CPM')")
        return value

    @field_validator('dimension')
    def dimension_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AD', 'AD_SET', 'CAMPAIGN'):
            raise ValueError("must be one of enum values ('AD', 'AD_SET', 'CAMPAIGN')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SpotifyAdsConfigV1ConfigReportListInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SpotifyAdsConfigV1ConfigReportListInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "granularity": obj.get("granularity"),
            "fields": obj.get("fields"),
            "dimension": obj.get("dimension"),
            "table": obj.get("table")
        })
        return _obj


