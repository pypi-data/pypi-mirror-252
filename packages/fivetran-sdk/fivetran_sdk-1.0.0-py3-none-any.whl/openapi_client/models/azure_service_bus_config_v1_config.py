# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AzureServiceBusConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    public_key: Optional[StrictStr] = Field(default=None, description="Public key generated by Fivetran to be copied into the host-machine's authorized keys file.")
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    has_manage_permissions: Optional[StrictBool] = Field(default=None, description="The boolean value specifying whether the connection string has manage permissions")
    host_ip: Optional[StrictStr] = Field(default=None, description="The IP address of the host machine which we use to connect to ASB via ssh")
    auth_type: Optional[Dict[str, Any]] = Field(default=None, description="The authentication mode to access the topic")
    sync_type: Optional[Dict[str, Any]] = Field(default=None, description="The sync type, which is based on the message type. For `text` and `xml`, `packed` is supported. For `protobuf` and `avro`, `unpacked` is supported. For `json`, both `packed` and `unpacked` are supported")
    topics: Optional[List[StrictStr]] = Field(default=None, description="The comma-separated list of topics which should be synced. Required if you do not have manage permissions")
    message_type: Optional[Dict[str, Any]] = Field(default=None, description="The format of messages in the topic")
    connection_string: Optional[SecretStr] = Field(default=None, description="The connection string used for authentication. Required if the authentication type is `ConnectionString` ")
    connection_method: Optional[Dict[str, Any]] = Field(default=None, description="The connection method")
    namespace: Optional[StrictStr] = Field(default=None, description="The ASB namespace which we have to sync. Required for `AzureActiveDirectory` authentication.")
    schema_registry_secret: Optional[SecretStr] = Field(default=None, description="The secret used to access the schema registry. Required for the `avro` and `protobuf` message types")
    subscriber_name: Optional[StrictStr] = Field(default=None, description="The subscriber name. If the connection string does not have manage permission, you need to specify a subscriber name we can use to fetch data. If not specified, we default to `fivetran_sub_<schema>`")
    host_user: Optional[StrictStr] = Field(default=None, description="The username on the host machine which we use to connect to ASB via ssh")
    asb_ip: Optional[StrictStr] = Field(default=None, description="The IP address (or) the URL of ASB namespace")
    schema_registry_key: Optional[StrictStr] = Field(default=None, description="The key used to access the schema registry. Required for the `avro` and `protobuf` message types")
    schema_registry_urls: Optional[List[StrictStr]] = Field(default=None, description="The comma-separated list of schema registry servers in the `server:port` format")
    __properties: ClassVar[List[str]] = ["public_key", "schema", "has_manage_permissions", "host_ip", "auth_type", "sync_type", "topics", "message_type", "connection_string", "connection_method", "namespace", "schema_registry_secret", "subscriber_name", "host_user", "asb_ip", "schema_registry_key", "schema_registry_urls"]

    @field_validator('auth_type')
    def auth_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ConnectionString', 'AzureActiveDirectory'):
            raise ValueError("must be one of enum values ('ConnectionString', 'AzureActiveDirectory')")
        return value

    @field_validator('sync_type')
    def sync_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Packed', 'Unpacked'):
            raise ValueError("must be one of enum values ('Packed', 'Unpacked')")
        return value

    @field_validator('message_type')
    def message_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Xml', 'Text', 'Json', 'Avro'):
            raise ValueError("must be one of enum values ('Xml', 'Text', 'Json', 'Avro')")
        return value

    @field_validator('connection_method')
    def connection_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('privatelink', 'sshtunnel', 'direct'):
            raise ValueError("must be one of enum values ('privatelink', 'sshtunnel', 'direct')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzureServiceBusConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzureServiceBusConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "public_key": obj.get("public_key"),
            "schema": obj.get("schema"),
            "has_manage_permissions": obj.get("has_manage_permissions"),
            "host_ip": obj.get("host_ip"),
            "auth_type": obj.get("auth_type"),
            "sync_type": obj.get("sync_type"),
            "topics": obj.get("topics"),
            "message_type": obj.get("message_type"),
            "connection_string": obj.get("connection_string"),
            "connection_method": obj.get("connection_method"),
            "namespace": obj.get("namespace"),
            "schema_registry_secret": obj.get("schema_registry_secret"),
            "subscriber_name": obj.get("subscriber_name"),
            "host_user": obj.get("host_user"),
            "asb_ip": obj.get("asb_ip"),
            "schema_registry_key": obj.get("schema_registry_key"),
            "schema_registry_urls": obj.get("schema_registry_urls")
        })
        return _obj


