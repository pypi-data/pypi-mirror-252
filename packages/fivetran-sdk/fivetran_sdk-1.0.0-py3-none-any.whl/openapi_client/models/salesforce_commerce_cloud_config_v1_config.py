# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SalesforceCommerceCloudConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    ocapi_client_id: Optional[StrictStr] = Field(default=None, description="The Salesforce Commerce Cloud OCAPI Client ID.")
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    include_ocapi_endpoints: Optional[StrictBool] = Field(default=None, description="Whether to sync data through OCAPI endpoints.")
    ocapi_hostname: Optional[StrictStr] = Field(default=None, description="The Salesforce Commerce Cloud OCAPI hostname.")
    organization_id: Optional[StrictStr] = Field(default=None, description="The organization ID from Salesforce Commerce Cloud account.")
    site_id: Optional[StrictStr] = Field(default=None, description="The name of the site from which you want to sync data.")
    customer_list_id: Optional[StrictStr] = Field(default=None, description="The parameter to retrieve customer details.")
    ocapi_custom_object_types: Optional[StrictStr] = Field(default=None, description="The Salesforce Commerce Cloud OCAPI custom object types.")
    client_secret: Optional[SecretStr] = Field(default=None, description="The Salesforce Commerce Cloud Client secret.")
    client_id: Optional[StrictStr] = Field(default=None, description="The Salesforce Commerce Cloud Client ID.")
    ocapi_client_secret: Optional[SecretStr] = Field(default=None, description="The Salesforce Commerce Cloud OCAPI Client secret.")
    short_code: Optional[SecretStr] = Field(default=None, description="The Salesforce eight-character string assigned to a realm for routing purposes.")
    __properties: ClassVar[List[str]] = ["ocapi_client_id", "schema", "include_ocapi_endpoints", "ocapi_hostname", "organization_id", "site_id", "customer_list_id", "ocapi_custom_object_types", "client_secret", "client_id", "ocapi_client_secret", "short_code"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SalesforceCommerceCloudConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SalesforceCommerceCloudConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ocapi_client_id": obj.get("ocapi_client_id"),
            "schema": obj.get("schema"),
            "include_ocapi_endpoints": obj.get("include_ocapi_endpoints"),
            "ocapi_hostname": obj.get("ocapi_hostname"),
            "organization_id": obj.get("organization_id"),
            "site_id": obj.get("site_id"),
            "customer_list_id": obj.get("customer_list_id"),
            "ocapi_custom_object_types": obj.get("ocapi_custom_object_types"),
            "client_secret": obj.get("client_secret"),
            "client_id": obj.get("client_id"),
            "ocapi_client_secret": obj.get("ocapi_client_secret"),
            "short_code": obj.get("short_code")
        })
        return _obj


