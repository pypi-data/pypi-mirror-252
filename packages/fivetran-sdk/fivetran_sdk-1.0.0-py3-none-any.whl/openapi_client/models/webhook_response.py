# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WebhookResponse(BaseModel):
    """
    WebhookResponse
    """ # noqa: E501
    id: StrictStr = Field(description="The webhook ID.")
    type: StrictStr = Field(description="The webhook type.")
    url: StrictStr = Field(description="Your webhooks URL endpoint for your application.")
    events: Optional[List[StrictStr]] = Field(default=None, description="The array of event types.")
    active: StrictBool = Field(description="Boolean, if set to true, webhooks are immediately sent in response to events.")
    secret: Optional[StrictStr] = Field(default=None, description="The secret string used for payload signing.")
    created_at: datetime = Field(description="The webhook creation timestamp.")
    created_by: StrictStr = Field(description="The ID of the user who created the webhook.")
    group_id: Optional[StrictStr] = Field(default=None, description="The group ID.")
    __properties: ClassVar[List[str]] = ["id", "type", "url", "events", "active", "secret", "created_at", "created_by", "group_id"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('group', 'account'):
            raise ValueError("must be one of enum values ('group', 'account')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebhookResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebhookResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "url": obj.get("url"),
            "events": obj.get("events"),
            "active": obj.get("active"),
            "secret": obj.get("secret"),
            "created_at": obj.get("created_at"),
            "created_by": obj.get("created_by"),
            "group_id": obj.get("group_id")
        })
        return _obj


