# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NewS3DatalakeConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    bucket: Optional[StrictStr] = Field(default=None, description="The name of the bucket to be used as destination")
    fivetran_role_arn: Optional[StrictStr] = Field(default=None, description="ARN of the role which you created with different required policy mentioned in our setup guide")
    region: Optional[StrictStr] = Field(default=None, description="Region of your AWS S3 bucket")
    is_private_link_required: Optional[StrictBool] = Field(default=None, description="We use PrivateLink by default if your s3 bucket is in the same region as Fivetran. Turning on this toggle ensures that Fivetran always connects to s3 bucket over PrivateLink. Learn more in our [PrivateLink documentation](https://fivetran.com/docs/databases/connection-options#awsprivatelinkbeta).")
    prefix_path: Optional[StrictStr] = Field(default=None, description="Prefix path of the bucket for which you have configured access policy. It is not required if access has been granted to entire Bucket in the access policy")
    __properties: ClassVar[List[str]] = ["bucket", "fivetran_role_arn", "region", "is_private_link_required", "prefix_path"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NewS3DatalakeConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NewS3DatalakeConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bucket": obj.get("bucket"),
            "fivetran_role_arn": obj.get("fivetran_role_arn"),
            "region": obj.get("region"),
            "is_private_link_required": obj.get("is_private_link_required"),
            "prefix_path": obj.get("prefix_path")
        })
        return _obj


