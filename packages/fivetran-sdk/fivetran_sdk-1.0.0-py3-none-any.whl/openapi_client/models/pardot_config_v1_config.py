# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PardotConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    salesforce_security_token: Optional[SecretStr] = Field(default=None, description="The Pardot user's Salesforce SSO Account Security Token.")
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    limit_for_api_calls_to_external_activities_endpoint: Optional[StrictInt] = None
    password: Optional[SecretStr] = Field(default=None, description="The Pardot user's password.")
    business_unit_id: Optional[StrictStr] = Field(default=None, description="Business Unit Id")
    is_external_activities_endpoint_selected: Optional[StrictBool] = None
    user_key: Optional[SecretStr] = None
    api_version: Optional[Dict[str, Any]] = Field(default=None, description="API Version")
    time_zone: Optional[Dict[str, Any]] = Field(default=None, description="The time zone configured in your Pardot instance. An empty value defaults to `UTC+00:00`.")
    email: Optional[StrictStr] = Field(default=None, description="The email of the Pardot user.")
    rest_api_limit: Optional[StrictInt] = Field(default=None, description="The number of API calls that the connector should not exceed in a day. Default REST API call limit per day: 150,000.")
    __properties: ClassVar[List[str]] = ["salesforce_security_token", "schema", "limit_for_api_calls_to_external_activities_endpoint", "password", "business_unit_id", "is_external_activities_endpoint_selected", "user_key", "api_version", "time_zone", "email", "rest_api_limit"]

    @field_validator('api_version')
    def api_version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('V3', 'V4'):
            raise ValueError("must be one of enum values ('V3', 'V4')")
        return value

    @field_validator('time_zone')
    def time_zone_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('GMT+00:00', 'GMT+02:00', 'GMT-09:30', 'GMT+04:00', 'GMT+06:00', 'GMT+08:45', 'GMT+03:30', 'GMT+08:00', 'GMT+05:30', 'GMT-12:00', 'GMT-10:00', 'GMT+13:00', 'GMT-04:00', 'GMT+10:30', 'GMT-03:30', 'GMT+09:00', 'GMT+11:00', 'GMT+13:45', 'GMT-08:00', 'GMT-06:00', 'GMT-02:00', 'GMT+01:00', 'GMT+05:00', 'GMT+03:00', 'GMT+05:45', 'GMT+04:30', 'GMT+07:00', 'GMT+06:30', 'GMT-11:00', 'GMT-02:30', 'GMT+09:30', 'GMT+10:00', 'GMT+12:45', 'GMT+14:00', 'GMT+12:00', 'GMT-09:00', 'GMT-01:00', 'GMT-07:00', 'GMT-05:00', 'GMT-03:00'):
            raise ValueError("must be one of enum values ('GMT+00:00', 'GMT+02:00', 'GMT-09:30', 'GMT+04:00', 'GMT+06:00', 'GMT+08:45', 'GMT+03:30', 'GMT+08:00', 'GMT+05:30', 'GMT-12:00', 'GMT-10:00', 'GMT+13:00', 'GMT-04:00', 'GMT+10:30', 'GMT-03:30', 'GMT+09:00', 'GMT+11:00', 'GMT+13:45', 'GMT-08:00', 'GMT-06:00', 'GMT-02:00', 'GMT+01:00', 'GMT+05:00', 'GMT+03:00', 'GMT+05:45', 'GMT+04:30', 'GMT+07:00', 'GMT+06:30', 'GMT-11:00', 'GMT-02:30', 'GMT+09:30', 'GMT+10:00', 'GMT+12:45', 'GMT+14:00', 'GMT+12:00', 'GMT-09:00', 'GMT-01:00', 'GMT-07:00', 'GMT-05:00', 'GMT-03:00')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PardotConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PardotConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "salesforce_security_token": obj.get("salesforce_security_token"),
            "schema": obj.get("schema"),
            "limit_for_api_calls_to_external_activities_endpoint": obj.get("limit_for_api_calls_to_external_activities_endpoint"),
            "password": obj.get("password"),
            "business_unit_id": obj.get("business_unit_id"),
            "is_external_activities_endpoint_selected": obj.get("is_external_activities_endpoint_selected"),
            "user_key": obj.get("user_key"),
            "api_version": obj.get("api_version"),
            "time_zone": obj.get("time_zone"),
            "email": obj.get("email"),
            "rest_api_limit": obj.get("rest_api_limit")
        })
        return _obj


