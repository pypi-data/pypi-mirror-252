# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DynamodbConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    sync_mode: Optional[Dict[str, Any]] = Field(default=None, description="Whether to sync all tables in unpacked mode only or specific tables in packed mode. Default value: `UseUnpackedModeOnly`.")
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    packed_mode_tables: Optional[List[StrictStr]] = Field(default=None, description="List of tables to be synced in packed mode.")
    enable_distributed_connector_mode: Optional[StrictBool] = Field(default=None, description="Enable to allow the connector to join a cluster of connectors forming a Distributed Connector Cluster. This cluster allows parallel syncs from the same source to the same destination using multiple connectors.")
    role_arn: Optional[SecretStr] = Field(default=None, description="Role ARN")
    distributed_connector_cluster_size: Optional[StrictInt] = Field(default=None, description="Specifies the total number of connectors in the Distributed Connector Cluster running in parallel.")
    external_id: Optional[StrictStr] = Field(default=None, description="This is the same as your `group_id`, used for authentication along with the `role_arn`.")
    aws_region_code: Optional[StrictStr] = Field(default=None, description="The AWS region code for the DynamoDB instance, e.g. `us-east-1`.")
    __properties: ClassVar[List[str]] = ["sync_mode", "schema", "packed_mode_tables", "enable_distributed_connector_mode", "role_arn", "distributed_connector_cluster_size", "external_id", "aws_region_code"]

    @field_validator('sync_mode')
    def sync_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SelectTablesForPackedMode', 'UsePackedModeOnly', 'UseUnpackedModeOnly'):
            raise ValueError("must be one of enum values ('SelectTablesForPackedMode', 'UsePackedModeOnly', 'UseUnpackedModeOnly')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DynamodbConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DynamodbConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sync_mode": obj.get("sync_mode"),
            "schema": obj.get("schema"),
            "packed_mode_tables": obj.get("packed_mode_tables"),
            "enable_distributed_connector_mode": obj.get("enable_distributed_connector_mode"),
            "role_arn": obj.get("role_arn"),
            "distributed_connector_cluster_size": obj.get("distributed_connector_cluster_size"),
            "external_id": obj.get("external_id"),
            "aws_region_code": obj.get("aws_region_code")
        })
        return _obj


