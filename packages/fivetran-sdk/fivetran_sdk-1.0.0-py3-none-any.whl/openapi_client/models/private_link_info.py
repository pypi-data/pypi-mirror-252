# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class PrivateLinkInfo(BaseModel):
    """
    PrivateLinkInfo
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the private link within the Fivetran system.")
    name: Optional[StrictStr] = Field(default=None, description="Private link name")
    service: Optional[StrictStr] = Field(default=None, description="The name for the service type within the Fivetran system.")
    state: Optional[StrictStr] = Field(default=None, description="Private link state")
    config: Optional[Dict[str, Dict[str, Any]]] = Field(default=None, description="Private link configuration")
    created_at: Optional[datetime] = Field(default=None, description="The timestamp of the time the private link was created in your account")
    created_by: Optional[StrictStr] = Field(default=None, description="The actor who created the private link")
    group_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the group within the Fivetran system")
    cloud_provider: Optional[StrictStr] = Field(default=None, description="Private link cloud provider")
    group_region: Optional[StrictStr] = Field(default=None, description="Private link group region")
    state_summary: Optional[StrictStr] = Field(default=None, description="Private link state summary")
    __properties: ClassVar[List[str]] = ["id", "name", "service", "state", "config", "created_at", "created_by", "group_id", "cloud_provider", "group_region", "state_summary"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('CREATING', 'UPDATING', 'DESTROYING', 'OK', 'FAIL'):
            raise ValueError("must be one of enum values ('CREATING', 'UPDATING', 'DESTROYING', 'OK', 'FAIL')")
        return value

    @field_validator('cloud_provider')
    def cloud_provider_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AWS', 'GCP', 'AZURE'):
            raise ValueError("must be one of enum values ('AWS', 'GCP', 'AZURE')")
        return value

    @field_validator('group_region')
    def group_region_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('GCP_US_EAST4', 'GCP_US_WEST1', 'GCP_EUROPE_WEST3', 'GCP_AUSTRALIA_SOUTHEAST1', 'GCP_NORTHAMERICA_NORTHEAST1', 'GCP_EUROPE_WEST2', 'GCP_ASIA_SOUTHEAST1', 'GCP_ASIA_SOUTHEAST2', 'GCP_ASIA_SOUTH1', 'GCP_ASIA_NORTHEAST1', 'AWS_US_EAST_1', 'AWS_US_EAST_2', 'AWS_US_WEST_2', 'AWS_AP_NORTHEAST_1', 'AWS_AP_SOUTHEAST_1', 'AWS_AP_SOUTHEAST_2', 'AWS_EU_CENTRAL_1', 'AWS_EU_WEST_1', 'AWS_EU_WEST_2', 'AWS_AP_SOUTH_1', 'AWS_CA_CENTRAL_1', 'AWS_US_GOV_WEST_1', 'AZURE_EASTUS2', 'AZURE_AUSTRALIAEAST', 'AZURE_UKSOUTH', 'AZURE_WESTEUROPE', 'AZURE_CENTRALUS', 'AZURE_CANADACENTRAL', 'AZURE_UAENORTH', 'AZURE_SOUTHEASTASIA'):
            raise ValueError("must be one of enum values ('GCP_US_EAST4', 'GCP_US_WEST1', 'GCP_EUROPE_WEST3', 'GCP_AUSTRALIA_SOUTHEAST1', 'GCP_NORTHAMERICA_NORTHEAST1', 'GCP_EUROPE_WEST2', 'GCP_ASIA_SOUTHEAST1', 'GCP_ASIA_SOUTHEAST2', 'GCP_ASIA_SOUTH1', 'GCP_ASIA_NORTHEAST1', 'AWS_US_EAST_1', 'AWS_US_EAST_2', 'AWS_US_WEST_2', 'AWS_AP_NORTHEAST_1', 'AWS_AP_SOUTHEAST_1', 'AWS_AP_SOUTHEAST_2', 'AWS_EU_CENTRAL_1', 'AWS_EU_WEST_1', 'AWS_EU_WEST_2', 'AWS_AP_SOUTH_1', 'AWS_CA_CENTRAL_1', 'AWS_US_GOV_WEST_1', 'AZURE_EASTUS2', 'AZURE_AUSTRALIAEAST', 'AZURE_UKSOUTH', 'AZURE_WESTEUROPE', 'AZURE_CENTRALUS', 'AZURE_CANADACENTRAL', 'AZURE_UAENORTH', 'AZURE_SOUTHEASTASIA')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PrivateLinkInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PrivateLinkInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "service": obj.get("service"),
            "state": obj.get("state"),
            "config": obj.get("config"),
            "created_at": obj.get("created_at"),
            "created_by": obj.get("created_by"),
            "group_id": obj.get("group_id"),
            "cloud_provider": obj.get("cloud_provider"),
            "group_region": obj.get("group_region"),
            "state_summary": obj.get("state_summary")
        })
        return _obj


