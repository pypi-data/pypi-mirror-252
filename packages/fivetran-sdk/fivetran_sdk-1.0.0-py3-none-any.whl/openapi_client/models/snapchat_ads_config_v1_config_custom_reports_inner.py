# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SnapchatAdsConfigV1ConfigCustomReportsInner(BaseModel):
    """
    [Custom reports for Snapchat Ads connector](/docs/applications/snapchat-ads/custom-reports).
    """ # noqa: E501
    sk_ad_metrics_fields: Optional[List[Dict[str, Any]]] = Field(default=None, description="[List of SKAd  Metrics fields in custom report](/docs/applications/snapchat-ads/custom-reports#skadmetricsfields).")
    add_metric_variants: Optional[StrictBool] = Field(default=None, description="Add fields for separate \\\"swipe-up\\\" and \\\"view\\\" variants of selected metrics")
    base_metrics_fields: Optional[List[Dict[str, Any]]] = Field(default=None, description="[List of Core, Additional and Conversion Metrics Stats Fields](/docs/applications/snapchat-ads/custom-reports#basemetricsfields).")
    breakout: Optional[Dict[str, Any]] = Field(default=None, description="[Sets Breakout on custom report](/docs/applications/snapchat-ads/custom-reports#breakout).")
    granularity: Optional[Dict[str, Any]] = Field(default=None, description="[Sets Granularity on custom report](/docs/applications/snapchat-ads/customr-reports#granularity).")
    breakdown: Optional[Dict[str, Any]] = Field(default=None, description="[Sets Breakdown on custom report](/docs/applications/snapchat-ads/custom-reports#breakdown).")
    report_name: Optional[StrictStr] = Field(default=None, description="Custom report name (must be unique)")
    dimension: Optional[Dict[str, Any]] = Field(default=None, description="[Sets Dimension on custom report](/docs/applications/snapchat-ads/custom-reports#dimension).")
    __properties: ClassVar[List[str]] = ["sk_ad_metrics_fields", "add_metric_variants", "base_metrics_fields", "breakout", "granularity", "breakdown", "report_name", "dimension"]

    @field_validator('sk_ad_metrics_fields')
    def sk_ad_metrics_fields_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('custom_event_2_sk_ad_network_view', 'conversion_invite_sk_ad_network_total', 'custom_event_4_sk_ad_network', 'conversion_list_view_sk_ad_network_view', 'conversion_share_sk_ad_network_total', 'conversion_ad_click_sk_ad_network', 'conversion_save_sk_ad_network_view', 'conversion_sign_ups_sk_ad_network_total', 'conversion_start_trial_sk_ad_network_total', 'conversion_start_trial_sk_ad_network', 'conversion_purchases_sk_ad_network_view', 'conversion_subscribe_sk_ad_network_view', 'conversion_level_completes_sk_ad_network_view', 'conversion_spend_credits_sk_ad_network_view', 'conversion_level_completes_sk_ad_network', 'conversion_add_billing_sk_ad_network_view', 'unknown_sk_ad_network_view', 'conversion_ad_view_sk_ad_network', 'custom_event_5_sk_ad_network_total', 'conversion_rate_sk_ad_network_view', 'conversion_view_content_sk_ad_network', 'conversion_login_sk_ad_network_total', 'conversion_reserve_sk_ad_network_view', 'conversion_app_opens_sk_ad_network_total', 'conversion_spend_credits_sk_ad_network', 'conversion_achievement_unlocked_sk_ad_network_total', 'conversion_reserve_sk_ad_network_total', 'conversion_complete_tutorial_sk_ad_network', 'conversion_ad_click_sk_ad_network_total', 'conversion_add_cart_sk_ad_network', 'conversion_ios_installs_sk_ad_network', 'conversion_assist_install_sk_ad_network_view', 'conversion_view_content_sk_ad_network_total', 'conversion_add_to_wishlist_sk_ad_network_view', 'conversion_start_trial_sk_ad_network_view', 'conversion_add_billing_sk_ad_network', 'conversion_list_view_sk_ad_network', 'conversion_subscribe_sk_ad_network_total', 'conversion_null_sk_ad_network', 'conversion_total_installs_sk_ad_network', 'conversion_sign_ups_sk_ad_network', 'conversion_list_view_sk_ad_network_total', 'conversion_app_opens_sk_ad_network', 'conversion_sign_ups_sk_ad_network_view', 'conversion_achievement_unlocked_sk_ad_network', 'unknown_sk_ad_network', 'conversion_page_views_sk_ad_network_total', 'conversion_ad_view_sk_ad_network_view', 'custom_event_4_sk_ad_network_view', 'conversion_searches_sk_ad_network_total', 'conversion_add_to_wishlist_sk_ad_network', 'conversion_searches_sk_ad_network_view', 'conversion_ad_view_sk_ad_network_total', 'conversion_ios_installs_sk_ad_network_view', 'custom_event_3_sk_ad_network', 'conversion_save_sk_ad_network_total', 'conversion_save_sk_ad_network', 'conversion_add_billing_sk_ad_network_total', 'conversion_null_sk_ad_network_total', 'custom_event_5_sk_ad_network', 'conversion_reserve_sk_ad_network', 'conversion_page_views_sk_ad_network', 'conversion_level_completes_sk_ad_network_total', 'custom_event_1_sk_ad_network_total', 'conversion_add_to_wishlist_sk_ad_network_total', 'conversion_rate_sk_ad_network_total', 'conversion_start_checkout_sk_ad_network_view', 'conversion_app_opens_sk_ad_network_view', 'conversion_spend_credits_sk_ad_network_total', 'conversion_purchases_sk_ad_network', 'conversion_share_sk_ad_network_view', 'custom_event_3_sk_ad_network_total', 'conversion_ios_installs_sk_ad_network_total', 'conversion_rate_sk_ad_network', 'custom_event_1_sk_ad_network_view', 'custom_event_3_sk_ad_network_view', 'conversion_add_cart_sk_ad_network_view', 'conversion_page_views_sk_ad_network_view', 'conversion_purchases_sk_ad_network_total', 'custom_event_1_sk_ad_network', 'conversion_complete_tutorial_sk_ad_network_total', 'custom_event_4_sk_ad_network_total', 'conversion_add_cart_sk_ad_network_total', 'conversion_subscribe_sk_ad_network', 'conversion_start_checkout_sk_ad_network_total', 'custom_event_5_sk_ad_network_view', 'conversion_total_installs_sk_ad_network_view', 'custom_event_2_sk_ad_network_total', 'conversion_view_content_sk_ad_network_view', 'conversion_login_sk_ad_network', 'conversion_login_sk_ad_network_view', 'conversion_start_checkout_sk_ad_network', 'conversion_assist_install_sk_ad_network_total', 'conversion_achievement_unlocked_sk_ad_network_view', 'conversion_searches_sk_ad_network', 'conversion_share_sk_ad_network', 'conversion_ad_click_sk_ad_network_view', 'conversion_total_installs_sk_ad_network_total', 'conversion_assist_install_sk_ad_network', 'unknown_sk_ad_network_total', 'conversion_invite_sk_ad_network', 'conversion_null_sk_ad_network_view', 'conversion_complete_tutorial_sk_ad_network_view', 'conversion_invite_sk_ad_network_view', 'custom_event_2_sk_ad_network'):
                raise ValueError("each list item must be one of ('custom_event_2_sk_ad_network_view', 'conversion_invite_sk_ad_network_total', 'custom_event_4_sk_ad_network', 'conversion_list_view_sk_ad_network_view', 'conversion_share_sk_ad_network_total', 'conversion_ad_click_sk_ad_network', 'conversion_save_sk_ad_network_view', 'conversion_sign_ups_sk_ad_network_total', 'conversion_start_trial_sk_ad_network_total', 'conversion_start_trial_sk_ad_network', 'conversion_purchases_sk_ad_network_view', 'conversion_subscribe_sk_ad_network_view', 'conversion_level_completes_sk_ad_network_view', 'conversion_spend_credits_sk_ad_network_view', 'conversion_level_completes_sk_ad_network', 'conversion_add_billing_sk_ad_network_view', 'unknown_sk_ad_network_view', 'conversion_ad_view_sk_ad_network', 'custom_event_5_sk_ad_network_total', 'conversion_rate_sk_ad_network_view', 'conversion_view_content_sk_ad_network', 'conversion_login_sk_ad_network_total', 'conversion_reserve_sk_ad_network_view', 'conversion_app_opens_sk_ad_network_total', 'conversion_spend_credits_sk_ad_network', 'conversion_achievement_unlocked_sk_ad_network_total', 'conversion_reserve_sk_ad_network_total', 'conversion_complete_tutorial_sk_ad_network', 'conversion_ad_click_sk_ad_network_total', 'conversion_add_cart_sk_ad_network', 'conversion_ios_installs_sk_ad_network', 'conversion_assist_install_sk_ad_network_view', 'conversion_view_content_sk_ad_network_total', 'conversion_add_to_wishlist_sk_ad_network_view', 'conversion_start_trial_sk_ad_network_view', 'conversion_add_billing_sk_ad_network', 'conversion_list_view_sk_ad_network', 'conversion_subscribe_sk_ad_network_total', 'conversion_null_sk_ad_network', 'conversion_total_installs_sk_ad_network', 'conversion_sign_ups_sk_ad_network', 'conversion_list_view_sk_ad_network_total', 'conversion_app_opens_sk_ad_network', 'conversion_sign_ups_sk_ad_network_view', 'conversion_achievement_unlocked_sk_ad_network', 'unknown_sk_ad_network', 'conversion_page_views_sk_ad_network_total', 'conversion_ad_view_sk_ad_network_view', 'custom_event_4_sk_ad_network_view', 'conversion_searches_sk_ad_network_total', 'conversion_add_to_wishlist_sk_ad_network', 'conversion_searches_sk_ad_network_view', 'conversion_ad_view_sk_ad_network_total', 'conversion_ios_installs_sk_ad_network_view', 'custom_event_3_sk_ad_network', 'conversion_save_sk_ad_network_total', 'conversion_save_sk_ad_network', 'conversion_add_billing_sk_ad_network_total', 'conversion_null_sk_ad_network_total', 'custom_event_5_sk_ad_network', 'conversion_reserve_sk_ad_network', 'conversion_page_views_sk_ad_network', 'conversion_level_completes_sk_ad_network_total', 'custom_event_1_sk_ad_network_total', 'conversion_add_to_wishlist_sk_ad_network_total', 'conversion_rate_sk_ad_network_total', 'conversion_start_checkout_sk_ad_network_view', 'conversion_app_opens_sk_ad_network_view', 'conversion_spend_credits_sk_ad_network_total', 'conversion_purchases_sk_ad_network', 'conversion_share_sk_ad_network_view', 'custom_event_3_sk_ad_network_total', 'conversion_ios_installs_sk_ad_network_total', 'conversion_rate_sk_ad_network', 'custom_event_1_sk_ad_network_view', 'custom_event_3_sk_ad_network_view', 'conversion_add_cart_sk_ad_network_view', 'conversion_page_views_sk_ad_network_view', 'conversion_purchases_sk_ad_network_total', 'custom_event_1_sk_ad_network', 'conversion_complete_tutorial_sk_ad_network_total', 'custom_event_4_sk_ad_network_total', 'conversion_add_cart_sk_ad_network_total', 'conversion_subscribe_sk_ad_network', 'conversion_start_checkout_sk_ad_network_total', 'custom_event_5_sk_ad_network_view', 'conversion_total_installs_sk_ad_network_view', 'custom_event_2_sk_ad_network_total', 'conversion_view_content_sk_ad_network_view', 'conversion_login_sk_ad_network', 'conversion_login_sk_ad_network_view', 'conversion_start_checkout_sk_ad_network', 'conversion_assist_install_sk_ad_network_total', 'conversion_achievement_unlocked_sk_ad_network_view', 'conversion_searches_sk_ad_network', 'conversion_share_sk_ad_network', 'conversion_ad_click_sk_ad_network_view', 'conversion_total_installs_sk_ad_network_total', 'conversion_assist_install_sk_ad_network', 'unknown_sk_ad_network_total', 'conversion_invite_sk_ad_network', 'conversion_null_sk_ad_network_view', 'conversion_complete_tutorial_sk_ad_network_view', 'conversion_invite_sk_ad_network_view', 'custom_event_2_sk_ad_network')")
        return value

    @field_validator('base_metrics_fields')
    def base_metrics_fields_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('quartile_2', 'quartile_3', 'quartile_1', 'conversion_searches_value', 'play_time_millis', 'conversion_login', 'avg_screen_time_millis', 'conversion_page_views', 'saves', 'video_views', 'conversion_list_view', 'conversion_add_billing_value', 'conversion_reserve_value', 'conversion_share', 'conversion_reserve', 'conversion_purchases_value', 'attachment_total_view_time_millis', 'conversion_add_to_wishlist', 'avg_position_screen_time_millis', 'conversion_visit_value', 'story_completes', 'conversion_complete_tutorial_value', 'conversion_start_trial', 'conversion_start_trial_value', 'uniques', 'conversion_subscribe', 'conversion_save', 'conversion_add_cart_value', 'conversion_level_completes', 'screen_time_millis', 'total_reach', 'conversion_invite', 'total_installs', 'conversion_achievement_unlocked_value', 'custom_event_1_value', 'view_completion', 'position_impressions', 'shares', 'video_views_time_based', 'conversion_complete_tutorial', 'conversion_login_value', 'ios_installs', 'conversion_subscribe_value', 'conversion_save_value', 'native_leads', 'conversion_rate', 'avg_view_time_millis', 'conversion_ad_view', 'attachment_avg_view_time_millis', 'earned_impressions', 'custom_event_1', 'impressions', 'position_screen_time_millis', 'custom_event_2', 'conversion_visit', 'conversion_spend_credits_value', 'conversion_add_billing', 'paid_impressions', 'conversion_purchases', 'android_installs', 'swipes', 'conversion_start_checkout', 'conversion_view_content_value', 'conversion_achievement_unlocked', 'position_swipe_up_percent', 'conversion_rate_value', 'frequency', 'custom_event_3', 'custom_event_4', 'custom_event_5', 'earned_reach', 'conversion_start_checkout_value', 'swipe_up_percent', 'conversion_spend_credits', 'profile_clicks', 'conversion_level_completes_value', 'conversion_sign_ups', 'custom_event_5_value', 'story_opens', 'conversion_page_views_value', 'video_views_15s', 'conversion_add_to_wishlist_value', 'custom_event_2_value', 'conversion_ad_click_value', 'attachment_uniques', 'attachment_video_views', 'conversion_list_view_value', 'conversion_ad_view_value', 'conversion_sign_ups_value', 'total_impressions', 'conversion_app_opens_value', 'attachment_quartile_1', 'conversion_app_opens', 'conversion_invite_value', 'attachment_quartile_3', 'spend', 'attachment_quartile_2', 'custom_event_4_value', 'conversion_add_cart', 'conversion_searches', 'attachment_view_completion', 'view_time_millis', 'attachment_frequency', 'conversion_view_content', 'conversion_share_value', 'custom_event_3_value', 'conversion_ad_click'):
                raise ValueError("each list item must be one of ('quartile_2', 'quartile_3', 'quartile_1', 'conversion_searches_value', 'play_time_millis', 'conversion_login', 'avg_screen_time_millis', 'conversion_page_views', 'saves', 'video_views', 'conversion_list_view', 'conversion_add_billing_value', 'conversion_reserve_value', 'conversion_share', 'conversion_reserve', 'conversion_purchases_value', 'attachment_total_view_time_millis', 'conversion_add_to_wishlist', 'avg_position_screen_time_millis', 'conversion_visit_value', 'story_completes', 'conversion_complete_tutorial_value', 'conversion_start_trial', 'conversion_start_trial_value', 'uniques', 'conversion_subscribe', 'conversion_save', 'conversion_add_cart_value', 'conversion_level_completes', 'screen_time_millis', 'total_reach', 'conversion_invite', 'total_installs', 'conversion_achievement_unlocked_value', 'custom_event_1_value', 'view_completion', 'position_impressions', 'shares', 'video_views_time_based', 'conversion_complete_tutorial', 'conversion_login_value', 'ios_installs', 'conversion_subscribe_value', 'conversion_save_value', 'native_leads', 'conversion_rate', 'avg_view_time_millis', 'conversion_ad_view', 'attachment_avg_view_time_millis', 'earned_impressions', 'custom_event_1', 'impressions', 'position_screen_time_millis', 'custom_event_2', 'conversion_visit', 'conversion_spend_credits_value', 'conversion_add_billing', 'paid_impressions', 'conversion_purchases', 'android_installs', 'swipes', 'conversion_start_checkout', 'conversion_view_content_value', 'conversion_achievement_unlocked', 'position_swipe_up_percent', 'conversion_rate_value', 'frequency', 'custom_event_3', 'custom_event_4', 'custom_event_5', 'earned_reach', 'conversion_start_checkout_value', 'swipe_up_percent', 'conversion_spend_credits', 'profile_clicks', 'conversion_level_completes_value', 'conversion_sign_ups', 'custom_event_5_value', 'story_opens', 'conversion_page_views_value', 'video_views_15s', 'conversion_add_to_wishlist_value', 'custom_event_2_value', 'conversion_ad_click_value', 'attachment_uniques', 'attachment_video_views', 'conversion_list_view_value', 'conversion_ad_view_value', 'conversion_sign_ups_value', 'total_impressions', 'conversion_app_opens_value', 'attachment_quartile_1', 'conversion_app_opens', 'conversion_invite_value', 'attachment_quartile_3', 'spend', 'attachment_quartile_2', 'custom_event_4_value', 'conversion_add_cart', 'conversion_searches', 'attachment_view_completion', 'view_time_millis', 'attachment_frequency', 'conversion_view_content', 'conversion_share_value', 'custom_event_3_value', 'conversion_ad_click')")
        return value

    @field_validator('breakout')
    def breakout_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('app', 'offline', 'total', 'total_on_platform', 'web', 'total_off_platform'):
            raise ValueError("must be one of enum values ('app', 'offline', 'total', 'total_on_platform', 'web', 'total_off_platform')")
        return value

    @field_validator('granularity')
    def granularity_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('HOUR', 'DAY'):
            raise ValueError("must be one of enum values ('HOUR', 'DAY')")
        return value

    @field_validator('breakdown')
    def breakdown_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AD', 'AD_SQUAD', 'CAMPAIGN'):
            raise ValueError("must be one of enum values ('AD', 'AD_SQUAD', 'CAMPAIGN')")
        return value

    @field_validator('dimension')
    def dimension_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('COUNTRY', 'DEVICE_OS', 'DMA', 'DEVICE_MAKE', 'DEMOGRAPHIC', 'REGION', 'INTEREST'):
            raise ValueError("must be one of enum values ('COUNTRY', 'DEVICE_OS', 'DMA', 'DEVICE_MAKE', 'DEMOGRAPHIC', 'REGION', 'INTEREST')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SnapchatAdsConfigV1ConfigCustomReportsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SnapchatAdsConfigV1ConfigCustomReportsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sk_ad_metrics_fields": obj.get("sk_ad_metrics_fields"),
            "add_metric_variants": obj.get("add_metric_variants"),
            "base_metrics_fields": obj.get("base_metrics_fields"),
            "breakout": obj.get("breakout"),
            "granularity": obj.get("granularity"),
            "breakdown": obj.get("breakdown"),
            "report_name": obj.get("report_name"),
            "dimension": obj.get("dimension")
        })
        return _obj


