# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class RedditAdsConfigV1ConfigCustomReportsInner(BaseModel):
    """
    The list of custom report configurations. Each report corresponds to a table within the schema to which connector will sync the data.
    """ # noqa: E501
    custom_events_included: Optional[StrictBool] = Field(default=None, description="The boolean value specifying whether the custom events are included in event conversions report. Default value: `false`")
    conversions_report_included: Optional[StrictBool] = Field(default=None, description="The boolean value specifying whether to enable or disable event conversions data synchronisation. Default value: `false`")
    event_names: Optional[List[StrictStr]] = Field(default=None, description="The list of events the conversion data will be synchronised for")
    level: Optional[Dict[str, Any]] = Field(default=None, description="Level of custom report.")
    report_fields: Optional[List[StrictStr]] = Field(default=None, description="The list of fields included in custom report")
    segmentation: Optional[Dict[str, Any]] = Field(default=None, description="Level of custom report.")
    report_name: Optional[StrictStr] = Field(default=None, description="The table name within the schema to which connector syncs the data of the specific report.")
    __properties: ClassVar[List[str]] = ["custom_events_included", "conversions_report_included", "event_names", "level", "report_fields", "segmentation", "report_name"]

    @field_validator('level')
    def level_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ACCOUNT', 'AD', 'POST', 'AD_GROUP', 'NONE', 'CAMPAIGN'):
            raise ValueError("must be one of enum values ('ACCOUNT', 'AD', 'POST', 'AD_GROUP', 'NONE', 'CAMPAIGN')")
        return value

    @field_validator('segmentation')
    def segmentation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('PLACEMENT', 'COUNTRY', 'METRO', 'COMMUNITY', 'NONE', 'INTEREST'):
            raise ValueError("must be one of enum values ('PLACEMENT', 'COUNTRY', 'METRO', 'COMMUNITY', 'NONE', 'INTEREST')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RedditAdsConfigV1ConfigCustomReportsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RedditAdsConfigV1ConfigCustomReportsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "custom_events_included": obj.get("custom_events_included"),
            "conversions_report_included": obj.get("conversions_report_included"),
            "event_names": obj.get("event_names"),
            "level": obj.get("level"),
            "report_fields": obj.get("report_fields"),
            "segmentation": obj.get("segmentation"),
            "report_name": obj.get("report_name")
        })
        return _obj


