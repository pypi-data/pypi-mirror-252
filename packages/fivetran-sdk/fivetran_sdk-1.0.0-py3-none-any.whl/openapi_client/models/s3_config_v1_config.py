# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class S3ConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    access_key_id: Optional[StrictStr] = Field(default=None, description="Access Key ID")
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    prefix: Optional[StrictStr] = Field(default=None, description="All files and folders under this folder path will be searched for files to sync.")
    pattern: Optional[StrictStr] = Field(default=None, description="All files in your search path matching this regular expression will be synced.")
    external_id: Optional[StrictStr] = Field(default=None, description="Used for authentication along with the `role_arn`. If not provided, it uses connector's `group_id`. Use the [List All Groups endpoint](/docs/rest-api/groups#listallgroups) to find the `group_id`.")
    json_delivery_mode: Optional[Dict[str, Any]] = Field(default=None, description="Control how your JSON data is delivered into your destination")
    skip_after: Optional[StrictInt] = Field(default=None, description="We will skip over the number of lines specified at the end to avoid introducing aberrant data into your destination.")
    empty_header: Optional[StrictBool] = Field(default=None, description="If your CSVs are headerless, set this is as `true`. When `true`, we will generate generic column names following the convention of `column_0`, `column_1`, ... `column_n` to map the rows. Default value: `false`.")
    use_pgp_encryption_options: Optional[StrictBool] = Field(default=None, description="Set to `true` if files are encrypted using PGP in the S3 bucket. Default value: `false`.")
    skip_before: Optional[StrictInt] = Field(default=None, description="We will skip over the number of lines specified before syncing data.")
    signer_public_key: Optional[StrictStr] = Field(default=None, description="The contents of the signer's public key file. Must be populated if `use_pgp_encryption_options` is set to `true` and PGP encrypted files are signed.")
    delimiter: Optional[StrictStr] = Field(default=None, description="You can specify the delimiter that your CSVs use here. Fivetran generally tries to infer the delimiter, but in some cases this is impossible.")
    file_type: Optional[Dict[str, Any]] = Field(default=None, description="If your files are saved with improper extensions, you can force them to be synced as the selected file type.")
    on_error: Optional[Dict[str, Any]] = Field(default=None, description="If you know that your files contain some errors, you can choose to have poorly formatted lines skipped. We recommend leaving the value as `fail` unless you are certain that you have undesirable, malformed data.")
    table: Optional[StrictStr] = Field(default=None, description="Destination table. Table is permanent and cannot be changed after connection creation")
    archive_pattern: Optional[StrictStr] = Field(default=None, description="Files inside compressed archives with filenames matching this regular expression will be synced.")
    pgp_secret_key: Optional[SecretStr] = Field(default=None, description="The contents of your PGP secret key file. Must be populated if `use_pgp_encryption_options` is set to `true`.")
    auth_type: Optional[Dict[str, Any]] = Field(default=None, description="Access approach")
    append_file_option: Optional[Dict[str, Any]] = Field(default=None, description="If you know that the source completely over-writes the same file with new data, you can append the changes instead of upserting based on filename and line number.")
    connection_type: Optional[Dict[str, Any]] = Field(default=None, description="Connection method. Default value: `Directly`.")
    escape_char: Optional[StrictStr] = Field(default=None, description="If your CSV generator follows non-standard rules for escaping quotation marks, you can set the escape character here.")
    list_strategy: Optional[Dict[str, Any]] = Field(default=None, description="The listing strategy you want to use. Default value: `complete_listing`.")
    bucket: Optional[StrictStr] = Field(default=None, description="The S3 bucket name. Required for connector creation.")
    line_separator: Optional[StrictStr] = Field(default=None, description="You can specify the custom line separator for your CSV files. The line separator is used in files to separate one row from the next.")
    null_sequence: Optional[StrictStr] = Field(default=None, description="If your CSVs use a special value indicating null, you can specify it here.")
    role_arn: Optional[SecretStr] = Field(default=None, description="The Role ARN required for authentication. Required for connector creation when syncing using private bucket.")
    access_key_secret: Optional[SecretStr] = Field(default=None, description="Access Key Secret")
    is_public: Optional[StrictBool] = Field(default=None, description="Whether you are syncing from a public bucket. Default value: `false`.")
    compression: Optional[Dict[str, Any]] = Field(default=None, description="The compression format is used to let Fivetran know that even files without a compression extension should be decompressed using the selected compression format.")
    pgp_pass_phrase: Optional[SecretStr] = Field(default=None, description="The PGP passphrase used to create the key. Must be populated if `use_pgp_encryption_options` is set to `true`.")
    __properties: ClassVar[List[str]] = ["access_key_id", "schema", "prefix", "pattern", "external_id", "json_delivery_mode", "skip_after", "empty_header", "use_pgp_encryption_options", "skip_before", "signer_public_key", "delimiter", "file_type", "on_error", "table", "archive_pattern", "pgp_secret_key", "auth_type", "append_file_option", "connection_type", "escape_char", "list_strategy", "bucket", "line_separator", "null_sequence", "role_arn", "access_key_secret", "is_public", "compression", "pgp_pass_phrase"]

    @field_validator('json_delivery_mode')
    def json_delivery_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Packed', 'Unpacked'):
            raise ValueError("must be one of enum values ('Packed', 'Unpacked')")
        return value

    @field_validator('file_type')
    def file_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('log', 'infer', 'tsv', 'xml', 'csv', 'json', 'jsonl', 'avro', 'parquet'):
            raise ValueError("must be one of enum values ('log', 'infer', 'tsv', 'xml', 'csv', 'json', 'jsonl', 'avro', 'parquet')")
        return value

    @field_validator('on_error')
    def on_error_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('fail', 'skip'):
            raise ValueError("must be one of enum values ('fail', 'skip')")
        return value

    @field_validator('auth_type')
    def auth_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('IAM_ROLE', 'PUBLIC_BUCKET', 'ACCESS_KEY'):
            raise ValueError("must be one of enum values ('IAM_ROLE', 'PUBLIC_BUCKET', 'ACCESS_KEY')")
        return value

    @field_validator('append_file_option')
    def append_file_option_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('upsert_file', 'append_file'):
            raise ValueError("must be one of enum values ('upsert_file', 'append_file')")
        return value

    @field_validator('connection_type')
    def connection_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Directly', 'PrivateLink', 'SshTunnel', 'ProxyAgent'):
            raise ValueError("must be one of enum values ('Directly', 'PrivateLink', 'SshTunnel', 'ProxyAgent')")
        return value

    @field_validator('list_strategy')
    def list_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('complete_listing', 'time_based_pattern_listing'):
            raise ValueError("must be one of enum values ('complete_listing', 'time_based_pattern_listing')")
        return value

    @field_validator('compression')
    def compression_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('zip', 'gz', 'tar_gz', 'tar', 'infer', 'gzip', 'uncompressed', 'bz2', 'tar_bz2'):
            raise ValueError("must be one of enum values ('zip', 'gz', 'tar_gz', 'tar', 'infer', 'gzip', 'uncompressed', 'bz2', 'tar_bz2')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of S3ConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of S3ConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "access_key_id": obj.get("access_key_id"),
            "schema": obj.get("schema"),
            "prefix": obj.get("prefix"),
            "pattern": obj.get("pattern"),
            "external_id": obj.get("external_id"),
            "json_delivery_mode": obj.get("json_delivery_mode"),
            "skip_after": obj.get("skip_after"),
            "empty_header": obj.get("empty_header"),
            "use_pgp_encryption_options": obj.get("use_pgp_encryption_options"),
            "skip_before": obj.get("skip_before"),
            "signer_public_key": obj.get("signer_public_key"),
            "delimiter": obj.get("delimiter"),
            "file_type": obj.get("file_type"),
            "on_error": obj.get("on_error"),
            "table": obj.get("table"),
            "archive_pattern": obj.get("archive_pattern"),
            "pgp_secret_key": obj.get("pgp_secret_key"),
            "auth_type": obj.get("auth_type"),
            "append_file_option": obj.get("append_file_option"),
            "connection_type": obj.get("connection_type"),
            "escape_char": obj.get("escape_char"),
            "list_strategy": obj.get("list_strategy"),
            "bucket": obj.get("bucket"),
            "line_separator": obj.get("line_separator"),
            "null_sequence": obj.get("null_sequence"),
            "role_arn": obj.get("role_arn"),
            "access_key_secret": obj.get("access_key_secret"),
            "is_public": obj.get("is_public"),
            "compression": obj.get("compression"),
            "pgp_pass_phrase": obj.get("pgp_pass_phrase")
        })
        return _obj


