# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SnowflakeConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    snowflake_region: Optional[StrictStr] = None
    role: Optional[StrictStr] = Field(default=None, description="If not specified, Fivetran will use the user's default role")
    connection_type: Optional[Dict[str, Any]] = Field(default=None, description="Connection method. Default value: `Directly`.")
    auth: Optional[Dict[str, Any]] = Field(default=None, description="Password-based or key-based authentication type")
    private_key: Optional[SecretStr] = Field(default=None, description="Private access key.  The field should be specified if authentication type is `KEY_PAIR`.")
    database: Optional[StrictStr] = Field(default=None, description="Database name")
    password: Optional[SecretStr] = Field(default=None, description="Database user password. The field should be specified if authentication type is `PASSWORD`.")
    is_private_key_encrypted: Optional[StrictBool] = Field(default=None, description="Indicates that a private key is encrypted. The default value: `false`. The field can be specified if authentication type is `KEY_PAIR`.")
    port: Optional[StrictInt] = Field(default=None, description="Server port number")
    controller_id: Optional[StrictStr] = None
    snowflake_cloud: Optional[Dict[str, Any]] = None
    host: Optional[StrictStr] = Field(default=None, description="Server name")
    resource_id: Optional[StrictStr] = Field(default=None, description="This field is currently being introduced to test the Self-serve Private Link functionality")
    passphrase: Optional[SecretStr] = Field(default=None, description="In case private key is encrypted, you are required to enter passphrase that was used to encrypt the private key. The field can be specified if authentication type is `KEY_PAIR`.")
    enable_remote_execution: Optional[StrictBool] = None
    user: Optional[StrictStr] = Field(default=None, description="Database user name")
    __properties: ClassVar[List[str]] = ["snowflake_region", "role", "connection_type", "auth", "private_key", "database", "password", "is_private_key_encrypted", "port", "controller_id", "snowflake_cloud", "host", "resource_id", "passphrase", "enable_remote_execution", "user"]

    @field_validator('connection_type')
    def connection_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('Directly', 'PrivateLink'):
            raise ValueError("must be one of enum values ('Directly', 'PrivateLink')")
        return value

    @field_validator('auth')
    def auth_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('PASSWORD', 'KEY_PAIR'):
            raise ValueError("must be one of enum values ('PASSWORD', 'KEY_PAIR')")
        return value

    @field_validator('snowflake_cloud')
    def snowflake_cloud_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AZURE', 'GCP', 'AWS'):
            raise ValueError("must be one of enum values ('AZURE', 'GCP', 'AWS')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SnowflakeConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SnowflakeConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "snowflake_region": obj.get("snowflake_region"),
            "role": obj.get("role"),
            "connection_type": obj.get("connection_type"),
            "auth": obj.get("auth"),
            "private_key": obj.get("private_key"),
            "database": obj.get("database"),
            "password": obj.get("password"),
            "is_private_key_encrypted": obj.get("is_private_key_encrypted"),
            "port": obj.get("port"),
            "controller_id": obj.get("controller_id"),
            "snowflake_cloud": obj.get("snowflake_cloud"),
            "host": obj.get("host"),
            "resource_id": obj.get("resource_id"),
            "passphrase": obj.get("passphrase"),
            "enable_remote_execution": obj.get("enable_remote_execution"),
            "user": obj.get("user")
        })
        return _obj


