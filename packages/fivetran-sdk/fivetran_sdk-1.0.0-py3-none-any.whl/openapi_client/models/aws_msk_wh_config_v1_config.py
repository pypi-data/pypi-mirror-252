# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, SecretStr, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AwsMskWhConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    schema_registry_api_secret: Optional[SecretStr] = None
    schema_registry: Optional[Dict[str, Any]] = None
    data_format: Optional[Dict[str, Any]] = None
    fivetran_glue_role_arn: Optional[StrictStr] = None
    replication_factor: Optional[StrictInt] = None
    schema_registry_api_key: Optional[SecretStr] = None
    sasl_plain_secret: Optional[SecretStr] = None
    external_id: Optional[StrictStr] = None
    registry_name: Optional[StrictStr] = None
    schema_compatibility: Optional[Dict[str, Any]] = None
    bootstrap_servers: Optional[List[StrictStr]] = None
    fivetran_msk_role_arn: Optional[StrictStr] = None
    connection_method: Optional[Dict[str, Any]] = None
    schema_registry_url: Optional[StrictStr] = None
    msk_sts_region: Optional[StrictStr] = None
    registry_sts_region: Optional[StrictStr] = None
    sasl_plain_key: Optional[SecretStr] = None
    sasl_mechanism: Optional[Dict[str, Any]] = None
    security_protocol: Optional[Dict[str, Any]] = None
    num_of_partitions: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["schema_registry_api_secret", "schema_registry", "data_format", "fivetran_glue_role_arn", "replication_factor", "schema_registry_api_key", "sasl_plain_secret", "external_id", "registry_name", "schema_compatibility", "bootstrap_servers", "fivetran_msk_role_arn", "connection_method", "schema_registry_url", "msk_sts_region", "registry_sts_region", "sasl_plain_key", "sasl_mechanism", "security_protocol", "num_of_partitions"]

    @field_validator('schema_registry')
    def schema_registry_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('CONFLUENT_CLOUD', 'AWS_GLUE'):
            raise ValueError("must be one of enum values ('CONFLUENT_CLOUD', 'AWS_GLUE')")
        return value

    @field_validator('data_format')
    def data_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('JSON', 'AVRO'):
            raise ValueError("must be one of enum values ('JSON', 'AVRO')")
        return value

    @field_validator('schema_compatibility')
    def schema_compatibility_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DISABLED', 'BACKWARD', 'BACKWARD_ALL', 'FORWARD_ALL', 'FORWARD', 'NONE', 'FULL', 'FULL_ALL'):
            raise ValueError("must be one of enum values ('DISABLED', 'BACKWARD', 'BACKWARD_ALL', 'FORWARD_ALL', 'FORWARD', 'NONE', 'FULL', 'FULL_ALL')")
        return value

    @field_validator('connection_method')
    def connection_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('privatelink', 'direct'):
            raise ValueError("must be one of enum values ('privatelink', 'direct')")
        return value

    @field_validator('sasl_mechanism')
    def sasl_mechanism_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SCRAM_SHA_512', 'AWS_IAM'):
            raise ValueError("must be one of enum values ('SCRAM_SHA_512', 'AWS_IAM')")
        return value

    @field_validator('security_protocol')
    def security_protocol_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SASL', 'SASL_PLAINTEXT'):
            raise ValueError("must be one of enum values ('SASL', 'SASL_PLAINTEXT')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AwsMskWhConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AwsMskWhConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "schema_registry_api_secret": obj.get("schema_registry_api_secret"),
            "schema_registry": obj.get("schema_registry"),
            "data_format": obj.get("data_format"),
            "fivetran_glue_role_arn": obj.get("fivetran_glue_role_arn"),
            "replication_factor": obj.get("replication_factor"),
            "schema_registry_api_key": obj.get("schema_registry_api_key"),
            "sasl_plain_secret": obj.get("sasl_plain_secret"),
            "external_id": obj.get("external_id"),
            "registry_name": obj.get("registry_name"),
            "schema_compatibility": obj.get("schema_compatibility"),
            "bootstrap_servers": obj.get("bootstrap_servers"),
            "fivetran_msk_role_arn": obj.get("fivetran_msk_role_arn"),
            "connection_method": obj.get("connection_method"),
            "schema_registry_url": obj.get("schema_registry_url"),
            "msk_sts_region": obj.get("msk_sts_region"),
            "registry_sts_region": obj.get("registry_sts_region"),
            "sasl_plain_key": obj.get("sasl_plain_key"),
            "sasl_mechanism": obj.get("sasl_mechanism"),
            "security_protocol": obj.get("security_protocol"),
            "num_of_partitions": obj.get("num_of_partitions")
        })
        return _obj


