# coding: utf-8

"""
    OpenAPI Definition

    The OpenAPI Specification is a standard format to define the structure and syntax of REST APIs. OpenAPI documents are both machine and human-readable, which enables anyone to easily determine how each API works. [More details](https://www.openapis.org/faq)

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, SecretStr, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NetsuiteSuiteanalyticsConfigV1Config(BaseModel):
    """
    
    """ # noqa: E501
    consumer_key: Optional[SecretStr] = Field(default=None, description="Consumer Key")
    var_schema: Optional[StrictStr] = Field(default=None, description="Destination schema. Schema is permanent and cannot be changed after connection creation", alias="schema")
    token_secret: Optional[SecretStr] = Field(default=None, description="Token Secret")
    password: Optional[SecretStr] = Field(default=None, description="The NetSuite user's password.")
    consumer_secret: Optional[SecretStr] = Field(default=None, description="Consumer Secret")
    role: Optional[StrictStr] = Field(default=None, description="The NetSuite Role ID for connection.")
    port: Optional[StrictInt] = Field(default=None, description="The NetSuite service host port.")
    datasource: Optional[Dict[str, Any]] = Field(default=None, description="The NetSuite data source value: `NetSuite.com`.")
    host: Optional[StrictStr] = Field(default=None, description="The NetSuite service host address.")
    token_key: Optional[SecretStr] = Field(default=None, description="Token ID")
    account: Optional[StrictStr] = Field(default=None, description="The NetSuite Account ID.")
    email: Optional[StrictStr] = Field(default=None, description="The NetSuite user's email address.")
    __properties: ClassVar[List[str]] = ["consumer_key", "schema", "token_secret", "password", "consumer_secret", "role", "port", "datasource", "host", "token_key", "account", "email"]

    @field_validator('datasource')
    def datasource_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('NetSuite2.com', 'NetSuite.com'):
            raise ValueError("must be one of enum values ('NetSuite2.com', 'NetSuite.com')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetsuiteSuiteanalyticsConfigV1Config from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetsuiteSuiteanalyticsConfigV1Config from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consumer_key": obj.get("consumer_key"),
            "schema": obj.get("schema"),
            "token_secret": obj.get("token_secret"),
            "password": obj.get("password"),
            "consumer_secret": obj.get("consumer_secret"),
            "role": obj.get("role"),
            "port": obj.get("port"),
            "datasource": obj.get("datasource"),
            "host": obj.get("host"),
            "token_key": obj.get("token_key"),
            "account": obj.get("account"),
            "email": obj.get("email")
        })
        return _obj


